[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Find the intersection of the two lists\n    intersection = list(set(test_tup1) & set(test_tup2))\n\n    # Print the intersection\n    print(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Convert the tuples into sets to eliminate duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection back into a list\n    shared_list = list(intersection)\n\n    # Return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            common_elements.append(elem1)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize two variables to store the common elements in the two lists\n    common = []\n    # Loop through each element in the first list\n    for element in test_tup1:\n        # Check if the element is present in the second list\n        if element in test_tup2:\n            # If it is, add it to the common list\n            common.append(element)\n    # Return the common elements in a tuple\n    return tuple(common)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check for edge case where n is not an integer\n    if not isinstance(n, int):\n        return \"Input must be an integer\"\n    \n    # Check for edge case where n is less than 2\n    if n < 2:\n        return \"Input must be greater than or equal to 2\"\n    \n    # Check for non-integer input\n    if not n.is_integer():\n        return \"Input must be an integer\"\n    \n    # Check for even numbers\n    if n % 2 == 0:\n        return \"Input must be odd\"\n    \n    # Check for divisors greater than n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return \"Input must be odd\"\n    \n    # If no divisors were found, n is prime\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    while n > 0:\n        largest.append(hq.heappop(nums))\n        n -= 1\n    return largest[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert list of numbers to min heap\n    max_heap = [max(nums[:i+1]) for i in range(n)]\n    # Remove the largest elements from the max heap\n    for _ in range(n):\n        heapq.heappop(max_heap)\n    # Return the max heap as list of largest integers\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n and initialize the max-heap with the first n elements of nums\n    min_heap = hq.nsmallest(n, nums)\n    max_heap = hq.heapify(nums[:n])\n\n    # Iterate over the remaining elements of nums and update the max-heap and min-heap\n    for num in nums[n:]:\n        hq.heappushpop(max_heap, -num)\n        hq.heappushpop(min_heap, -hq.heappop(max_heap))\n\n    # Return the min-heap as the result\n    return [hq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)  # Convert the list to a max heap\n\n    for i in range(n):\n        hq.heappop(nums)  # Remove the smallest element from the heap\n\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize an empty heap and a list to store the largest n numbers\n    max_heap = []\n    largest_nums = []\n\n    # Add the first n numbers to the max_heap and largest_nums\n    for num in nums[:n]:\n        if len(largest_nums) < n:\n            hq.heappush(max_heap, num)\n            largest_nums.append(num)\n        else:\n            hq.heappushpop(max_heap, num)\n            hq.heappush(max_heap, num)\n\n    # Add the remaining numbers to the max_heap and largest_nums\n    for num in nums[n:]:\n        if len(largest_nums) < n:\n            hq.heappush(max_heap, num)\n            largest_nums.append(num)\n        else:\n            hq.heappush(max_heap, num)\n\n    # Return the largest_nums in descending order\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Build a min heap from the input list of numbers\n    heap = [(-num, i) for i, num in enumerate(nums)]\n    heapq.heapify(heap)\n\n    # Extract the n largest integers from the heap\n    result = []\n    for i in range(n):\n        _, index = heapq.heappop(heap)\n        result.append(nums[index])\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap with n elements\n    min_heap = []\n    for num in nums[:n]:\n        heapq.heappush(min_heap, num)\n\n    # add the remaining elements of the list to the min-heap\n    for num in nums[n:]:\n        heapq.heappush(min_heap, num)\n\n    # return the n largest elements from the min-heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    min_heap = []\n    # Fill the heap with the smallest n elements from the input list\n    for num in nums[:n]:\n        hq.heappush(min_heap, -num)\n    # Pop and return the n largest elements from the heap\n    return [-hq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap of size n\n    heap = hq.nlargest(n, nums)\n    # return the list of largest elements from the heap\n    return list(heap)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # To check if two numbers differ at one bit position, we need to check whether there exists a single bit that is different in both numbers.\n    # Since binary numbers can only have 1's and 0's, we can convert both numbers to strings and compare their characters.\n    # If the characters are different, then there is a single bit that differs.\n    # We can then convert the resulting string to an integer and check if it is a power of 2 or not.\n    # If it is a power of 2, then the two numbers differ at one bit position only.\n    # If it is not a power of 2, then the two numbers differ at more than one bit position.\n    \n    # Convert x to a string\n    x_str = str(x)\n    \n    # Check if x is a power of 2\n    if x_str[-1] == '0':\n        # x is not a power of 2\n        return False\n    else:\n        # x is a power of 2\n        # Convert the integer back to an integer\n        x_int = int(x_str, 2)\n        # Check if x_int is a power of 2\n        if (x_int & (x_int-1)) == 0:\n            # x_int is a power of 2\n            return True\n        else:\n            # x_int is not a power of 2\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the input number into a binary string\n    binary = bin(x)[2:]\n\n    # Check if the length of the binary string is 1\n    if len(binary) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    else:\n        while x % 2 == 0:\n            x = x // 2\n        if x == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the given number to binary format\n    num_binary = bin(x)[2:]\n\n    # Check if the number of bits is 1\n    if len(num_binary) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0: # check if x is a power of 2\n        x &= (x-1) # remove one bit at a time\n    if x == 1: # check if x is 1\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x-1) == 0: # Check if x is a power of two\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0:\n        if x & 1 == 1:\n            return False\n        x = x >> 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert the binary representation of x to a list of bits\n    bits = bin(x)[2:]\n    # check if the length of the list is 1 and if the first bit is 1\n    if len(bits) == 1 and bits[0] == '1':\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the integer is a power of 2, False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    if x & (x-1) == 0:\n        return True\n    else:\n        return is_Power_Of_Two(x-1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # If x is a power of 2, then it can be expressed as a sum of powers of 2\n    # Since there are at most 32 bits in a 32-bit machine, we can check for at most 5 bits\n    for i in range(5):\n        if ((x & (1 << i))!= 0)!= ((x & (x + 1)) & (1 << i)):\n            return False\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    words = re.findall(r'\\b\\w+\\b', text.lower()) # regex pattern to match words\n    long_words = [word for word in words if len(word) >= 4] # filter words with length >= 4\n\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Use list comprehension to filter out words that are not at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n    # Initialize an empty list to store the long words\n    long_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to 4\n        if len(word) >= 4:\n            # Append the word to the long_words list\n            long_words.append(word)\n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]{4,}\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are less than 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n    \n    # Print the filtered words\n    print(filtered_words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Create a set of characters to store unique characters in the string\n    char_set = set(str)\n    \n    # Find the length of the string\n    length = len(str)\n    \n    # Create a list to store the counts of each character in the string\n    char_count = [0] * 256\n    \n    # Count the occurrences of each character in the string\n    for char in str:\n        char_count[ord(char)] += 1\n    \n    # Initialize the result variable to 0\n    result = 0\n    \n    # Loop through all possible rotations of the string\n    for i in range(length):\n        # Create a new string by rotating the original string by one character\n        rotated_str = str[i:] + str[:i]\n        \n        # Check if the new string is the same as the original string\n        if rotated_str == str:\n            # If the new string is the same as the original string, increment the result variable\n            result += 1\n    \n    # Return the minimum number of rotations required to get the same string\n    return min(result, length)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    len_str = len(str)\n    if len_str == 1:\n        return 0\n    \n    min_rotations = 1\n    \n    for i in range(1, len_str):\n        if str[i]!= str[(i+1) % len_str]:\n            min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i]!= str[j]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    if len(str) <= 1:\n        return 0\n\n    # Compare the first and last characters of the string\n    if str[0]!= str[-1]:\n        return 1\n\n    # Remove the first and last characters of the string\n    first_last = str[1:-1]\n\n    # Count the number of rotations required to get the same string\n    rotations = 0\n    while str!= first_last:\n        str = first_last\n        rotations += 1\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Sort the characters by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Iterate through the sorted characters and count the number of rotations required\n    for char, count in sorted_freq:\n        if count > 1:\n            min_rotations += 1\n            for i in range(count-1):\n                str = str[-1] + str[:-1]\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    dp = [[0]*n for _ in range(n)] # create a 2D table to store the minimum number of rotations for different positions of each pair of characters\n    \n    # calculate the minimum number of rotations for each pair of characters\n    for i in range(n): \n        for j in range(n): \n            if i < j: # if i < j, we need to rotate i to get the same string as j\n                dp[i][j] = dp[i+1][j-1] + 1\n            else: # if i >= j, we can use the same string as i\n                dp[i][j] = dp[i][j-1]\n    \n    # calculate the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for i in range(n):\n        min_rotations = min(min_rotations, dp[i][i])\n    \n    return min_rotations # return the minimum number of rotations required"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n\n    for i in range(1, n+1):\n        temp = str[i-1:n] + str[0:i-1]\n        if temp == str:\n            count += 1\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    # Get the length of the string\n    n = len(str)\n    \n    # Initialize the count of rotations\n    count = 0\n    \n    # Initialize the list of characters\n    char_list = list(str)\n    \n    # Loop through each character in the list\n    for i in range(n):\n        \n        # Find the index of the current character in the list\n        j = char_list.index(str[i])\n        \n        # Swap the current character with the character at the end of the list\n        char_list[j], char_list[n-1] = char_list[n-1], char_list[j]\n        \n        # Check if the string is equal to the reversed string\n        if str == ''.join(char_list):\n            \n            # Increment the count of rotations\n            count += 1\n            \n            # Reverse the list of characters\n            char_list.reverse()\n            \n            # Check if the string is equal to the original string\n            if str == ''.join(char_list):\n                \n                # Increment the count of rotations\n                count += 1\n                \n    # Return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Check if the input string is empty or contains only one character\n    if len(str) <= 1:\n        return 0\n\n    # Initialize variables to keep track of current and previous characters\n    curr = str[0]\n    prev = None\n\n    # Loop through the string and find the smallest and largest characters\n    min_char = str[0]\n    max_char = str[0]\n    for char in str[1:]:\n        if char < min_char:\n            min_char = char\n        elif char > max_char:\n            max_char = char\n\n    # If the minimum and maximum characters are the same, there's no rotation needed\n    if min_char == max_char:\n        return 0\n\n    # Initialize variables to keep track of the number of rotations required and the characters that are used\n    num_rotations = 0\n    used_chars = set()\n\n    # Loop through the string again and find the number of rotations required\n    for i in range(len(str)):\n        # If the current character is the minimum character, rotate the string\n        if str[i] == min_char:\n            # Rotate the string using the previous character\n            new_str = str[(i + 1) % len(str):] + str[:(i + 1) % len(str)]\n            # Increment the number of rotations required\n            num_rotations += 1\n            # Add the rotated string to the set of used characters\n            used_chars.add(new_str)\n            # Update the current and previous characters\n            curr = str[(i + 1) % len(str)]\n            prev = str[i]\n        # If the current character is not the minimum character, add it to the set of used characters\n        else:\n            used_chars.add(str[i])\n            # Update the current and previous characters\n            curr = str[i]\n            prev = None\n\n    # If the number of used characters is equal to the length of the string, it means the string is a palindrome, so there's no rotation needed\n    if len(used_chars) == len(str):\n        return 0\n\n    # Return the number of rotations required\n    return num_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Traverse through all possible rotations\n    for i in range(1, n + 1):\n        # Traverse through all possible substrings\n        for j in range(n - i + 1):\n            # Check if the substrings are equal\n            if str[j:j + i] == str[j + i:j + 2 * i]:\n                # Found a match, return the required rotations\n                return i\n    # If no match is found, return -1\n    return -1"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    s = s.replace(ch,'')\n    s = s.replace(ch,'')\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s[1:-1]\n    index = s.find(ch)\n    while index!= -1:\n        s = s[:index] + s[index+1:]\n        index = s.find(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into a list of characters\n    lst = list(s)\n\n    # remove the first occurrence of the character from the list\n    lst.remove(ch)\n\n    # remove the last occurrence of the character from the list\n    lst.remove(ch)\n\n    # join the list of characters back into a string\n    s = ''.join(lst)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if len(s) == 0:\n        return \"\"\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:-1], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # remove first occurrence of character from string\n    if s.find(ch) == 0:\n        s = s[1:]\n    \n    # remove last occurrence of character from string\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    \n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into a list of characters\n    s_list = list(s)\n    # Remove the first occurrence of the given character from the list\n    s_list.remove(ch)\n    # Remove the last occurrence of the given character from the list\n    s_list.remove(ch)\n    # Convert the list back to a string and return it\n    return ''.join(s_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize empty string to store the modified string\n    mod_str = \"\"\n    # iterate through the string and check for the first and last occurrence of the given character\n    for i in range(len(s)):\n        if s[i] == ch:\n            if i == 0 or s[i-1]!= ch:\n                mod_str += s[i]\n            if i == len(s)-1 or s[i+1]!= ch:\n                mod_str += s[i]\n        else:\n            mod_str += s[i]\n    # return the modified string\n    return mod_str"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '', 1) # remove first occurrence\n    s = s.replace(ch, '', -1) # remove last occurrence\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Convert the string to list\n    lst = list(s)\n    # Find the first occurrence of the character and remove it\n    lst.remove(ch)\n    # Find the last occurrence of the character and remove it\n    lst.remove(ch)\n    # Convert the list back to string and return it\n    return ''.join(lst)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows in ascending order\n    row_sums.sort()\n\n    # Sort the matrix according to the row sums\n    sorted_matrix = [[0 for j in range(cols)] for i in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            sorted_matrix[i][j] = M[i][j]\n            for k in range(len(row_sums)):\n                if row_sums[k] >= i:\n                    sorted_matrix[i][j] += M[i][k]\n                    break\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M)):\n                if j > k:\n                    if M[i][j] < M[i][k]:\n                        M[i][j], M[i][k] = M[i][k], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)  # number of rows\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            # check if the sum of rows i and j is greater than the sum of rows j and i\n            if sum(M[i]) > sum(M[j]):\n                # swap rows i and j\n                M[i], M[j] = M[j], M[i]\n                \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(j, cols):\n                if M[i][j] + M[i][k] < M[i][j]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Create a list to store the sums of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Create a list to store the indices of each row\n    row_indices = [list(range(rows))[::-1].index(i) for i in row_sums]\n    \n    # Create a list of sorted indices for each column\n    sorted_indices = [[] for _ in range(cols)]\n    for i in range(cols):\n        for j in range(rows):\n            sorted_indices[i].append(row_indices[j][i])\n    \n    # Sort the matrix based on the sorted indices\n    sorted_matrix = [sorted([M[i][j] for j in sorted_indices[i]]) for i in range(rows)]\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = int(M[i][j])\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(len(M)):\n                if i == k:\n                    M[i][j] += M[k][j]\n                else:\n                    M[i][j] += M[i][k]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = sum(M[i])\n    return sorted(M)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize the sum of the rows for each column\n    sums = [0] * n\n    # Initialize the sorted matrix\n    sorted_M = [[0] * n for i in range(n)]\n    # Sort the rows of the matrix\n    for j in range(n):\n        for i in range(n):\n            sums[i] += M[i][j]\n    # Sort the columns of the matrix\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if sums[k] > sums[j]:\n                    sorted_M[k][j] = M[i][j]\n                    sums[k] -= sums[j]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = sorted(M[i][j])\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    \"\"\"\n    This function calculates the volume of a triangular prism with the given dimensions.\n    \"\"\"\n    volume = l*b*h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters: length, breadth, and height.\n    It then calculates and returns the volume of the triangular prism.\n    '''\n    volume = l * b * h  # volume of the triangle is the product of length, breadth, and height\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n\n    # Calculating the semi-perimeter of the triangular prism\n    s = (l + b + h) / 2\n\n    # Calculating the volume of the triangular prism using Heron's formula\n    V = (s * (s - l) * (s - b) * (s - h)) ** 0.5\n\n    # Returning the volume of the triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #calculate the area of the prism\n    area = 0.5 * l * b\n    #calculate the volume of the prism\n    volume = area * h\n    #return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h #calculating the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    print(\"The volume of the triangular prism is:\", volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the area of the prism\n    area = 0.5 * l * b\n\n    # Calculate the volume of the prism\n    volume = area * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume using Heron's formula\n    area = 0.5 * l * b\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase_underscore = re.findall(r'([a-z_]+)', text)\n    if len(lowercase_underscore) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=([a-z])(?=[A-Z]))|([A-Z])(?=[A-Z][a-z])'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Remove all non-alphanumeric characters except underscore\n    text = re.sub(r'[^a-zA-Z0-9_]', '', text)\n\n    # Split the string into words\n    words = text.split()\n\n    # Check if the string contains sequences of lowercase letters joined with an underscore\n    has_underscore = False\n    for i in range(len(words)-1):\n        if (words[i].lower() == words[i+1].lower()) and (words[i].islower() and words[i+1].islower()):\n            has_underscore = True\n            break\n\n    return has_underscore"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]*_[a-z]*'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z]+_'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def text_lowercase_underscore(text):\n    # Define a regular expression pattern for matching lowercase letters with an underscore\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    \n    # Check if the input text matches the pattern\n    if pattern.match(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<!_)[a-z]+(?!_)'\n    result = re.findall(pattern, text)\n    return bool(result)"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n\n    # Calculate the perimeter of the square using the formula for a right triangle\n    perimeter = 4 * a\n\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, no_of_chars=256):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(string)\n    string_set = set(string)\n    no_of_chars = min(no_of_chars, len(char_set))\n    result = \"\"\n    for char in string:\n        if char not in char_set:\n            result += char\n        if len(result) == no_of_chars:\n            break\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_list = list(string)\n    for char in remove_chars:\n        if char in string:\n            index = first_list.index(char)\n            del first_list[index]\n    return ''.join(first_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    first_set = set(string)\n    second_set = set('aeiouAEIOU')\n    result = []\n    for char in string:\n        if char not in first_set:\n            result.append(char)\n    return result\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    result = str_to_list(string)\n    print(\"Result: \", ''.join(result))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    for char in list_of_chars:\n        if char in string:\n            list_of_chars.remove(char)\n\n    return ''.join(list_of_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    # Convert the string to a list of ASCII values\n    string_list = [ord(char) for char in string]\n\n    # Remove the characters present in the second string from the first string\n    for char in string_list:\n        if char in second_string:\n            string_list.remove(char)\n\n    # Convert the list of ASCII values back to a string\n    result = ''.join([chr(char) for char in string_list])\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Create a list to store the characters that need to be removed\n    remove_chars = []\n    for char in char_count:\n        if char_count[char] > NO_OF_CHARS/2:\n            remove_chars.append(char)\n    \n    # Remove the characters from the first string\n    new_string = \"\"\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    \n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    lst = list(string)\n    # Create a set of characters to be removed from the first string\n    to_remove = set(lst)\n    # Remove the characters from the list of characters\n    for char in lst:\n        if char in to_remove:\n            lst.remove(char)\n    # Convert the list of characters back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the first string to a list\n    first_list = list(string)\n    # Convert the second string to a set\n    second_set = set(string)\n    # Iterate through the first list and remove characters which are present in the second set\n    for char in first_list:\n        if char in second_set:\n            first_list.remove(char)\n    # Convert the list back to a string and return it\n    return ''.join(first_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    string_list = list(string)\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        char_list.append(chr(i))\n    char_set = set(char_list)\n    for i in range(len(string_list)):\n        if string_list[i] in char_set:\n            string_list[i] = ''\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes in a string and returns a list of characters that are not present in the second string.\n\n    Args:\n    string (str): A string to be processed\n\n    Returns:\n    list: A list of characters that are not present in the second string.\n    \"\"\"\n\n    list_of_chars = list(string)\n    set_of_chars = set(string)\n\n    # Removing characters from the first string which are present in the second string\n    for char in list_of_chars:\n        if char in set_of_chars:\n            list_of_chars.remove(char)\n\n    return list_of_chars"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements of the array\n    element_dict = {}\n\n    # Iterate through each element of the array and add it to the dictionary\n    for num in arraynums:\n        if num in element_dict:\n            # Element already exists in the dictionary, so the array contains a duplicate\n            return True\n        else:\n            element_dict[num] = True\n\n    # If we have iterated through the entire array without finding any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Check if the array is empty\n    if len(arraynums) == 0:\n        return False\n    \n    # Create a set to store the unique elements of the array\n    unique_set = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    \n    return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()  # create an empty set to store unique elements\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False  # if we get here, no duplicates were found"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a dictionary to store the index of the elements in the array\n    index_dict = {}\n\n    # Loop through the array and check if the index already exists in the dictionary\n    for i in range(len(arraynums)):\n        if arraynums[i] in index_dict:\n            return True\n        else:\n            index_dict[arraynums[i]] = i\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n\n    # iterate over each element in the array\n    for element in arraynums:\n        # check if the element is already in the set\n        if element in unique_set:\n            return True\n        # add the element to the set\n        unique_set.add(element)\n\n    # if we get to this point, the set contains all the unique elements\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums_set = set(arraynums)\n    if len(nums_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()  # use a set to keep track of seen elements\n    for num in arraynums:\n        if num in seen:\n            return True  # duplicate found\n        seen.add(num)  # add element to set\n    return False  # no duplicates found"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique = True\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    return x % 2 == 1"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 4 or x == 7 or x == 10: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0 and x % 3 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return 'Not a woodball'\n    elif x == 0:\n        return 'Woodball'\n    elif x % 2 == 0:\n        return 'Not a woodball'\n    else:\n        return 'Woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and (x % 3 == 0 or x % 5 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x % 3 == 0 or x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 7 == 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return num == rev_num * 2 - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse * 2 - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = str(num)[::-1]\n    doubled_reversed_num = int(reversed_num) * 2\n    return doubled_reversed_num - num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the number is one less than twice its reverse, else False.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the number is one less than twice its reverse\n    if num == rev_num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num = num // 10\n    return num == 2 * reversed_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num + 1) == ((num - 1) * 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # convert the reversed number to an integer and check if it's one less than twice the original number\n    return int(reversed_num) == num - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the input number to a string\n    num_str = str(num)\n    # reverse the string\n    reversed_str = num_str[::-1]\n    # convert the reversed string to an integer\n    reversed_num = int(reversed_str)\n    # check if the input number is one less than twice its reverse\n    if num < reversed_num * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # Convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n    \n    # Convert the reversed string back to an integer and check if it's one less than twice its reverse\n    return int(rev_str) == 2 * int(num) - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n    # Convert the reversed string back to an integer and calculate the difference\n    diff = int(num) - int(rev_str)\n    # Check if the difference is one less than twice the reverse\n    return diff == 1"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    def is_valid(num, arr):\n        \"\"\"\n        Helper function to check if a number is valid or not.\n        \"\"\"\n        for i in range(len(arr)):\n            if arr[i] > num // 10**i:\n                return False\n        return True\n\n    def count_valid_digits(num):\n        \"\"\"\n        Helper function to count the number of valid digits in a number.\n        \"\"\"\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    def find_largest_num(arr):\n        \"\"\"\n        Recursive function to find the largest valid number.\n        \"\"\"\n        if len(arr) == 0:\n            return 0\n\n        largest_digit = 9\n        for i in range(len(arr)):\n            largest_digit = min(largest_digit, arr[i])\n\n        remaining_digits = [digit for digit in arr if digit!= largest_digit]\n        largest_valid_digit = find_largest_num(remaining_digits)\n\n        return largest_digit * 10**count_valid_digits(largest_valid_digit) + largest_valid_digit\n\n    max_num = find_largest_num(arr)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the digits in ascending order\n    arr.sort()\n    # initialize max_num as 0\n    max_num = 0\n    # iterate through the sorted digits\n    for digit in arr:\n        # multiply max_num with 10 and add the current digit\n        max_num = max_num * 10 + digit\n        # update max_num if the result is greater than max_num\n        if max_num > max_num:\n            max_num = max_num\n    # return the maximum number that can be formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given digits.\n    '''\n    # Sort the input list of digits in non-decreasing order\n    arr.sort()\n    n = len(arr)\n    # Initialize the maximum number that can be formed as 0\n    max_num = 0\n    # Loop through each digit in the list\n    for i in range(n) : \n        # Add the current digit to the maximum number\n        max_num += int(arr[i])\n        # If the sum of the digits becomes greater than or equal to the product of the maximum number and the current digit,\n        # then update the maximum number to be the sum of the digits\n        if max_num >= i+1 : \n            max_num = i+1\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def max_number(arr, index):\n        if index == len(arr) - 1:\n            return int(''.join(arr))\n        else:\n            max_num = max(arr[index], arr[index] + max_number(arr, index + 1))\n            return max_num\n\n    max_num = max_number(arr, 0)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize variables\n    n = len(arr)\n    max_num = 0\n\n    # loop through the array and form the maximum number\n    for i in range(n):\n        temp = 0\n        for j in range(i+1):\n            temp *= 10\n            temp += arr[j]\n        if temp > max_num:\n            max_num = temp\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                max_num = max(max_num, int(\"\".join(arr[i:k+1])))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(2**n) :\n        num = 0\n        for j in range(n) :\n            if i & (1<<j) :\n                num += arr[j]\n        if num > max_num :\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes in a list of digits as input and returns the largest number that can be formed by the digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            temp = arr[i]*10 + arr[j]\n            if temp > max_num:\n                max_num = temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list of digits in decreasing order\n    arr.sort(reverse=True)\n\n    # Initialize the largest number as 0\n    max_num = 0\n\n    # Initialize the count of digits\n    count = 0\n\n    # Loop through the list of digits\n    for digit in arr:\n        # If the count is less than or equal to the digit, then add it to the largest number\n        if count <= digit:\n            max_num = max_num * 10 + digit\n        # Otherwise, add the digit to the largest number and increment the count by 1\n        else:\n            max_num = max_num * 10 + digit\n            count += 1\n\n    # Return the largest number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables to store the maximum number and its length\n    max_num = 0\n    max_length = 0\n    \n    # Loop through the array of digits\n    for num in arr:\n        # Convert the current number to a string\n        num_str = str(num)\n        \n        # Check if the current number is greater than the maximum number\n        if int(num_str) > max_num:\n            # Update the maximum number and its length\n            max_num = int(num_str)\n            max_length = len(num_str)\n    \n    # Return the maximum number and its length\n    return max_num, max_length"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if the signs of the two integers are opposite and False otherwise.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # check if the signs of x and y are opposite or not\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        print(f\"{x} and {y} have opposite signs.\")\n    else:\n        print(f\"{x} and {y} have the same signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, and False otherwise.\n    \"\"\"\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs\"\n    elif x == 0 and y == 0:\n        return \"Both numbers are zero\"\n    else:\n        return \"One of the numbers has a positive sign and the other has a negative sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # Check if both numbers have the same sign.\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    if x == 0 or y == 0:\n        return True\n\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n\n    return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite sign, False otherwise.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Function to calculate nth octagonal number\n    def octagonal(n):\n        return n * (8 * n - 1)\n\n    # Calculate the nth octagonal number\n    oct_n = octagonal(n)\n\n    # Return the nth octagonal number\n    return oct_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Use the formula for the nth octagonal number:\n    # (n*(2*n-1))^2\n    return (n*(2*n-1))**2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal(n):\n        return (10 ** n) * (10 ** (n + 1)) / 2\n    return octagonal(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Define the base and limit of the range of octagonal numbers\n    base = 1\n    limit = 2 * n - 1\n\n    # Check if the number is in the range of octagonal numbers\n    if n < 1 or n > limit:\n        return False\n\n    # Initialize the sum and counter variables\n    sum = 0\n    count = 0\n\n    # Calculate the sum of the first n odd numbers in the range\n    for i in range(base, limit + 1, 2):\n        sum += i\n\n    # Return the sum of the first n odd numbers in the range\n    return sum"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    for i in range(1, n + 1):\n        octagonal *= i\n        octagonal += 1\n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (10**n - 1) // 8"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Define the function to check if a number is octagonal or not\n    def is_oct(num):\n        return ((num/2) ** 2) == ((num//2) ** 2) + (num % 2)\n    \n    # Check if the input number is positive and less than 100\n    if n > 0 and n <= 100:\n        # Initialize the sum of octagonal numbers to 0\n        oct_sum = 0\n        \n        # Loop through the numbers from 1 to n\n        for i in range(1, n+1):\n            # Check if the number is octagonal\n            if is_oct(i):\n                # Add the octagonal number to the sum\n                oct_sum += i\n        \n        # Return the sum of octagonal numbers\n        return oct_sum\n    else:\n        # Raise an error if the input number is not positive or greater than 100\n        raise ValueError('Input number must be a positive integer less than or equal to 100.')"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the first 10 octagonal numbers\n    octagonal_numbers = [1, 8, 25, 64, 125, 216, 343, 512, 729, 1000]\n    if n < 10:\n        return octagonal_numbers[n-1]\n    else:\n        return (octagonal_numbers[n-1]**2 + octagonal_numbers[n-1-10]**2)**0.5"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_octagonal(n - 1) + nth_octagonal(n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1 or n % 2 == 0:\n        return False\n\n    for i in range(1, n // 2 + 1):\n        if i * (i * 3 - 1)!= n:\n            return False\n\n    return True"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of each substring\n    count = defaultdict(int)\n    # Iterate over all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the substring has a sum of digits equal to its length\n            if sum(int(d) for d in s[i:j+1]) == len(s[i:j+1]):\n                # Increment the count of the substring in the dictionary\n                count[s[i:j+1]] += 1\n    # Return the count of all substrings in the dictionary\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the count of substrings with a specific sum of digits\n    count_dict = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each character in the string\n        for j in range(i+1, len(s)+1):\n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(d) for d in s[i:j])\n\n            # add the count of substrings with the current substring sum to the count_dict\n            count_dict[substring_sum] += 1\n\n    # return the total count of substrings with the sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with each length\n    counts = defaultdict(int)\n    \n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each character from the same index to the end of the string\n        for j in range(i, len(s)):\n            # check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                # increment the count in the dictionary for the length of the substring\n                counts[j-i+1] += 1\n    \n    # return the count of substrings with length equal to their sum of digits\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings_count = defaultdict(int)\n    length = len(s)\n    \n    # Iterate through the string\n    for i in range(length):\n        # Get the substring\n        substring = s[i:length]\n        \n        # Check if the sum of digits is equal to its length\n        if sum(int(digit) for digit in substring) == length:\n            substrings_count[substring] += 1\n    \n    # Return the count of substrings\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Convert the string to a list of characters\n    s = list(s)\n    # Initialize a dictionary to store the count of substrings with the given conditions\n    count_dict = defaultdict(int)\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Loop through each character in the string from the next index\n        for j in range(i, len(s)):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j+1]) == len(s[i:j+1]):\n                # Increment the count of substrings with the given conditions\n                count_dict[len(s[i:j+1])] += 1\n    # Return the dictionary containing the count of substrings\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int) # create a dictionary to store the count of substrings\n    n = len(s)\n    for i in range(n): # loop through all possible starting indices of substrings\n        substring = s[i:i+n] # extract the substring from the original string\n        digits_sum = sum(int(digit) for digit in substring) # calculate the sum of digits in the substring\n        count[digits_sum] += 1 # increment the count in the dictionary\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = defaultdict(int)\n    \n    # loop through all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count[substring] += 1\n                \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(d) for d in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0]*(n+1) for _ in range(2)]\n\n    # base case\n    for i in range(n):\n        dp[0][i+1] = 1\n\n    # recursive case\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i+1][i+2] = dp[i][i+1]\n        else:\n            dp[i+1][i+2] = dp[i+1][i+1] + dp[i][i+2]\n\n    # count substrings\n    ans = 0\n    for i in range(n):\n        for j in range(i, n+1):\n            if sum(int(s[k]) for k in range(i, j)) == j-i:\n                ans += dp[i][j]\n\n    return ans"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n    # Initialize a variable to store the length of the string\n    length = len(s)\n    # Iterate through all possible substrings of the string\n    for i in range(length):\n        for j in range(i, length):\n            # Extract the substring using slicing\n            substring = s[i:j+1]\n            # Convert the substring to a list of integers\n            int_list = [int(digit) for digit in substring]\n            # Calculate the sum of the digits in the list\n            sum_digits = sum(int_list)\n            # If the sum of digits is equal to the length of the substring, increment the count\n            if sum_digits == length:\n                count_dict[substring] += 1\n    # Return the count of substrings with sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as an argument and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number to the first number in the list\n    smallest = xs[0]\n    \n    # iterate through the rest of the list\n    for x in xs[1:]:\n        # if the current number is smaller than the smallest, update smallest\n        if x < smallest:\n            smallest = x\n    \n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs as input and returns the smallest number in xs.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # sort the list of tuples in ascending order\n    test_list.sort()\n    \n    # initialize maximum difference to be the difference between the first and second elements of the list\n    max_diff = test_list[1][1] - test_list[0][1]\n    \n    # iterate through the list of tuples, keeping track of the difference between elements\n    for i in range(1, len(test_list)):\n        diff = test_list[i][1] - test_list[i-1][1]\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.add(abs(test_list[i][1] - test_list[j][1]))\n    return max(pairs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = [(a, b) for a in test_list for b in test_list]\n    max_diff = float('-inf')\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            diff = pairs[j][0] - pairs[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize maximum difference variable to start with\n    max_diff = 0\n\n    # Loop through each pair in the tuple list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the current pair and the next pair\n            diff = abs(test_list[j][1] - test_list[i][1])\n\n            # Update the maximum difference if the current difference is larger\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                diff = test_list[i][1] - test_list[j][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the minimum and maximum values found so far\n    min_value = float('inf')\n    max_value = float('-inf')\n    # Initialize variables to store the minimum and maximum values between pairs found so far\n    min_pair_value = float('inf')\n    max_pair_value = float('-inf')\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Update the minimum and maximum values found so far\n            if test_list[i][1] < min_value:\n                min_value = test_list[i][1]\n            if test_list[i][1] > max_value:\n                max_value = test_list[i][1]\n            if test_list[j][1] < min_value:\n                min_value = test_list[j][1]\n            if test_list[j][1] > max_value:\n                max_value = test_list[j][1]\n            # Update the minimum and maximum values between pairs found so far\n            pair_value = abs(test_list[i][1] - test_list[j][1])\n            if pair_value < min_pair_value:\n                min_pair_value = pair_value\n            if pair_value > max_pair_value:\n                max_pair_value = pair_value\n    # Return the maximum difference between pairs\n    return max_pair_value"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables for maximum difference and minimum value in the first element of the tuple\n    max_diff = 0\n    min_val = test_list[0][0]\n\n    # Iterate through the remaining elements of the list\n    for val in test_list:\n        # Calculate the difference between the current value and the minimum value in the list\n        curr_diff = abs(val[0] - min_val)\n\n        # Update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n        # Update the minimum value if the current value is smaller\n        if val[0] < min_val:\n            min_val = val[0]\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][0], test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list in ascending order based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts them based on the second value of each tuple.\n    '''\n\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Create a list of tuples containing the subject and marks\n    subject_marks_list = [\n        (subject, marks)\n        for subject, marks in subjectmarks\n    ]\n    \n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(subject_marks_list, key=lambda x: x[1])\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element and call the function on the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(sublist) for sublist in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return it\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: otherwise, add the head of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Helper function to sum a list of lists\n    def sum_lists(lists):\n        total = 0\n        for list in lists:\n            total += sum(list)\n        return total\n    \n    # Flatten the list\n    flat_list = [item for sublist in data_list for item in sublist]\n    \n    # Sum the flattened list\n    return sum_lists(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return it\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # Recursive case: sum the first element of the list and the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list and the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        flat_list = []\n        for item in data_list:\n            if type(item) == list:\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Initialize the sum to 0\n    total = 0\n\n    # Recursive function to flatten the list and sum its elements\n    def flatten_and_sum(lst):\n        # Base case: if the list is empty, return 0\n        if not lst:\n            return 0\n\n        # Recursive case: if the list has only one element, return its value\n        elif len(lst) == 1:\n            return lst[0]\n\n        # Recursive case: if the list has more than one element, flatten it and sum its elements\n        else:\n            # Flatten the list\n            flat_lst = [item for sublist in lst for item in sublist]\n\n            # Sum the flattened list\n            total += flatten_and_sum(flat_lst)\n\n            # Return the flattened list\n            return flat_lst\n\n    # Flatten the input list and sum its elements\n    flatten_and_sum(data_list)\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Define the set of Bell numbers\n    bell_numbers = set(range(n+1))\n    \n    # Initialize the number of ways to partition to 1\n    ways_to_partition = 1\n    \n    # Loop through all the possible combinations of Bell numbers\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            # Check if the combination is a valid partition\n            if i+j == n:\n                # Increment the number of ways to partition if the combination is valid\n                ways_to_partition *= 2\n    \n    return ways_to_partition"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    a = 1\n    b = 0\n    c = 0\n    d = 0\n    p = 0\n    q = 0\n    r = 0\n\n    # Calculate the number of ways to partition a set of Bell numbers\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * bell_number(n // 2)) + (2 * bell_number((n + 1) // 2))\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def f(n, k, p, s, result):\n        if k == 0:\n            result += 1\n            return\n        if n < k:\n            return\n        if k == 1:\n            if n == 1:\n                result += 1\n            return\n        if k == 2:\n            if n >= 2:\n                result += 1\n            return\n        if n - p >= k - 1:\n            f(n, k - 1, p, n - p, result)\n            f(n, k - 1, p - 1, n - p, result)\n        else:\n            f(n, k, p + 1, s, result)\n            f(n, k, p + 1, s + p, result)\n\n    result = 0\n    f(2 * n + 1, 2 * n + 1, 1, 1, result)\n    return result"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def helper(n, memo):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1, memo) + helper(n-2, memo)\n        return memo[n]\n    \n    memo = {}\n    return helper(n, memo)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): the number of elements in the set\n\n    Returns:\n    int: the number of ways to partition the set of Bell numbers\n    \"\"\"\n\n    def helper(arr, start, end):\n        \"\"\"\n        Helper function to find the number of ways to partition the set.\n\n        Parameters:\n        arr (list): list of Bell numbers\n        start (int): starting index of the partition\n        end (int): ending index of the partition\n\n        Returns:\n        int: the number of ways to partition the set\n        \"\"\"\n        if start > end:\n            return 1\n\n        # Base case: if the current partition has 0 elements, the number of ways is 1\n        if arr[start] == 0:\n            return 0\n\n        # Recursive case: if the current partition has at least 1 element,\n        # find the number of ways to partition the set with the first element removed\n        ways = 0\n        for i in range(start + 1, end + 1):\n            ways += helper(arr, start + 1, i - 1) * helper(arr, i, end)\n\n        return ways\n\n    # Initialize the list of Bell numbers\n    bell_numbers = [0] * n\n\n    # Generate the list of Bell numbers\n    for i in range(1, n + 1):\n        bell_numbers[i - 1] = i\n\n    # Find the number of ways to partition the set with the first element removed\n    return helper(bell_numbers, 0, n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    def partition(n, k):\n        if k == 0 or k == n:\n            return 1\n        elif k == 1:\n            return 2\n        elif k == 2:\n            return 4\n        else:\n            return 2 * partition(n - 1, k - 1) + partition(n - 1, k)\n\n    return partition(n, 3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2 * bell_number(n-1)) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function calculates the number of ways to partition a set of Bell numbers.\n\n    Args:\n        n (int): The number of Bell numbers to be partitioned.\n\n    Returns:\n        int: The number of ways to partition the Bell numbers.\n\n    Examples:\n        >>> bell_number(5)\n        54\n    \"\"\"\n    return n * (n - 1) // 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize count to 0\n    count = 0\n    # loop through all possible partitions of {1,2,...,n}\n    for i in range(1, n+1):\n        # loop through all possible partitions of {i,i+1,...,n}\n        for j in range(i, n+1):\n            # check if the current partition is a partition of the Bell numbers\n            if sum(j) == 2*n:\n                count += 1\n    # return the count of ways to partition the Bell numbers\n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    diff = A[1] - A[0]\n    for i in range(1, len(A) - 1):\n        if A[i] - A[i - 1] * diff!= 0:\n            return False\n        diff = A[i + 1] - A[i]\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if array is empty or has only one element\n    if len(A) <= 1:\n        return True\n\n    # iterate over array and check if each element is monotonic\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n\n    # iterate over array again and check if each element is monotonic\n    for i in range(len(A) - 2):\n        if A[i] > A[i+2]:\n            return False\n        elif A[i] < A[i+2]:\n            return True\n\n    # if we make it this far, array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if the array is empty\n    if not A: \n        return True\n    \n    # check if the array has only one element\n    if len(A) == 1: \n        return True\n    \n    # check if the array is monotonic\n    if A[0] <= A[1] <= A[2]: \n        return True\n    elif A[0] >= A[1] >= A[2]: \n        return True\n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    This function checks whether the given array A is monotonic or not.\n    A monotonic array is either increasing or decreasing.\n    '''\n    if len(A) <= 1: \n        return True\n    if A[0] <= A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)-1): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Check if the array is a single element\n    if len(A) == 1:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    increasing = A[0] <= A[1]\n    decreasing = A[0] >= A[1]\n    \n    # Check if the array is monotonic\n    if increasing == decreasing:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n\n    # check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # check if the array is monotonic in increasing order\n    if A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3]:\n        return True\n    \n    # check if the array is monotonic in decreasing order\n    elif A[len(A)-1] >= A[len(A)-2] and A[len(A)-2] >= A[len(A)-3] and A[len(A)-3] >= A[len(A)-4]:\n        return True\n    \n    # if the array is not monotonic, return False\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    # Check if the array is monotonic in the first element\n    if A[0] <= A[1]:\n        if len(A) == 2:\n            return True\n        elif A[1] >= A[2]:\n            return True\n        else:\n            return False\n    else:\n        if len(A) == 2:\n            return False\n        elif A[1] <= A[2]:\n            return False\n        else:\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A and returns True if it is monotonic or False otherwise.\n    A number is said to be monotonic if it is either increasing or decreasing. \n    '''\n    if len(A) <= 1: \n        return True\n\n    if A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n\n    if A[0] > A[1]: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if it is monotonic increasing or decreasing and False otherwise.\n    '''\n    if len(A) == 0:\n        return False\n    elif len(A) == 1:\n        return True\n    elif A[0] <= A[1]:\n        for i in range(len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in l:\n        if s[0] in i:\n            if s[1:] == i[i.index(s[0])+1:]:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] in l:\n            for j in range(len(s)-i-1):\n                if s[j+i+1:] == l[l.index(s[i])+1:]:\n                    return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    elif len(s) == 0:\n        return True\n    elif s[0] in l:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # If s is empty, return True\n    if not s:\n        return True\n    \n    # Traverse through the list l\n    for i in range(len(l)):\n        # If the current element of s is equal to the current element of l,\n        # check if the remaining elements of s are also sublists of the remaining elements of l\n        if l[i] == s[0]:\n            if is_sublist(l[i+1:], s[1:]):\n                return True\n    \n    # If the loop completes, then s is not a sublist of l\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple_ in Input:\n        if len(set(map(len, tuple_)))!= 1:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Initialize a list to store the lengths of all the tuples\n    lengths = []\n\n    # Iterate over each tuple in the input list\n    for tup in Input:\n        # Add the length of each tuple to the list\n        lengths.append(len(tup))\n\n    # Check if all the lengths are equal\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # find the length of the first tuple in the list\n    length = len(Input[0])\n\n    # loop through the list of tuples\n    for i in range(len(Input)):\n        # check if the length of each tuple is equal to the first tuple\n        if len(Input[i])!= length:\n            return False\n\n    # if no tuple has a different length, then all tuples have the same length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Loop through each tuple in the input list\n    for i in range(len(Input)):\n        # Check if all the elements in the current tuple are the same\n        if not all(Input[i][j] == Input[0][j] for j in range(len(Input[i]))):\n            # If not, return False\n            return False\n\n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Loop through each tuple in the Input list\n    for i in range(len(Input)):\n\n        # If any of the tuples have a different length, return False\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    # If no tuples have a different length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if all(len(x) == len(Input[0]) for x in Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        gap //= 1\n        if gap == 1:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    Args:\n        nums (list): A list of elements to be sorted.\n\n    Returns:\n        list: The sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = gap // 10\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    gap = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize the iteration and swapping variables\n    iteration = 0\n    swapping = True\n\n    # while swapping is true, perform the swapping and iteration count updates\n    while swapping:\n        swapping = False\n        iteration += 1\n\n        # perform the swapping of adjacent elements if they are in the wrong order\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapping = True\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n\n    # Initialize the maximum gap and the swapping flag\n    max_gap = len(nums)\n    swapping = True\n\n    # Loop until the maximum gap is found or the swapping flag is False\n    while swapping:\n        swapping = False\n\n        # Loop through each index in the list\n        for i in range(len(nums) - 1):\n            # Calculate the distance between the current index and the last index\n            gap = max_gap\n            if gap == 0:\n                break\n\n            # Calculate the middle index\n            middle = (i + gap) % len(nums)\n\n            # Swap the elements if they are in the wrong order\n            if nums[i] > nums[middle]:\n                nums[i], nums[middle] = nums[middle], nums[i]\n                swapping = True\n\n        # Decrease the maximum gap by half\n        max_gap = (max_gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    \n    # Initialize variables\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    \n    # Iterate through the list until the gap is less than or equal to 1\n    while gap > 1 or swapped:\n        \n        # Iterate through the list with gap as the step size\n        for i in range(gap, n):\n            \n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                \n                # Set the swapped variable to true since a swap was made\n                swapped = True\n        \n        # Set the new gap size based on the number of swaps made\n        gap = int(gap / 1.3)\n        \n        # If no swaps were made, set the gap to 1 to ensure the list is sorted\n        if not swapped:\n            gap = 1\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function implements the comb sort algorithm.\n\n    Parameters:\n        nums (list): A list of integers to be sorted.\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    n = len(nums)\n    max_iter = 10\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = n\n\n        for i in range(max_iter):\n            if i > 0:\n                gap = int((gap * 10) / 13)\n\n            for j in range(n - gap):\n                if nums[j] > nums[j + gap]:\n                    nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                    swapped = True\n\n        max_iter = max_iter * 10 / 13\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    This algorithm works by repeatedly swapping adjacent elements if they are in the wrong order,\n    until no more swaps are needed. The time complexity of this algorithm is O(n^2),\n    but it has a low probability of generating optimal or even near-optimal sorting algorithms.\n    \"\"\"\n    n = len(nums)\n    max_iter = n * 10\n    gap = n\n    swapped = True\n\n    while swapped and gap > 1:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        max_iter = int(max_iter / 1.3)\n\n    if gap == 1:\n        for i in range(n - 1, 0, -1):\n            if nums[i] < nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    max_gap = n\n    min_gap = 1\n\n    while max_gap > min_gap:\n        min_gap = max_gap\n        max_gap = 0\n\n        for i in range(n-min_gap):\n            j = i + min_gap\n\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n\n                if j - i <= max_gap:\n                    max_gap = j - i\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define the swap function\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define the comparison function\n    def compare(nums, i, j):\n        if nums[i] > nums[j]:\n            return 1\n        elif nums[i] < nums[j]:\n            return -1\n        else:\n            return 0\n\n    # define the iteration function\n    def iteration(nums):\n        max_index = 0\n        n = len(nums)\n        for i in range(1, n):\n            if compare(nums, i, max_index) == 1:\n                max_index = i\n        swap(nums, max_index, n-1)\n        return max_index\n\n    # iterate until no swaps occur\n    while True:\n        n = len(nums)\n        swapped = False\n        for i in range(n-1):\n            if compare(nums, i, i+1) == 1:\n                swap(nums, i, i+1)\n                swapped = True\n        if not swapped:\n            break\n        for i in range(n):\n            max_index = iteration(nums)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    for i in range(1, n):\n        j = 2*i*i\n        if n == j:\n            return True\n        elif n > j:\n            break\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    i = 0\n    while i*i <= n:\n        j = n-i*i\n        if i*i+j*j == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n ** 0.5) + 1): \n        if n % i == 0 and n // i == i: \n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    # Function to check if a number can be represented as the difference of two squares or not\n    # This function takes an integer as input and returns a boolean value\n    for i in range(1, int(n**0.5) + 1):\n        if (n - i*i)**2 == i*i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n % 4 == 0:\n        return False\n    \n    x = int(n**0.5)\n    y = n - (x**2)\n    \n    if y == 0:\n        return True\n    \n    elif y % 4 == 0:\n        return False\n    \n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    \n    # Check if the number is a perfect square\n    is_square = False\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and i**2 == n:\n            is_square = True\n            break\n    if not is_square:\n        return False\n    \n    # Check if the difference of the squares is a perfect square\n    diff = int(n/2)**2\n    is_square = False\n    for i in range(1, int(diff**0.5)+1):\n        if diff % i == 0 and i**2 == diff:\n            is_square = True\n            break\n    if not is_square:\n        return False\n    \n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # check if the number is greater than 0\n    if n <= 0:\n        return \"Invalid input!\"\n\n    # check if the number is a power of 2\n    elif n == 1 or n == 2:\n        return True\n\n    # check if the number is a square\n    elif n % 4 == 0:\n        return False\n\n    # check if the number is a cube\n    elif n % 9 == 0:\n        return False\n\n    # check if the number is a fourth power of 2\n    elif n % 16 == 0:\n        return True\n\n    # if the number is not a square, cube, or fourth power of 2, it can be represented as the difference of two squares\n    else:\n        # check for the squares of each half\n        half1 = int(n/2)\n        half2 = int(half1/2)\n\n        # check if both half squares are squares\n        if dif_Square(half1) and dif_Square(half2):\n            return True\n\n        # if only one half is a square, the number cannot be represented as the difference of two squares\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    #Check if the given number is even or not\n    if n % 2!= 0:\n        return False\n    \n    #Compute the square of n\n    square_n = n * n\n    \n    #Find the difference between square_n and the square of its square\n    difference_between_squares = square_n - (square_n * square_n)\n    \n    #Check if the difference is a square or not\n    if difference_between_squares % 4 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0 or n == 1: \n        return True \n    i = 1 \n    while i*i <= n: \n        if n % i == 0: \n            return False \n        i += 1 \n    return True "
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # loop until the square root of n is less than or equal to 1\n    while n*n > 1:\n        # check if the remainder of n divided by the square root of n is 0\n        if n % int(n/n) == 0:\n            return False\n        # check if the remainder of n divided by the square root of n is 1\n        elif n % int((n/n)+1) == 0:\n            return False\n        else:\n            n -= 1\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    colors.sort()\n    prev_pattern = patterns[0]\n    for i in range(1, len(patterns)):\n        if patterns[i]!= prev_pattern:\n            return False\n        prev_pattern = colors[i]\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Define the sequences of colors and patterns to check for\n    patterns_to_check = [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n\n    # Loop through all patterns in patterns_to_check\n    for pattern in patterns_to_check:\n        # Check if the current pattern is present in the colors array\n        if pattern in colors:\n            # If it is, check if it matches the next pattern in the sequence\n            if (pattern[1:] == patterns[0:2]) or (pattern[2:] == patterns[2:4]):\n                # If it does, return True\n                return True\n\n    # If we make it here, we didn't find a pattern that matches the given sequence\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i] == colors[i+1]:\n            continue\n        else:\n            for pattern in patterns:\n                if colors[i] in pattern:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initializing variables\n    n = len(colors)\n    m = len(patterns)\n    count = 0\n\n    # comparing the colors and patterns array\n    for i in range(m):\n        if patterns[i] == colors:\n            count += 1\n\n    # checking whether the count of the colors is equal to the length of patterns array\n    if count == m:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    for pattern in patterns:\n        if colors.count(pattern[0]) == len(pattern) and colors.count(pattern[-1]) == len(pattern):\n            break\n    else:\n        return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n\n    # Initialize a variable to store the current pattern\n    current_pattern = patterns[0]\n\n    # Loop through each color in the colors array\n    for color in colors:\n        # If the current pattern and the next color don't match, return False\n        if current_pattern!= color:\n            return False\n        # Otherwise, update the current pattern\n        current_pattern = patterns[1] if len(patterns) > 1 else ''\n\n    # If all colors are matched, return True\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    # Create an empty list to store the tuples that meet the condition\n    result = []\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(num % K == 0 for num in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Find all tuples in the list\n    all_tuples = set(tuple(x) for x in test_list)\n\n    # Initialize an empty set to store the divisible-by-k tuples\n    divisible_by_k = set()\n\n    # Iterate through the tuples and check if all elements are divisible by K\n    for tuple_ in all_tuples:\n        if all(x % K == 0 for x in tuple_):\n            divisible_by_k.add(tuple_)\n\n    return divisible_by_k"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple in test_list:\n        divisible = True\n        for num in tuple:\n            if num % K!= 0:\n                divisible = False\n                break\n        if divisible:\n            divisible_tuples.append(tuple)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K == 0:\n                count += 1\n            if count == len(tup):\n                result.append(tup)\n                break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    divisible_tuples = []\n    \n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            divisible_tuples.append(tup)\n            \n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    # create a new list to store the tuples that meet the condition\n    result = []\n\n    # iterate over each tuple in the test list\n    for tup in test_list:\n        # check if the sum of the elements in the tuple is divisible by K\n        if sum(tup) % K == 0:\n            # if it is, add the tuple to the result list\n            result.append(tup)\n\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if sum(i) % K == 0:\n            for j in range(len(test_list)):\n                if i == j:\n                    continue\n                if sum(test_list[i]) % K == 0 and sum(test_list[j]) % K == 0:\n                    result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    This function checks if a given number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns a boolean value indicating whether it is divisible by 11 or not.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # splitting the string into words\n    for word in words:\n        if len(word)%2==1: # checking if the length of the word is odd\n            print(word, \"is odd\")\n        else:\n            print(word, \"is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    words = s.split() # split the string into words\n    count = 0 # initialize a counter\n    for word in words:\n        count += len(word) # add the length of each word to the counter\n    if count % 2 == 0: # if the count is even, the word length is even\n        return \"The word length is even\"\n    else: # otherwise, the word length is odd\n        return \"The word length is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words\n    words = s.split()\n\n    # Iterate over each word and check its length\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n\n    # If all words have even length, return True\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words using split() method\n    words = s.split()\n    \n    # Iterate through the words and check their length\n    for word in words:\n        # Check if the length of the word is odd or even\n        if len(word) % 2 == 1:\n            # If the length of the word is odd, print the word and its length\n            print(word, len(word))\n        else:\n            # If the length of the word is even, print a message saying it is even\n            print(word, \"is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in s: \n        if i.isalpha(): \n            if len(i) % 2 == 1: \n                return True \n            else: \n                return False "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Iterate through each word in the list\n    for word in words:\n        # Check the length of the word\n        if len(word) % 2 == 1:\n            return True\n    # If no odd word is found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.strip() # Remove leading and trailing whitespaces\n    words = s.split() # Split the sentence into words\n    for word in words:\n        if len(word) % 2 == 0: # If the length of the word is even\n            print(word + \" is an even length word\")\n        else: # If the length of the word is odd\n            print(word + \" is an odd length word\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        print(word, \"is an even word.\")\n    else:\n        print(word, \"is an odd word.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the variable for the tetrahedral number\n    tn = 0\n    \n    # Loop through the first n-1 terms of the sequence\n    for i in range(1, n):\n        # Calculate the term for the current i-th term\n        term = n*(4*i*i + 2*i - 1)\n        # Add the term to the total tetrahedral number\n        tn += term\n    \n    # Return the nth term of the sequence\n    return tn"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    num1 = 0\n    num2 = 1\n    num3 = 0\n    num4 = 0\n    \n    # Calculate the nth tetrahedral number\n    for i in range(n):\n        num1 = num1 + num2 + num3\n        num2 = num2 + num3 + num4\n        num3 = num4\n        num4 = num1\n    \n    return num4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    for i in range(1, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 24\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    for i in range(1, n+1): \n        a = (a * (3*i - 1)) // 2\n        b = (b * (3*i - 2)) // 2\n        c = (c * (3*i - 3)) // 2\n        d = (d * (3*i - 4)) // 2\n    return a + b + c + d\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Define a function to check whether a number is a tetrahedral number\n    def is_tetrahedral(num):\n        # Check if the number is divisible by 4\n        if num % 4 == 0:\n            # Check if the number is divisible by 12 or 16\n            if num % 12 == 0 or num % 16 == 0:\n                return True\n        return False\n\n    # Initialize the variable to hold the tetrahedral number\n    num = 0\n\n    # Loop until the number of tetrahedral numbers found is equal to n\n    while num < n:\n        # Check if the current number is a tetrahedral number\n        if is_tetrahedral(num):\n            # Increment the counter for the number of tetrahedral numbers found\n            num += 1\n\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return 4 * tetrahedral_number(n-1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the function\n    def tetrahedral_helper(n, a=0, b=1, c=0):\n        # Base case: return a when n=0\n        if n == 0:\n            return a\n        # Base case: return the sum of the previous two values when n=1\n        elif n == 1:\n            return a + b\n        # Recursive case: compute the value of n using the formula:\n        #   (a + b + c) * (a + b + c + n)\n        else:\n            return tetrahedral_helper(n-1, b, a+b, c+n)\n    \n    # Call the helper function and return the result\n    return tetrahedral_helper(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return \"The input should be greater than or equal to 1.\"\n    elif n == 1:\n        return 1\n    else:\n        return (4*n*(n-1)*pow(n-1, 3)) + (n*(n-1)*(n-2)*pow(n-2, 3))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns its volume.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Formula to find the volume of a sphere\n    v = (4/3) * math.pi * r**3\n\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    # initialize a variable to store the sum of ASCII values of characters in the string\n    sum = 0\n  \n    # loop through each character in the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n  \n    # return the character that results from adding the ASCII values of all characters in the string modulo 26\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    This function takes a string as input and returns the character made by adding the ASCII value of all the characters of the string modulo 26.\n    \"\"\"\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    # initialize a variable to store the ASCII value of the character\n    char_ascii = 0\n\n    # iterate through each character in the string\n    for char in strr:\n        # add the ASCII value of the character to the variable\n        char_ascii += ord(char)\n\n    # return the character made by adding the ASCII value of all the characters modulo 26\n    return chr((char_ascii + 26) % 26)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # convert string to lowercase to ignore case sensitivity\n    strr = strr.lower()\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through each character in the string\n    for char in strr:\n\n        # convert each character to its ASCII value\n        ascii_value = ord(char)\n\n        # add the ASCII value to the sum\n        sum += ascii_value\n\n    # return the character made by adding the ASCII value of all the characters modulo 26\n    return chr((sum % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    num = 0\n    for char in strr:\n        num += ord(char)\n    char = chr(((num % 26) + ord('a')) % 26 + ord('a'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total_sum = 0\n    for char in strr:\n        total_sum += ord(char)\n    return chr((total_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    char_ascii = total % 26\n    char = chr(char_ascii + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0] * (n+1)\n    sequence[0] = 0\n    sequence[1] = 1\n    for i in range(2, n+1):\n        sequence[i] = (3 * sequence[i-1] + sequence[i-2]) % 2\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    seq = [2] # initialize the sequence with the first number 2\n\n    for i in range(1, n): # loop n times\n        new_seq = [2*x for x in seq] # double the previous numbers in the sequence\n        for j in range(len(new_seq)): # loop through each number in the sequence\n            if new_seq[j] > 4000000: # check if the number exceeds 4 million\n                break # break out of the loop if the number exceeds 4 million\n            if j == 0 or seq[j-1]!= new_seq[j]: # if the number is not the first number or has changed\n                seq.append(new_seq[j]) # add the new number to the end of the sequence\n\n    return seq[-1] # return the last number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(2, n+1):\n        sequence.append(3*sequence[i-1] + sequence[i-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    for i in range(n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(sequence[-1] + 1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1] \n    for i in range(n - 2): \n        sequence.append(sequence[-1] + sequence[-2]) \n    return sequence[-1] "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 0, 1]\n    for i in range(n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Convert the radius to radians\n    r = math.radians(r)\n\n    # Calculate the surface area using the formula:\n    # A = (4/3) * pi * r^3\n    A = (4/3) * math.pi * r**3\n\n    return A\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r * r\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2  # Using Pythagorean theorem\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of the sphere\n    surface_area = 4 * math.pi * r**2\n    \n    # Return the surface area of the sphere\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Base case: if n is zero, return zero\n    if n == 0:\n        return 0\n\n    # Calculate the nth centered hexagonal number\n    else:\n        return n * (3 * n - 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # function to find centered hexagonal number of an integer n\n    def centered_hex(n):\n        # initialize sum variable to 0\n        sum = 0\n        \n        # loop n times\n        for i in range(n):\n            # calculate sum of centered hexagonal numbers\n            sum += ((3 * i ** 2) - (5 * i + 1))\n        \n        # return the sum\n        return sum\n    \n    # return the centered hexagonal number of n\n    return centered_hex(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    center = (3*n + 1) // 2\n    return 6 * center**2 - 6 * center"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initializing variables\n    a = 1\n    b = 1\n    c = 0\n    d = 0\n    e = 1\n    \n    # iterating till n is reached\n    for i in range(n):\n        # calculating a, b, c, d, e\n        a = 1\n        b = 1\n        c = e + 1\n        d = 2*a - c\n        e = d + b\n        \n        # printing the nth centered hexagonal number\n        print(c)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 0\n    while True:\n        if i % 6 == 0 and i % 8 == 0 and i % 10 == 0:\n            j = 0\n            while True:\n                if j % 2 == 0:\n                    k = 0\n                    while True:\n                        if k % 6 == 0:\n                            break\n                        k += 1\n                    j += 1\n                else:\n                    break\n        else:\n            break\n        i += 1\n        if n == i:\n            break\n    return i - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1]\n    while len(hexagonal_numbers) < n:\n        hexagonal_numbers.append(len(hexagonal_numbers) * (6 * len(hexagonal_numbers) - 5) // (5 * (len(hexagonal_numbers) + 1)))\n    return hexagonal_numbers[n - 1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    def centered_hexagonal_number_helper(n, side_length):\n        if n == 0:\n            return 0\n        else:\n            return 2 * centered_hexagonal_number_helper(n - 1, side_length) + 1\n\n    return centered_hexagonal_number_helper(n, 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a, b = 1, 1\n    for i in range(1, n+1):\n        print((a**2 + b**2) ** 0.5, end=' ')\n        a, b = a + b, a - b\n    print()"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \"\"\"\n    a = 1\n    b = 6\n    c = 10\n    d = 15\n\n    for i in range(1, n + 1):\n        k = i * (15 - a - 6 * (i - 1)) // b\n        a, b, c, d = d, c, b, k"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key in merged_dict:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].extend(dict2[key])\n            else:\n                merged_dict[key] = [merged_dict[key], dict2[key]]\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key in merged_dict:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].extend(dict3[key])\n            else:\n                merged_dict[key] = [merged_dict[key], dict3[key]]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2:\n            merged_dict[key] = (dict1[key], dict2[key], None)\n        elif key in dict3:\n            merged_dict[key] = (dict1[key], None, dict3[key])\n        else:\n            merged_dict[key] = (dict1[key], None, None)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary to merge.\n        dict2 (dict): The second dictionary to merge.\n        dict3 (dict): The third dictionary to merge.\n\n    Returns:\n        dict: A single dictionary that contains all the key-value pairs from the three dictionaries.\n    \"\"\"\n\n    merged_dict = {}\n\n    # Merge the first two dictionaries\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Merge the third dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key,value in dict1.items():\n        merged_dict[key] = value\n    for key,value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key,value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # convert input dictionaries to set to remove duplicates\n    set1 = set(dict1.items())\n    set2 = set(dict2.items())\n    set3 = set(dict3.items())\n    # merge three sets into a single set\n    merged_set = set1.union(set2,set3)\n    # convert the set back to a dictionary\n    merged_dict = dict(merged_set)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for num in list1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Iterate through the list and update the frequency count in the dictionary\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.defaultdict(int)\n    for num in lst:\n        freq_dict[num] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    # Loop through each element in the list\n    for item in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary containing the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    smallest = n\n    for i in range(2, N+1):\n        if n-i < smallest:\n            smallest = n-i\n        elif n+i < smallest:\n            smallest = n+i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    closest_num = N\n    min_diff = abs(N - N)\n\n    # Loop through all numbers less than N\n    for num in range(1, N):\n        diff = abs(num - N)\n\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    num_list = []\n    num_diff = 1000000\n    \n    # Generate a list of numbers from 1 to N\n    for i in range(1, N+1):\n        num_list.append(i)\n    \n    # Calculate the absolute difference between the largest and smallest number in the list\n    abs_diff = abs(max(num_list)-min(num_list))\n    \n    # Check if the absolute difference is smaller than the current minimum\n    if abs_diff < num_diff:\n        num_diff = abs_diff\n    \n    # Find the closest smaller number by checking the absolute difference between each number and N\n    for i in range(len(num_list)):\n        if num_list[i] < N:\n            num_list[i] += 1\n            abs_diff = abs(max(num_list)-min(num_list))\n            if abs_diff < num_diff:\n                num_diff = abs_diff\n                break\n    \n    # Return the closest smaller number\n    return min(num_list)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    num_list = []\n    for i in range(1, N+1):\n        num_list.append(i)\n    closest_num = min(num_list)\n    for num in num_list:\n        if abs(num - closest_num) < abs(N - closest_num):\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    # initialize variables\n    closest = N\n    smallest = N\n    count = 1\n    \n    # loop until we find the closest smaller number\n    while count < N:\n        smallest += 1\n        count += smallest\n        \n        # update closest number if needed\n        if abs(smallest - N) < abs(closest - N):\n            closest = smallest\n            \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize the smallest number as N\n    smallest = N\n    \n    # loop through the numbers from 1 to N\n    for i in range(1, N+1):\n        # if the current number is smaller than the smallest, update the smallest\n        if i < smallest:\n            smallest = i\n    \n    # return the smallest number\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    # find the smallest number greater than or equal to n\n    smallest_greater_than_n = N\n    while smallest_greater_than_n % 2 == 0:\n        smallest_greater_than_n += 1\n\n    # find the closest smaller number than smallest_greater_than_n\n    closest_smaller = smallest_greater_than_n - 1\n    while closest_smaller > 0 and closest_smaller < smallest_greater_than_n:\n        if closest_smaller % 2 == 0 and closest_smaller % 3 == 0:\n            closest_smaller -= 1\n        elif closest_smaller % 2 == 1:\n            closest_smaller -= 1\n        else:\n            closest_smaller += 1\n\n    # check if the closest smaller number is closer to n than the smallest number greater than n\n    if abs(closest_smaller - N) < abs(smallest_greater_than_n - N):\n        return closest_smaller\n    else:\n        return smallest_greater_than_n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    nums = list(range(1, N+1))\n    closest = min(nums)\n    for num in nums:\n        if abs(num-N) < abs(closest-N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    smallest = float('inf')\n    closest = float('inf')\n    for i in range(1, N+1):\n        if abs(i-N) < abs(closest-smallest):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num = 0\n    closest = abs(N)\n    \n    for i in range(1, N):\n        if abs(N-i) < closest:\n            closest = abs(N-i)\n            num = i\n    \n    return num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize a variable to store the length of the longest word\n    max_len = 0\n    \n    # Loop through each word in the list\n    for word in list1:\n        # Check if the length of the current word is greater than the current maximum length\n        if len(word) > max_len:\n            # If it is, update the maximum length\n            max_len = len(word)\n    \n    # Return the maximum length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        print(\"The string '{}' is present in the list.\".format(sub_str))\n    else:\n        print(\"The string '{}' is not present in the list.\".format(sub_str))"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Convert the list of strings to a set to remove duplicates\n    unique_strings = set(str1)\n    \n    # Loop through each string in the list and check if it contains the substring\n    for string in unique_strings:\n        if sub_str in string:\n            return True\n    \n    # If no substring was found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"The substring '{}' is present in the string '{}'.\".format(sub_str, str1))\n    else:\n        print(\"The substring '{}' is not present in the string '{}'.\".format(sub_str, str1))"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        if isinstance(sub_str, list):\n            for item in str1:\n                if all(item in item for item in sub_str):\n                    return True\n            return False\n        else:\n            for item in str1:\n                if sub_str in item:\n                    return True\n            return False\n    else:\n        if isinstance(sub_str, list):\n            for item in sub_str:\n                if item in str1:\n                    return True\n            return False\n        else:\n            if sub_str in str1:\n                return True\n            return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a number as input and returns True if it's an undulating number, otherwise False. \n    An undulating number is a number that is divisible by both 6 and 7.\n    '''\n    if n % 6 == 0 and n % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_undulating(n - 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return is_undulating(n/2)\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    A number is said to be undulating if it has a sum of divisors that is a multiple of the original number.\n    For example, 15 is undulating because 1+2+3+4+5=15, which is a multiple of 15.\n    '''\n    def sum_of_divisors(num):\n        '''\n        A function to calculate the sum of divisors of the given number.\n        '''\n        sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                sum += i\n        return sum\n\n    if sum_of_divisors(n) % n == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0: \n        return False\n    else:\n        # Initialize sum of squares of even and odd digits\n        even_sum = 0\n        odd_sum = 0\n        # Iterate through each digit of the number\n        for digit in str(n):\n            # Check if the digit is even or odd\n            if int(digit) % 2 == 0:\n                # Add the square of the even digit to the sum\n                even_sum += int(digit)**2\n            else:\n                # Add the square of the odd digit to the sum\n                odd_sum += int(digit)**2\n        # Check if the sum of squares of even and odd digits is greater than the original number\n        if even_sum > n or odd_sum > n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 1: \n        return \"Please enter a positive number.\"\n\n    if n % 2 == 0: \n        return \"The given number is even and therefore undulating.\"\n    else: \n        return \"The given number is odd and therefore not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n >= 3: \n        return 'Undulating' \n    else: \n        return 'Not Undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether the given number is undulating or not.\n    If the number is odd, it is undulating. Otherwise, it is not undulating.\n    '''\n    if n % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,-b)\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, 'a' and 'b', and returns the value of 'a' raised to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_index = 0  # assume first element is minimum\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: (x[1], x[0]))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize min length variable to infinity\n    min_length = float('inf')\n\n    # Loop through the list of lists\n    for sub_list in lst:\n\n        # Check if current sub_list length is less than min_length\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n\n    # Return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the smallest length to infinity\n    min_length = float('inf')\n    # Loop through each list in the list of lists\n    for sublist in lst:\n        # Check if the length of the current sublist is smaller than the current smallest length\n        if len(sublist) < min_length:\n            # Update the smallest length to the length of the current sublist\n            min_length = len(sublist)\n    # Return the smallest length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of the given integer.\n    \"\"\"\n\n    # initialize a counter variable to count the number of divisors\n    count = 0\n\n    # loop through all numbers from 1 to the square root of the input integer\n    for i in range(1, int(n**0.5)+1):\n        # check if the input integer is divisible by the current number\n        if n % i == 0:\n            # if it is, increment the counter variable\n            count += 1\n\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    A divisor is an integer that divides evenly into another integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(2, n):\n        if n % i == 0:\n            div += 1\n    return div"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store frequency of elements\n    freq_dict = {}\n\n    # loop through each element in the list\n    for item in list1:\n\n        # if the item is a list, recursively call the function to get the frequency of its elements\n        if isinstance(item, list):\n            item_freq = frequency_lists(item)\n            for key, value in item_freq.items():\n                if key in freq_dict:\n                    freq_dict[key] += value\n                else:\n                    freq_dict[key] = value\n        else:\n\n            # if the item is not a list, add it to the dictionary with a frequency of 1\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    # return the final dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in frequency:\n                    frequency[sub_item] += 1\n                else:\n                    frequency[sub_item] = 1\n        else:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Iterate through each element in the flattened list\n    for element in flattened_list:\n        # If the element is already in the dictionary, increment its frequency\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # Otherwise, add the element to the dictionary with a frequency of 1\n        else:\n            freq_dict[element] = 1\n\n    # Return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for elem in list1:\n        # check if the element is already in the dictionary\n        if elem in freq_dict:\n            # if it is, increment its frequency by 1\n            freq_dict[elem] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            freq_dict[elem] = 1\n    \n    # return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem not in freq_dict:\n                freq_dict[subitem] = 0\n            freq_dict[subitem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem not in freq_dict:\n                    freq_dict[subitem] = 1\n                else:\n                    freq_dict[subitem] += 1\n        else:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for element in list1:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the flattened list\n    freq = {}\n\n    # Loop through each element in the flattened list\n    for element in list1:\n        # If the element is a list, recursively call the function on the list to get the frequency of its elements\n        if isinstance(element, list):\n            for sub_element in element:\n                if sub_element not in freq:\n                    freq[sub_element] = 1\n                else:\n                    freq[sub_element] += 1\n        # Otherwise, if the element is not a list, increment its frequency in the dictionary\n        else:\n            if element not in freq:\n                freq[element] = 1\n            else:\n                freq[element] += 1\n\n    # Return the dictionary containing the frequency of each element in the flattened list\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n    \n    # Divide by the length of the list\n    length = len(numbers)\n    result /= length\n    \n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # Convert decimal number to binary string\n    binary_str = bin(n)[2:]\n    \n    # If binary string is shorter than the decimal number, add leading zeros to the beginning\n    while len(binary_str) < len(bin(n)[2:]):\n        binary_str = '0' + binary_str\n    \n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Check if the input is a valid decimal number\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Initialize the binary string\n    binary = \"\"\n\n    # Convert the decimal number to binary\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 2\n        # Append the digit to the binary string\n        binary = str(digit) + binary\n        # Remove the last digit from the number\n        n = n // 2\n\n    # If the binary string is empty, add a leading zero\n    if binary == \"\":\n        binary = \"0\"\n\n    # Remove any leading zeros from the binary string\n    while binary[0] == \"0\":\n        binary = binary[1:]\n\n    # Return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        # Get the remainder when n is divided by 2 \n        remainder = n % 2 \n        \n        # Convert the remainder to a binary digit and append it to binary string \n        binary = str(remainder) + binary \n        \n        # Remove the last digit of n by integer division \n        n = n // 2 \n    # Reverse the binary string and return it \n    return binary[::-1] "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Initialize an empty string to store the binary representation of n\n    binary = \"\"\n\n    # Loop until n is zero\n    while n > 0:\n        # Append the remainder of n divided by 2 to binary string\n        binary = str(n % 2) + binary\n        # Divide n by 2 to remove the last digit\n        n = n // 2\n\n    # Remove leading zeros from the binary string\n    while binary[0] == '0':\n        binary = binary[1:]\n\n    # Return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    if n == 0: \n        return \"\"\n    else: \n        binary = n % 2\n        rest = n // 2\n        return decimal_to_binary(rest) + binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    binary_string = \"\"\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to store the binary representation of the decimal number\n    binary_string = ''\n    \n    # Convert the decimal number to binary and store it in the binary_string\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n //= 2\n    \n    # Remove any leading zeros from the binary string\n    while binary_string[0] == '0':\n        binary_string = binary_string[1:]\n    \n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number and converts it to its binary equivalent as a string with no leading zeros.\n    \"\"\"\n\n    # Initialize an empty string to store the binary representation of the number\n    binary = \"\"\n\n    # Loop through each digit of the number and convert it to binary\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n\n    # Remove any leading zeros from the binary representation of the number\n    while binary[0] == '0':\n        binary = binary[1:]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        # Convert the decimal number to binary recursively\n        binary = decimal_to_binary(n // 2)\n        # Add the rightmost digit of binary to decimal\n        decimal = n % 2 + int(binary)\n        return str(decimal)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        temp = num\n        reverse_num = 0\n        while temp > 0:\n            reverse_num = reverse_num * 10 + temp % 10\n            temp //= 10\n        return reverse_num == num\n    \n    # Find the smallest number greater than or equal to num\n    smallest = num + 1\n    \n    # Check if the smallest number is a palindrome\n    if is_palindrome(smallest):\n        return smallest\n    \n    # Find the next smallest palindrome\n    while True:\n        if is_palindrome(smallest):\n            return smallest\n        smallest += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of that integer.\n\n    For example, if the input is 1234, the function should return 4321.\n    \"\"\"\n    # convert the input integer to a string\n    num_str = str(num)\n    # reverse the string and convert it back to an integer\n    new_num = int(num_str[::-1])\n    # add 1 to the integer and convert it back to a string\n    new_num_str = str(new_num + 1)\n    # convert the string to an integer and return it\n    return int(new_num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the integer to a string and reverse it\n    num_str = str(num)[::-1]\n    # Convert the reversed string to an integer and add 1\n    next_num = int(num_str) + 1\n    # Check if the next number is a palindrome\n    while next_num >= 10:\n        next_num_str = str(next_num)[::-1]\n        if int(next_num_str)!= int(next_num_str[::-1]):\n            # If not, subtract 10 from the next number\n            next_num -= 10\n        else:\n            # If it is a palindrome, return the next number\n            return next_num\n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Generate all the palindromes of num\n    palindromes = []\n    for i in range(10**(num-1), 10**num):\n        palindromes.append(str(i))\n        palindromes.append(str(i)[::-1])\n    \n    # Find the smallest palindrome not in the palindromes\n    for i in range(10**(num-1), 10**num):\n        if str(i) not in palindromes:\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        '''\n        Check if a number is a palindrome.\n        '''\n        s = str(n)\n        for i in range(len(s) // 2):\n            if s[i]!= s[-1 - i]:\n                return False\n        return True\n\n    def get_largest_palindrome_less_than(n):\n        '''\n        Get the largest palindrome less than a specified number.\n        '''\n        largest_palindrome = 0\n        for i in range(10, 1, -1):\n            while n % i == 0:\n                n //= i\n                largest_palindrome = i * largest_palindrome + n\n        return largest_palindrome\n\n    next_num = num + 1\n    next_palindrome = get_largest_palindrome_less_than(next_num)\n    while not is_palindrome(next_palindrome):\n        next_num += 1\n        next_palindrome = get_largest_palindrome_less_than(next_num)\n\n    return next_num\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of the input number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Iterate through all possible palindromes of the input number\n    for i in range(len(num_str)):\n        # Reverse the current palindrome and convert it back to an integer\n        reverse_palindrome = int(num_str[::-1])\n\n        # Check if the reverse palindrome is greater than the input number\n        if reverse_palindrome > num:\n            return reverse_palindrome\n\n    # If no palindrome is found, the input number is the smallest palindrome\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Function to check if a number is a palindrome.\n    '''\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # Check if the reversed number is equal to the original number\n    if reversed_num == str(num):\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Find the largest palindrome less than or equal to the input number\n    largest_palindrome = num\n    while not is_palindrome(largest_palindrome):\n        largest_palindrome += 1\n    \n    # Find the next smallest palindrome by subtracting the largest palindrome from the input number\n    smallest_palindrome = num - largest_palindrome\n    while not is_palindrome(smallest_palindrome):\n        smallest_palindrome -= 1\n    \n    # Return the smallest palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        palindrome = str(num)\n        palindrome = palindrome[::-1]\n        if int(palindrome) > num:\n            return int(palindrome)\n        else:\n            num += 1\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    This function checks whether a given number is a palindrome or not.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    This function finds the next smallest palindrome of a specified integer and returns it as an integer.\n    '''\n    while True:\n        # If the current number is palindrome, increment it and continue searching\n        if is_palindrome(num):\n            num += 1\n            continue\n        # If the current number is not palindrome, return the current number\n        else:\n            return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the integer to a string and reverse it\n    reversed_num = num[::-1]\n    # Convert the reversed integer to a string and reverse it\n    reversed_reversed_num = reversed_num[::-1]\n    # Convert the reversed reversed integer to an integer\n    new_num = int(reversed_reversed_num)\n    # Increment the integer by one\n    new_num += 1\n    # Convert the new integer back to a string and reverse it\n    new_num_str = str(new_num)[::-1]\n    # Convert the reversed new integer back to an integer\n    new_num_int = int(new_num_str)\n    # Return the new integer\n    return new_num_int\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or not\n    if len(arr) == 0:\n        return None\n\n    # Find the middle element of the array\n    mid = len(arr) // 2\n\n    # If the element at the mid index is the kth element, return it\n    if arr[mid] == k:\n        return k\n\n    # If the kth element is greater than the middle element, recurse on the left subarray\n    elif k > arr[mid]:\n        return kth_element(arr[:mid], k)\n\n    # If the kth element is less than the middle element, recurse on the right subarray\n    else:\n        return kth_element(arr[mid+1:], k-mid-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return \"Invalid input\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in a list of integers and an integer k as input,\n    and returns the kth element in the list, counting from 1.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and a number k (k is 1-based indexing) and returns the kth element in the array.\n    If the array is empty or k is greater than the length of the array, the function will return None.\n    '''\n    if not arr or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError(\"Array length must be greater than or equal to k.\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        raise ValueError(\"Invalid input\")\n\n    # Find the rank of each element in the array\n    rank = [0] * (n+1)\n    for i in range(1, n+1):\n        rank[i] = rank[i-1] + (arr[i-1] < arr[i])\n\n    # Find the kth element using binary search\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if rank[mid] == k-1:\n            return arr[mid-1]\n        elif rank[mid] < k-1:\n            low = mid + 1\n        else:\n            high = mid - 1"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(w.capitalize() for w in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words using snake case convention\n    words = word.split('_')\n    # Join the words into a camel case string\n    camel_case = ''.join(word.title() for word in words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0 or word[i]!= \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0 or word[i] == \"_\":\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Join the words with capital letters\n    result = ''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    # split the word by underscores\n    words = word.split('_')\n    \n    # capitalize the first letter of each word except the first one\n    camel_case_word = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_word += words[i]\n        else:\n            camel_case_word += words[i][0].upper() + words[i][1:]\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    capitalize_next = True\n    for char in word:\n        if char.isupper():\n            if capitalize_next:\n                result += char.lower()\n                capitalize_next = False\n            else:\n                result += char\n        else:\n            if capitalize_next:\n                result += char.upper()\n                capitalize_next = False\n            else:\n                result += char\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into individual words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the first letter to lowercase\n    word = word[0].lower() + word[1:]\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize each word except the first one\n    camel_words = []\n    for i in range(len(words)):\n        if i == 0:\n            camel_words.append(words[i])\n        else:\n            camel_words.append(words[i].capitalize())\n    # Join the words back into a string\n    camel_case = ''.join(camel_words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].capitalize()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define a function to find the sum of first n natural numbers\n    def sum_natural_numbers(n):\n        if n == 0:\n            return 0\n        else:\n            return n * sum_natural_numbers(n-1)\n    \n    # Find the sum of first n natural numbers\n    sum_n = sum_natural_numbers(n)\n    \n    # Find the sum of first m natural numbers\n    sum_m = sum_natural_numbers(m)\n    \n    # Find the Eulerian number using the following formula:\n    # a(n, m) = n^m / (m * (m-1) *... * (m-n+1))\n    eulerian = sum_n ** m\n    \n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case: when n or m is zero, the Eulerian number is zero\n    if n == 0 or m == 0:\n        return 0\n    \n    # Recursive case: compute the Eulerian number as the sum of the Eulerian number for (n-1, m) and the Eulerian number for (n, m-1)\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        n, m = m, n\n    a = 1\n    for i in range(1, n+1):\n        a *= i\n    a *= m\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nm = int(input(\"Enter the value of m: \"))\nprint(\"Eulerian number a(n, m) =\", eulerian_num(n, m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(n):\n        a *= m\n    for i in range(1, m+1):\n        a *= i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    a = 0\n    for i in range(1, n+1):\n        a += fibonacci(i) * m\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Function to calculate the sum of numbers from 1 to n\n    def sum_of_numbers(n):\n        return n * (n + 1) // 2\n\n    # Function to check if a(n, m) is a power of 2\n    def is_power_of_2(a):\n        return a > 0 and (a & (a - 1)) == 0\n\n    # Calculate the sum of numbers from 1 to 2^m\n    sum_of_numbers_pow2 = sum_of_numbers(2**m)\n\n    # Calculate the number of odd numbers in the range [1, n]\n    num_odd_numbers = sum_of_numbers(n) - sum_of_numbers_pow2\n\n    # Calculate the sum of numbers from 1 to 2^m - 2*m\n    sum_of_numbers_pow2_m = sum_of_numbers(2**m - 2*m)\n\n    # Check if a(n, m) is a power of 2 and if it satisfies the condition a(n, m) - a(1, m) = n\n    if is_power_of_2(num_odd_numbers) and num_odd_numbers == n - m + 1:\n        return 1\n    else:\n        return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the values of a(n, 0) and a(0, m)\n    a_nm0 = 1\n    a_0m = 1\n    # Iterate from n to 0 and m to 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            # Calculate the values of a(n, m) and store it in a_nm\n            a_nm = (a_nm0 * i) // (i - j)\n            # Update the values of a(n, 0) and a(0, m)\n            a_nm0 = a_nm\n            a_0m = a_nm - a_nm0\n    # Return the final value of a(n, m)\n    return a_nm"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 2 or m <= 2:\n        return 0\n    elif n == m:\n        return n\n    elif n > m:\n        return eulerian_num(n-1, m)\n    else:\n        return eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m\n    else:\n        return eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    else:\n        return n * eulerian_num(n-1, m-1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in input_list:\n        sublist.sort()\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n\ninput_list = [\n    ['apple', 'banana', 'cherry'],\n    ['orange', 'grape', 'kiwi'],\n    ['pear', 'peach', 'pineapple']\n]\n\nsort_sublists(input_list)\n\nfor sublist in input_list:\n    print(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) is bool and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) is bool and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the tuples to lists so we can modify them\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    # Append the list to the tuples\n    test_tup.extend(test_list)\n    # Convert the modified tuples back to tuples\n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += test_list\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the given lists into tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # Concatenate the two tuples\n    new_tup = test_list + test_tup\n    # Convert the concatenated tuple back into a list\n    new_list = list(new_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the list to the tuple\n    test_tup += test_list\n    \n    # Return the concatenated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the lists to tuples for concatenation\n    test_list_tup = tuple(test_list)\n    test_tup_list = list(test_tup)\n    \n    # Concatenate the two lists and tuples\n    result_list = test_list_tup + test_tup_list\n    \n    return result_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a min heap to store the merged list\n    min_heap = []\n\n    # add the elements of the three lists to the heap\n    heapq.heappush(min_heap, num1[0])\n    heapq.heappush(min_heap, num2[0])\n    heapq.heappush(min_heap, num3[0])\n\n    # pop the elements from the heap and add to the merged list\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0]:\n            heapq.heappush(min_heap, num1.pop(0))\n        elif num2[0] < num3[0]:\n            heapq.heappush(min_heap, num2.pop(0))\n        else:\n            heapq.heappush(min_heap, num3.pop(0))\n\n    # add the remaining elements to the merged list\n    merged_list = []\n    while len(num1) > 0:\n        heapq.heappush(min_heap, num1.pop(0))\n    while len(num2) > 0:\n        heapq.heappush(min_heap, num2.pop(0))\n    while len(num3) > 0:\n        heapq.heappush(min_heap, num3.pop(0))\n\n    # convert the min heap back to a list\n    merged_list = [heapq.heappop(min_heap) for _ in range(len(min_heap))]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists and merges them into a single sorted list.\n    '''\n    result = []\n    i = j = k = 0  # index for each list\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:  # num3[k] <= num1[i] and num3[k] <= num2[j]\n            result.append(num3[k])\n            k += 1\n    \n    # add the remaining elements from the lists\n    while i < len(num1):\n        result.append(num1[i])\n        i += 1\n    while j < len(num2):\n        result.append(num2[j])\n        j += 1\n    while k < len(num3):\n        result.append(num3[k])\n        k += 1\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine all the lists into one list\n    combined_list = num1 + num2 + num3\n    \n    # Use heapify to convert the combined list into a heap\n    heapq.heapify(combined_list)\n    \n    # Convert the heap back into a list\n    merged_list = []\n    while combined_list:\n        merged_list.append(heapq.heappop(combined_list))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the three lists into one list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list using heapq module\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge two sorted lists using heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    merged_list = []\n    while num1 and num2:\n        if num1[0] < num2[0]:\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n    # Append remaining elements from num1 or num2\n    merged_list += num1 if num1 else num2\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert all lists to lists of tuples\n    lst1 = [(x, x) for x in num1]\n    lst2 = [(y, y) for y in num2]\n    lst3 = [(z, z) for z in num3]\n\n    # merge three lists using heapq\n    merged_lst = heapq.merge(lst1, lst2, lst3)\n\n    # convert merged list back to list and return it\n    result = []\n    for x in merged_lst:\n        result.append(x[1])\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif heapq.heappop(num2) <= heapq.heappop(num3):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n\n    while num1 or num2 or num3:\n        if num1:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        if num2:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        if num3:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Convert the lists to sets so that we can sort them\n    set1 = set(num1)\n    set2 = set(num2)\n    set3 = set(num3)\n\n    # Merge the three sets into a single set\n    all_numbers = set1 | set2 | set3\n\n    # Convert the merged set back to a list and sort it\n    merged_list = sorted(list(all_numbers))\n\n    # Return the merged list as a string\n    return str(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # create three lists of numbers\n    lists = [num1, num2, num3]\n    # sort the lists using heapq\n    for i in range(len(lists)):\n        heapq.heapify(lists[i])\n    # merge the sorted lists using heapq\n    merged_list = []\n    while len(lists) > 0:\n        merged_list.append(heapq.heappop(lists[0]))\n        for i in range(1, len(lists)):\n            if len(lists[i]) > 0 and heapq.heappop(lists[i]) < heapq.heappop(lists[0]):\n                heapq.heappush(lists[0], heapq.heappop(lists[i]))\n    # return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    :param num1: List of numbers.\n    :param num2: List of numbers.\n    :param num3: List of numbers.\n    :return: A single sorted list containing all the elements of the input lists.\n    \"\"\"\n    # Use heapq to merge the three input lists into a single list\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n    # Merge the remaining elements of each input list\n    while num1:\n        heapq.heappush(merged_list, heapq.heappop(num1))\n    while num2:\n        heapq.heappush(merged_list, heapq.heappop(num2))\n    while num3:\n        heapq.heappush(merged_list, heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to integer\n    binary = int(s, 2)\n\n    # initialize count variable\n    count = 0\n\n    # loop n times\n    for i in range(n):\n        # rotate binary string by 1 bit left (i.e. left shift by 1)\n        binary = (binary << 1)\n\n        # if binary string has an odd value after rotating, increment count\n        if binary & 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # initialize variables\n    count = 0\n    index = 0\n\n    # loop through each character in the string\n    for char in s:\n\n        # if the character is 0, change it to 1\n        if char == '0':\n            s[index] = '1'\n            count += 1\n        # if the character is 1, leave it as is\n        else:\n            pass\n\n        # increment the index and the count\n        index = (index + 1) % len(s)\n\n    # rotate the string n times\n    for i in range(n):\n        s = s + s[:i]\n\n    # count the number of odd characters in the rotated string\n    count = 0\n    for char in s:\n        if char == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    binary_s = bin(int(s))[2:] #converting string to binary and removing '0b'\n    length = len(binary_s)\n    \n    odd_count = 0\n    \n    for i in range(n):\n        new_s = ''\n        for j in range(length):\n            if binary_s[j] == '1':\n                new_s += '0'\n            else:\n                new_s += '1'\n        binary_s = new_s\n        length = len(binary_s)\n    \n    for i in binary_s:\n        if int(i) == 1:\n            odd_count += 1\n    \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert binary string to list\n    binary = list(s)\n\n    # Initialize odd count to zero\n    count = 0\n\n    # Rotate binary list n times\n    for i in range(n):\n        binary.append(binary.pop(0))\n\n    # Iterate through binary list to count odd values\n    for num in binary:\n        if num % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Initialize variables\n    odd_count = 0\n    binary_string = s\n    number_of_rotations = n\n\n    # Rotate the binary string the given number of times\n    for _ in range(number_of_rotations):\n        binary_string = binary_string[-1] + binary_string[:-1]\n\n    # Iterate through the binary string and count the odd numbers\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    s = list(s) # convert the binary string to a list of binary digits\n    \n    for i in range(n): \n        # rotate the binary string by shifting the digits to the left\n        s = s[1:] + [s[0]]\n    \n    # count the number of odd digits in the rotated binary string\n    count = sum([1 for x in s if x % 2!= 0])\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: A binary string\n    :type s: str\n    :param n: The number of times to rotate the string\n    :type n: int\n    :return: The number of odd numbers after rotating the binary string the given number of times.\n    :rtype: int\n    \"\"\"\n\n    # Initialize a counter variable to keep track of the number of odd numbers after rotating the string\n    count = 0\n\n    # Convert the input string to a list of binary digits\n    digits = [int(digit) for digit in s]\n\n    # Loop n times to rotate the binary string\n    for _ in range(n):\n        # Reverse the order of the digits\n        digits.reverse()\n\n        # Loop through the reversed list and check if any odd number is found\n        for digit in digits:\n            if digit % 2 == 1:\n                count += 1\n                break\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize a counter variable\n    count = 0\n    \n    # Loop n times and rotate the binary string by 1 bit\n    for i in range(n):\n        # Convert the binary string to a list of 0s and 1s\n        binary_list = list(s)\n        \n        # Reverse the binary string\n        binary_list.reverse()\n        \n        # Convert the reversed binary string back to a string\n        s = ''.join(binary_list)\n        \n        # Check if the number of 1s is odd\n        if sum(1 for bit in s if bit == '1') % 2 == 1:\n            count += 1\n    \n    # Return the count of odd numbers with odd values after rotating the binary string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = ''.join(sorted([c for c in s][::-1]))\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[-1:] + s[:-1]\n        for j in range(len(s)):\n            if s[j] == '1':\n                count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Create an empty dictionary to store the common elements\n    common_dict = {}\n\n    # Loop through the nested lists\n    for item in nestedlist:\n        # Loop through the current item's values\n        for value in item:\n            # Check if the value is already in the dictionary\n            if value in common_dict:\n                # If it is, increment the count for that value\n                common_dict[value] += 1\n            # If the value is not in the dictionary, add it with a count of 1\n            else:\n                common_dict[value] = 1\n\n    # Find the common elements by looping through the dictionary\n    common_list = []\n    for key in common_dict:\n        if common_dict[key] == len(nestedlist):\n            common_list.append(key)\n\n    # Return the common elements\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Iterate through each list in the nested list\n    for lst in nestedlist:\n        # Iterate through each element in the list\n        for element in lst:\n            # Add the element to the set if it is not already present\n            if element not in common_elements:\n                common_elements.add(element)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.append(nestedlist[i][j])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in common_elements:\n                common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Helper function to check if two lists have common elements\n    def check_common(list1, list2):\n        common_elements = set(list1) & set(list2)\n        if common_elements:\n            return True\n        return False\n\n    # Check if all nested lists have same length\n    if all(len(nestedlist[0]) == len(nestedlist[i]) for i in range(len(nestedlist))):\n        # Create a set of common elements across all nested lists\n        common_elements = set.intersection(*[set(nestedlist[i]) for i in range(len(nestedlist))])\n\n        # Check if any common elements are found\n        if common_elements:\n            return list(common_elements)\n        else:\n            return \"No common elements found\"\n\n    else:\n        return \"Nested lists have different lengths\""
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Find the intersection of all nested lists\n    intersection = set(nestedlist[0]).intersection(*nestedlist[1:])\n    return list(intersection)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Using set() to find unique elements in the nested lists\n    unique_list = list(set(sum(nestedlist, [])))\n    \n    # Creating a dictionary to store the count of each unique element\n    count_dict = {}\n    for item in unique_list:\n        count_dict[item] = 0\n    \n    # Counting the occurrences of each unique element in the nested lists\n    for sublist in nestedlist:\n        for item in sublist:\n            count_dict[item] += 1\n    \n    # Creating a list of common elements\n    common_list = []\n    for item, count in count_dict.items():\n        if count == len(sublist):\n            common_list.append(item)\n    \n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        if num < 0:\n            return \"Negative integer is not allowed\"\n        else:\n            return \"The input is an integer\"\n    except ValueError:\n        return \"The input is not a valid integer\""
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_dict = True\n    for item in list1:\n        if item:\n            empty_dict = False\n            break\n    return empty_dict"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(len(x) == 0 for x in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Loop through the list of dictionaries\n    for i in list1:\n        # Check if the dictionary is empty\n        if not i:\n            # If it is empty, return False\n            return False\n    # If all dictionaries are not empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if len(i)!= 0:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a list and sum the elements\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result*10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    if not isinstance(nums, tuple) or not all(isinstance(num, int) and num > 0 for num in nums):\n        raise ValueError(\"Invalid input. Please enter a tuple of positive integers.\")\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i, row in enumerate(test_list):\n        for j, cell in enumerate(row):\n            try:\n                test_list[i][j] = float(cell)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through each sub-list in the list of lists\n    for sub_list in test_list:\n        # loop through each element in the sub-list\n        for element in sub_list:\n            # try to convert the element to a float\n            try:\n                float_element = float(element)\n                # replace the original element with the new float element\n                sub_list[sub_list.index(element)] = float_element\n            except ValueError:\n                # if the element cannot be converted to a float, do nothing\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, (str, int, float)):\n                try:\n                    element = float(element)\n                except ValueError:\n                    pass\n            row[test_list.index(row)] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                if isinstance(element, str):\n                    element = float(element.replace(',', '.'))\n                    sublist[sublist.index(element)] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                item = float(item)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string on the space character\n    words = string.split()\n    # Create a list of the words\n    word_list = []\n    for word in words:\n        # Add the word to the list\n        word_list.append(word)\n    # Return the list of words\n    return word_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # loop through the array and keep track of the elements we have seen\n    seen = [False] * len(arr)\n\n    # loop through the array and mark the element as seen if it appears only once\n    for i in range(len(arr)):\n        if not seen[arr[i]]:\n            seen[arr[i]] = True\n            break\n\n    # loop through the array again and return the element that appears only once\n    for i in range(len(arr)):\n        if not seen[arr[i]]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize the count and the element to be searched\n    count = 1\n    element = arr[0]\n\n    # Traverse the array from the second element\n    for i in range(1, len(arr)):\n        # If the current element is the same as the last searched element, increment the count\n        if arr[i] == element:\n            count += 1\n        # If the count reaches 2, return the last searched element\n        elif count == 2:\n            return element\n        # Otherwise, update the count and the last searched element\n        else:\n            count = 1\n            element = arr[i]\n\n    # If the loop completes without finding the element, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            count += 1\n        else:\n            unique_element = arr[i]\n            count = 1\n    if count == 1:\n        return unique_element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize variables to keep track of the current element and its count\n    current = None\n    count = 0\n\n    # Iterate through the array\n    for num in arr:\n        # If the current element is equal to the next element, increment its count\n        if current == num:\n            count += 1\n        # If the current element is not equal to the next element, update the current element and count\n        else:\n            current = num\n            count = 1\n\n    # If the array contains an element that appears only once, return it\n    if count == 1:\n        return current\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # iterate through the dictionary and find the element with frequency 1\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # if no element with frequency 1 is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Loop through the array and count the occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Loop through the dictionary and find the element that appears only once\n    for num, count in count_dict.items():\n        if count == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables\n    min_val = arr[0]\n    count = 1\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current value is greater than the minimum value, reset the minimum value and increment the count\n        if arr[i] > min_val:\n            min_val = arr[i]\n            count = 1\n        # If the current value is equal to the minimum value, increment the count\n        elif arr[i] == min_val:\n            count += 1\n            \n    # If the count is 1, return the minimum value\n    if count == 1:\n        return min_val\n    # If the count is greater than 1, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf') #initialize max_product to negative infinity\n    for i in range(len(list1)-1): #iterate over the list of tuples\n        for j in range(i+1,len(list1)): #iterate over the list of tuples starting from the next index of i\n            product = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1] #calculate the product of the two tuples\n            if abs(product) > max_product: #if the absolute value of the product is greater than the current maximum, update max_product\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    current_product = 1\n    max_product_tuple = None\n\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product > max_product:\n            max_product = product\n            max_product_tuple = tup\n        elif product > 0 and product < max_product:\n            current_product = product\n\n    return max_product_tuple, current_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][1] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][1] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i]*list1[j]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input, and returns the maximum absolute product between numbers in pairs of tuples within the list.\n\n    Args:\n    list1 (list of tuples): A list of tuples containing integers.\n\n    Returns:\n    int: The maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n    # Initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n\n    # Iterate over each tuple in the list\n    for i in range(len(list1)):\n        # Iterate over each tuple in the list after the current one\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product between the current and next tuple\n            product = abs(list1[i][0] * list1[j][1])\n\n            # Update the maximum product if the current product is greater\n            if product > max_product:\n                max_product = product\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            product = lst[i]*lst[j]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_amicable_numbers(limit):\n    \"\"\"\n    This function takes an integer `limit` as input and returns the sum of all the amicable numbers from 1 to that number.\n    \"\"\"\n    # Initialize a dictionary to store the sum of amicable numbers\n    amicable_numbers_dict = {}\n\n    # Iterate through all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(i):\n            # If it is, add it to the dictionary\n            amicable_numbers_dict[i] = sum(range(2, i))\n\n    # Return the sum of all the amicable numbers\n    return sum(amicable_numbers_dict.values())\n\ndef is_amicable(num):\n    \"\"\"\n    This function checks whether a given number is amicable or not.\n    \"\"\"\n    # Check if the number is divisible by any number in the range 2 to sqrt(num)\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If no divisor is found, the number is amicable\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n\n    for i in range(2, limit+1):\n        if i == 2:\n            amicable_numbers.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                amicable_numbers.append(i)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize a dictionary to store the count of each prime number up to a given limit\n    prime_counts = {i: 0 for i in range(1, limit + 1)}\n\n    # Check if a number is amicable by counting the factors of each number\n    for i in range(1, limit + 1):\n        if prime_counts[i] == 0:\n            # If the count of the number is 0, then it is a prime number\n            for j in range(i, limit + 1, i):\n                prime_counts[j] += 1\n\n    # Sum up all the amicable numbers\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if prime_counts[i] == 2:\n            # If the count of the number is 2, then it is an amicable number\n            amicable_sum += i\n\n    return amicable_sum\n\n\ndef main():\n    limit = int(input(\"Enter a limit: \"))\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is\", sum_amicable_numbers(limit))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n    # create a list to store the amicable numbers\n    amicable_numbers = []\n    # iterate through all numbers from 1 to limit\n    for num in range(1, limit+1):\n        # check if num is amicable to all numbers from 1 to limit-1\n        for i in range(1, limit):\n            if num == i or num % i == 0:\n                break\n        else:\n            # if num is not amicable to any number, add it to the list\n            amicable_numbers.append(num)\n    # sum up the amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if i < 12:\n            if i == sum_of_proper_divisors(i):\n                if sum_of_proper_divisors(i) == sum_of_proper_divisors(sum_of_proper_divisors(i)):\n                    amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(2, limit+1):\n        if i == sum or i == 1:\n            continue\n        for j in range(2, limit+1):\n            if j == i or i == j:\n                continue\n            if i+j == limit and i!= j:\n                sum += i + j\n                break\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == sum_of_proper_divisors(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef sum_of_proper_divisors(num):\n    \"\"\"\n    Write a function to find the sum of proper divisors of a number.\n    \"\"\"\n    sum_divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_divisors += i\n    return sum_divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i not in amicable_numbers and is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    sum1 = sum([i for i in range(1, int(num**0.5)+1) if num % i == 0])\n    sum2 = num - sum1\n    return sum1 == num and sum2 == num"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for num in range(1, limit+1):\n        if num!= 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                amicable_sum += num\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(1, limit + 1):\n        if i!= 1:\n            for j in range(1, i):\n                if i % j == 0:\n                    break\n            else:\n                if i!= j and i!= sum_of_squares(i):\n                    sum += i\n    return sum\n\n\ndef sum_of_squares(n):\n    \"\"\"\n    Calculate the sum of squares of all numbers from 1 to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+1j*b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters\n    ----------\n    a : float\n        The real part of the complex number.\n    b : float\n        The imaginary part of the complex number.\n\n    Returns\n    -------\n    angle : float\n        The angle of the complex number in radians.\n\n    Examples\n    --------\n    >>> angle_complex(3, 4)\n    0.7853981633974483\n    >>> angle_complex(1, 0)\n    0.0\n    >>> angle_complex(0, 1)\n    1.5707963267948966\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the real and imaginary parts of the complex number\n    real = a.real\n    imaginary = a.imag\n\n    # Use the math module to calculate the angle\n    angle_rad = cmath.phase(complex(real, imaginary))\n    angle_deg = angle_rad * 180.0 / cmath.pi\n\n    # Return the angle in degrees\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n-1):\n        if string[i:i+2] == '00':\n            max_diff = max(max_diff, 0)\n        elif string[i:i+2] == '11':\n            max_diff = max(max_diff, 1)\n        else:\n            max_diff = max(max_diff, 2)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    sub_str = string\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        if zeros > ones:\n            max_diff = max(max_diff, zeros - ones)\n        else:\n            max_diff = max(max_diff, ones - zeros)\n        sub_str = sub_str[1:]\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # initialize variables\n    count = 0\n    max_diff = 0\n    \n    # loop through each character in the string\n    for i in range(len(string)):\n        \n        # check if the current character is a 0 or a 1\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        \n        # check if the difference between the count of 0s and 1s is greater than the current maximum difference\n        diff = count - (count - 1)\n        if diff > max_diff:\n            max_diff = diff\n    \n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    # Convert the string to binary\n    binary = bin(int(string, 2))[2:]\n\n    # Initialize variables\n    zero_count = 0\n    max_diff = 0\n\n    # Iterate through the binary string\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            zero_count += 1\n        else:\n            zero_count = 0\n\n        # Update the maximum difference\n        diff = zero_count - (i + 1)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n    n = len(string)\n    \n    for i in range(n):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n            \n        if count_zero > count_one:\n            max_diff = max(max_diff, count_zero - count_one)\n            count_zero = 0\n            count_one = 0\n        else:\n            max_diff = max(max_diff, count_one - count_zero)\n            count_zero = 0\n            count_one = 0\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    diff = 0\n    count = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        if count > diff:\n            diff = count\n    return diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            zero_count = 0\n            one_count = 0\n            for j in range(i, n):\n                if string[j] == '0':\n                    zero_count += 1\n                elif string[j] == '1':\n                    one_count += 1\n                else:\n                    break\n                if zero_count == one_count:\n                    max_diff = max(max_diff, zero_count - one_count)\n                    break\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if count_0 > count_1:\n            max_diff = max(max_diff, count_0 - count_1)\n        else:\n            max_diff = max(max_diff, count_1 - count_0)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    \n    for i in range(1, len(string)):\n        if string[i] == '0' and string[i-1] == '1':\n            max_diff = max(max_diff, i)\n        elif string[i] == '1' and string[i-1] == '0':\n            max_diff = max(max_diff, len(string) - i)\n    \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    binary_string = ''.join(map(str, bin(int(string))[2:]))\n    n = len(binary_string)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = 0\n            for k in range(n):\n                if k == i or k == j:\n                    continue\n                if binary_string[k] == '0' and binary_string[i] == '0' and binary_string[j] == '0':\n                    diff += 1\n                elif binary_string[k] == '1' and binary_string[i] == '1' and binary_string[j] == '1':\n                    diff += 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    div1 = a\n    div2 = b\n    while div1 <= div2:\n        if div1 % div2 == 0:\n            divisors.append(div1)\n        div1 += 1\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes in two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        This function takes in two numbers as input and returns their greatest common divisor.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        \"\"\"\n        This function takes in two numbers as input and returns their least common multiple.\n        \"\"\"\n        return (a * b) // gcd(a, b)\n\n    divisors_a = [i for i in range(1, a+1) if a % i == 0]\n    divisors_b = [i for i in range(1, b+1) if b % i == 0]\n\n    common_divisors = []\n    for divisor_a in divisors_a:\n        for divisor_b in divisors_b:\n            if divisor_a == divisor_b:\n                common_divisors.append(divisor_a)\n\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    # function to find common divisors\n    def common_divisors(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # find common divisors of a and b\n    a_divisors = common_divisors(a)\n    b_divisors = common_divisors(b)\n\n    # find the sum of common divisors\n    sum_divisors = 0\n    for divisor in a_divisors:\n        if divisor in b_divisors:\n            sum_divisors += divisor\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function calculates the sum of common divisors of two numbers.\n    \"\"\"\n    if a == 0:\n        return 0\n    elif a < b:\n        return sum(a, b - a) + a\n    else:\n        return sum(a - b, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n    \n    def sum_of_common_divisors(a, b):\n        divisors_a = set()\n        divisors_b = set()\n        \n        for i in range(1, a+1):\n            if a % i == 0 and is_prime(i):\n                divisors_a.add(i)\n        \n        for i in range(1, b+1):\n            if b % i == 0 and is_prime(i):\n                divisors_b.add(i)\n        \n        return sum(divisors_a.intersection(divisors_b))\n    \n    return sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize variables for common divisor count and sum\n    count = 0\n    sum_divisors = 0\n    \n    # Loop through all numbers from 1 to the smaller number\n    for num in range(1, min(a, b) + 1):\n        # Check if the number is a common divisor of both numbers\n        if a % num == 0 and b % num == 0:\n            # Increment count and add to sum if the number is a common divisor\n            count += 1\n            sum_divisors += num\n            \n    # Return the sum of common divisors\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers a and b as input and returns their sum of common divisors.\n    \"\"\"\n\n    # Check if a is even or not\n    if a % 2 == 0:\n        a += 1\n\n    # Initialize the list of common divisors\n    common_divisors = []\n\n    # Iterate through all numbers from 1 to b\n    for i in range(1, b + 1):\n        # Check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the list of common divisors\n            common_divisors.append(i)\n\n    # Return the sum of the common divisors\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_sum = 0\n    if b == 0:\n        return 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisor_list = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisor_list.append(i)\n    if len(divisor_list) == 0:\n        print(\"No common divisors found.\")\n        return None\n    else:\n        return sum(divisor_list)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Step 1: Find all the common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Step 2: Find the sum of the common divisors\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y, -1, -1):\n        result += x * i\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        if y & 1:\n            product += x\n        x <<= 1\n        y >>= 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    # Split the string into words\n    words = str.split()\n    # Initialize an empty list to store the long words\n    long_words_list = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n characters\n        if len(word) > n:\n            # Append the word to the list of long words\n            long_words_list.append(word)\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    \n    # Check if all elements in the matrix are unique\n    if len(set(my_matrix))!= n * n:\n        return False\n    \n    # Check if the elements in each row are unique\n    for i in range(n):\n        if len(set(my_matrix[i]))!= n:\n            return False\n    \n    # Check if the elements in each column are unique\n    for j in range(n):\n        col = [row[j] for row in my_matrix]\n        if len(set(col))!= n:\n            return False\n    \n    # Check if the elements in each diagonal are unique\n    diag1 = [my_matrix[i][i] for i in range(n)]\n    if len(set(diag1))!= n:\n        return False\n    \n    diag2 = [my_matrix[i][n-i-1] for i in range(n)]\n    if len(set(diag2))!= n:\n        return False\n    \n    # All tests passed, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    # Check for equal number of rows and columns\n    if n!= len(set([row[:n] for row in my_matrix])):\n        return False\n    # Check for the sum of each row, column, and diagonal\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if row_sum!= col_sum or row_sum!= sum(my_matrix[i][j] for j in range(n)):\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the number of rows is equal to the number of columns\n    if rows!= cols:\n        return False\n\n    # Check if each row and column has the same sum\n    for i in range(rows):\n        for j in range(cols):\n            # Get the current element\n            current = my_matrix[i][j]\n\n            # Check if the current element is not the sum of the previous row elements\n            if i > 0:\n                prev_row_sum = my_matrix[i-1][j]\n                if current!= prev_row_sum:\n                    return False\n\n            # Check if the current element is not the sum of the previous column elements\n            if j > 0:\n                prev_col_sum = my_matrix[i][j-1]\n                if current!= prev_col_sum:\n                    return False\n\n    # Check if the sum of the diagonal elements is equal to the sum of the remaining elements\n    diag1_sum = 0\n    diag2_sum = 0\n    for i in range(rows):\n        diag1_sum += my_matrix[i][i]\n        diag2_sum += my_matrix[i][rows-i-1]\n\n    if diag1_sum!= diag2_sum:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # initialize variables\n    sum_of_rows = 0\n    sum_of_cols = 0\n    sum_of_main_diag = 0\n    sum_of_anti_diag = 0\n    is_magic_square = True\n    \n    # calculate the sums of the rows, columns, and main diagonal\n    for row in my_matrix:\n        sum_of_rows += sum(row)\n        sum_of_cols += sum(row)\n        if sum_of_rows == 0:\n            break\n    \n    # calculate the sums of the columns and anti-diagonal\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i == j:\n                sum_of_main_diag += my_matrix[i][j]\n            elif i+j == len(my_matrix)-1:\n                sum_of_anti_diag += my_matrix[i][j]\n    \n    # check if the matrix is a magic square\n    if sum_of_rows!= sum_of_cols!= sum_of_main_diag!= sum_of_anti_diag:\n        is_magic_square = False\n    \n    # return the result\n    return is_magic_square"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Check if all elements in each row and column are equal to the sum of its diagonal elements\n    for i in range(n):\n        # Check if the sum of the row indices is equal to the sum of the diagonal elements\n        if my_matrix[i][i]!= my_matrix[i][n-i-1] or my_matrix[i][i]!= my_matrix[n-i-1][i]:\n            return False\n    \n    # Check if the sum of the diagonal elements is equal to the sum of the elements in the matrix\n    for i in range(n):\n        if my_matrix[i][i]!= sum(my_matrix[i]) or my_matrix[i][i]!= sum(my_matrix[i][j] for j in range(n)):\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum variable\n    total = 0\n\n    # Check if the matrix is a 3x3 matrix\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # Check if the matrix is all unique numbers\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if len(set(my_matrix[i]))!= 1 or len(set(my_matrix[j]))!= 1:\n                return False\n\n    # Check the diagonals\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= total:\n            return False\n        if my_matrix[i][2 - i]!= total:\n            return False\n        total += 1\n\n    # Check the remaining squares\n    for i in range(3):\n        for j in range(3):\n            if my_matrix[i][j]!= total:\n                return False\n            total += 1\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    # check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            # check the row sum\n            if not sum(my_matrix[i]):\n                return False\n            # check the column sum\n            if not sum(my_matrix[j]):\n                return False\n            # check the diagonal sum\n            if not sum([my_matrix[i][j] for j in range(n)]):\n                return False\n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = 0\n    \n    # Check for rows and columns\n    for i in range(rows):\n        row_sum = 0\n        for j in range(cols):\n            row_sum += my_matrix[i][j]\n        if row_sum == magic_sum:\n            return True\n        if row_sum > magic_sum:\n            break\n        \n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += my_matrix[i][j]\n        if col_sum == magic_sum:\n            return True\n        if col_sum > magic_sum:\n            break\n        \n    # Check for diagonals\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                diagonal_sum = my_matrix[i][j]\n            elif i + j == rows - 1:\n                diagonal_sum = my_matrix[i][j]\n            else:\n                continue\n            if diagonal_sum == magic_sum:\n                return True\n            if diagonal_sum > magic_sum:\n                break\n    \n    for i in range(rows):\n        for j in range(cols):\n            if i == cols - j - 1:\n                diagonal_sum = my_matrix[i][j]\n            elif i + j == rows - 1:\n                diagonal_sum = my_matrix[i][j]\n            else:\n                continue\n            if diagonal_sum == magic_sum:\n                return True\n            if diagonal_sum > magic_sum:\n                break\n            \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    square_sum = sum(sum(row) for row in my_matrix)\n    if square_sum == 0:\n        return True\n\n    # Check if the matrix is a magic square\n    square_sum = sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix)))\n    if square_sum == 0:\n        return True\n\n    # Check if the matrix is a magic square\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diagonal_sum == 0:\n        return True\n\n    # Check if the matrix is a magic square\n    diagonal_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if diagonal_sum == 0:\n        return True\n\n    # The matrix is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # create a list to hold the sum of the rows\n    row_sums = []\n    # create a list to hold the sum of the columns\n    col_sums = []\n    # create a list to hold the sum of the diagonals\n    diagonal_sum = 0\n\n    # check the rows and columns of the matrix for each element\n    for i in range(len(my_matrix)):\n        # calculate the sum of the elements in the current row\n        row_sum = sum(my_matrix[i])\n        # add the sum to the row_sums list\n        row_sums.append(row_sum)\n\n        # calculate the sum of the elements in the current column\n        col_sum = sum([my_matrix[j][i] for j in range(len(my_matrix))])\n        # add the sum to the col_sums list\n        col_sums.append(col_sum)\n\n        # add the diagonal element to the diagonal_sum variable\n        diagonal_sum += my_matrix[i][i]\n\n    # check if the row_sums, col_sums, and diagonal_sum are equal\n    if row_sums == col_sums and row_sums == [i for i in range(1, len(my_matrix)+1)] and diagonal_sum == len(my_matrix)*len(my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_map[num] += 1\n        \n        if freq_map[num] > max_freq:\n            max_freq = freq_map[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with the highest frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_num = None\n\n    for num, count in freq.items():\n        if count == max_freq:\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_num = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        count[num] += 1\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)  # create a dictionary to store frequency of each item\n    \n    # loop through the list and increment frequency for each item\n    for num in nums:\n        freq[num] += 1\n    \n    # find the item with maximum frequency\n    max_freq = 0\n    max_num = None\n    \n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Loop through the list and increment the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the highest frequency\n    max_item = max(freq_dict, key=freq_dict.get)\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return ''.join(filter(lambda x: x not in vowels, str1[::-1]))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    result = ''\n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n            result = char + result\n        else:\n            result = char + result\n    return result[::-1] if vowel_count > 0 else str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = 'aeiouAEIOU'\n    result = ''\n\n    for char in str1:\n        if char in vowels:\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_list = []\n    for letter in str1:\n        if letter in vowels:\n            vowel_list.append(letter)\n    vowel_list.reverse()\n    return ''.join(vowel_list)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for i in str1:\n        if i not in vowels:\n            reversed_str += i\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    vowels_list = list(vowels)\n    str_list = list(str1)\n\n    for i in range(len(str_list)):\n        if str_list[i] in vowels:\n            str_list[i] = vowels_list.pop(0)\n\n    str1_reversed = \"\".join(str_list)\n\n    return str1_reversed\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(string):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_string = []\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] not in vowels:\n            reversed_string.append(string[i])\n    return ''.join(reversed_string)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Initialize an empty string\n    string = ''\n    # Iterate over the tuple\n    for item in tup1:\n        # Convert the item to a string and append to the string\n        string += str(item)\n    # Return the final string\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return str(tup1).join()"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(tup1, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [x for x in nums if x < 0]\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagons = [1]\n    for i in range(1, n+1):\n        hexagons.append(hexagons[i-1] + hexagons[i-2])\n    return hexagons[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth hexagonal number is:\", hexagonal_num(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Initialize the first two numbers of the sequence\n    num1 = 1\n    num2 = 6\n    \n    # Calculate the nth hexagonal number\n    for i in range(2, n+1):\n        num3 = num1 + num2\n        print(num3, end=\" \")\n        # Update the numbers\n        num1 = num2\n        num2 = num3\n        \n    print()"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case: if n=0, return 0\n    if n == 0:\n        return 0\n    # Base case: if n=1, return 1\n    elif n == 1:\n        return 1\n    # Base case: if n=2, return 2\n    elif n == 2:\n        return 2\n    # Base case: if n=3, return 6\n    elif n == 3:\n        return 6\n    # Base case: if n=4, return 12\n    elif n == 4:\n        return 12\n    # Recursive case: for other values of n, calculate the nth hexagonal number\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Calculate the length of the side of the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Calculate the number of triangles using this formula:\n    # n * (n - 1) / 2\n    num_triangles = n * (n - 1) // 2\n\n    # Calculate the number of squares using this formula:\n    # n * (n - 1) * (3 * n - 1) / 6\n    num_squares = n * (n - 1) * (3 * n - 1) // 6\n\n    # Calculate the number of pentagons using this formula:\n    # n * (3 * n - 1) / 2\n    num_pentagons = n * (3 * n - 1) // 2\n\n    # Calculate the sum of the lengths of the triangles and squares\n    hexagon_sum = num_triangles + num_squares\n\n    # Calculate the length of the side of the hexagon\n    hexagon_side = sqrt_n\n\n    # Calculate the number of hexagons using this formula:\n    # n * (2 * sqrt(3) - 1)\n    num_hexagons = n * (2 * sqrt(3) - 1) // 2\n\n    # Calculate the length of the base of the hexagon\n    hexagon_base = hexagon_side * sqrt(3) // 2\n\n    # Calculate the number of equal triangles using this formula:\n    # (n * (n - 1)) / 2\n    num_equal_triangles = (n * (n - 1)) // 2\n\n    # Calculate the number of equal squares using this formula:\n    # (n * (n - 1) * (3 * n - 1)) / 12\n    num_equal_squares = (n * (n - 1) * (3 * n - 1)) // 12\n\n    # Calculate the number of equal pentagons using this formula:\n    # (n * (3 * n - 1)) / 2\n    num_equal_pentagons = (n * (3 * n - 1)) // 2\n\n    # Calculate the number of equal hexagons using this formula:\n    # (n * (2 * sqrt(3) - 1)) / 2\n    num_equal_hexagons = (n * (2 * sqrt(3) - 1)) // 2\n\n    # Calculate the number of equal triangles that can fit on a side of the hexagon\n    num_triangles_on_side = num_triangles + num_pentagons + num_equal_triangles + num_equal_pentagons\n\n    # Calculate the number of equal squares that can fit on a side of the hexagon\n    num_squares_on_side = num_squares + num_equal_squares\n\n    # Calculate the number of equal pentagons that can fit on a side of the hexagon\n    num_pentagons_on_side = num_pentagons + num_equal_pentagons\n\n    # Calculate the number of equal hexagons that can fit on a side of the hexagon\n    num_hexagons_on_side = num_hexagons + num_equal_hexagons\n\n    # Calculate the number of equal triangles that can fit on the same side of a hexagon\n    num_triangles_on_hex = num_triangles_on_side // 2\n\n    # Calculate the number of equal squares that can fit on the same side of a hexagon\n    num_squares_on_hex = num_squares_on_side // 2\n\n    # Calculate the number of equal pentagons that can fit on the same side of a hexagon\n    num_pentagons_on_hex = num_pentagons_on_side // 2\n\n    # Calculate the number of equal hexagons that can fit on the same side of a hexagon\n    num_hexagons_on_hex = num_hexagons_on_side // 2\n\n    # Calculate the number of equal triangles that can fit on the same side of the hexagon\n    num_equal_triangles_on_side = num_equal_triangles + num_equal_pentagons\n\n    # Calculate the number of equal squares that can fit on the same side of the hexagon\n    num_equal_squares_on_side = num_equal_squares\n\n    # Calculate the number of equal pentagons that can fit on the same side of the hexagon\n    num_equal_pentagons_on_side = num_equal_pentag"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 1\n    for i in range(1, n + 1): \n        num += 2 * i \n    return num "
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first two hexagonal numbers\n    a = 1\n    b = 6\n    \n    # Loop through the remaining hexagonal numbers\n    for i in range(2, n+1):\n        c = (a+b)//2  # Calculate the midpoint of the current hexagon\n        a = b  # Update the first and second hexagon numbers to the midpoint\n        b = c  # Update the second and third hexagon numbers to the midpoint\n    \n    # Return the nth hexagonal number\n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num = num * 6 + 1\n        if i == 1:\n            hex_num = num\n        else:\n            hex_num = hex_num + num\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagons = [1]\n    while len(hexagons) < n:\n        hexagons.append(hexagons[-1] + hexagons[-2])\n    return hexagons[-1]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return 6*n**2 - 3*n + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return 1 + 6 * (n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i')\n    non_zero_count = array('i')\n    zero_count_sum = 0\n    non_zero_count_sum = 0\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n            zero_count_sum += 1\n        else:\n            non_zero_count.append(1)\n            non_zero_count_sum += 1\n    \n    if zero_count_sum == 0:\n        return 0\n    \n    ratio = non_zero_count_sum / zero_count_sum\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0 for i in range(len(nums))])\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    \n    non_zeros = array('i', [0 for i in range(len(nums))])\n    for i in range(len(nums)):\n        non_zeros[i] = nums[i] - zeros[i]\n    \n    return non_zeros[0] / non_zeros[-1]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if zero_count == 0:\n        return 0\n    else:\n        return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns a float representing the\n    ratio of zeroes to non-zeroes in the array.\n    \"\"\"\n    # initialize counters for non-zeroes and zeroes\n    non_zeroes = 0\n    zeroes = 0\n    \n    # iterate through the array and count non-zeroes and zeroes\n    for num in nums:\n        if num!= 0:\n            non_zeroes += 1\n        else:\n            zeroes += 1\n    \n    # calculate the ratio of non-zeroes to zeroes\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = array('i', [0] * len(nums))\n    non_zero_count = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(0)] += 1\n        else:\n            non_zero_count[non_zero_count.index(0)] += 1\n\n    zero_ratio = non_zero_count[non_zero_count.index(0)] / zero_count[zero_count.index(0)]\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    non_zero_count = sum(arr)\n    zero_count = len(nums) - non_zero_count\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count += 1\n        else:\n            zero_count += 1\n    return count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_arr = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            count_arr[count_arr.index(0) + 1] += 1\n\n    if sum(count_arr) == 0:\n        return 0.0\n\n    zero_count = sum(count_arr) - sum(count_arr) // 2\n    non_zero_count = sum(count_arr) // 2\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)  # convert array to integer array\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n    ratio = count / len(arr)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Count the number of zeroes and non-zeroes in the array\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = zeroes / non_zeroes\n    \n    # Return the ratio of zeroes to non-zeroes\n    return zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Find the sum of non-zero powers of 2\n    sum_of_powers_of_2 = 0\n    while n > 0:\n        if n % 2 == 1:\n            sum_of_powers_of_2 += 1\n        n //= 2\n    \n    # Check if the sum of powers of 2 is equal to the original number\n    if sum_of_powers_of_2 == n:\n        print(f\"{n} can be represented as sum of non-zero powers of 2.\")\n    else:\n        print(f\"{n} cannot be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n and returns True if it can be represented as a sum of non-zero powers of 2.\n    False otherwise.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += 1\n        n = n & (n - 1)\n    return count > 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def check_if_sum_of_powers_of_two(num): \n        '''\n        A helper function that checks whether a given number can be represented as sum of non-zero powers of 2 or not.\n        '''\n        if num == 0: \n            return True\n        else: \n            for i in range(2, int(num**0.5)+1): \n                if num % i == 0: \n                    if check_if_sum_of_powers_of_two(num//i): \n                        return True\n            return False\n\n    if check_if_sum_of_powers_of_two(n): \n        print(n, \"can be represented as sum of non-zero powers of 2.\")\n    else: \n        print(n, \"cannot be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize count of powers of 2\n    count = 0\n    \n    # Calculate the sum of powers of 2\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    \n    # Check if the sum of powers of 2 is equal to the given number\n    return count == (n-1) // 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count >= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    # Check if the number is a power of 2\n    elif n & (n-1) == 0:\n        return True\n    # Check if the number can be represented as sum of non-zero powers of 2\n    else:\n        # Initialize the variable to store the sum of non-zero powers of 2\n        power_sum = 0\n        # Iterate through each bit in the binary representation of the number\n        for bit in bin(n)[2:]:\n            # Check if the bit is 1\n            if bit == '1':\n                # Check if the power_sum is not a power of 2\n                if power_sum & (power_sum-1) == 0:\n                    return False\n                else:\n                    power_sum += 1\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # if n is 0, return True\n    if n == 0:\n        return True\n\n    # Initialize the sum to n\n    sum_ = n\n\n    # Loop until we find a power of 2 in the sum\n    while sum_ > 1:\n        # Check if the last digit of the sum is a power of 2\n        if sum_ % 2 == 0:\n            # If it is, divide the sum by 2 and check if it is still divisible by 2\n            sum_ //= 2\n            continue\n        # If we reach here, the sum is not divisible by 2 after the loop.\n        return False\n\n    # If we reach here, the sum is divisible by 2 after the loop.\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Helper function to check whether a number is power of 2 or not\n    def isPowerOfTwo(num):\n        return num!= 0 and (num & (num - 1)) == 0\n\n    # Helper function to count the number of set bits in a given number\n    def countSetBits(num):\n        count = 0\n        while num!= 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    # Helper function to check whether a number can be represented as sum of powers of 2\n    def canBeSumOfPowersOfTwo(num):\n        # Check if the number is power of 2\n        if not isPowerOfTwo(num):\n            return False\n\n        # Check if the number has at least two non-zero set bits\n        if countSetBits(num) < 2:\n            return False\n\n        # Check if the number can be represented as sum of powers of 2\n        for i in range(1, int(num**0.5) + 1):\n            if num - (1 << i) < 0:\n                break\n            if isPowerOfTwo(num - (1 << i)):\n                return True\n        return False\n\n    return canBeSumOfPowersOfTwo(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(num):\n        return (num & (num-1)) == 0\n    \n    def sum_of_powers_of_two(n):\n        total = 0\n        while n > 0:\n            if n & 1:\n                total += n\n            n >>= 1\n        return total\n    \n    if is_power_of_two(n):\n        return True\n    \n    if n == 0:\n        return True\n    \n    count = 0\n    while n:\n        n &= (n-1)\n        count += 1\n    \n    return sum_of_powers_of_two(count) == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Find the sum of non-zero powers of 2\n    power_of_two = 0\n    while n > 0:\n        if n & 1:\n            power_of_two += 1\n        n >>= 1\n    \n    # Check if the sum of non-zero powers of 2 is equal to the original number\n    if power_of_two == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Convert radius to radians and calculate circumference\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # using the formula for the circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r # use the formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n\nprint(circle_circumference(5))  # Output: 31.4159"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(item)\n        else:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    def flatten(lst):\n        flat = []\n        for item in lst:\n            if isinstance(item, list):\n                flat += flatten(item)\n            else:\n                flat.append(item)\n        return flat\n    \n    return flatten(test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    Example:\n    test_list = [1, [2, 3], [[4, 5], 6], [7, [8, 9]]]\n    extract_singly(test_list) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n\n    # Helper function to flatten a single list of lists into a single list of numbers\n    def flatten(nested_list):\n        return [num for sublist in nested_list for num in sublist]\n\n    # Call the flatten function on the test list to obtain a flattened list of numbers\n    flattened_numbers = flatten(test_list)\n\n    # Return the flattened list of numbers\n    return flattened_numbers"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        for subitem in item:\n            if isinstance(subitem, int):\n                result.append(subitem)\n    return result"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the unsorted part of the list\n        for j in range(i+1, len(nums)):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Bubble sort algorithm for pancake sort\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                # Swap elements if they are not sorted\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # copy the input list to avoid modifying the original one\n    nums = list(nums)\n\n    # create a list of indices for the pancakes\n    pancake_indices = [i for i in range(len(nums) - 1, -1, -1)]\n\n    # sort the list using the pancakes\n    while pancake_indices:\n        # choose the first pancake (which is the last one in the list)\n        current_index = pancake_indices.pop()\n\n        # find the smallest element in the remaining elements\n        smallest_index = current_index\n        for j in range(current_index, 0, -1):\n            if nums[j] < nums[smallest_index]:\n                smallest_index = j\n\n        # swap the elements at the current index and the smallest index\n        nums[current_index], nums[smallest_index] = nums[smallest_index], nums[current_index]\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Initialize the length of the list\n    n = len(nums)\n    \n    # Perform the pancake sort algorithm\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Reverse the unsorted part of the array\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]\n            \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the first i elements\n        max_idx = i\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the first element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    def flip(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        \n        flip(nums, i-1, max_index)\n        \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Initialize a list to keep track of swaps made in each iteration\n    swaps = [0] * n\n\n    # Main pancake sort loop\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the remaining unsorted array\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the element at the beginning of the unsorted array\n        if max_index!= 0:\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n            # Increment the number of swaps made in this iteration\n            swaps[max_index] += 1\n\n        # Decrement the size of the unsorted array by 1\n        for j in range(max_index, i):\n            swaps[j] += 1\n\n    # Print the number of swaps made in each iteration\n    for i in range(n):\n        print(\"Iteration\", i+1, \":\", swaps[i])\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def heapify(nums, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and nums[left] > nums[largest]:\n            largest = left\n\n        if right < n and nums[right] > nums[largest]:\n            largest = right\n\n        if largest!= i:\n            swap(nums, i, largest)\n            heapify(nums, n, largest)\n\n    def sort_helper(nums, n):\n        for i in range(n - 1, 0, -1):\n            swap(nums, 0, i)\n            heapify(nums, i, 0)\n\n    sort_helper(nums, len(nums))\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # One by one move boundary of the pancake\n    for start in range(n):\n        # Find the maximum element in remaining unsorted part\n        max_idx = start\n        for end in range(start+1, n):\n            if nums[end] > nums[max_idx]:\n                max_idx = end\n        \n        # Swap the maximum element with the first element\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n        \n        # Reverse the pancake by placing the start element at the end.\n        # This is like a reverse insertion sort for a circular list.\n        end = start\n        while end >= 0:\n            nums[end], nums[start] = nums[start], nums[end]\n            end -= 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Traverse through all array elements\n    for i in range(n):\n        # Find the maximum element in remaining unsorted array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function counts the number of identical items in the same position of three given lists.\n\n    Args:\n    list1 (list): A list of integers.\n    list2 (list): A list of integers.\n    list3 (list): A list of integers.\n\n    Returns:\n    int: The number of identical items in the same position of three given lists.\n    \"\"\"\n\n    count = 0\n\n    # Loop through the lists and compare each item with the next item in each list\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            for j in range(len(list1)):\n                if j!= i and list1[i] == list3[j]:\n                    count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initialize max_diff to a very large number\n    max_diff = float('-inf')\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Loop through the remaining elements in the array\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the two elements and update max_diff if necessary\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # initialize maximum difference to 0\n    max_diff = 0\n    \n    # loop through each element in the array\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            # calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            \n            # update the maximum difference if the current difference is greater\n            if diff > max_diff: \n                max_diff = diff\n    \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    \n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is non-zero\n    if discriminant < 0:\n        return None\n    \n    # Find the two solutions\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Return the tuple of solutions\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are not zero\n    if a == 0 or b == 0:\n        return None\n    \n    # check if there exists a non-zero rational multiple of gcd(a, b) that satisfies n = ax + by\n    r = a*b // gcd(a, b)\n    while r * r <= n:\n        x = (n - r*b) // (a*r)\n        y = r\n        if a*x + b*y == n:\n            return (x, y)\n        r += 1\n    \n    # if no solution exists, return None\n    return None\n\ndef gcd(a, b):\n    '''\n    Return the greatest common divisor of a and b.\n    '''\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if there exists a solution\n    if (a == 0 and b!= 0) or (b == 0 and a!= 0):\n        return None\n    else:\n        # Calculate the discriminant\n        disc = b**2 - 4*a*n\n        if disc < 0:\n            return None\n        else:\n            # Calculate the roots of the discriminant\n            root1 = (-b + disc**0.5)/(2*a)\n            root2 = (-b - disc**0.5)/(2*a)\n            return (root1, root2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == 0:\n            return None\n        else:\n            return None, None\n    else:\n        x0 = (n - b) / a\n        y0 = -(a * x0) + n\n        x = x0.round()\n        y = y0.round()\n        if x0.is_integer() and y0.is_integer():\n            return (x, y)\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # check if there is a solution\n    if discriminant < 0:\n        return None\n    \n    # calculate the two roots\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    # sort the roots in ascending order\n    if x1 > x2:\n        x1, x2 = x2, x1\n    \n    # check if there are two distinct roots\n    if x1 == x2:\n        return None\n    \n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1, x2 = 0, a\n    y1, y2 = 0, b\n\n    while x2 <= n:\n        if a * x2 + b * x1 == n:\n            return (x1, x2)\n        elif a * x2 + b * x1 < n:\n            x1 += 1\n        else:\n            x2 -= 1\n        x2 += 1\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Get the discriminant\n    d = b**2 - 4*a*n\n\n    # Check if there is a solution\n    if d < 0:\n        return None\n\n    # Calculate the real and imaginary parts of the roots\n    if a > 0:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n    else:\n        x1 = (-b - d**0.5)/(2*a)\n        x2 = (-b + d**0.5)/(2*a)\n\n    # Return the solution as a tuple\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the first two integers x and y such that ax + by = n\n    x1 = int((-b - n) / a)\n    y1 = int((x1 * a) / b)\n\n    x2 = int((-b + n) / a)\n    y2 = int((x2 * a) / b)\n\n    # Check if there are two distinct solutions\n    if x1 == x2 or y1 == y2:\n        return None, None\n    else:\n        return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize the variables\n    x = y = None\n    # Iterate until we find a solution\n    while x is None or y is None:\n        # Calculate the next value of x and y\n        if a == 0:\n            x = y\n            y = n // b\n        else:\n            d = b**2 - 4*a*n\n            if d > 0:\n                x1 = (-b + d**0.5) / (2*a)\n                x2 = (-b - d**0.5) / (2*a)\n            else:\n                x1 = (-b) / (2*a)\n                x2 = x1\n            x = min(x1, x2)\n            y = max(x1, x2)\n        # Check if the solution satisfies the condition\n        if x is not None and y is not None and x*a + y*b == n:\n            return (x, y)\n    # If we reach this point, no solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-10000, 10000):\n        for y in range(-10000, 10000):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set to store the unique elements from list2\n    set2 = set(list2)\n    # Use a list comprehension to create a new list with the elements from list1 that are not present in set2\n    new_list = [x for x in list1 if x not in set2]\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Check if list2 is empty\n    if not list2:\n        return list1\n\n    # Traverse through list1\n    for i in range(len(list1)):\n        # Check if the current element is in list2\n        if list1[i] in list2:\n            # Remove the element from list1\n            del list1[i]\n            # Decrement the length of the list\n            len_list1 = len(list1)\n            i -= 1\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using a set to store unique elements of list1\n    unique_list1 = list(set(list1))\n    # Using a for loop to iterate over unique_list1\n    for element in unique_list1:\n        # Using a while loop to iterate over list2\n        index = 0\n        while index < len(list2):\n            if list2[index] == element:\n                del list2[index]\n            else:\n                index += 1\n    # Returning the modified list2\n    return list2"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(n//2):\n            result += (n - 2*i)\n        return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_val = 0\n    for i in range(n // 2 + 1):\n        sum_val += n - 2 * i\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # initialize the sum to 0\n    sum = 0\n    \n    # calculate the sum of the series using a loop\n    for i in range(n // 2):\n        sum += n - 2 * i\n    \n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n - sum_series(n - 1) - 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    elif n % 2 == 0:\n        return sum_series(n // 2) + (n // 2) * (n // 2)\n    else:\n        return sum_series(n // 2) + (n // 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    i = 0\n    total_sum = 0\n\n    while n - 2 * i >= 0:\n        total_sum += n - 2 * i\n        i += 1\n\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # Initialize sum variable\n    sum = 0\n    \n    # Loop through the even numbers from i=0 to n // 2\n    for i in range(0, n//2+1):\n        # Calculate the sum of the even numbers up to (n - 2*i)\n        sum += (n - 2*i)\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        r = s / tan(pi / l)\n        area += r * (i + 1)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using Heron's formula\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (tan(pi/l) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (1/2) * s * (s - (l**2)**(1/2))\n    return area\n\nNow we can call the function with the given values:\n\ns = 10\nn = 3\narea_polygon(s, n)\n\nThis will output the value 36.891015625."
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s-l) * l) / 2 / pi\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = (i * 360) / l\n        area += s * tan(angle * pi / 180)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, n):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the sides of the polygon\n    sides = [(s / n) * (2 * pi) / n, s]\n\n    # Calculate the area of each polygon by using the formula for a right triangle\n    area = 0\n    for side in sides:\n        area += (side[0] + side[1]) / 2 * tan(pi / 4)\n\n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using the formula A = (s * (s-1) *... * (s-n+1)) / (2 * pi * (s)^2)\n    area = (s * (s-1) *... * (s-l+1)) / (2 * pi * (s)**2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter of the polygon\n    perimeter = s * l\n    # calculate the area of a regular polygon using the formula:\n    # area = (1/2) * base * height\n    # where base and height are calculated as follows:\n    # base = (2 * s) / tan(pi/l)\n    # height = 0.5 * s\n    # tan(pi/l) is the tangent of pi/l\n    base = (2 * s) / tan(pi/l)\n    height = 0.5 * s\n    area = (base * height)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the sum of the divisors of n \n    div1 = math.factorial(n) \n    div2 = 1 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div2 += math.factorial(i) \n            div2 += math.factorial(n//i) \n    # check if the sum of the divisors is the same \n    if div1 == div2: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(i for i in range(1, n+1) if n % i == 0)\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []  # to store the divisors of n\n    for i in range(1, int(math.sqrt(n))+1):  # calculate the divisors of n\n        if n % i == 0: \n            div_list.append(i)  # add i to the list of divisors of n\n    div_sum = sum(div_list)  # calculate the sum of the divisors of n\n    if div_sum == n:  # check if the sum of the divisors is equal to n\n        print(f\"{n} and its divisors are equal\")\n    else:\n        print(f\"{n} and its divisors are not equal\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2: \n        return False\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_sum += i\n            if i!= n/i: \n                div_sum += n/i\n    if div_sum == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Check if the input is valid\n    if n <= 1:\n        return \"Invalid input!\"\n    # Calculate the sum of divisors\n    div_sum = sum(math.factorial(int(d)) for d in range(1, int(math.sqrt(n)) + 1))\n    # Check if the sum of divisors of n and n-1 are the same\n    if div_sum == n * (n - 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    def sum_of_divisors(n):\n        divisors = []\n        i = 1\n        while i <= int(math.sqrt(n)):\n            if n % i == 0:\n                if i!= n // i:\n                    divisors.append(i)\n                    divisors.append(n // i)\n            i += 1\n        return divisors\n    \n    # Calculate the sum of the divisors of m\n    def sum_of_divisors_m(m):\n        divisors = []\n        i = 1\n        while i <= int(math.sqrt(m)):\n            if m % i == 0:\n                if i!= m // i:\n                    divisors.append(i)\n                    divisors.append(m // i)\n            i += 1\n        return divisors\n    \n    # Compare the two sums of divisors\n    def compare_sums(n, m):\n        sums = sum_of_divisors(n)\n        sums_m = sum_of_divisors_m(m)\n        return sums == sums_m\n    \n    # Call the function and print the result\n    if compare_sums(n, n+1):\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i!= int(n/i): \n                return False \n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_of_divisors += i + n // i\n    return sum_of_divisors == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    i = 1\n    while i <= n: \n        if n % i == 0: \n            divisors.append(i)\n        i += 1\n    \n    if len(divisors) == 0: \n        return False\n    \n    divisors.sort()\n    return sum(divisors[:-1]) == sum(divisors[1:])"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Define the English alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is in the English alphabet and not a whitespace character\n        if char in alphabet and char!= \" \":\n            # If the character has not been seen before, set its count to 1\n            if char not in char_count:\n                char_count[char] = 1\n            # If the character has been seen before, increment its count by 1\n            else:\n                char_count[char] += 1\n\n    # Loop through each position in the English alphabet and add the count of characters at that position to a list\n    position_counts = []\n    for position in range(len(alphabet)):\n        position_count = 0\n        if alphabet[position] in char_count:\n            position_count = char_count[alphabet[position]]\n        position_counts.append(position_count)\n\n    # Return the list of position counts\n    return position_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in english_alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase and sort the characters in ascending order\n    sorted_str = sorted(str1.lower())\n    # Initialize a dictionary to store the count of characters at each position in the sorted string\n    char_count = {}\n    # Iterate through the characters in the sorted string\n    for i in range(len(sorted_str)):\n        # If the character is not already in the dictionary, add it with a count of 1\n        if sorted_str[i] not in char_count:\n            char_count[sorted_str[i]] = 1\n        # Otherwise, increment the count of the character in the dictionary\n        else:\n            char_count[sorted_str[i]] += 1\n    # Initialize a counter variable to store the number of occurrences of each character in the sorted string\n    count = 0\n    # Iterate through the characters in the sorted string\n    for i in range(len(sorted_str)):\n        # If the character is already in the dictionary, increment the counter\n        if sorted_str[i] in char_count:\n            count += char_count[sorted_str[i]]\n    # Return the count of occurrences of each character in the sorted string\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    # Iterate through each character in the input string\n    for char in str1:\n        # If the character is in the English alphabet, count it at its position in the alphabet\n        if 'a' <= char <= 'z':\n            if char not in char_count:\n                char_count[char] = 1\n            else:\n                char_count[char] += 1\n    # Return the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        char = chr(i+97)\n        if char in str1.lower():\n            count += str1.lower().count(char)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    for char in str1.lower():\n        if char in str1.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    This function counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet (case insensitive)\n    char_count = {}\n    # Iterate through each character in the string\n    for char in str1:\n        # Convert the character to lowercase and store the lowercase version of the character as the key in the dictionary\n        lowercase_char = char.lower()\n        char_count[lowercase_char] = char_count.get(lowercase_char, 0) + 1\n    # Return the dictionary containing the count of characters at each position in the English alphabet (case insensitive)\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(i+97)) == 0:\n            count += str1.lower().count(chr(i+97))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize the dictionary to store the count of characters at each position\n    count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not a letter, skip it\n        if not char.isalpha():\n            continue\n        \n        # If the character is a letter, add it to the dictionary with a value of 1\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    # Initialize the result variable to store the count of characters at the same position in the English alphabet\n    result = 0\n    \n    # Loop through each letter in the English alphabet\n    for i in range(ord('a'), ord('z') + 1):\n        # If the letter has a count in the dictionary, increment the result variable\n        if chr(i) in count and count[chr(i)] > 0:\n            result += count[chr(i)]\n    \n    # Return the result\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower()[i] == str(chr(i + 97)).lower():\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0!= A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to a binary string\n    binary = bin(n)[2:]\n    \n    # Initialize power variable with 1\n    power = 1\n    \n    # Loop through each bit of the binary string\n    for bit in binary:\n        # If the bit is 0, multiply power by 2\n        if bit == '0':\n            power *= 2\n        # If the bit is 1, multiply power by 1\n        else:\n            break\n    \n    # Return the result\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n % 2 == 0:  # check if n is even\n        n = n // 2  # reduce n by half\n    while n < 2:  # check if n is less than 2\n        n = n * 2  # double n until it is greater than or equal to 2\n    return n  # return the final value of n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # loop through all the powers of 2 up to the square root of n\n        for i in range(int(n**0.5)+1):\n            # if the current power is greater than or equal to n, return it\n            if 2**i >= n:\n                return 2**i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Initialize power to 1\n    power = 1\n\n    # While the power is less than or equal to the square root of n\n    while power <= int(n ** 0.5):\n\n        # If n is a multiple of power, return power\n        if n % power == 0:\n            return power\n\n        # If n is not a multiple of power, increment power by 1\n        else:\n            power += 1\n\n    # If n is greater than the square root of n, return power + 1\n    return power + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**int(np.ceil(np.log2(n)))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes a number `n` as input and returns the smallest power of 2 greater than or equal to `n`.\n    \"\"\"\n    # Find the least significant bit of n (LSB)\n    lsb = 0\n    while (n & 1) == 0:\n        lsb += 1\n        n >>= 1\n    \n    # Find the next power of 2 greater than or equal to n\n    next_power_of_2 = 1 << lsb\n    \n    return next_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize the power to 1 \n    power = 1\n    \n    # loop while the power is less than or equal to the square root of n\n    while power <= int(n**0.5):\n        # if the power is less than or equal to the square root of n, check if the next number is greater than or equal to n\n        if power * power <= n:\n            power *= 2\n        else:\n            # if the next number is less than n, divide the power by 2 until the next number is greater than or equal to n\n            while power * power > n:\n                power /= 2\n    \n    # return the power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n\n    Args:\n        a (list): A list of numbers.\n        x (int): The number to be searched in the list.\n\n    Returns:\n        int: The number of occurrences of x in a.\n    \"\"\"\n\n    count = 0\n\n    for num in a:\n        if num == x:\n            count += 1\n\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(lst, x):\n    \"\"\"\n    This function takes a list and a number x and returns the number of times x appears in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[i:j] for i in range(m, n+1) for j in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return None\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Invalid indices\"\n    # Find the sum of numbers in the specified range\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # check if indices are valid\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        raise ValueError(\"Invalid index\")\n\n    # check if list is empty\n    if len(list1) == 0:\n        raise ValueError(\"List is empty\")\n\n    # calculate the sum of numbers in the range\n    sum_range = sum(list1[m:n+1])\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > len(list1) - 1 or n < 0 or n > len(list1) - 1:\n        return None\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list += i\n    return sum_list"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the length of each side\n    s1 = 5*a\n    s2 = 5*a\n    s3 = 5*a\n    s4 = 5*a\n    s5 = 5*a\n\n    # calculate the perimeter of the pentagon using Heron's formula\n    perimeter = 5*s1 + 5*s2 + 5*s3 + 5*s4 + 5*s5\n\n    return round(perimeter, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n\n    # Using the formula for the area of a regular pentagon,\n    # we can calculate the area of the pentagon and then find its perimeter.\n    area = 5 * a * a / 2\n    perimeter = 5 * a\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # calculate the area of the pentagon using Heron's formula\n    s = (3 * a ** 2) / (1 - math.cos(math.pi / 5))\n    # calculate the perimeter using 5 sides and s\n    p = 5 * s\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * a * math.sin(math.pi/5)\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Formula for the perimeter of a regular pentagon: 5a/4 = 5*a^2\n    perimeter = 5 * a ** 2 / 4\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the pentagon\n    half_perimeter = 5 * a * math.sin(math.pi / 5)\n\n    # Calculate the total perimeter of the pentagon\n    total_perimeter = 5 * a + half_perimeter\n\n    # Return the total perimeter of the pentagon\n    return total_perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a*math.sin(math.pi/5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi/5)\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n            if s[i+1:i+3] == 'td':\n                count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    # Check if all the other elements in the tuple have the same data type as the first element\n    for element in test_tuple[1:]:\n        if not isinstance(element, type(first_element)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Convert all elements in tuple to their respective data types\n    types = [type(x) for x in test_tuple]\n\n    # Check if all data types are same\n    if all(type == types[0] for type in types):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple is not empty\n    if len(test_tuple) == 0:\n        return False\n    \n    # initialize the first element of the tuple\n    first_element = test_tuple[0]\n    \n    # loop through the tuple and check if each element has the same data type as the first element\n    for element in test_tuple:\n        if type(element)!= type(first_element):\n            return False\n    \n    # if the loop completes without returning False, then all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # initialize a variable to keep track of the data type of the first element\n    data_type = type(test_tuple[0])\n    \n    # loop through each element in the tuple\n    for element in test_tuple:\n        # check if the data type of the current element is the same as the first element\n        if type(element)!= data_type:\n            # if not, return False because the data types are not the same\n            return False\n    \n    # if all the elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not test_tuple:  # empty tuple\n        return True\n    \n    # get the first element\n    first_element = type(test_tuple[0])\n    \n    # check if all other elements have the same data type as the first element\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    data_type = type(first_element)\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # initialize variables\n    count = 0\n    majority_count = 0\n\n    # loop through the array and count the occurrences of the element\n    for i in arr:\n        if i == x:\n            count += 1\n\n        # if the count reaches n/2, increment the majority count and reset the count\n        if count == n//2:\n            majority_count += 1\n            count = 0\n\n    # if the count is greater than n/2, it means the element is not the majority\n    if count > n//2:\n        return False\n\n    # if the majority count is greater than or equal to n/2, it means the element is the majority\n    if majority_count >= n//2:\n        return True\n\n    # if the element is not the majority, it can't be the majority in this case\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    return ''.join([chr(ord(c) - 1) if (ord(c) % 2) == 0 else c for c in str])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the odd index values of the input string removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Removes odd index values from a given string.\n    \"\"\"\n    return \"\".join(string[i] for i in range(len(string)) if i % 2 == 1)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and removes the characters with odd index values.\n    '''\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i%2!=0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # if a is less than b and a is less than c\n    if a < b and a < c:\n        return a\n    # if b is less than a and b is less than c\n    elif b < a and b < c:\n        return b\n    # else c is the minimum\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # Return the minimum of the three numbers\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # initialize a variable to store the number of unset bits in the given range\n    unset_bits = 0\n    \n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # check if the i-th bit is unset\n        if n & (1 << i) == 0:\n            unset_bits += 1\n    \n    # check if all bits are unset in the given range or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # loop through all bits in the range\n    for i in range(l, r + 1):\n        # check if the bit is set in the binary representation of n\n        if bin(n & (1 << i)).count('1') == 0:\n            # if all bits are set, return False\n            return False\n    # if all bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Check if n is a valid number\n    if not (isinstance(n, int) and n >= 0):\n        return False\n    \n    # Check if l is a valid number\n    if not (isinstance(l, int) and l >= 0):\n        return False\n    \n    # Check if r is a valid number\n    if not (isinstance(r, int) and r >= 0):\n        return False\n    \n    # Check if l is less than or equal to r\n    if l > r:\n        return False\n    \n    # Calculate the number of bits in n\n    num_bits = len(bin(n)[2:])\n    \n    # Check if r is less than or equal to the number of bits in n\n    if r > num_bits:\n        return False\n    \n    # Calculate the range of bits that are unset in n\n    unset_bits = range(l, r+1)\n    unset_bits.sort()\n    \n    # Check if all the bits in unset_bits are set to 1\n    if all(bit in unset_bits for bit in range(num_bits)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a variable to store the difference of r and l\n    diff = r - l\n    # create a set of all possible combinations of bits set to 1 in the range\n    set_bits = {(i + l) % 2**diff for i in range(2**diff)}\n    # check if the intersection of the set of all possible combinations of bits set to 1 in the range with the given number is empty\n    return not set_bits.intersection(set(bin(n)[2:]))"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i).count('1')!= n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if i & n:  # check if the current number is not equal to zero and has any unset bits\n            return False  # if any bit is set, return False\n    return True  # if all the bits are unset, return True\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range to a binary string\n    bin_str = bin(r)[2:]  # strip the '0b' prefix and '0o' prefix\n\n    # Determine if all the bits are set in the range\n    all_bits_set = True\n    for bit in bin_str:\n        if bit == '0':\n            all_bits_set = False\n            break\n\n    # If all the bits are set, return True\n    if all_bits_set:\n        return True\n\n    # If not, check if all the bits in the given range are set\n    for i in range(l, r+1):\n        bin_str = bin(i)[2:]  # strip the '0b' prefix and '0o' prefix\n        for bit in bin_str:\n            if bit == '0':\n                all_bits_set = False\n                break\n        if not all_bits_set:\n            break\n\n    # If all the bits are set, return True\n    if all_bits_set:\n        return True\n\n    # If not, return False\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a counter to keep track of unset bits\n    unset_bits = 0\n\n    # Iterate through each bit from least significant bit to most significant bit\n    for i in range(l, r + 1):\n        # Check if the bit is unset\n        if n & (1 << i) == 0:\n            # Increment the counter\n            unset_bits += 1\n\n    # Check if all the bits are unset\n    if unset_bits == 0:\n        print(\"All the bits are unset in the given range\")\n    else:\n        print(\"Not all the bits are unset in the given range\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the mask to 0 for each bit in the given range\n    mask = 0\n    for i in range(l, r+1):\n        mask |= 1 << i\n\n    # XOR the given number with the mask to check whether all bits are set in the given range or not\n    return (n ^ mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits\n    unset_count = 0\n\n    # Iterate through the given range\n    for i in range(l, r + 1):\n        # Calculate the set bits in the current number\n        curr_num = bin(i)[2:]\n\n        # Subtract the unset bits from the set bits in the current number to get the unset bits count\n        unset_count += len(n) - len(curr_num)\n\n        # If all unset bits are set, return True\n        if unset_count == 0:\n            return True\n\n    # If all unset bits are not set, return False\n    return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # First, separate the array into two lists: positive and negative elements\n    positive = [x for x in arr if x >= 0]\n    negative = [x for x in arr if x < 0]\n\n    # Next, sort the negative elements in descending order\n    negative.sort(reverse=True)\n\n    # Finally, re-arrange the elements by concatenating the two lists\n    result = negative + positive\n    result.sort()\n\n    # Return the sorted array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize variables for positive and negative elements\n    positive = []\n    negative = []\n    \n    # loop through the array\n    for i in range(n):\n        # if the element is positive, append it to the positive list\n        if arr[i] > 0:\n            positive.append(arr[i])\n        # if the element is negative, append it to the negative list\n        else:\n            negative.append(arr[i])\n    \n    # add the remaining elements to the end of the positive list\n    for i in range(n, len(arr)):\n        positive.append(arr[i])\n    \n    # concatenate the positive and negative lists\n    result = positive + negative\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # initialize two pointers for positive and negative elements\n    pos_ptr = 0\n    neg_ptr = 0\n\n    # loop through the array and swap elements if needed\n    while neg_ptr < n and pos_ptr < len(arr):\n        if arr[neg_ptr] < 0:\n            # swap the elements if the negative element is closer to the end of the array\n            if abs(neg_ptr - pos_ptr) > abs(neg_ptr - len(arr) - pos_ptr):\n                arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n            # increment the negative pointer if the element is closer to the end\n            neg_ptr += 1\n        else:\n            # swap the elements if the positive element is closer to the end of the array\n            if abs(pos_ptr - neg_ptr) > abs(pos_ptr - len(arr) - neg_ptr):\n                arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n            # increment the positive pointer if the element is closer to the end\n            pos_ptr += 1\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[neg_count], arr[i] = arr[i], arr[neg_count]\n            neg_count += 1\n        else:\n            arr[pos_count], arr[i] = arr[i], arr[pos_count]\n            pos_count += 1\n        i += 1\n    while pos_count < len(arr):\n        arr[pos_count], arr[neg_count] = arr[neg_count], arr[pos_count]\n        pos_count += 1\n        neg_count += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # find the absolute values of all elements in the array\n    abs_arr = [abs(x) for x in arr]\n\n    # sort the absolute values in ascending order\n    abs_arr.sort()\n\n    # find the index where the first negative value appears\n    neg_idx = abs_arr.index(-abs_arr[0])\n\n    # create a list to store the re-arranged elements\n    re_arr = []\n\n    # add negative values to the beginning of the list\n    re_arr += arr[:neg_idx]\n\n    # add the positive values to the end of the list\n    re_arr += arr[neg_idx:]\n\n    # return the re-arranged array\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers, i and j, to keep track of the first and last positive elements respectively\n    i = 0\n    j = n - 1\n\n    # Iterate over the array starting from the second last element\n    for k in range(n-2, -1, -1):\n        # If the element at index i is negative, then move the element at index j to its correct position (i.e., before the element at index i)\n        if arr[k] < 0:\n            arr[k], arr[i] = arr[i], arr[k]\n            i += 1\n        # If the element at index i is positive, then move the element at index j to its correct position (i.e., after the element at index i)\n        elif arr[k] > 0:\n            arr[k], arr[j] = arr[j], arr[k]\n            j -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists to store negative and positive elements\n    neg_lst = []\n    pos_lst = []\n\n    # iterate through the input array and add elements to the appropriate lists\n    for elem in arr:\n        if elem < 0:\n            neg_lst.append(elem)\n        else:\n            pos_lst.append(elem)\n\n    # sort the negative list in ascending order\n    neg_lst.sort()\n\n    # merge the two sorted lists in the desired order\n    for i in range(n):\n        arr[i] = neg_lst[i]\n\n    for i in range(n, len(arr)):\n        arr[i] = pos_lst[i - n]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    negatives = []\n    positives = []\n    zeros = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        elif arr[i] == 0:\n            zeros.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        elif arr[i] == 0:\n            zeros.append(arr[i])\n        else:\n            positives.append(arr[i])\n\n    negatives.sort()\n    positives.sort()\n    zeros.sort()\n\n    result = zeros + negatives + positives\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize variables to count negative and positive elements\n    negative = 0\n    positive = 0\n\n    # Iterate through the array and count negative and positive elements\n    for num in arr:\n        if num < 0:\n            negative += 1\n        else:\n            positive += 1\n\n    # If the sum of negative and positive elements is less than n, add more elements to the array\n    if negative + positive < n:\n        for i in range(n - negative - positive):\n            if negative < positive:\n                arr.append(0)\n                negative += 1\n            else:\n                arr.append(1)\n                positive += 1\n\n    # If the sum of negative and positive elements is equal to n, swap the elements\n    elif negative + positive == n:\n        for i in range(n):\n            if arr[i] < 0:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            elif arr[i] > 0:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n\n    # If the sum of negative and positive elements is greater than n, remove elements from the array\n    else:\n        for i in range(n - negative):\n            arr.pop(i)\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # initialize variables to store the count of negative and positive elements\n    neg_count = 0\n    pos_count = 0\n\n    # loop through the array and count the number of negative and positive elements\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # initialize two empty arrays to store the negative and positive elements, respectively\n    neg_arr = []\n    pos_arr = []\n\n    # loop through the array again, and add elements to the appropriate array based on their sign\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n\n    # loop through the arrays and concatenate them into a single array\n    re_arr = neg_arr[:neg_count] + pos_arr + neg_arr[neg_count:]\n\n    # return the re-arranged array\n    return re_arr\n"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    # Replace all spaces with the given character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and a character as input, replaces all blank spaces in the string with the character,\n    and returns the updated string.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    # Iterate through each word in the list\n    for i in range(len(words)):\n        # Replace any blank spaces with the given character\n        words[i] = words[i].replace(\" \", char)\n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character and replaces blank spaces in the string with the character.\n    It returns the modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # use string.replace() method to replace blank spaces with the given character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    # Replace all blank spaces with the character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a max heap to store the n largest elements\n    max_heap = []\n    # Iterate through the list and add elements to the max heap\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        # If the max heap has reached size n, remove the smallest element\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Convert the max heap back to a list and return it\n    return list(max_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the given list.\n\n    Parameters:\n    list1 (list): The list from which to select the largest n items.\n    n (int): The number of items to select.\n\n    Returns:\n    list: A list containing the n largest items from the given list.\n    \"\"\"\n    # Create a max heap from the first n items of the list\n    max_heap = [heapq.heappop(list1) for _ in range(n)]\n    # Add the remaining items to the max heap\n    heapq.heapify(list1)\n    # Return the max heap as the result\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a min heap\n    min_heap = []\n    for item in list1:\n        heapq.heappush(min_heap, item)\n    # extract the largest n numbers from the heap and convert them to a list\n    result = [heapq.heappop(min_heap) for _ in range(n)]\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min-heap and add the first n elements of the list to it\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n    # Add the remaining elements of the list to the min-heap\n    for i in range(n, len(list1)):\n        heapq.heappush(min_heap, -heapq.heappop(min_heap))\n    # Extract the n largest elements from the min-heap and store them in a list\n    larg_list = []\n    while len(min_heap) > 0:\n        larg_list.append(heapq.heappop(min_heap))\n    return larg_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -heapq.heappushpop(list1))\n\n    # Extract the n largest items from the list and add them to the min heap\n    for item in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, -item)\n        else:\n            if -item > -min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, -item)\n\n    # Extract and return the n largest items from the min heap\n    return [-heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n and fill it with the first n elements of the list\n    min_heap = []\n    for i in range(n):\n        min_heap.append(heapq.heappushpop(min_heap, -list1[i]))\n    \n    # Add the remaining elements to the heap\n    for i in range(n, len(list1)):\n        heapq.heappush(min_heap, -list1[i])\n    \n    # Return the n largest elements from the heap\n    return [heapq.heappushpop(min_heap, -heapq.heappop(min_heap)) for i in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_area = math.pi * r**2 * h\n    \n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # calculate the lateral surface area\n    lateral_surface = math.pi * (r ** 2 + h ** 2)\n    \n    # return the lateral surface area\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area using the formula:\n    # lateral surface area = 2 * pi * r * h\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2)+(2*3.14*r*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Calculate the lateral surface area of a cylinder using the formula:\n    #Lateral surface area = pi*(radius^2)*h\n    lateral_surface_area = 3.14*r**2*h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters\n    ----------\n    r : float\n        The radius of the cylinder.\n    h : float\n        The height of the cylinder.\n\n    Returns\n    -------\n    float\n        The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    area = 2 * math.pi * r * h\n    \n    # Return the area of the cylinder\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # iterate through all the bits of the number\n    for i in range(0, 32):\n        # check if the i-th bit is even\n        if n & (1 << i):\n            # set the i-th bit to 1\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for bit in bin(n)[2:]:\n        if int(bit) == 0:\n            result |= 1 << int(bit)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the given number to binary string \n    binary_str = bin(n)[2:] \n    # iterate over each character in the binary string \n    for i in range(len(binary_str)): \n        # if the current character is an even digit, set the corresponding bit to 1 \n        if int(binary_str[i]) % 2 == 0: \n            binary_str = binary_str[:i] + '1' + binary_str[i+1:] \n    # convert the binary string back to an integer and return it \n    return int(binary_str, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n > 0:\n        if n & 1:\n            even_bits |= 1\n        n >>= 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & 0x55555555)\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n:\n        # get the rightmost bit set to 1\n        bit = n & 1\n        # set the rightmost even bit to 1\n        n ^= bit\n        # shift the number to the left by 1 bit\n        n <<= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the result to 0\n    result = 0\n    # loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # if the current bit is even, set its corresponding bit in the result to 1\n        if i % 2 == 0:\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the number to binary and split it into a list of bits\n    bits = [int(bit) for bit in bin(n)[2:]]\n    # loop over the bits and set the even bits to 1\n    for i in range(len(bits)):\n        if i % 2 == 0:\n            bits[i] = 1\n    # convert the list of bits back to an integer and return it\n    return int(''.join(str(bit) for bit in bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # loop through each bit of the number\n    for bit in range(32):\n        # if the bit is even, set it to 1\n        if n & (1 << bit):\n            n |= (1 << bit)\n    # return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the number with even bits set to 1\n    result = 0\n\n    # Loop through all bits of the given number\n    for i in range(32):\n        # If the current bit is even, set the corresponding bit of the result to 1\n        if (n >> i) & 1 == 0:\n            result |= (1 << i)\n\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        count_dict[tup] = count_dict.get(tup, 0) + 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the test_list\n    counter = Counter(test_list)\n\n    # Create a dictionary to store the results and return it\n    result_dict = {}\n    for item, count in counter.items():\n        result_dict[item] = count\n\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in counts:\n            counts[tup] = 1\n        # Otherwise, increment the count by 1\n        else:\n            counts[tup] += 1\n            \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_set = set(test_list)\n    # Use Counter to count the occurrences of each unique tuple\n    count_dict = Counter(unique_set)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    occurrence_dict = {}\n    for tup in unique_tuples:\n        occurrence_dict[tup] = test_list.count(tup)\n    return occurrence_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    counts = {}\n    \n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the tuple is in the dictionary, increment its count by 1\n        if tup in counts:\n            counts[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[tup] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for tup in test_list:\n        counter.update([tup])\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize counter\n    count = 0\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each position of the substring from the current position to the end of the string\n        for j in range(i, len(str)):\n            # if the substring is not empty (i.e. not all characters are whitespace), increment the counter\n            if str[i:j+1].strip():\n                count += 1\n    # return the final counter value\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    n = len(str) \n    for i in range(n): \n        for j in range(i+1, n+1): \n            count += 1 \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef number_of_substrings(str):\n    return len(re.findall(r'[^\\s]+', str))"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i+1 > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.append(str[i:j])\n    return len(set(substrings))"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize count to zero\n    count = 0\n    # iterate through all possible substrings of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # check if substring is not empty\n            if j-i > 0:\n                count += 1\n    # return count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(string):\n    # Create a list to store the count of substrings\n    count = []\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Initialize a count variable for this substring\n        count_this_substring = 0\n        # Loop through each character in the substring starting from the current character\n        for j in range(i, len(string)):\n            # If the character at index j is not equal to the current character, add 1 to the count variable\n            if string[j]!= string[i]:\n                count_this_substring += 1\n        # Add the count of this substring to the count list\n        count.append(count_this_substring)\n    # Return the sum of all count variables\n    return sum(count)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, n+1):\n        if i % 2 == 0:\n            if m % 2 == 0:\n                count += 2*(m-i+1)\n            else:\n                count += 2*(m-i+1) + 1\n        else:\n            if m % 2 == 0:\n                count += 2*(m-i+1) + 1\n            else:\n                count += 2*(m-i+1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(m - n + 1):\n        total_sequences += len(set(range(i + 1, min(m, 2 * i + n + 1))))\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Calculate the number of possible sequences with length n\n    total_sequences = 0\n    for i in range(1, m+1):\n        if i < 2*n:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    num_sequences = 0\n    for i in range(2, n+1):\n        if m % 2 == 0:\n            m -= 1\n        else:\n            m += 1\n        num_sequences += m\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # initialize the count variable to 0\n    count = 0\n\n    # loop through all possible previous elements from 1 to m\n    for i in range(2, m+1):\n        # loop through all possible previous elements from 1 to i-2\n        for j in range(1, i-1):\n            # check if the current element (j) is greater than or equal to twice the previous element (i-1)\n            if j >= 2*i-1 and j <= m:\n                # check if the next element (j+1) is less than or equal to the value of n\n                if j+1 <= n:\n                    # increment the count variable\n                    count += 1\n\n    # return the count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(m + 1, m + 2 * n):\n            if i % 2 == 0 and i <= m and i >= 2 * m:\n                count += 1\n        return count + get_total_number_of_sequences(m, n - 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(2, n+1):\n        for j in range(i-1, m-1, -1):\n            total += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def binary_search(l, r, target):\n        while l <= r:\n            mid = (l + r) // 2\n            if mid * mid <= target < (mid + 1) * (mid + 1):\n                return mid\n            elif mid * mid > target:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return l - 1\n\n    def is_valid_sequence(sequence, m):\n        for i in range(len(sequence)):\n            if sequence[i] < 2 * sequence[i - 1] or sequence[i] > m:\n                return False\n        return True\n\n    count = 0\n    for i in range(1, m + 1):\n        sequence = [i]\n        if is_valid_sequence(sequence, m):\n            count += 1\n        for j in range(i + 1, min(i + n, m) + 1):\n            if binary_search(1, i, 2 * j - 1) > 0:\n                sequence.append(j)\n                if is_valid_sequence(sequence, m):\n                    count += 1\n                sequence.pop()\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Create a 2D list to store the number of sequences for each length\n    sequences = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Base cases\n    sequences[0][0] = 1\n    sequences[0][1] = 0\n\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if j < 2 * j:\n                sequences[i][j] = sequences[i - 1][j]\n            elif j == 2 * j:\n                sequences[i][j] = 1\n            else:\n                sequences[i][j] = sequences[i - 1][j] + sequences[i - 1][j - 2 * j]\n\n    return sequences[n][m]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            dp[i] = 2 * dp[i - 2]\n        else:\n            dp[i] = (m - 1) * dp[i - 1]\n\n    return dp[n]\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the list1\n    length = len(list1)\n\n    # check if the length of list1 is greater than 1\n    if length > 1:\n        # get the index of the last element of the list1\n        index = length - 1\n\n        # replace the last element of the list1 with the elements of the list2\n        list1[index] = list2\n\n    else:\n        # if the length of list1 is 1, then replace it with the list2\n        list1 = list2\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the list1\n    length1 = len(list1)\n    # Set the last element of list1 to None\n    list1[length1-1] = None\n    # Iterate through the elements of list2\n    for element in list2:\n        # Append the element to the end of list1\n        list1.append(element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    # Initialize the new list with the same length as the first list\n    new_list = [0] * len(list1)\n    # Loop through the list1 and replace the last element with the elements of list2\n    for i in range(len(list1)-1, -1, -1):\n        new_list[i] = list2[i]\n    # Return the new list\n    return new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return None\n    \n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n\n    Parameters:\n    list1 (list): A list of elements.\n    list2 (list): A list of elements.\n\n    Returns:\n    list: The modified list.\n\n    Example:\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [6, 7]\n    new_list = replace_list(list1, list2)\n    print(new_list) # Output: [1, 2, 3, 6, 7]\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if both lists have at least one element\n    if len(list1) > 0 and len(list2) > 0:\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    elif len(list1) == 1:\n        return [list1[0], list2]\n    else:\n        list1[-1] = list2[-1]\n        del list2[-1]\n        list1.extend(list2)\n        return replace_list(list1, list2)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_characters(string):\n    \"\"\"\n    Counts the number of characters in a given string.\n    \n    :param string: the input string\n    :return: the number of characters in the string\n    \"\"\"\n    return len(string)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Initialize variables\n    is_prime = True\n    i = N\n    j = N\n\n    # Check if the number is prime\n    while i >= 2:\n        if i % 2 == 0:\n            is_prime = False\n            break\n        i -= 1\n\n    # If the number is not prime, return the next prime number\n    if is_prime:\n        j = i + 1\n    else:\n        i = (i + j) // 2\n        while i >= 2:\n            if i % 2 == 0:\n                j = i + 1\n                break\n            i -= 1\n\n    # Check if the next perfect square is greater than the given number\n    k = i * i\n\n    while k < N:\n        k += j\n        j += 1\n\n    return k"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N))\n    if sqrtN * sqrtN!= N:\n        sqrtN += 1\n    return int(math.sqrt(sqrtN) + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Finding the square root of N\n    root_N = math.sqrt(N)\n    \n    # Finding the next perfect square\n    next_square = root_N * root_N + 1\n    \n    # Returning the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize variables\n    a, b = 1, N\n    # Iterate until the difference between b and the square root of b is less than 0.0001\n    while abs(b - math.sqrt(b)) < 0.0001:\n        # Calculate the next a and b values\n        a += 1\n        b = int(math.sqrt(a))\n    # Return the next perfect square greater than N\n    return a"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # initialize variables\n    n = N\n    temp = 0\n    i = 1\n\n    # iterate till the perfect square greater than N is found\n    while i <= n:\n        temp = math.sqrt(i)\n        if temp - math.floor(temp) == 0:\n            return int(temp + 1)\n        else:\n            i += 1\n\n    # if no perfect square greater than N is found, return N itself\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    sqrt_N = int(math.sqrt(N))\n\n    for i in range(sqrt_N+1): \n        for j in range(i+1): \n            if i*i+j*j == N: \n                return int(i*i+sqrt_N+1) \n\nprint(next_Perfect_Square(12)) # Output: 16\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # check if N is not a positive integer\n    if not isinstance(N, int) or N <= 0:\n        return 'N must be a positive integer.'\n\n    # convert N to float to avoid integer division\n    N = float(N)\n\n    # calculate sqrt(N)\n    sqrtN = math.sqrt(N)\n\n    # calculate (sqrtN + 1)^2\n    nextSqrt = (sqrtN + 1) ** 2\n\n    # check if nextSqrt is greater than N\n    if nextSqrt > N:\n        return nextSqrt\n    else:\n        return next_Perfect_Square(nextSqrt)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        num = N * N\n        if num > N:\n            return num\n        \n        N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if the number is already a perfect square\n    if N**0.5 == int(N**0.5): \n        return N+1\n    \n    # Check if the number is already the largest possible perfect square\n    if N == math.sqrt(N**2): \n        return N\n    \n    # Calculate the next perfect square\n    next_square = int(math.sqrt(N**2)) + 1\n    \n    # Check if the next perfect square is greater than N\n    if next_square > N: \n        return next_square\n    \n    # Check if the next perfect square is less than the square root of N\n    if next_square < math.sqrt(N): \n        return next_square\n    \n    # The next perfect square is equal to the square root of N\n    return int(math.sqrt(N**2)) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N < 1:\n        return None\n\n    # Find the first perfect square greater than N\n    perfect_square = int(math.sqrt(N)) + 1\n\n    # Check if the square is less than or equal to the given number\n    if perfect_square**2 > N:\n        return perfect_square**2\n\n    # Find the next perfect square greater than the square found above\n    while perfect_square**2 <= N:\n        perfect_square += 1\n\n    return perfect_square**2"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n  # Initialize a list to store the maximum sum of the bitonic subsequence ending at index i\n\n    # Base case: if the array is empty, the maximum sum of any subsequence is 0\n    if n == 0:\n        return 0\n\n    # If the array is of length 1, the maximum sum of any subsequence is either 0 or the first element\n    if n == 1:\n        return max(0, arr[0])\n\n    # If the array has length 2, the maximum sum of any subsequence is either the first or second element, or the sum of the two elements\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    # If the array has length 3, the maximum sum of any subsequence is either the first or second or third element, or the sum of the two elements\n    if n == 3:\n        return max(arr[0], arr[1], arr[2])\n\n    # Fill in the dp array using dynamic programming\n    for i in range(n):\n        if i % 2 == 0:  # If the subsequence ends at index i\n            if i == 0:\n                dp[i] = arr[0]\n            elif i == 1:\n                dp[i] = max(dp[i-1], arr[i-1], arr[i])\n            else:\n                dp[i] = max(dp[i-1], dp[i-2], arr[i])\n        else:  # If the subsequence ends at index i-1\n            if i == n-1:\n                dp[i] = arr[n-1]\n            elif i == n-2:\n                dp[i] = max(dp[i-1], arr[i-1], arr[i])\n            else:\n                dp[i] = max(dp[i-1], dp[i-2], arr[i])\n\n    # Find the maximum sum of the bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        if i % 2 == 0:  # If the subsequence ends at index i\n            if i == 0:\n                max_sum = max(max_sum, arr[0])\n            elif i == 1:\n                max_sum = max(max_sum, max(dp[i-1], arr[i-1], arr[i]))\n            else:\n                max_sum = max(max_sum, max(dp[i-1], dp[i-2], arr[i]))\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # If the array has only one element, it is not a bitonic sequence\n    if n == 1:\n        return arr[0]\n\n    # Check if the array is a bitonic sequence\n    if (arr[1] - arr[0]) * (arr[-2] - arr[-1]) > 0:\n        # If the array is a bitonic sequence, find the maximum sum\n        left_max = max_sum(arr[1:])\n        right_max = max_sum(arr[:-1])\n        return max(left_max, right_max)\n\n    # If the array is not a bitonic sequence, find the maximum subarray\n    subarray = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            subarray.append(arr[i:j])\n            max_sum = max_sum(subarray)\n            subarray.pop()\n            if max_sum > max_sum_of_so_far:\n                max_sum_of_so_far = max_sum\n    return max_sum_of_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_left = max_right = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_left:\n            max_right = max_left\n            max_left = arr[i]\n        elif arr[i] < max_left:\n            max_right = max(max_right, arr[i])\n    return max(max_left, max_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        return None\n    \n    # Check if the array is increasing or decreasing\n    increasing = arr[1] < arr[0]\n    decreasing = arr[-1] > arr[-2]\n    \n    # If both increasing and decreasing, return the maximum sum\n    if increasing and decreasing:\n        return max(arr[i] + arr[i+1] for i in range(len(arr)-2))\n    \n    # If the array is increasing, find the maximum sum subarray\n    elif increasing:\n        return max_sum(arr[1:])\n    \n    # If the array is decreasing, find the maximum sum subarray\n    else:\n        return max_sum(arr[:-1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    if not arr:\n        return 0\n    \n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n            \n    return arr[left] + arr[right]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Find the bitonic subsequence\n    if arr[0] > arr[1]:\n        bitonic = [arr[0], arr[1]]\n    elif arr[0] < arr[1]:\n        bitonic = [arr[1], arr[0]]\n    else:\n        bitonic = [arr[0], arr[0]]\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(2, n):\n        if arr[i-1] < arr[i]:\n            bitonic.append(arr[i-1])\n        elif arr[i-1] > arr[i]:\n            bitonic.append(arr[i])\n        else:\n            bitonic.append(arr[i])\n        \n        if bitonic[-1] > bitonic[-2]:\n            max_sum += bitonic[-1] - bitonic[-2]\n        else:\n            max_sum += bitonic[-2] - bitonic[-1]\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    increasing = True\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        if increasing:\n            current_sum += arr[i]\n        else:\n            current_sum -= arr[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        if arr[i] < arr[i-1]:\n            increasing = True\n        elif arr[i] > arr[i-1]:\n            increasing = False\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Initialize variables for the first and last elements of the array\n    if arr[0] < arr[1]:\n        first = arr[0]\n        last = arr[1]\n    else:\n        first = arr[1]\n        last = arr[0]\n    \n    # Initialize variables for the current subsequence\n    curr_sum = 0\n    subseq_sum = 0\n    \n    # Iterate through the array and find the maximum sum of the bitonic subsequence\n    for i in range(2, n):\n        if arr[i] < arr[i-1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum = 0\n        \n        if curr_sum > subseq_sum:\n            subseq_sum = curr_sum\n            \n        if arr[i] > arr[i-1]:\n            last = arr[i]\n        else:\n            first = arr[i]\n            \n    # If the last element of the subsequence is increasing, add it to the subsequence sum\n    if last < first:\n        subseq_sum += last\n    \n    return subseq_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables for bitonic subsequence and maximum sum found so far\n    bitonic_seq = []\n    max_sum_found = float('-inf')\n\n    # Iterate through the array and check if the current element is increasing or decreasing\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            bitonic_seq.append(arr[i])\n        else:\n            bitonic_seq.append(arr[i-1])\n\n    # Iterate through the bitonic subsequence and calculate the maximum sum found\n    for i in range(len(bitonic_seq)-1):\n        bitonic_sum = bitonic_seq[i] + bitonic_seq[i+1]\n        if bitonic_sum > max_sum_found:\n            max_sum_found = bitonic_sum\n\n    return max_sum_found"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Check if the array is bitonic\n    if arr[0] < arr[1] and (n == 2 or arr[2] < arr[1]):\n        return arr[0] + arr[1]\n\n    # Check if the array is not bitonic\n    dp = [0] * n\n    max_sum = float('-inf')\n    start = 0\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = dp[i - 1] + arr[i]\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n                start = i - 1\n        else:\n            dp[i] = dp[i - 1]\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n                start = i - 1\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number // 2\n    while abs(guess*guess - number) > 0.00001:\n        guess = (guess + number // guess) // 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x0 = 1\n    x1 = 1.5\n    x2 = x1\n    numerator = 2\n    denominator = 2\n    count = 0\n    \n    # check if input is negative\n    if number < 0:\n        print(\"Error: Square root of a negative number is not defined.\")\n        return None\n    \n    # find the square root using the babylonian method\n    while True:\n        # update the values of x0, x1, x2, numerator, denominator\n        x3 = x1**2 - (number/x1)\n        x0 = x2\n        x2 = x1\n        x1 = x3\n        \n        # update the count\n        count += 1\n        \n        # check if the difference between the new x1 and the input number is within a tolerance\n        if abs(x1 - number) < 0.000001:\n            return x1\n        \n        # check if the maximum number of iterations is reached\n        if count > 10000:\n            print(\"Error: Maximum number of iterations reached.\")\n            return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Get the initial estimate of the square root by guessing at 1\n    guess = 1\n    previous_guess = 1\n\n    # Loop until the difference between the previous guess and the current guess is less than a tolerance value\n    while abs(guess**2 - number) >= 1e-6:\n        previous_guess = guess\n        guess = (number / guess) + guess / (number / guess + guess)\n\n    # Return the final estimate of the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    Parameters:\n    number (float): The number whose square root we want to find.\n\n    Returns:\n    float: The square root of the input number.\n    \"\"\"\n\n    # Initialize variables for iteration\n    i = 0\n    old_guess = 1\n    guess = old_guess + (old_guess**2 - number) / (2 * old_guess)\n\n    # Iterate until the guess is accurate enough\n    while abs(guess**2 - number) > 0.0001:\n        i += 1\n        old_guess = guess\n        guess = old_guess + (old_guess**2 - number) / (2 * old_guess)\n\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    numerator = number\n    denominator = 1\n    i = 1\n\n    # Initialize tolerance\n    tolerance = 0.000001\n\n    # Babylonian method\n    while abs(numerator - denominator*denominator) >= tolerance:\n        mean = (numerator + denominator) / 2\n        diff = number - mean * mean\n        numerator = mean\n        denominator = diff\n        i += 1\n\n    # Return the square root\n    return math.sqrt(numerator)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    prev_guess = 1\n    curr_guess = (prev_guess + number/prev_guess) / 2\n    while abs(curr_guess*curr_guess - number) > 0.0001:\n        prev_guess = curr_guess\n        curr_guess = (prev_guess + number/prev_guess) / 2\n    return curr_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while True:\n        if guess ** 2 == number:\n            return guess\n        elif guess ** 2 > number:\n            guess = (guess + number / guess) / 2\n        else:\n            guess = (guess + number / guess) / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001\n    x = number / 2.0\n    y = x + (number / x) / 2.0\n    while abs(x - y) > epsilon:\n        x = y\n        y = x + (number / x) / 2.0\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    i = 1\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(guess - new_guess) < 0.000001:\n            return new_guess\n        guess = new_guess\n        i += 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize a counter and a guess for the square root\n    counter = 0\n    guess = number / 2\n\n    # Iterate until the difference between the guess and the square of the guess is less than or equal to the precision of the result\n    while abs(guess**2 - number) > 10**-10:\n        # Increment the counter\n        counter += 1\n\n        # Calculate the next guess for the square root\n        guess = (guess + number / guess) / 2\n\n        # Print the counter and the current guess for the square root\n        print(f'Iteration {counter}: {guess}')\n\n    # Print the final guess for the square root\n    print(f'The final guess for the square root is: {guess}')"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store the length of longest palindromic subsequences ending at each index of the string\n    t = [[0] * n for i in range(n)]\n    # Initialize the first row and column of the table\n    for i in range(n):\n        t[i][i] = 1\n    # Fill in the rest of the table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n-i):\n            if str[j] == str[j+i]:\n                t[j][j+i] = t[j+1][j] + 2\n            else:\n                t[j][j+i] = max(t[j][j+i-1], t[j+1][j+i-1])\n    return t[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = 2\n            max_len = 2\n        else:\n            dp[i][i+1] = 1\n            if i > 0 and s[i] == s[i-1]:\n                dp[i][i+1] = dp[i-1][i-1] + 2\n            if dp[i][i+1] > max_len:\n                max_len = dp[i][i+1]\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(string):\n    n = len(string)\n    # Create a table to store the length of longest palindromic subsequence for all prefixes of the string\n    table = [[0 for j in range(n)] for i in range(2)]\n    # Initialize the table with length 1 for all prefixes\n    for i in range(2):\n        table[i][0] = 1\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(1, n):\n            if string[i] == string[j]:\n                table[i+1][j] = table[i][j-1] + 2\n            else:\n                table[i+1][j] = max(table[i][j], table[i][j-1])\n    return table[n][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(s, i, j):\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef longest_palindrome_substring(s):\n    if len(s) <= 1:\n        return s\n\n    n = len(s)\n    max_len = 1\n    max_start = 0\n\n    # Iterate through all possible prefixes of the string\n    for i in range(n):\n        # Find the length of the longest palindromic suffix ending at position i\n        for j in range(i, n):\n            # Check if the substring from i to j is a palindrome\n            if is_palindrome(s, i, j):\n                # If it is, check if it is longer than the previous longest palindrome\n                suffix_len = j - i + 1\n                if suffix_len > max_len:\n                    max_len = suffix_len\n                    max_start = i\n\n    return s[max_start:max_start+max_len]\n\ndef lps(s):\n    return len(longest_palindrome_substring(s))"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store the length of longest palindromic subsequence ending at each index \n    table = [[0 for j in range(n)] for i in range(n)] \n\n    # LPS of empty string is always 0 \n    for i in range(n): \n        table[i][i] = 0 \n\n    # Fill the table in bottom-up manner \n    for i in range(1, n): \n        for j in range(i): \n            if str[j] == str[i]: \n                table[j][i] = 2 + table[j+1][i-1] \n            else: \n                table[j][i] = max(table[j+1][i], table[j][i-1]) \n\n    # Return the length of the longest palindromic subsequence \n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    # Create a dictionary to store the length of longest palindromic subsequences ending at each index\n    dp = {}\n    \n    # Initialize the dictionary with 0 for all indices\n    for i in range(len(s)):\n        dp[i] = 0\n        \n    # Fill in the dictionary with lengths of palindromic subsequences\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            dp[i] = dp[i+1] + 2\n            \n    # Find the maximum length palindromic subsequence\n    max_length = max(dp.values())\n    \n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D array of size (n+1) x (n+1)\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Initialize the diagonal values of the dp array\n    for i in range(1, n+1):\n        dp[i][i] = 1\n\n    # Fill the rest of the dp array using dynamic programming\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length\n            # Compare the characters at i and j\n            if str[i] == str[j]:\n                # If they are the same, include the length of the subsequence in both directions\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                # If they are not the same, include the maximum of the subsequences without the current character in both directions\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a 2D array to store lengths of subsequences \n    # subseq[i][j] will store length of the longest palindromic subsequence \n    # of str[0:i] and str[0:j] \n    subseq = [[0 for j in range(n+1)] for i in range(n+1)] \n  \n    # Initialize all entries of subseq[] as 0 \n    for i in range(n+1): \n        subseq[i][0] = 0 \n  \n    # Fill the subseq[][] table in bottom-up manner \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if str[i-1] == str[j-1]: \n                subseq[i][j] = subseq[i-1][j-1] + 1 \n  \n            # If the characters are not same, then make only one of them as center \n            else: \n                subseq[i][j] = max(subseq[i-1][j], subseq[i][j-1]) \n  \n    # Return the length of the longest palindromic subsequence \n    return subseq[n][n] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    n = len(s)\n    if n < 2:\n        return 0\n    \n    # Initialize the two pointers i and j to 0\n    i, j = 0, 0\n    \n    # Initialize two variables to store the length of longest palindrome subsequence ending at i and j\n    max_i, max_j = 0, 0\n    \n    # Initialize a boolean variable to store the flag to check if current substring is palindrome or not\n    palindrome = True\n    \n    # Traverse the string from index i to n-1\n    while i < n - 1 and j < n:\n        # If the characters at index i and j are same, check for palindrome subsequence ending at i and j\n        if s[i] == s[j]:\n            # If palindrome subsequence is found, update the variables max_i and max_j\n            if i - j + 1 > max_i - max_j:\n                max_i = i\n                max_j = j\n            \n            # Update the pointers i and j\n            i += 1\n            j += 1\n        # If characters at index i and j are not same, check if the substring from i to j is palindrome or not\n        else:\n            # If the substring from i to j is not palindrome, update the flag\n            palindrome = not palindrome\n            \n            # If substring is palindrome, update the pointer j to the next index\n            if palindrome:\n                j += 1\n            # If substring is not palindrome, update the pointer i to the next index\n            else:\n                i += 1\n    \n    # Return the length of longest palindrome subsequence ending at index max_i and max_j\n    return max_i - max_j + 1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Create a 2D array to store the lengths of subsequences\n    n = len(str)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    \n    # Initialize the first row and column to 1\n    for i in range(n+1):\n        dp[i][0] = 0\n        dp[0][i] = 0\n    \n    # Fill the remaining cells of the DP table using the following recurrence relation:\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if str[i] == str[j] else 0\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length\n            if str[i] == str[j]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = (1/n + 1/n**2 + 1/n**3 +... + 1/n**n)\n    return harmonic_sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The harmonic sum of\", n, \"is\", harmonic_sum(n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n * sum([1/i for i in range(1, n)])"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n - 1/2 - 1/3 - 1/4 -... - 1/n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the harmonic sum of n-1.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    sum_of_harmonic_series = 0\n    for i in range(1, n+1):\n        sum_of_harmonic_series += 1/i\n\n    return sum_of_harmonic_series"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0.0\n    for i in range(1, n+1):\n        harmonic_sum += 1.0 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize sum to 0\n    sum_value = 0\n    # Loop through from 1 to n-1\n    for i in range(1, n):\n        # Calculate harmonic sum of i\n        harmonic_sum = 1/i\n        # Add harmonic sum to sum_value\n        sum_value += harmonic_sum\n    # Return sum_value\n    return sum_value"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from the second array to avoid duplicates\n    set_nums2 = set(array_nums2)\n    # iterate over the first array and check if each element is in the set\n    intersection = []\n    for num in array_nums1:\n        if num in set_nums2:\n            intersection.append(num)\n    # return the intersection as a list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set of all the elements in array_nums1\n    set1 = set(array_nums1)\n    # create an empty list to store the intersection\n    intersection = []\n    # loop through array_nums2 and check if each element is in set1\n    for num in array_nums2:\n        if num in set1:\n            intersection.append(num)\n    # return the intersection as a list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of nums1 and nums2 to remove duplicates\n    nums1_set = set(array_nums1)\n    nums2_set = set(array_nums2)\n    \n    # find the intersection of nums1 and nums2 using the set intersection\n    intersection = nums1_set.intersection(nums2_set)\n    \n    # convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Sort the arrays\n    array_nums1.sort()\n    array_nums2.sort()\n\n    # Initialize the intersection list\n    intersection = []\n\n    # Iterate through the sorted arrays\n    i = j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        # If the current elements of both arrays are equal\n        if array_nums1[i] == array_nums2[j]:\n            # Add the element to the intersection list\n            intersection.append(array_nums1[i])\n            # Move both pointers to the next element\n            i += 1\n            j += 1\n        # If the current element of array_nums1 is less than the current element of array_nums2\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        # If the current element of array_nums2 is less than the current element of array_nums1\n        else:\n            j += 1\n\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Given two arrays, find their intersection.\n\n    Args:\n        array_nums1 (list): The first array of numbers.\n        array_nums2 (list): The second array of numbers.\n\n    Returns:\n        list: The intersection of the two arrays.\n\n    Example:\n        >>> array_nums1 = [1, 2, 2, 1]\n        >>> array_nums2 = [2, 2, 3, 4]\n        >>> intersection_array(array_nums1, array_nums2)\n        [2, 2]\n    \"\"\"\n    # Find the common elements between the two arrays\n    common_elements = list(set(array_nums1) & set(array_nums2))\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create two dictionaries to store the frequency of each element in array_nums1 and array_nums2\n    freq1 = {}\n    freq2 = {}\n\n    # loop through each element in array_nums1 and increment the frequency in freq1\n    for num in array_nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n\n    # loop through each element in array_nums2 and increment the frequency in freq2\n    for num in array_nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n\n    # loop through freq1 and find the intersection of the two dictionaries\n    intersection = []\n    for num in freq1:\n        if num in freq2 and freq1[num] == freq2[num]:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the second array\n    freq_dict = {}\n    for num in array_nums2:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # Create a list to store the intersection of the two arrays\n    intersection = []\n\n    # Iterate through the first array and add any element that has a frequency greater than 0 to the intersection list\n    for num in array_nums1:\n        if freq_dict.get(num, 0) > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Find the intersection of two arrays\n    intersection = [num for num in array_nums1 if num in array_nums2]\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2 and num1 not in intersection:\n            intersection.append(num1)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # convert the arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    # Loop through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i, element)\n\n    # Return the list with the inserted element\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i, item in enumerate(list):\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(lst)):\n        lst.insert(i, elem)\n    return lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list[:-1]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Split the number into real and imaginary parts\n        real, imag = str(number).split('j')\n        \n        # Convert the real part to radians\n        theta = cmath.phase(complex(real, imag))\n        \n        # Convert the magnitude to float and apply the complex conjugate\n        magnitude = float(cmath.sqrt(real**2 + imag**2))\n        polar = complex(magnitude * cmath.cos(theta), magnitude * cmath.sin(theta))\n        \n        # Print the polar coordinate\n        print(polar)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        x, y = cmath.polar(number)\n        print(f\"x: {x}, y: {y}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        magnitude = abs(number)\n        phase = cmath.phase(number)\n        print(f\"{number} in polar form is {magnitude}+{phase}i\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        x, y = cmath.polar(number)\n        polar_coordinates.append((x, y))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        try:\n            # convert to complex number\n            complex_number = complex(number)\n            # convert to polar coordinates\n            r, theta = cmath.polar(complex_number)\n            print(\"({}, {})\".format(r, theta))\n        except:\n            print(\"Invalid input\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_numbers.append((r, theta))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        real = num.real\n        imag = num.imag\n        mag = abs(num)\n        arg = cmath.phase(num)\n        polar_coordinates.append((mag, arg))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # convert the number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n\n        # print the polar coordinates\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = number.real, number.imag\n        if imag == 0:\n            if real == 0:\n                polar_number = (0, 0)\n            else:\n                polar_number = (0, cmath.pi/2*abs(real))\n        else:\n            polar_number = (cmath.atan2(imag, real), cmath.pi/2*abs(imag))\n        print(polar_number)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        pol = cmath.polar(complex(real, imag))\n        result.append(pol)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list of elements as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green']\n    return list(combinations_with_replacement(colors, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Using itertools.combinations_with_replacement() function\n    # to generate all combinations with repetition of length n\n    for comb in combinations_with_replacement(l, n):\n        # Return a tuple for each combination\n        yield tuple(comb)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            comb = tuple(l[i:j])\n            combinations.append(comb)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            comb_list.append(tuple(j))\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    if n == len(l):\n        return [(x,) for x in l]\n    return [(x,) + y for x, y in combinations_with_replacement(l, n-1)] + combinations_colors(l, n-1)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all possible combinations with repetition\n    comb = combinations_with_replacement(l, n)\n    # convert the combinations to a list of tuples\n    comb_list = list(comb)\n    # return the list of tuples\n    return comb_list"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Create a boolean array \"isPrime[0..n]\" and initialize\n    # all entries it as true. A value in isPrime[i] will\n    # finally be false if i is Not a prime, else true.\n    isPrime = [True for i in range(n+1)]\n    isPrime[0], isPrime[1] = False, False\n\n    # Sieve of Eratosthenes algorithm to find all primes less than n\n    p = 2\n    while (p * p <= n):\n        # If isPrime[p] is not changed, then it is a prime\n        if (isPrime[p] == True):\n            # Update all multiples of p\n            for i in range(p * p, n+1, p):\n                isPrime[i] = False\n        p += 1\n\n    # Count number of primes less than n\n    count = 0\n    for i in range(2, n+1):\n        if (isPrime[i] == True):\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes a non-negative integer 'n' as input and returns the number of prime numbers less than 'n'.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than n\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)\n\nprint(swap_numbers(10, 20))"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_num:\n            max_num = test_tup1[i]\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_num:\n            max_num = test_tup2[i]\n    return max_num"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Define two lists to store the elements of the two tuples\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Define a function to compare two elements of the two lists\n    def compare(list1, list2):\n        '''\n        Compare two elements of the two lists.\n        '''\n        # Initialize a variable to store the maximum element\n        max_element = None\n        \n        # Iterate through each element of the two lists\n        for i in range(len(list1)):\n            # If the element in the first list is greater than the element in the second list, return the element in the first list\n            if list1[i] > list2[i]:\n                max_element = list1[i]\n                break\n        \n        # If the maximum element is still None, return the element in the second list\n        if max_element is None:\n            max_element = list2[i]\n        \n        # Return the maximum element\n        return max_element\n    \n    # Call the compare function to find the maximum element in the two lists\n    max_element = compare(list1, list2)\n    \n    # Return the maximum element in the two lists\n    return (max_element, max_element)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] >= test_tup2[0]:\n        if test_tup1[1] >= test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2\n    else:\n        if test_tup1[1] >= test_tup2[1]:\n            return test_tup2\n        else:\n            return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = max(max(test_tup1), max(test_tup2))\n    return (max_value, tuple(x if x == max_value else None for x in test_tup1))"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n\n    # Create a list of tuples to store the maximum values of each element\n    max_values = [(0,0), (0,0), (0,0), (0,0)]\n\n    # Loop through each element in the two tuples and compare their values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_values[i] = (test_tup1[i], test_tup2[i])\n        else:\n            max_values[i] = (test_tup2[i], test_tup1[i])\n\n    # Create a new tuple with the maximum values of each element\n    max_tup = (max_values[0][0], max_values[1][0], max_values[2][0], max_values[3][0])\n\n    # Return the maximum tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Check if the tuples have the same length\n    if len1!= len2:\n        print(\"Error: The tuples have different lengths!\")\n        return\n    \n    # Initialize the variables for the maximum values\n    max1 = 0\n    max2 = 0\n    \n    # Iterate over the elements of the tuples\n    for i in range(len1):\n        # Compare the current element of each tuple\n        if test_tup1[i] > test_tup2[i]:\n            # If the current element of the first tuple is greater,\n            # update the maximum value of the first tuple\n            max1 = test_tup1[i]\n        elif test_tup2[i] > test_tup1[i]:\n            # If the current element of the second tuple is greater,\n            # update the maximum value of the second tuple\n            max2 = test_tup2[i]\n    \n    # Check if both tuples have the same maximum value\n    if max1 == max2:\n        print(\"Error: The tuples have the same maximum value!\")\n        return\n    \n    # If one tuple has a maximum value, return that tuple\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the first tuple is smaller than the second tuple\n    if len(test_tup1) < len(test_tup2):\n        # Swap the tuples to maximize their elements\n        return (test_tup2, test_tup1)\n    else:\n        # Return the original tuples unchanged\n        return (test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Initialize a new tuple to store the max elements\n    max_tuple = []\n\n    # Iterate over the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Compare the elements and add the larger one to the max_tuple\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple.append(test_tup1[i])\n        else:\n            max_tuple.append(test_tup2[i])\n\n    # Return the max_tuple\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(n):\n        \"\"\"\n        Recursive function to generate the nth newman-shanks-williams prime.\n        \"\"\"\n        if n == 1:\n            return 2\n        else:\n            return newman_shanks_williams(n-1) + newman_shanks_williams(n-1) + 2\n\n    i = 1\n    while i < 20:\n        if is_prime(newman_shanks_williams(i)):\n            return newman_shanks_williams(i)\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n\n    while count < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            count += 1\n\n        num += 1\n\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize the first two newman\u2013shanks\u2013williams prime numbers\n    p1, p2 = 11, 13\n\n    # Initialize the count of primes found to 0\n    count = 0\n\n    # Loop until the count reaches the nth newman\u2013shanks\u2013williams prime number\n    for _ in range(n):\n        # If the current number is prime, increment the count and move to the next one\n        if is_prime(p1):\n            count += 1\n            p1 += 2\n        elif is_prime(p2):\n            count += 1\n            p2 += 2\n        else:\n            # If none of the numbers are prime, move to the next pair of newman-shanks-williams primes\n            p1 = 11 + 13\n            p2 = p1 + 2\n\n    return count\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    prime_list = [2]\n    count = 0\n    max_count = 0\n    # Loop through all numbers from 3 up to n\n    for num in range(3, n+1):\n        # Check if the number is prime\n        is_prime = True\n        for prime in prime_list:\n            if prime > num // 2:\n                break\n            if num % prime == 0:\n                is_prime = False\n                break\n        # If the number is prime, add it to the list of primes and increment the count\n        if is_prime:\n            prime_list.append(num)\n            count += 1\n        # Update the maximum count if the count exceeds it\n        if count > max_count:\n            max_count = count\n    # Return the nth prime number in the list\n    return prime_list[n-2]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Create a list of primes\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Initialize the variable to keep track of the nth prime number\n    nth_prime = 0\n    \n    # Initialize the list of primes to keep track of all the prime numbers found so far\n    primes = []\n    \n    # Iterate over all numbers from 2 to n\n    for num in range(2, n+1):\n        \n        # Check if the number is a prime number\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the list of primes and update the nth_prime variable\n        if is_prime:\n            primes.append(num)\n            if len(primes) == n:\n                nth_prime = num\n                break\n    \n    return nth_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while True:\n        if is_newman_prime(i):\n            print(i)\n            if n == 1:\n                return i\n            n -= 1\n        i += 1\n\ndef is_newman_prime(n):\n    '''\n    Check if a given number is a newman-shanks-williams prime number.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize a list of numbers that are not prime\n    not_prime = [i for i in range(10000, 1000001) if is_prime(i)]\n    # initialize the count variable for the nth newman-shanks-williams prime\n    count = 0\n    # loop through the list of not prime numbers and count the number of newman-shanks-williams primes\n    for i in range(1, len(not_prime)):\n        if is_newman_shanks_williams_prime(not_prime[i]):\n            count += 1\n        if count == n:\n            return not_prime[i]\n\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_newman_shanks_williams_prime(n):\n    '''\n    Write a function to check if a given number is a newman-shanks-williams prime or not.\n    '''\n    if not is_prime(n):\n        return False\n    # check if n is divisible by any number in the first 100 primes\n    for i in range(2, 101):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    j = 2\n    k = 3\n    prime_count = 0\n    while prime_count < n:\n        if is_prime(i):\n            prime_count += 1\n        i += 1\n        if is_prime(j):\n            prime_count += 1\n        j += 1\n        if is_prime(k):\n            prime_count += 1\n        k += 2\n    return k"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define the list of primes between 2 and 1000\n    primes = [True] * 1001\n    primes[0] = primes[1] = False\n    p = 2\n    while p * p <= 1000:\n        if primes[p]:\n            for i in range(p * p, 1001, p):\n                primes[i] = False\n        p += 1\n    # Define the function to check if a number is a newman-shanks-williams prime\n    def is_newman_prime(num):\n        if num < 2 or num > 1000:\n            return False\n        if primes[num]:\n            return True\n        p = 2\n        while p * p <= num:\n            if num % p == 0:\n                return False\n            p += 1\n        return True\n    # Loop through the list of primes and find the nth newman-shanks-williams prime\n    for i in range(n):\n        prime = 2\n        while not is_newman_prime(prime):\n            prime += 1\n        print(prime)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same number of elements.\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print('Warning: Cannot divide by zero')\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    # Perform element-wise division\n    result = [x / y for x, y in zip(test_tup1, test_tup2)]\n    \n    # Print the result\n    print(\"Element-wise division of the tuples: \", result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Divide all elements of the two tuples element-wise\n    result_tup = tuple([x/y for x, y in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # Check if the length of the input tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples should have the same length.\")\n        return None\n    \n    # Perform element-wise division operation\n    result_tup = tuple([num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], float) and isinstance(test_tup2[i], float):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of both tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length!\")\n    # initialize an empty list to store the result of the element-wise division\n    result_list = []\n    # loop through both tuples and perform element-wise division\n    for i in range(len(test_tup1)):\n        try:\n            # check if both tuples have a non-zero element at the current index\n            if test_tup1[i]!= 0:\n                result_list.append(test_tup1[i] / test_tup2[i])\n            else:\n                raise ZeroDivisionError(\"Both tuples have a zero element at the current index!\")\n        except ZeroDivisionError as e:\n            print(f\"Error: {e}\")\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create two empty lists to store the two parts\n    list1_part1 = []\n    list1_part2 = []\n    \n    # iterate through the list, adding items to list1_part1 and list1_part2 until the length of list1_part1 equals L\n    for i in range(len(list1)):\n        if len(list1_part1) == L:\n            break\n        list1_part1.append(list1[i])\n        \n    # iterate through the rest of the list, adding items to list1_part2\n    for i in range(L, len(list1)):\n        list1_part2.append(list1[i])\n        \n    # return the two parts as a tuple\n    return (list1_part1, list1_part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n\n    # Split the list into two parts of length L\n    first_part = list1[:L]\n    second_part = list1[L:]\n\n    # Return the resulting lists in a tuple\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return ([x for x in list1[:L]], [x for x in list1[L:]])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1[:L]\n    list2 = list1[L:]\n    return list1, list2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    half = len(list1) // 2\n    return (list1[:half], list1[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes a list and an integer L as input and splits the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    if len(lst) < L:\n        raise ValueError(\"The length of the list must be greater than or equal to L.\")\n    \n    part1 = lst[:L]\n    part2 = lst[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if L is a valid input\n    if L > len(lst):\n        raise ValueError(\"L must be less than or equal to the length of the input list\")\n    # Split the input list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is an integer greater than 0\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n    # check if the length of list1 is greater than L\n    if len(list1) <= L:\n        raise ValueError(\"List1 must have a length greater than L\")\n    # split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts, where the first part has length L, and return the resulting lists as a tuple.\n    \"\"\"\n    n = len(lst)\n    if n < L:\n        raise ValueError(\"Length of list must be at least L\")\n    half = L // 2\n    return lst[:half], lst[half:]"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    years = 7\n    if h_age >= 12:\n        years = years + (h_age - 12) / 2\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's years based on their height in inches\n    dog_years = h_age / 39.37\n    \n    # Return the dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 * h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # Define the conversion factor from hours to years\n    years = 7\n    \n    # Calculate the dog's age in dog's years\n    dog_age = h_age / years\n    \n    # Return the dog's age in dog's years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return (h_age * 7) + 11"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 * h_age\n    return dog_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    n = len(S)\n    if step <= 0:\n        return []\n    if step == 1:\n        return [S]\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Split S into chunks of length step\n    S_chunks = [S[i:i+step] for i in range(0, len(S), step)]\n    # Return the list of resulting lists\n    return S_chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    if step == 1:\n        return [S]\n    else:\n        return [S[:i] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        # if the list has an even number of elements, we can split it into equal parts\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        # if the list has an odd number of elements, we need to split it into equal parts\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    L = []\n    for i in range(0, len(S), n):\n        L.append(S[i:i+n])\n    return L"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n    "
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = (6 * l**2) + (2 * l**3)\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralSurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    surface_area = 6 * l * l # 6 sides x side x side\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6*l*l  # Formula for lateral surface area of a cube\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the volume of the cube\n    volume = l * l * l\n    \n    # Calculate the surface area of the cube using the formula:\n    # surface_area = 2 * volume\n    surface_area = 6 * volume\n    \n    return surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        square = count ** 2\n        sum_of_squares += square\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize the sum of squares to 0\n    total_sum = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the square of the current odd number\n        square = i ** 2\n        # add the square to the total sum\n        total_sum += square\n\n    # return the total sum of squares of the first n odd natural numbers\n    return total_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # iterate from 1 to n-1\n    for i in range(1, n):\n        # check if i is odd\n        if i % 2!= 0:\n            # add the square of i to the sum of squares\n            sum_of_squares += i**2\n            \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    i = 1  \n    while i <= n:  \n        sum += i**2  \n        i += 2  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return \"Please enter a positive integer greater than zero.\"\n    else:\n        odd_sum = 0\n        for i in range(1, n+1, 2):\n            odd_sum += i ** 2\n        return odd_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = [i for i in range(1, n*2, 2)]  # create a list of odd numbers from 1 to n*2 (inclusive)\n    sum_of_squares = 0  # initialize the sum of squares to 0\n\n    for num in odd_numbers:\n        sum_of_squares += num ** 2  # add the square of each number to the sum of squares\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n % 2!= 0:\n        n -= 1\n    return sum([i**2 for i in range(1, n+1, 2)])"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the first number of the sequence to 1\n    sequence = 1\n    # loop through the sequence until we reach n\n    for i in range(1, n+1):\n        # multiply the sequence by 2 for each subsequent number\n        sequence *= 2\n        # add the sequence to a running total\n        total += sequence\n    # return the total\n    return total"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    count = 1\n    num = 1\n\n    # loop through until n stars are found\n    while count <= n:\n        # print the current number\n        print('*' * num)\n\n        # increment the count and number\n        count += 1\n        num += 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the count and the star number\n    count = 1\n    star_num = \"\"\n    \n    # loop through each digit of n\n    for digit in str(n):\n        # if the digit is 1, add a star to the star number\n        if int(digit) == 1:\n            star_num += \"*\"\n            \n        # if the count reaches the value of n, return the star number\n        if count == n:\n            return star_num\n            \n        # increment the count by 1\n        count += 1\n    \n    # if the loop completes without finding the nth star number, return an error message\n    return \"Error: Could not find the nth star number.\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    if n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n - 1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        print('*' * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    \"\"\"\n    This function takes an integer n as input and returns then'th star number.\n\n    Then'th star number is defined as the number of stars required to \n    represent the nth power of 10 using only 4 spaces. \n    \"\"\"\n    star_num = 0\n    for i in range(n, 0, -1):\n        for j in range(4):\n            print(\"*\", end=\"\")\n        star_num += 4 * (i-1)\n        print()\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize variables\n    count = 1\n    sum_num = 1\n    result = \"\"\n\n    # loop to find the sum of n numbers\n    while count <= n:\n        sum_num += count\n        count += 1\n\n    # calculate the result\n    result = sum_num - (2 * n) + 1\n\n    # print the result\n    print(\"The\", n, \"th star number is:\", result)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Function to calculate the nth star number\n    def nth_star(num): \n        if num == 1: \n            return \"*\"\n        else: \n            return \"*\" + nth_star(num - 1) + \"*\"\n\n    # Call the nth_star function to get the nth star number\n    print(nth_star(n))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # calculate the number of rows for then'th star\n    num_rows = int(n**0.5) + 1\n    \n    # initialize an empty list to store the star numbers\n    star_nums = []\n    \n    # loop through the number of rows\n    for i in range(num_rows):\n        # initialize an empty string to store the current row of stars\n        row_stars = ''\n        \n        # loop through the number of stars in the current row\n        for j in range(num_rows - i):\n            # append a star to the current row of stars\n            row_stars += '*'\n        \n        # append the current row of stars to the star_nums list\n        star_nums.append(row_stars)\n    \n    # return the nth star number\n    return star_nums[n-1]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        if len(k)!= 1:\n            print(\"Error: Input string should be of length 1.\")\n            return None\n        else:\n            return ord(k)\n    elif type(k) == int:\n        return k\n    else:\n        print(\"Error: Input should be a string or an integer.\")\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n\nk = input(\"Enter a character: \")\nprint(\"ASCII value of\", k, \"is\", ascii_value(k))"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index_sum += i\n    \n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index_sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index_sum += arr[i]\n\n    return even_sum + even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n            even_index += 1\n    if even_index == 0:\n        print(\"No even numbers found at even positions.\")\n    else:\n        print(\"Sum of even numbers at even positions:\", sum)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_index_sum += arr[i]\n    \n    return even_sum + even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n    return even_sum, count\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_even_powers = 0\n    count = 0\n    \n    # loop through the first n even numbers\n    for i in range(2, n+1, 2):\n        # calculate the power of the number\n        power = i**5\n        # check if the number is even and if its power is less than or equal to n\n        if i % 2 == 0 and power <= n:\n            # add the power to the sum of even powers\n            sum_of_even_powers += power\n            # increment the count of even numbers that are raised to the fifth power\n            count += 1\n            \n    # return the sum of even powers and the count of even numbers that are raised to the fifth power\n    return sum_of_even_powers, count"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum_of_even_numbers = 0\n\n    for i in range(2, n + 1, 2):\n        sum_of_even_numbers += i**5\n\n    return sum_of_even_numbers"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_obj in test_list:\n        rear_list.append(tuple_obj[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # create empty list to store rear elements\n    rear_list = []\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # add the rear element of the tuple to the rear_list\n        rear_list.append(tup[1])\n    # return the list of rear elements\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index in range(len(test_tup1)):\n        test_tup1[index] -= test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Iterate through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n\n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    # print the result\n    print(test_tup1)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for index in range(len(test_tup1)):\n        result_tup += (test_tup1[index] - test_tup2[index],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must be the same length.\")\n        return\n    \n    # loop through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples must have the same length.'\n\n    subtraction_list = []\n    for i in range(len(test_tup1)):\n        subtraction_list.append(test_tup1[i] - test_tup2[i])\n    \n    return subtraction_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables\n    sum = 0\n    count = 0\n    \n    # iterate over even indices\n    for i in range(2, n+1, 2):\n        # calculate binomial coefficient\n        coeff = math.comb(n, i)\n        # check if coefficient is even\n        if i % 2 == 0:\n            # add to sum if even\n            sum += coeff\n            # increment count\n            count += 1\n    \n    return sum, count"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    The formula for the even index binomial coefficient is:\n        C(n,k) = n! / (k! * (n-k)!)\n    where n! is the factorial of n and k! is the factorial of k.\n\n    Example:\n        n = 5\n        C(5,2) = (5! / (2! * 3!)) = 15 / (2 * 3) = 3\n    '''\n    if n < 0:\n        return \"Error: n must be a non-negative integer.\"\n    if n == 0 or n == 1:\n        return 0\n    else:\n        return (math.factorial(n) / (math.factorial(2*k) * math.factorial(n-2*k))) * (2*k + 1)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients to zero\n    even_sum = 0\n\n    # Loop through each binomial coefficient from 0 to n\n    for i in range(n+1):\n        # Calculate the binomial coefficient i\n        binomial = math.comb(n, i)\n\n        # If the index is even, add the coefficient to the sum\n        if i % 2 == 0:\n            even_sum += binomial\n\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n\n    # Initialize sum to 0\n    sum_even_binomial_coeffs = 0\n\n    # Loop through each index from 0 to n\n    for i in range(n+1):\n\n        # Calculate the even index binomial coefficient\n        even_binomial_coeff = math.comb(n, i)\n\n        # Check if the coefficient is even\n        if i % 2 == 0:\n\n            # If it is even, add it to the sum\n            sum_even_binomial_coeffs += even_binomial_coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function calculates the sum of even index binomial coefficients for a given positive integer n.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += math.factorial(2*i-1) // math.factorial(i-1)\n    \n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    \n    for i in range(1, n+1):\n        coeff_sum += math.comb(n, i) * (2*i-1)**2\n    \n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even = 0\n    for i in range(1, n+1):\n        coeff = math.comb(n, i-1) * math.comb(i, 2*i-1)\n        if i % 2 == 0:\n            sum_even += coeff\n    return sum_even"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (1/3) * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14 * r**2 * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * 3.14159 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14 * r * r * h) / 3\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r\n    volume = area * h / 3.0\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # create an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    \n    # iterate over each key-value pair in the original dictionary\n    for key, value in dict.items():\n        # check if the value is greater than or equal to n\n        if value >= n:\n            # add the key-value pair to the filtered dictionary\n            filtered_dict[key] = value\n            \n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            if i == len(test_tup)-2:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            count += 1\n            break\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n            continue\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i-1]!= test_tup[i]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i, elem in enumerate(test_tup):\n        if elem == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Check if n is a positive integer\n    if type(n)!= int or n < 1:\n        return False\n\n    # Check if n is even\n    if n % 2 == 0:\n        return False\n\n    # Calculate the first term of the sequence\n    first_term = (4 * n * n) + 2\n\n    # Calculate the second term of the sequence\n    second_term = 2 * n + 1\n\n    # Calculate the nth term of the sequence\n    nth_term = first_term + second_term\n\n    # Return the nth term of the sequence\n    return nth_term"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) ** 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 1:\n        return (3 * n * n + 1) // 2\n    else:\n        return (2 * n * n - 1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a decagonal number\n    and False otherwise. A decagonal number is a number such that the sum of the squares of its\n    digits is equal to the sum of the squares of the digits. For example, the decagonal number\n    285 is a 10-digit number with a sum of the squares of the digits equal to 243, which is equal to \n    40 + 9 + 4 + 3 + 4 + 9 + 4 + 3 + 2 + 8 + 5 = 711. The function checks whether the given\n    number is a decagonal number or not.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    digits_squared = [digit**2 for digit in digits]\n    sum_of_squares = sum(digits_squared)\n    num_sum_of_squares = sum(digit for digit in str(n))\n    return num_sum_of_squares == sum_of_squares"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    num = 0\n    while i <= n:\n        if n - i == i:\n            num += i\n            i += 1\n        else:\n            i += 1\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    else:\n        decagonal_num = 0\n        i = 1\n        while i <= n:\n            decagonal_num += i ** 2\n            i += 1\n        return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    \n    # Calculate the number of rows required to form the nth decagonal number\n    rows = n//2\n    \n    # Initialize variables for row number and sum of cubes\n    row_num = 1\n    sum_cubes = 0\n    \n    # Iterate through rows and calculate cubes and sum of cubes\n    for i in range(rows):\n        sum_cubes += row_num**2\n        row_num += 1\n    \n    # Check if n is the sum of cubes of the first n/2 rows\n    if n == sum_cubes:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # initializing variables\n    num = 1\n    dec_num = 1\n    \n    # calculating the decagonal number\n    for i in range(2, n+1):\n        num += i\n        dec_num += num\n    \n    # returning the decagonal number\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # Calculate the first few decagonal numbers\n    decagonal_numbers = [int(2 * ((n + i) ** 2) + (2 * i) + 1) for i in range(1, 11)]\n\n    # Check if the nth decagonal number is present in the list\n    if n in decagonal_numbers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    \n    # Calculate the value of n\n    n_value = (n * (3 * n - 1)) // 2\n    \n    # Check if the value of n is a decagonal number\n    if n_value % 2!= 0:\n        return True\n    \n    return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # convert the list to set to remove duplicates\n    unique_list = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_list) == len(test_list):\n        # print the list is unique\n        print(\"The list is unique.\")\n    else:\n        # print the list is not unique\n        print(\"The list is not unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    \n    # check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have equal lengths.')\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists are not the same length.\"\n\n    # subtract the lists element-wise\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n\n    # return the result\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        return \"Error: lists have different lengths\"\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    return [a-b for a,b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digit_count = [0] * 10  # Initialize a list of ten zeroes to count the frequency of digits in the integer\n\n    for digit in str(n):\n        digit_count[int(digit)] += 1  # Increment the frequency count of the current digit\n\n    for i in range(10):\n        if digit_count[i] > 0 and digit_count[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10  # initialize frequency array with zeros\n    \n    for digit in digits:\n        freq[digit] += 1  # increment frequency of digit in freq array\n    \n    for digit in digits:\n        if freq[digit] > digit:\n            return False  # found a digit with frequency greater than its value\n        \n    return True  # all digits have frequency less than or equal to their value"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # check if the number is positive\n    if n < 0:\n        return False\n    \n    # initialize the frequency dictionary\n    freq = {}\n    \n    # iterate through the digits of the number\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # increment the count of the digit in the dictionary\n            freq[digit] += 1\n        else:\n            # add the digit to the dictionary with a count of 1\n            freq[digit] = 1\n    \n    # iterate through the keys of the frequency dictionary\n    for key in freq:\n        # check if the count of the digit is greater than the digit itself\n        if freq[key] > key:\n            return False\n    \n    # if all the digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer and checks whether the frequency of each digit in the integer\n    is less than or equal to the digit itself.\n\n    Args:\n    n (int): An integer to be validated.\n\n    Returns:\n    bool: True if the validation is successful, False otherwise.\n    \"\"\"\n    count = [0] * 10\n    for d in str(n):\n        count[int(d)] += 1\n        if count[int(d)] > int(d):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    # Loop through the digits in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its value\n        if digit in freq:\n            freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with a value of 1\n        else:\n            freq[digit] = 1\n    # Loop through the digits in the integer again and check their frequency\n    for digit in str(n):\n        # If the digit is not in the dictionary or its frequency is greater than the digit itself, return False\n        if digit not in freq or freq[digit] > int(digit):\n            return False\n    # If no errors are found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Loop through each digit in the integer\n    for digit in str(n):\n        # Check if the digit has already been encountered\n        if digit in freq:\n            # Increment the count of the digit in the dictionary\n            freq[digit] += 1\n        else:\n            # Add the digit to the dictionary with a count of 1\n            freq[digit] = 1\n            \n    # Loop through each digit in the integer\n    for digit in freq:\n        # Check if the frequency of the digit is greater than the digit itself\n        if freq[digit] > digit:\n            # Return False if the digit has a frequency greater than itself\n            return False\n    \n    # If no digit has a frequency greater than itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for d in str(n):\n        freq[int(d)] += 1\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Initialize a dictionary to store the frequency of each digit in the input integer\n    freq = {}\n    \n    # Loop through each digit in the input integer\n    for digit in str(n):\n        # If the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency by 1\n        else:\n            freq[digit] += 1\n    \n    # Loop through each digit in the input integer again to check its frequency\n    for digit in str(n):\n        # If the digit's frequency is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n    \n    # If no digit has a frequency greater than the digit itself, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x==element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"One or more items in the list are not equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0:\n        if all(x == element for x in list):\n            return True\n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # loop through each item in the list\n    for item in list:\n        # if the item is not equal to the given element, return False\n        if item!= element:\n            return False\n    # if we get to this point, all items in the list are equal to the given element\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a(?=(b{2,3}))')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?=.*ab)(?=.*a)(?=.*b)(?=.*c)(?=.*d)(?=.*e)(?=.*f)(?=.*g)(?=.*h)(?=.*i)(?=.*j)(?=.*k)(?=.*l)(?=.*m)(?=.*n)(?=.*o)(?=.*p)(?=.*q)(?=.*r)(?=.*s)(?=.*t)(?=.*u)(?=.*v)(?=.*w)(?=.*x)(?=.*y)(?=.*z)')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        print('The string contains the pattern:', match.group())\n    else:\n        print('The string does not contain the pattern')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a\\bb{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a.*b{2,3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile('a(?:b{2,3}){1}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\w{2,3}b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # initialize the max_sum variable\n    max_sum = float('-inf')\n    \n    # iterate through the array\n    for i in range(n): \n        # if i is less than k, then the sum of the i-th element and the first k-i elements is the maximum subarray sum\n        if i < k: \n            max_sum = max(max_sum, a[i] + sum(a[i:k]))\n        # if i is equal to k, then the sum of the i-th element and the first k-i elements is the maximum subarray sum\n        elif i == k: \n            max_sum = max(max_sum, a[i] + sum(a[i:k]))\n        # if i is greater than k, then the sum of the i-th element and the first k-i elements is the maximum subarray sum\n        else: \n            max_sum = max(max_sum, a[i] + max(sum(a[i-k+1:i]), sum(a[i-k:i])))\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_a = [a[0]]*k + a + [a[-1]]*k\n    max_sum = float('-inf')\n    current_sum = sum(a)\n    for i in range(n):\n        if current_sum > max_sum:\n            max_sum = current_sum\n        current_sum = current_sum - a[i] + mod_a[i]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and the current sum of the array\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Loop through the array k times\n    for i in range(k):\n        # Add the first element of the array to the current sum\n        curr_sum += a[0]\n        # Loop through the rest of the array\n        for j in range(1, n):\n            # Add the next element to the current sum\n            curr_sum += a[j]\n            # Update the maximum sum if the current sum is greater\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            # Subtract the last element from the current sum to remove the element that we have just added\n            curr_sum -= a[j-1]\n\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the first n elements of the array\n    first_sum = sum(a[:n])\n\n    # Initialize the largest sum to be the first sum\n    max_sum = first_sum\n\n    # Iterate over the remaining n-k+1 elements of the array\n    for i in range(n-k+1):\n        # Calculate the sum of the modified array formed by repeating the original array k times\n        modified_sum = first_sum - a[i]\n\n        # If the modified array has a larger sum, update the maximum sum\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # calculate the maximum sum for the first k elements of the given array\n    max_sum = sum(a[:k])\n    \n    # calculate the maximum sum for the last k elements of the given array\n    max_sum_last = sum(a[-k:])\n    \n    # calculate the maximum sum of a contiguous array in the modified array\n    max_sum_modified = max_sum_last - max_sum\n    \n    # return the maximum sum of a contiguous array in the modified array\n    return max_sum_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    max_sum = float('-inf')\n\n    # Create a new array by repeating the given array k times\n    repeated_array = [x for i in range(k) for x in a]\n\n    # Initialize the current sum and the previous sum to zero\n    current_sum = 0\n    prev_sum = 0\n\n    # Iterate through the modified array and calculate the sum of the current window\n    for i in range(n):\n        current_sum += repeated_array[i]\n        prev_sum = max(prev_sum, current_sum - repeated_array[i])\n\n        # Update the maximum sum found so far\n        max_sum = max(max_sum, prev_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # calculate the sum of the original array\n    original_sum = sum(a)\n    \n    # initialize the largest sum and its index\n    largest_sum = float('-inf')\n    index = -1\n    \n    # loop through the array and calculate the sum of the modified array\n    for i in range(n, n+k):\n        # add the element at index i to the modified array\n        modified_sum = original_sum - (a[i-n]*k) + (a[i-n+1]*k)\n        \n        # update the largest sum and its index if the current modified sum is greater\n        if modified_sum > largest_sum:\n            largest_sum = modified_sum\n            index = i\n    \n    # return the largest sum and its index\n    return largest_sum, index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum subarray sum of the original array\n    max_sum = max(sum(a[i:i+k]) for i in range(n-k+1))\n    # Find the minimum subarray sum that is not repeated k times\n    min_sum = float('inf')\n    for i in range(n-k):\n        current_sum = sum(a[i:i+k])\n        if current_sum < min_sum:\n            min_sum = current_sum\n    # Return the maximum of the two sums\n    return max(max_sum, min_sum)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    for i in range(k):\n        a_repeated = a * (i + 1)\n        sub_array_sum = sum(a_repeated)\n        if sub_array_sum > max_sum:\n            max_sum = sub_array_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    prev_max_sum = 0\n\n    # Repeat the given array k times\n    for i in range(k):\n        for j in range(n):\n            current_sum += a[j]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            prev_max_sum = max_sum\n        else:\n            current_sum -= a[j]\n\n    # Return the sum of the k largest elements\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    # iterate through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i*i\n    # return the sum of squares\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_squares = 0\n    for i in range(2, n+1, 2):\n        even_squares += i*i\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        square_of_i = i**2\n        if square_of_i % 2 == 0:\n            sum_of_squares += square_of_i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # Initialize sum to zero\n    total = 0\n    \n    # Loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of the current number to the sum\n        total += i**2\n    \n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(sublist) == 0:\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(sublist) == len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        current_length = len(list1[i])\n        if current_length > max(max_lengths):\n            max_lengths = [current_length]\n        elif current_length == max(max_lengths):\n            max_lengths.append(current_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) > max_lengths[-1]:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(x) for x in lst]\n        if len(lengths) > len(max_lengths):\n            max_lengths = lengths\n    return max_lengths\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths) or len(sublist) == 0:\n            max_lengths = [len(sublist)]\n        elif len(sublist) > max_lengths[0]:\n            max_lengths = [len(sublist)]\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the count of ways for each k\n    count = {0: 1}\n\n    # Loop through all values of k starting from 1\n    for i in range(1, k + 1): \n        # Calculate the number of ways for k-1 colors\n        count[i] = (count[i - 1] * (n - i + 1)) // i\n\n    # Return the count of ways for n colors\n    return count[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def helper(start, end, fence, colors, count, max_count):\n        if start > end:\n            return\n        \n        if start == end and colors[start] == fence[start]:\n            count[colors[start]] += 1\n            count[fence[start]] -= 1\n            if count[colors[start]] > 2:\n                return\n            elif count[colors[start]] == 2 and count[fence[start]] == 0:\n                max_count[colors[start]] = max(max_count[colors[start]], count[colors[start]])\n            return\n        \n        helper(start + 1, end, fence, colors, count, max_count)\n        if colors[start] == fence[start] and colors[start] == fence[end]:\n            count[colors[start]] += 1\n            count[fence[start]] -= 1\n            count[fence[end]] -= 1\n            if count[colors[start]] > 2:\n                return\n            elif count[colors[start]] == 2 and count[fence[start]] == 0:\n                max_count[colors[start]] = max(max_count[colors[start]], count[colors[start]])\n            count[colors[start]] -= 1\n            count[fence[start]] += 1\n            count[fence[end]] += 1\n        helper(start + 1, end - 1, fence, colors, count, max_count)\n\n    count = [0] * k\n    max_count = [0] * k\n    fence = sorted(list(range(n)))\n    helper(0, n - 1, fence, count, max_count)\n    return max_count[0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    if n < 2:\n        return 0\n    elif k == 1:\n        return n\n    else:\n        ways = 0\n        for i in range(2, n+1):\n            ways += count_no_of_ways(n-i, k-1)\n        return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create a 2D array to store the number of ways of painting the fence for each color combination\n    ways = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Initialize the first row and column with 1 because the fence can be painted with any color\n    for i in range(k+1):\n        ways[0][i] = 1\n\n    # Initialize the last row and column with 0 because no fence can be painted with more than 2 adjacent same-color posts\n    for i in range(n):\n        ways[i+1][k] = 0\n\n    # Fill the rest of the 2D array with the number of ways of painting the fence\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j-1] + ways[i-1][j]\n\n    # Return the number of ways of painting the fence with at most 2 adjacent same-color posts\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def num_ways(n, k):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if k == 1:\n            return 1\n        memo = {}\n        memo[0] = memo[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, k + 1):\n                if i == 2 and j == 1:\n                    memo[i] += memo[i - 1] * (j - 1)\n                else:\n                    memo[i] += memo[i - 1] * memo[j]\n        return memo[n]\n    \n    return num_ways(n, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a dictionary to store the count of ways for each number of colors\n    ways = {0: 1}\n\n    # Loop through each possible number of colors\n    for color in range(1, k+1):\n        # Initialize the count of ways for this color\n        ways[color] = 0\n        # Loop through each number of colors of the adjacent posts\n        for i in range(1, n+1):\n            # Check if the adjacent posts have the same color\n            if ways[i-1] > 0 and ways[color-i] > 0:\n                # If they do, add the count of ways for this color to the count of ways for the two adjacent colors\n                ways[color] += ways[i-1] * ways[color-i]\n\n    # Return the count of ways for the final color\n    return ways[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = dp[i-1][j]\n            elif i == n:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Count number of ways of painting the fence with one color\n    ways_one_color = n\n    \n    # Count number of ways of painting the fence with two colors\n    ways_two_colors = 0\n    \n    # Loop through all possible pairs of colors\n    for i in range(1, k):\n        ways_two_colors += n - ways_one_color\n        ways_one_color += 1\n    \n    # Return the number of ways of painting the fence\n    return ways_two_colors"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways to paint the fence\n    dp = [[0] * (n + 1) for i in range(k + 1)]\n\n    # Fill the 2D array in bottom-up manner\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if i == k: # If all posts have same color, there is only 1 way to paint the fence\n                dp[i][j] = 1\n            elif dp[i - 1][j - 1] == 1: # If adjacent posts have different colors, there are 2 ways to paint the fence\n                dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n            else: # If adjacent posts have same color, there are 2 ways to paint the fence\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n\n    # Return the value in the bottom-right corner of the 2D array\n    return dp[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    for i in range(k):\n        count += n - i - 1\n    \n    for i in range(1, k+1):\n        count += n*n - i*i - 2*n + i\n    \n    for i in range(1, k+1):\n        count += n*n - i*i + 2*n - i\n    \n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    result = n // m\n    return result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    quotient = n//m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        print(\"Error: Division by zero not allowed.\")\n        return None\n    elif m < 0:\n        n = n * -1\n        m = m * -1\n    q = n // m\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate quotient and remainder using integer division\n    quotient = n // m\n    remainder = n % m\n    \n    # check if remainder is negative\n    if remainder < 0:\n        # if remainder is negative, add m to the quotient\n        quotient += 1\n        \n    # round down the quotient to the nearest integer\n    quotient = quotient - quotient % 1\n    \n    # return the rounded quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    else:\n        return find(m, n % m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function will find the quotient of two numbers rounded down to the nearest integer.\n    '''\n    quotient = n // m  # integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient of n/m using integer division\n    quotient = n // m\n    # Calculate the remainder of n/m\n    remainder = n % m\n    # If remainder is less than 0, add m to the quotient to get a positive quotient\n    if remainder < 0:\n        quotient += 1\n    # Return the rounded down quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if quotient * m!= n:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as inputs and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes in two parameters, w and h, which represent the lengths of the two sides of a right angled triangle.\n    The function then calculates the length of the third side of the triangle using the formula:\n    c = sqrt(w^2 + h^2)\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the right triangle\n    s = (w + h) / 2\n    \n    # Calculate the length of the third side of the right triangle\n    third_side = math.sqrt(s**2 - w**2)\n    \n    # Return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the angle of the triangle\n    angle = math.acos((w**2 + h**2 - s**2) / (2*w*h))\n\n    # Return the third side of the triangle\n    return w * math.sin(angle)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    print(\"The third side of a right angled triangle is:\", round(s, 2))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = math.sqrt(w*w+h*h)\n    s = (w+h)/2\n    area_sq = area*area\n    return math.sqrt(area_sq - s*s)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculating the semi-perimeter\n    sp = (w + h) / 2\n    \n    # Calculating the area of the triangle\n    area = math.sqrt(sp * (sp - w) * (sp - h))\n    \n    # Calculating the third side of the triangle\n    third_side = area / (w * h)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # Calculate the semi-perimeter of the triangle\n    s = (w+h) / 2\n    \n    # Calculate the square of the semi-perimeter\n    sq_s = s**2\n    \n    # Calculate the hypotenuse of the right triangle\n    hyp = math.sqrt(sq_s - w**2)\n    \n    # Return the third side of the right triangle\n    return hyp"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # initialize maxval with the first element of the list\n    maxval = listval[0]\n\n    # loop through the rest of the elements in the list\n    for element in listval[1:]:\n\n        # if the current element is greater than maxval, update maxval\n        if element > maxval:\n            maxval = element\n\n    # return the maximum value found\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a list.\n\n    Parameters:\n    - lst: a list of arbitrary type\n\n    Returns:\n    - the maximum value in the list\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize max variable with the first value in the list\n    max_val = listval[0]\n    # Iterate through the rest of the list\n    for val in listval[1:]:\n        # Check if the current value is greater than the max value\n        if val > max_val:\n            # Update max value\n            max_val = val\n    # Return the max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = float('-inf')\n    for element in listval:\n        if type(element) == int:\n            max_val = max(max_val, element)\n        elif type(element) == float:\n            max_val = max(max_val, element)\n        elif type(element) == str:\n            max_val = max(max_val, len(element))\n        elif type(element) == bool:\n            max_val = max(max_val, 1 if element else 0)\n        elif type(element) == list:\n            max_val = max(max_val, max_val(element))\n        elif type(element) == tuple:\n            max_val = max(max_val, max_val(list(element)))\n        else:\n            print(\"Error: Unsupported data type.\")\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for val in listval[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize maximum value variable\n    max_val = float('-inf')\n    \n    # Loop through the list\n    for i in listval:\n        # Check if the current value is greater than the maximum value\n        if i > max_val:\n            # Update the maximum value\n            max_val = i\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a variable to store the sum of divisors\n    sum_div = 0\n    \n    # Loop through all the numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the number is divisible by the current number\n        if number % i == 0:\n            # If the number is divisible, add it to the sum of divisors\n            sum_div += i\n    \n    # Return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    sum_div = 0\n    \n    while divisor <= number:\n        if number % divisor == 0:\n            sum_div += divisor\n        divisor += 1\n    \n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Count the number of inversions in an array.\n    \"\"\"\n    inv_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # If array is empty or has only one element, return 0\n    if n == 0 or n == 1:\n        return 0\n    \n    # Divide the array into two halves\n    mid = n // 2\n    left_inv = get_Inv_Count(arr[:mid])\n    right_inv = get_Inv_Count(arr[mid:])\n    \n    # Create two pointers to the start of the arrays\n    i = j = 0\n    \n    # Traverse both arrays and count inversions\n    while i < mid and j < n:\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            j += 1\n            \n    # Count inversions between the pointers\n    left_inv += j\n    right_inv += n - mid\n    \n    return left_inv + right_inv"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - i\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function counts the number of inversions in an array.\n    '''\n    n = len(arr)\n\n    # Count inversions using divide-and-conquer approach\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    inv_count = 0\n    for i in range(n):\n        left = merge_sort(arr[:i])\n        right = merge_sort(arr[i:])\n\n        inv_count += len(left) * len(right)\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        left = i + 1\n        right = n\n        while left < right:\n            mid = (left + right) // 2\n            if arr[i] > arr[mid]:\n                left = mid + 1\n            else:\n                right = mid\n        inv_count += left - i - 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Count the inversions\n    inv_count = 0\n    i = 1\n    while i < n:\n        j = i\n        while j < n and arr[j] <= arr[i-1]:\n            j += 1\n        if j < n:\n            inv_count += n - j\n        i = j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        left = 0\n        right = i\n        while left < right:\n            if arr[left] > arr[right]:\n                count += (right - left)\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            elif arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    # Helper function for counting inversions\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        left = merge_sort(left)\n        right = merge_sort(right)\n        \n        return merge(left, right)\n    \n    # Helper function for merging two sorted arrays\n    def merge(left, right):\n        result = []\n        i = j = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        \n        result.extend(left[i:])\n        result.extend(right[j:])\n        \n        return result\n    \n    # Sort the array\n    sorted_arr = merge_sort(arr)\n    \n    # Count inversions using two pointers\n    inv_count = 0\n    i = 0\n    j = len(sorted_arr) - 1\n    \n    while i < j:\n        if sorted_arr[i] > sorted_arr[j]:\n            inv_count += j - i\n            i += 1\n        else:\n            j -= 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Initialize the count of inversions to zero\n    inv_count = 0\n    # Iterate over the sorted array\n    for i in range(n):\n        # Count the number of inversions by comparing adjacent elements\n        if i > 0 and arr[i] < arr[i-1]:\n            inv_count += i - 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Counting inversions using merge sort\n    def merge_sort(arr, low, high):\n        if low < high:\n            mid = (low + high) // 2\n            merge_sort(arr, low, mid)\n            merge_sort(arr, mid + 1, high)\n            inv_count = merge(arr, low, mid, high)\n        return inv_count\n\n    def merge(arr, low, mid, high):\n        inv_count = 0\n        i = low\n        j = mid + 1\n        k = low\n        # Merge the two sorted subarrays\n        while i <= mid and j <= high:\n            if arr[i] <= arr[j]:\n                arr[k] = arr[i]\n                i += 1\n            else:\n                arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        # Copy the remaining elements of the left subarray\n        while i <= mid:\n            arr[k] = arr[i]\n            i += 1\n            k += 1\n        # Copy the remaining elements of the right subarray\n        while j <= high:\n            arr[k] = arr[j]\n            j += 1\n            k += 1\n        return inv_count\n\n    inv_count = merge_sort(arr, 0, n - 1)\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    return [item for sublist in lst for item in sublist]"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes in a nested list and returns a flat list.\n\n    Args:\n    lst: A nested list\n\n    Returns:\n    A flat list containing all the elements from the original list\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list as an argument and flattens it into a single list.\n\n    Args:\n        lst: a nested list to be flattened\n\n    Returns:\n        a flattened list\n    '''\n    flattened_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Parameters:\n    - lst: A nested list to flatten.\n\n    Returns:\n    - A flattened version of the input list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for item in stdata:\n        price, quantity = item\n        total_price = price * quantity\n        if total_price > max_sum[item]:\n            max_sum[item] = total_price\n    return max(max_sum.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    The list of tuples should be in the form of (product_name, quantity, price).\n    '''\n\n    # create a dictionary to store the quantities and prices of each product\n    quantities = defaultdict(int)\n    prices = defaultdict(float)\n\n    # iterate over the list of tuples and update the quantities and prices dictionaries\n    for product, quantity, price in stdata:\n        quantities[product] += quantity\n        prices[product] += price\n\n    # calculate the maximum aggregate value by iterating over the quantities and prices dictionaries\n    max_agg = 0\n    for quantity in quantities.values():\n        for price in prices.values():\n            max_agg = max(max_agg, quantity * price)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the max aggregate for each size\n    max_aggs = defaultdict(int)\n\n    # Iterate through the list of tuples and update the max aggregate for each size\n    for size, price in stdata:\n        max_aggs[size] = max(max_aggs[size], price)\n\n    # Return the maximum aggregate for the largest size\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the count of each item\n    item_count = defaultdict(int)\n\n    # iterate through the list of tuples and update the count of each item\n    for item, price in stdata:\n        item_count[item] += 1\n\n    # initialize the maximum aggregate\n    max_agg = 0\n\n    # iterate through the dictionary and update the maximum aggregate if necessary\n    for count in item_count.values():\n        if count > max_agg:\n            max_agg = count\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    max_profit = defaultdict(int)\n    profit_dict = defaultdict(int)\n    \n    for stock_name, price, profit in stdata:\n        max_aggr[stock_name] = max(max_aggr[stock_name], price)\n        profit_dict[stock_name] = profit\n        max_profit[stock_name] = max(max_profit[stock_name], profit_dict[stock_name])\n        \n    max_profit_list = sorted(max_profit.items(), key=lambda x: x[1], reverse=True)\n    max_aggr_list = sorted(max_aggr.items(), key=lambda x: x[1], reverse=True)\n    \n    for stock in max_profit_list:\n        print(stock[0], max_profit[stock[0]])\n        \n    for stock in max_aggr_list:\n        print(stock[0], max_aggr[stock[0]])\n"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        # Extract the customer name and the aggregate from each tuple\n        name, aggregate = item\n        # Update the max_aggr dictionary with the new maximum aggregate\n        max_aggr[name] = max(max_aggr[name], aggregate)\n    # Extract the maximum aggregate for each customer from the max_aggr dictionary\n    max_aggr_list = [(k, max_aggr[k]) for k in max_aggr]\n    # Sort the list of tuples based on the maximum aggregate\n    max_aggr_list.sort(key=lambda x: x[1], reverse=True)\n    # Extract the maximum aggregate for each customer and return it as a list\n    return [item[1] for item in max_aggr_list]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the sum of each transaction\n    transaction_sum = defaultdict(int)\n\n    # Iterate through the list of transactions\n    for transaction in stdata:\n        # Extract the product and quantity from the transaction\n        product, quantity = transaction\n\n        # Update the sum of the transaction\n        transaction_sum[product] += quantity\n\n    # Calculate the maximum aggregate by iterating through the defaultdict and comparing the sum of each transaction\n    max_agg = max(transaction_sum.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Creating a defaultdict to store the maximum aggregate\n    max_aggr = defaultdict(int)\n\n    # Looping through each tuple in the list\n    for i in range(len(stdata)):\n\n        # Extracting the customer name and their sales amount from the tuple\n        cust_name, sales_amnt = stdata[i]\n\n        # Adding the sales amount to the corresponding maximum aggregate\n        max_aggr[cust_name] += sales_amnt\n\n    # Looping through each key-value pair in the defaultdict to find the maximum aggregate\n    for key, value in max_aggr.items():\n        if value > max(max_aggr.values()):\n            max_aggr[key] = value\n\n    # Returning the maximum aggregate\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    max_aggr[0] = 0\n    \n    for (profit, amount) in stdata:\n        if amount > max_aggr[profit]:\n            max_aggr[profit] = amount\n            \n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_dict = defaultdict(int)\n    max_aggregate_count = 0\n    \n    for item in stdata:\n        if max_aggregate_dict[item[0]] < item[1]:\n            max_aggregate_dict[item[0]] = item[1]\n            max_aggregate_count += 1\n    \n    if max_aggregate_count == 0:\n        return \"No maximum aggregate found.\"\n    \n    max_aggregate_list = []\n    for item in max_aggregate_dict:\n        max_aggregate_list.append((item, max_aggregate_dict[item]))\n    \n    max_aggregate_list.sort(key=lambda x: x[1], reverse=True)\n    \n    max_aggregate_result = \"\"\n    for item in max_aggregate_list:\n        max_aggregate_result += str(item[0]) + \":\" + str(item[1]) + \" \"\n    \n    return max_aggregate_result[:-1]"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(1, 2**2*n+1): \n        if i % 2**n == 0: \n            count += 1\n        else: \n            count -= 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Generate all possible binary sequences of length 2n\n    binary_seq = []\n    for i in range(2**n):\n        binary_seq.append(format(i, 'b').zfill(n))\n    \n    # Calculate the sum of the first n bits and the sum of the last n bits for each sequence\n    count = 0\n    for seq in binary_seq:\n        sum1 = int(seq[:n])\n        sum2 = int(seq[n:])\n        if sum1 == sum2:\n            count += 1\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        for j in range(i, 2**n):\n            if i + j == 2**(n-1):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if i%2 == 0:\n            if sum([int(digit) for digit in bin(i)[2:].zfill(n)]) == sum([int(digit) for digit in bin(i)[-n:].zfill(n)]):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(2*n)\n        sum_first = 0\n        sum_last = 0\n        for j in range(n):\n            sum_first += int(binary_str[j])\n            sum_last += int(binary_str[n-j-1])\n        if sum_first == sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        binary = bin(i)[2:]\n        if sum(binary[:n]) == sum(binary[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        a = bin(i)[2:].zfill(n)\n        b = bin(i-1)[2:].zfill(n)\n        if int(a) + int(b) == i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        num = bin(i)[2:].zfill(n)\n        first_sum = int(num[:n])\n        last_sum = int(num[-n:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:]\n        if int(num[0:n]) == int(num[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    while d:\n        d = d.values()\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(1 + max(dict_depth(v) for v in d.values()),  # increase depth of keys by 1\n              max(dict_depth(k) for k in d.keys()))  # find maximum depth of values and keys\n"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize a variable to keep track of the depth\n    depth = 0\n    \n    # loop through the dictionary and recursively call the function\n    for key, value in d.items():\n        if isinstance(value, dict):\n            # increase the depth by 1 for each nested dictionary\n            depth += 1\n        # if the value is not a dictionary, check if it is a list\n        elif isinstance(value, list):\n            # increase the depth by 1 for each nested list\n            depth += 1\n    \n    # return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = 1 + dict_depth(value)\n            if new_depth > depth:\n                depth = new_depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n        else:\n            depth = 0\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to zero\n    depth = 0\n\n    # iterate through dictionary\n    for key in d:\n        # if key is a dictionary, recursively call function\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n        # if key is a list, iterate through list and find max depth of nested dictionaries\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item))\n\n    # return depth + 1 (to account for current dictionary)\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max([dict_depth(v) for k, v in d.items()])\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = 1 + dict_depth(item)\n                    if depth > max_depth:\n                        max_depth = depth\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a Python function to find element at a given index after number of rotations.\n    \"\"\"\n    n = len(arr)\n\n    # Find the index of the smallest element in the current subarray\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] >= ranges[index]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # Calculate the index of the element in the original array after rotating the subarray to the left by k elements\n    k = rotations[index]\n    right = n - 1 - k\n    left = right - k + 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] >= ranges[index]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # Return the element at the calculated index in the original array\n    return arr[right]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after number of rotations.\n\n    Parameters:\n        arr (list): List of integers.\n        ranges (list): List of ranges for each rotation.\n        rotations (int): Number of rotations.\n        index (int): Index of element to find.\n\n    Returns:\n        int: Element at index after number of rotations.\n    \"\"\"\n    total_elements = len(arr)\n    current_index = 0\n\n    # Loop through rotations\n    for i in range(rotations):\n        # Calculate the range of elements to rotate\n        start_range = (i * total_elements) % total_elements\n        end_range = ((i + 1) * total_elements) % total_elements\n\n        # Rotate the current range\n        arr[start_range:end_range], arr[current_index:current_index+end_range] = arr[current_index:current_index+end_range], arr[start_range:end_range]\n\n        # Update the current index\n        current_index = (current_index + ranges[i]) % total_elements\n\n    # Find the element at the given index after rotations\n    if current_index == index:\n        return arr[index]\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of rotations, and an index, and returns the element at the given index\n    after the given number of rotations.\n\n    Args:\n    - arr: The original array.\n    - ranges: A list of pairs, where each pair represents the start and end indices of a rotation.\n    - rotations: The number of rotations to perform.\n    - index: The index of the element to find after the rotations.\n\n    Returns:\n    - The element at the given index after the given number of rotations.\n    '''\n\n    # Initialize the current index to the original array.\n    current_index = 0\n\n    # Iterate through the rotations list.\n    for i in range(rotations):\n        # Calculate the start and end indices of the current rotation.\n        start_index = ranges[i][0]\n        end_index = ranges[i][1]\n\n        # Calculate the number of elements to shift.\n        shift_count = end_index - start_index\n\n        # If the current rotation shifts all elements to the left, reverse the current array.\n        if shift_count == 0:\n            arr = arr[::-1]\n\n        # If the current rotation shifts some elements to the right, shift the elements to the left.\n        elif shift_count > 0:\n            arr = arr[shift_count:] + arr[:shift_count]\n\n        # If the current rotation shifts some elements to the left, shift the elements to the right.\n        else:\n            arr = arr[-shift_count:] + arr[:-shift_count]\n\n        # Update the current index.\n        current_index += shift_count\n\n    # Return the element at the given index after the rotations.\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Find the element at the given index before rotating.\n    original_element = arr[index]\n\n    # Perform the given number of rotations.\n    for i in range(rotations):\n        # Find the index of the smallest element after rotation.\n        smallest_index = arr.index(min(arr[i:] + arr[:i]))\n\n        # Find the range of elements after rotation.\n        range_start = i + smallest_index\n        range_end = arr.index(max(arr[i:] + arr[:i]))\n\n        # Rotate the elements in the range.\n        arr[range_start:range_end+1] = arr[range_start:range_end+1][::-1]\n\n    # Find the element at the given index after rotating.\n    rotated_element = arr[index]\n\n    # Return the original element and the rotated element after rotating.\n    return original_element, rotated_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # check if all rotations are possible\n    for r in range(rotations):\n        if not all(arr[i][index] in range(ranges[i][0], ranges[i][1] + 1) for i in range(len(arr))):\n            return None\n\n    # find the element at the given index after rotations\n    if index == 0:\n        return arr[0]\n    elif index == len(arr[0]) - 1:\n        return arr[-1]\n    else:\n        for i in range(len(arr)):\n            if index >= ranges[i][0] and index < ranges[i][1] + 1:\n                return arr[i][index - ranges[i][0]]\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def find_element_at_index(arr, ranges, rotations, index, current_range, current_rotation):\n        if current_range == len(ranges) and current_rotation == rotations:\n            return arr[index]\n        elif current_range < len(ranges):\n            new_range = current_range + ranges[current_range]\n            return find_element_at_index(arr, ranges, rotations, index, new_range, current_rotation)\n        else:\n            new_rotation = current_rotation + rotations\n            return find_element_at_index(arr, ranges, rotations, index, current_range, new_rotation)\n    \n    return find_element_at_index(arr, ranges, rotations, index, 0, 0)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Inputs:\n        arr: List of integers.\n        ranges: List of tuples. Each tuple contains the start and end index of the range.\n        rotations: Number of rotations to perform.\n        index: Integer. The index at which we want to find the element after rotations.\n\n    Returns:\n        The element at the given index after rotations.\n    '''\n\n    # Initialize variables\n    original_index = index\n    final_index = 0\n\n    # Perform rotations\n    for i in range(rotations):\n        for range_start, range_end in ranges:\n            if range_start > original_index:\n                continue\n            if range_start < original_index < range_end:\n                final_index = range_start + (original_index - range_start) % (range_end - range_start)\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0:\n        return arr[index]\n    elif rotations % 2 == 0:\n        return find_Element(arr,ranges,rotations//2,index)\n    else:\n        return find_Element(arr,ranges,rotations//2+1,index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in three arguments:\n    arr: list - The array of integers to be rotated.\n    ranges: list - The range of integers to check for rotation.\n    rotations: int - The number of rotations to be performed.\n    index: int - The index of the element to be found.\n\n    The function then performs the rotations and finds the element at the given index.\n    \"\"\"\n    n = len(arr)\n    min_val, max_val = ranges[0], ranges[1]\n\n    # Perform rotations\n    for i in range(rotations):\n        if min_val == max_val:\n            # If the minimum and maximum values are same, the element will not rotate\n            break\n        else:\n            min_val, max_val = max_val, min_val + (max_val - min_val)\n\n    # Find the element at the given index after rotations\n    element = arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # initialize count to 0\n    count = 0\n    # initialize current index to 0\n    current_index = 0\n    # initialize result to None\n    result = None\n    \n    # iterate over all elements in the array\n    while count < len(arr):\n        # get the next range and its index\n        next_range, next_range_index = ranges[current_index]\n        # rotate the array by the next range and update count and current index\n        arr = rotate(arr, next_range)\n        count += next_range\n        current_index = (current_index + 1) % len(ranges)\n        # check if we have found the element at the given index\n        if count == index:\n            result = arr[index]\n            break\n    \n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    matches = re.findall(pattern, words)\n    if len(matches) == 0:\n        return None\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Use regular expressions to match words that start with 'p'\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern,''.join(words))\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    matches = re.findall(pattern, words)\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    result = re.findall(pattern, words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    matches = [match for match in pattern.finditer(words) if match.group(0) == 'p']\n    if len(matches) == 2:\n        return matches[0].group(0), matches[1].group(0)\n    else:\n        return \"No matching words found\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = '^p.*'\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    pattern = r'p.*' # matches any word starting with letter 'p'\n    matches = re.findall(pattern, words)\n\n    if matches:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-zA-Z]+'\n    result = re.findall(pattern,''.join(words))\n    return result"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n    \n    # initialize the maximum sum to zero\n    max_sum = 0\n    \n    # initialize an array to store the sum of increasing subsequence\n    dp = [0] * (n + 1)\n    \n    # fill the first k elements of the array with the values of the array\n    for i in range(k):\n        dp[i] = a[i]\n        \n    # fill the remaining elements of the array using the dynamic programming approach\n    for i in range(k, n + 1):\n        dp[i] = max(dp[i - 1], a[i] + dp[i - k])\n        \n        # update the maximum sum if the current sum is greater\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # base case: if kth element is greater than n, return 0\n    if k > n:\n        return 0\n\n    # if current index is greater than or equal to k, then we can't include the kth element\n    if index >= k:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n\n    # initialize variables\n    dp = [0] * n\n    dp[index] = a[index]\n\n    # fill in the dp array using dynamic programming\n    for i in range(index + 1, n):\n        # if the current element is greater than the maximum element seen so far, update max\n        if dp[i - 1] < a[i]:\n            dp[i] = dp[i - 1] + a[i]\n        else:\n            dp[i] = a[i]\n\n    # initialize variables\n    max_sum = dp[n - 1]\n    curr_sum = dp[n - 1]\n\n    # find the maximum sum of increasing subsequence till the kth element\n    for i in range(n - 2, k - 1, -1):\n        curr_sum = max(dp[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize sum and max_sum variables\n    sum = 0\n    max_sum = float('-inf')\n\n    # Initialize current subsequence sum and index\n    curr_sum = a[index]\n    curr_index = index\n\n    # Traverse through the array from 0 to n-1\n    for i in range(n):\n        # Check if current element is smaller than kth element\n        if i < k and a[i] < a[k]:\n            # If yes, add current element to current subsequence sum and move to next index\n            curr_sum += a[i]\n            curr_index = i\n        # Check if the current subsequence sum is greater than max_sum\n        elif curr_sum > max_sum:\n            # If yes, update max_sum and update current subsequence sum and index\n            max_sum = curr_sum\n            sum = curr_sum\n            curr_sum = a[i]\n            curr_index = i\n        # Check if the current subsequence sum is equal to max_sum and current element is greater than previous element\n        elif curr_sum == max_sum and a[i] > a[curr_index]:\n            # If yes, update current subsequence sum and index\n            curr_sum = a[i]\n            curr_index = i\n\n    # Add last element of subsequence to the sum\n    if curr_index < k:\n        curr_sum += a[curr_index]\n\n    # Return max_sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize an empty list to store the maximum sum of increasing subsequence until a[i]\n    # and also including the given kth element\n    max_sum_list = [0] * (n + 1)\n    # Initialize the first element of the list to itself\n    max_sum_list[1] = a[1]\n    # Loop through all the elements from 2 to n\n    for i in range(2, n + 1):\n        # Initialize the maximum sum of increasing subsequence until a[i]\n        temp_sum = a[i]\n        # Loop through all the elements from 1 to k (excluding k)\n        for j in range(1, k + 1):\n            # If a[i] is greater than the jth element, then add a[i] to the current maximum sum\n            if a[i] > max_sum_list[j]:\n                temp_sum += a[i]\n        # Update the maximum sum of increasing subsequence until a[i]\n        max_sum_list[i] = temp_sum\n    # Return the maximum sum of increasing subsequence until a[k]\n    return max_sum_list[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n    start = index\n    \n    for i in range(index, n + 1):\n        if i == index or a[i] < a[start]:\n            dp[i] = dp[start] + a[i]\n            start = i\n        else:\n            dp[i] = a[start]\n        \n        if dp[i] > max_sum and i >= k:\n            max_sum = dp[i]\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create an empty list to store the sum of increasing subsequence ending at each index\n    sums = []\n    \n    # Loop through all the indices from 0 to i-1\n    for i in range(n):\n        # If the index is less than k, then the sum of increasing subsequence ending at that index is 0\n        if i < k:\n            sums.append(0)\n        # If the index is greater than or equal to k, then calculate the sum of increasing subsequence ending at that index by considering all possible increasing subsequences from that index to i-1 and adding the sum of the kth element to all such subsequences.\n        else:\n            # Initialize the sum of the kth element to 0\n            max_sum = 0\n            \n            # Loop through all possible increasing subsequences from that index to i-1\n            for j in range(i):\n                # Calculate the sum of the current increasing subsequence by adding the previous sum and the value of the kth element\n                current_sum = sums[j] + a[i]\n                \n                # Update the maximum sum if necessary\n                if current_sum > max_sum:\n                    max_sum = current_sum\n            \n            # Add the maximum sum of the current increasing subsequence to the list of sums\n            sums.append(max_sum)\n    \n    # Return the maximum sum of the increasing subsequence ending at index i\n    return sums[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if index == n:\n        return 0\n\n    if index == k:\n        return max(a[index], max_sum_increasing_subseq(a, n, index+1, k))\n\n    return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k-1))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n\n    # Initialize the maximum sum and current subsequence\n    max_sum = float('-inf')\n    current_subseq = [0] * (n-index)\n\n    # Iterate over the array from the prefix to the ith index\n    for i in range(index, n):\n        # Calculate the maximum sum of the subsequence that ends at index i and includes a given kth element\n        temp_sum = max(current_subseq[j] + a[i-index+j] for j in range(k-index, i-k+1))\n\n        # Update the maximum sum and the current subsequence if the current subsequence has a greater sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            current_subseq = [a[i-index+j] for j in range(k-index, i-k+1)]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    dp = [float('-inf')] * n\n    dp[index] = a[index]\n\n    for i in range(index, n):\n        if a[i] > a[index] and i < k:\n            dp[i] = a[i]\n        elif a[i] > a[index] and i == k:\n            curr_sum = max(a[i], dp[i - 1]) + a[k]\n            max_sum = max(max_sum, curr_sum)\n        else:\n            curr_sum = max(dp[i - 1], curr_sum)\n            dp[i] = curr_sum\n            max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    \n    dp = [0] * n\n    dp[0] = a[0]\n    max_sum = dp[0]\n    \n    for i in range(1, n):\n        if i == index:\n            if k == i:\n                dp[i] = a[i]\n            else:\n                dp[i] = max(dp[i-1], dp[i-k-1] + a[i])\n        else:\n            dp[i] = dp[i-1] + a[i]\n            if dp[i] > max_sum:\n                max_sum = dp[i]\n    \n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Initialize a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Create a list to hold the output\n    colon = []\n    \n    # Iterate over the elements of the input tuple\n    for i in range(m):\n        # Add the i-th element of the input tuple to the output list\n        colon.append(tuplex_copy[i])\n        \n        # Remove the i-th element of the input tuple\n        tuplex_copy = tuplex_copy[:i] + tuplex_copy[i+1:]\n    \n    # Add the remaining elements of the input tuple to the output list\n    for i in range(n):\n        colon.append(tuplex_copy[i])\n    \n    # Return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # deepcopy the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n\n    # get the first n elements of the new_tuplex\n    colon_tuplex = new_tuplex[:m]\n\n    # return the colon_tuplex\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the input is a tuple\n    if type(tuplex)!= tuple:\n        print(\"Error: input should be a tuple\")\n        return None\n    # Check if the input tuple has length n\n    if len(tuplex)!= n:\n        print(\"Error: the input tuple should have length\", n)\n        return None\n    # Check if the input tuple has m elements\n    if m > len(tuplex):\n        print(\"Error: the input tuple should have at least\", m, \"elements\")\n        return None\n    # Create a new list to store the colon\n    colon = []\n    # Loop through the tuple and append elements in order to the new list\n    for i in range(m):\n        colon.append(tuplex[i])\n    # Return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # get the length of the tuple\n    length = len(tuplex_copy)\n    # get the step size\n    step = length // n\n    # initialize an empty list to store the colon\n    colon = []\n    # iterate over the columns\n    for i in range(n):\n        # get the starting index for this column\n        start = i*step\n        # get the ending index for this column\n        end = start + step\n        # add the elements in this column to the colon list\n        colon.append(tuplex_copy[start:end])\n    # return the colon list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    -----------\n    tuplex: tuple\n        A tuple containing the elements to be colonized.\n    m: int\n        The number of elements in the colon to be returned.\n    n: int\n        The number of elements that should be included in each colon.\n\n    Returns:\n    --------\n    list: A list containing the colonized elements.\n    \"\"\"\n\n    # Create a copy of the input tuple\n    colontuple = deepcopy(tuplex)\n\n    # Initialize the colonized list\n    colonized = []\n\n    # Loop through the tuples\n    for i in range(0, len(colontuple), n):\n\n        # Append the current tuple to the colonized list\n        colonized.append(tuple(colontuple[i:i + n]))\n\n    # Return the colonized list\n    return colonized"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = \"\"\n    for j in range(n):\n        for i in range(m):\n            index = j*m + i\n            if index < len(tuplex):\n                colon += str(tuplex[index]) + \" \"\n            else:\n                colon += \"  \"\n    colon = colon[:-1] # Remove the last space character\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[:m] + (new_tuplex[m:n],) + new_tuplex[n:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    copy_tuplex = deepcopy(tuplex)\n    \n    if len(copy_tuplex) > m:\n        return tuple(copy_tuplex[i:i+m] for i in range(0,len(copy_tuplex),n))\n    else:\n        return tuple(copy_tuplex[i:i+m] for i in range(0,len(copy_tuplex),n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    copy_tuplex = deepcopy(tuplex)\n\n    # Get the number of rows and columns in the tuple\n    rows = len(tuplex)\n    cols = len(tuplex[0])\n\n    # Get the number of elements in the colon\n    num_elements = m*n\n\n    # Get the index of the first element in the colon\n    start_index = rows * cols - num_elements\n\n    # Create a new list to store the colon\n    colon_list = []\n\n    # Loop through the columns of the copy tuple\n    for col in range(cols):\n        # Get the index of the first element in the current column\n        cur_start_index = start_index + (col * rows)\n\n        # Loop through the rows of the copy tuple\n        for row in range(rows):\n            # If the index is within the bounds of the tuple, add the element to the colon list\n            if cur_start_index >= 0 and cur_start_index < len(copy_tuplex):\n                colon_list.append(copy_tuplex[cur_start_index])\n\n            # Increment the index\n            cur_start_index += 1\n\n    # Convert the colon list to a tuple\n    colon_tup = tuple(colon_list)\n\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Initialize the output list\n    col = []\n\n    # Get the length of the input tuple\n    length = len(tuplex)\n\n    # Loop through the input tuple\n    for i in range(length):\n        # Create a new list to hold the values from the input tuple\n        row = []\n\n        # Loop through the columns of the current row\n        for j in range(m):\n            # Get the value of the current cell in the input tuple\n            value = tuplex[i][j]\n\n            # Add the value to the row list\n            row.append(value)\n\n        # Add the row list to the output list\n        col.append(row)\n\n    # Return the output list\n    return col"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the input lists in ascending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Calculate the products of the first N elements of each list\n    product1 = nums1[0] * nums1[1] * nums1[2] *... * nums1[N-1]\n    product2 = nums2[0] * nums2[1] * nums2[2] *... * nums2[N-1]\n    \n    # Return the product of the two products\n    return product1 * product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    # Find the product of largest elements in each list\n    prod1 = max(nums1)\n    prod2 = max(nums2)\n    # Calculate the product of largest products from each list\n    product = prod1 * prod2\n    # Calculate the number of products to be selected from each list\n    product_count = N // 2\n    # Calculate the product of largest products from each list\n    product = product * (product_count * 2)\n    # Sort the lists based on their maximum elements\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Calculate the largest products\n    for i in range(product_count):\n        # Calculate the product of two largest elements from each list\n        temp = nums1[i] * nums2[i]\n        # Add the product to the list of largest products\n        if temp > largest_products[-1] or largest_products == []:\n            largest_products.append(temp)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    largest_products = []\n    for factor in range(1, N+1):\n        factor1_products = []\n        factor2_products = []\n        for num1 in nums1:\n            for num2 in nums2:\n                product = num1 * num2\n                if product > factor1_products[factor-1]:\n                    factor1_products[factor-1] = product\n                if product > factor2_products[factor-1]:\n                    factor2_products[factor-1] = product\n        largest_products.append(factor1_products[factor-1] * factor2_products[factor-1])\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum product\n    max_product1 = max_product2 = float('-inf')\n    \n    # Loop through the first N elements of the lists\n    for i in range(N):\n        # Calculate the product of the i-th element from the first list and all the elements from the second list\n        product1 = nums1[i] * nums2[nums2.index(max(nums2)) + 1:]\n        \n        # Calculate the product of the i-th element from the second list and all the elements from the first list\n        product2 = nums2[i] * nums1[nums1.index(max(nums1)) + 1:]\n        \n        # Update the maximum product if the current product is greater\n        if product1 > max_product1:\n            max_product1 = product1\n        \n        if product2 > max_product2:\n            max_product2 = product2\n    \n    # Return the maximum product(s)\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store largest products and their indices\n    largest_products = []\n    largest_products_indices = []\n\n    # Loop through the list of indices to select one factor from each list\n    for i in range(len(nums1)):\n        # Calculate the product of the i-th element from both lists\n        product = nums1[i] * nums2[i]\n\n        # If the product is larger than the current largest product, add it to the list of largest products\n        if product > largest_products[-1]:\n            largest_products.append(product)\n            largest_products_indices.append(i)\n\n        # If the length of the largest products list is less than N, add the current index to the list\n        if len(largest_products) < N:\n            largest_products.append(product)\n            largest_products_indices.append(i)\n\n        # If the length of the largest products list is N, check if the current product is larger than the smallest product in the list\n        elif len(largest_products) == N:\n            if product > min(largest_products):\n                largest_products.pop(0)\n                largest_products.append(product)\n                largest_products_indices.pop(0)\n                largest_products_indices.append(i)\n\n    # Sort the list of indices of the largest products in descending order\n    largest_products_indices.sort(reverse=True)\n\n    # Return the indices of the largest products\n    return largest_products_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if the two input lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both input lists must have the same length.\")\n    \n    # Initialize the maximum and minimum values of the products to be found\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    # Loop through the input lists and find the largest and smallest products\n    for i in range(N):\n        for j in range(N):\n            # Find the product of the ith and jth elements from the first list\n            prod1 = nums1[i] * nums1[j]\n            \n            # Find the product of the ith and (N-j)th elements from the second list\n            prod2 = nums2[i] * nums2[j]\n            \n            # Update the maximum and minimum products found so far\n            max_product = max(max_product, prod1)\n            min_product = min(min_product, prod2)\n    \n    # Return the number of products found, along with the largest and smallest products found\n    return (N, max_product, min_product)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables for storing largest products\n    largest1 = float('-inf')\n    largest2 = float('-inf')\n    largest3 = float('-inf')\n\n    # iterate through each possible combination of factors\n    for i in range(N):\n        # for each factor, find the largest product of that factor from both lists\n        factor1 = max(nums1[j] for j in range(N))\n        factor2 = max(nums2[k] for k in range(N))\n        factor3 = max(nums1[j] * nums2[k] for j in range(N) for k in range(N) if j!= k)\n\n        # update largest products as necessary\n        largest1 = max(largest1, factor1)\n        largest2 = max(largest2, factor2)\n        largest3 = max(largest3, factor3)\n\n    # return the specified number of largest products\n    return largest1, largest2, largest3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return \"Invalid input.\"\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i], nums2[i]))\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two pointers to track the current positions in the lists\n    i, j = 0, 0\n\n    # Initialize two variables to store the maximum product from each list\n    max_product1, max_product2 = 0, 0\n\n    # Iterate N times\n    for _ in range(N):\n        # Calculate the product of the current pair of factors\n        current_product1 = nums1[i] * nums2[j]\n\n        # Update the maximum product for the first list\n        if current_product1 > max_product1:\n            max_product1 = current_product1\n\n        # Move the pointer for the first list to the right\n        i += 1\n\n        # If the pointers have reached the end of the lists, break out of the loop\n        if i == len(nums1):\n            break\n\n        # Calculate the product of the current pair of factors\n        current_product2 = nums1[i] * nums2[j]\n\n        # Update the maximum product for the second list\n        if current_product2 > max_product2:\n            max_product2 = current_product2\n\n        # Move the pointer for the second list to the right\n        j += 1\n\n    # Return the maximum product\n    return max_product1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    max_product1 = 0\n    max_product2 = 0\n\n    # Loop through the first N elements of each list\n    for i in range(N):\n        # Calculate the product of the largest numbers\n        product1 = nums1[i] * nums2[i]\n\n        # Update the maximum product if the current product is larger\n        if product1 > max_product1:\n            max_product1 = product1\n\n    # Loop through the last N elements of each list\n    for j in range(len(nums1) - N):\n        # Calculate the product of the largest numbers\n        product2 = nums1[j] * nums2[j+N]\n\n        # Update the maximum product if the current product is larger\n        if product2 > max_product2:\n            max_product2 = product2\n\n    return max(max_product1, max_product2)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns their maximum value.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of those numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as arguments and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert string to list of characters\n    lst = list(str1)\n    # Convert list to tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the leftmost unset bit by shifting the binary representation of n one bit to the left and then ANDing with 1\n    bit = n & (n - 1)\n\n    # Shift the binary representation of n one bit to the right and then OR with the leftmost unset bit to get the updated value\n    return n | bit << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert n to binary and find the leftmost unset bit\n    binary = bin(n)[2:]\n    while binary.count('0') == len(binary):\n        binary = bin(n - 1)[2:]\n    # convert the binary representation back to an integer\n    return int(binary, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the variable to keep track of the unset bits\n    unset_bits = 0\n    \n    # Iterate over all the bits in the binary representation of n\n    for i in range(32):\n        # Extract the i-th bit from n\n        bit = n & (1 << i)\n        \n        # If the bit is 0, set the i-th bit in unset_bits to 1\n        if bit == 0:\n            unset_bits |= (1 << i)\n    \n    # Set the left most unset bit to 1\n    unset_bits = unset_bits | (1 << 31)\n    \n    # Return the modified number\n    return unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Traverse the binary representation of n and find the leftmost unset bit.\n    leftmost_unset_bit = 0\n    while n & (1 << leftmost_unset_bit) == 0:\n        leftmost_unset_bit += 1\n\n    # Set the leftmost unset bit to 1.\n    n |= (1 << leftmost_unset_bit)\n\n    # Return the modified number.\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to 1\n    unset_bit = 1\n    \n    # Iterate through all possible values of unset_bit\n    while unset_bit <= n:\n        # Check if the bit is set in the number n\n        if (n & unset_bit) == unset_bit:\n            # If the bit is set, unset it and move to the next unset bit\n            n &= ~unset_bit\n            unset_bit <<= 1\n        else:\n            # If the bit is not set, move to the next unset bit\n            unset_bit <<= 1\n    \n    # Return the updated number with the left most unset bit set\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the number to binary representation\n    binary_representation = bin(n)[2:]\n\n    # Initialize the left most unset bit to 0\n    left_most_unset_bit = 0\n\n    # Iterate through the binary representation from right to left\n    for i in range(len(binary_representation)):\n        # If the current bit is 1, then the left most unset bit is the current index\n        if binary_representation[i] == '1':\n            left_most_unset_bit = i\n            break\n\n    # Set the left most unset bit in the binary representation to 1\n    binary_representation = binary_representation[:left_most_unset_bit] + '1' + binary_representation[left_most_unset_bit+1:]\n\n    # Convert the binary representation back to decimal\n    return int(binary_representation, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Find the position of the leftmost unset bit in binary representation of n\n    i = 0\n    while i < 32 and (n & (1 << i)):\n        i += 1\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << i)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index variable\n    i = 0\n    \n    # Loop through each bit of the binary representation of n\n    while n >> i & 1 == 0:\n        i += 1\n    \n    # Set the leftmost unset bit to 1\n    n |= (1 << i)\n    \n    # Return the updated binary representation of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the unset bits\n    unset_bits = 0\n    \n    # Loop through the bits of the integer\n    for bit in bin(n)[2:]:\n        if bit == '0':\n            unset_bits += 1\n            # If there are no unset bits, break out of the loop\n            if unset_bits == 0:\n                break\n    \n    # Calculate the position of the leftmost unset bit\n    left_most_unset_bit_position = unset_bits - 1\n    \n    # Set the leftmost unset bit to 1\n    n |= 1 << left_most_unset_bit_position\n    \n    # Return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # find the first set bit\n    index = 0\n    while (n & (1 << index)) == 0:\n        index += 1\n\n    # set the left most unset bit to 1\n    n = n | (1 << index)\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as input and returns its volume.\n    \"\"\"\n    vol = math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * (r ** 2) * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone with a given radius and height.\n\n    :param r: The radius of the cone.\n    :type r: float\n    :param h: The height of the cone.\n    :type h: float\n    :return: The volume of the cone.\n    :rtype: float\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r * r * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cone(r,h):\n    '''\n    Calculate the volume of a cone.\n\n    :param r: radius of the cone\n    :param h: height of the cone\n    :return: volume of the cone\n    '''\n    # calculate the volume of the cone using the formula: V = 1/3 * \u03c0 * r\u00b2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as input arguments\n    and returns the volume of the cone.\n    \"\"\"\n    area = math.pi * r**2 # Formula for the area of the cone\n    volume = (1/3) * area * h # Formula for the volume of the cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, representing the radius and height of the cone.\n    The function returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r ** 2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    for i in range(1, n+1):\n        if i == 1 or i == 2:\n            highest_power = i\n        elif (i & (i-1)) == 0:\n            highest_power = i\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    # if n is 1, then it is already a power of 2\n    if n == 1:\n        return n\n    # if n is not a power of 2, then find the highest power of 2 less than or equal to n\n    else:\n        return highest_Power_of_2(n >> 1) << 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 0\n    while n > 0:\n        i += 1\n        n >>= 1\n\n    return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables to keep track of the current power and the highest power\n    power = 1\n    highest_power = 0\n\n    # Loop through all numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the current number is a power of 2\n        while num % 2 == 0:\n            # If the current number is a power of 2, update the highest power and divide the current number by 2\n            highest_power = power\n            num /= 2\n        # If the current number is not a power of 2, multiply it by 2 and increment the power\n        else:\n            num *= 2\n            power += 1\n\n    # Return the highest power found\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(1, n+1): \n        if i & (i-1) == 0 and i!= n: \n            return i "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize highest power of 2 as 1\n    highest = 1\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n\n        # If the current number is a power of 2, set highest to that number\n        if i & (i-1) == 0:\n            highest = i\n\n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    i = 1\n    while i <= n:\n        if i == n:\n            return i\n        i = i << 1\n    return i - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power = 2*power\n    return power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Base case: 0th and 1st lucas numbers are 0 and 2 respectively\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        # Base case: nth lucas number is (n-1)th lucas number + (n-1)th lucas number - (n-2)th lucas number\n        lucas_n = find_lucas(n-1) + find_lucas(n-1) - find_lucas(n-2)\n        return lucas_n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number using the Sieve of Eratosthenes.\n    \"\"\"\n    primes = [True] * (n + 1)\n    primes[0], primes[1] = False, False\n\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n + 1, i):\n                primes[j] = False\n\n    return sum(range(2, n + 1)) if primes[n] else None"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # initialize first two lucas numbers\n    lucas = [0, 2]\n    \n    # loop through the remaining numbers and calculate them\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    \n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize variables\n    lucas = [2]\n    # Loop through the sequence\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        next_num = lucas[-1] + lucas[-2]\n        # Append the next number to the list\n        lucas.append(next_num)\n    # Return the last number in the sequence\n    return lucas[-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_lucas = find_lucas(n-1)\n        lucas = prev_lucas + prev_lucas\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop over all elements in the list and apply the format string to each element\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    new_list = []\n    for element in list_:\n        formatted_element = string.format(element)\n        new_list.append(formatted_element)\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_item = string.format(item)\n        formatted_list.append(formatted_item)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the final output\n    result = {}\n    \n    # Iterate over the three lists\n    for i in range(len(l1)):\n        # Append the i-th element of each list to the new key in the result dictionary\n        result[l1[i]] = l2[i]\n        result[l1[i]] = l3[i]\n    \n    # Return the final result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1: list\n        A list of values.\n    l2: list\n        A list of keys.\n    l3: list\n        A list of values that match the keys in l2.\n\n    Returns:\n    dict\n        A nested dictionary that matches the input lists.\n    '''\n\n    # Create an empty dictionary to hold the data\n    data = {}\n\n    # Loop through each item in the first list\n    for i in range(len(l1)):\n        # Get the current item and its corresponding key\n        item = l1[i]\n        key = l2[i]\n        # Get the value corresponding to the key in the second list\n        value = l3[l2.index(key)]\n        # Add the item and value to the dictionary\n        data[key] = value\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for arg in args:\n        if isinstance(arg, list):\n            for item in arg:\n                if isinstance(item, dict):\n                    for key, value in item.items():\n                        if key in result:\n                            if isinstance(result[key], list):\n                                result[key].append(value)\n                            else:\n                                result[key] = [result[key], value]\n                        else:\n                            result[key] = value\n                else:\n                    result[arg.index(item)] = item\n        else:\n            result[arg] = arg\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the data\n    data = {}\n\n    # loop through the first list and add it to the data dictionary\n    for item in l1:\n        data[item] = l1.index(item)\n\n    # loop through the second list and add it to the data dictionary with keys from the first list\n    for item in l2:\n        data[item] = data[l1[l2.index(item)]]\n\n    # loop through the third list and add it to the data dictionary with keys from the second list\n    for item in l3:\n        data[item] = data[l2[l3.index(item)]]\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function takes multiple lists and converts them into a nested dictionary.\n    '''\n    # initialize an empty dictionary\n    data = {}\n    \n    # loop through each list and add its items to the dictionary\n    for i, lst in enumerate(lists):\n        for item in lst:\n            # if the item is not already in the dictionary, add it\n            if item not in data:\n                data[item] = []\n            \n            # add the index of the current list to the item's value\n            data[item].append(i)\n    \n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the converted data\n    data = {}\n\n    # loop through the lists and add the data to the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = l2[i]\n        data[l1[i]]['data'] = l3[i]\n\n    # return the converted dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(lists)):\n        key = lists[i][0]\n        value = lists[i][1]\n        nested_dict[key] = value\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for l in args:\n        for i in range(len(l)):\n            result[l[i]] = {}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): List of lists containing elements that will be converted to dictionary keys.\n    l2 (list): List of lists containing elements that will be converted to dictionary values.\n    l3 (list): List of lists containing elements that will be converted to dictionary keys.\n\n    Returns:\n    dict: The nested dictionary created by converting all three lists.\n    '''\n    # Create an empty dictionary to store the converted elements\n    result = {}\n\n    # Loop through all the lists\n    for i in range(len(l1)):\n        # Loop through all the elements in the current list\n        for j in range(len(l1[i])):\n            # Convert the elements to dictionary keys\n            key = l1[i][j]\n            # Convert the elements to dictionary values\n            value = l2[i][j]\n            # Append the key-value pair to the result dictionary\n            result[key] = value\n\n    # Return the final dictionary\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    def f(x):\n        return max((f(x // 2) + f(x // 3) + f(x // 4) + f(x // 5)), x)\n\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 15\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nprint(get_max_sum(1)) # Output: 1\nprint(get_max_sum(2)) # Output: 2\nprint(get_max_sum(3)) # Output: 4\nprint(get_max_sum(4)) # Output: 8\nprint(get_max_sum(5)) # Output: 15\nprint(get_max_sum(6)) # Output: 19"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n == 1:\n            return n\n        elif n % 2 == 0:\n            return f(n/2) + f(n/3) + f(n/4) + f(n/5) + n\n        else:\n            return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n\n    return max(f(i) for i in range(1, n+1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    # Base case\n    if n == 2:\n        return 5\n    \n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    elif n > 1:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def power(base, exponent):\n        result = 1\n        for i in range(exponent):\n            result *= base\n        return result\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    def f(n):\n        return max((f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5)) + n, n)\n\n    return f(n)\n\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The maximum sum possible by using the given equation is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * get_max_sum(n//2) + n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = []\n    for item in input_list:\n        lengths.append(len(item))\n    max_len = max(lengths)\n    return [item for item in input_list if len(item) == max_len]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize max_length to the first element of the list\n    max_length = len(input_list[0])\n    # Loop through the rest of the list and compare its length to max_length\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n\nprint(check_distinct(test_tup)) # Output: True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        # if yes, then the tuple contains no duplicates\n        return True\n    else:\n        # if no, then the tuple contains duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of characters in the string\n    freq = {}\n\n    # Iterate through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the string again to find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n\n    It works by first creating a dictionary where the keys are the characters in the string and the values are their frequency in the string.\n    It then loops through the keys in the dictionary and returns the first key that appears more than once.\n\n    If there is no non-repeated character, it returns None.\n\n    Example:\n    first_non_repeating_character(\"abcabcbb\") returns \"b\"\n    first_non_repeating_character(\"abcd\") returns None\n    first_non_repeating_character(\"aaaa\") returns \"a\"\n    '''\n\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    for key in freq_dict:\n        if freq_dict[key] > 1:\n            return key\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(string):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            del char_dict[char]\n        else:\n            char_dict[char] = True\n    for char in string:\n        if char not in char_dict:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If there are multiple characters that have the same frequency, it returns the first character alphabetically.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first character with a frequency of 1\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for i, char in enumerate(str1):\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Initialize two variables to keep track of the first character and the frequency of that character\n    first_char = None\n    freq = 0\n    \n    # Iterate through the string\n    for char in str1:\n        # If the current character is not equal to the first character, update the first character and frequency\n        if char!= first_char:\n            first_char = char\n            freq = 1\n        # Otherwise, increment the frequency\n        else:\n            freq += 1\n        \n        # If the frequency reaches two, the first non-repeated character has been found and we can return it\n        if freq == 2:\n            return first_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # loop through the string and increment the frequency of each character in the dictionary\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    # loop through the string again and return the first character that has a frequency of 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return match.group(0)\n    else:\n        return \"Not a valid string\""
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string) is None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    else:\n        return string[0] == string[-1]\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Determine the length of the sorted list\n    n = len(sorted_numbers)\n    \n    # Calculate the middle index\n    mid = n // 2\n    \n    # If the length of the list is odd, the median is the middle number\n    if n % 2 == 1:\n        median = sorted_numbers[mid]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # find the median of the three sorted numbers\n    n = len(sorted_numbers)\n    if n % 2 == 0:  # if the number of elements is even\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:  # if the number of elements is odd\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the sum of the three numbers\n    total = numbers[0] + numbers[1] + numbers[2]\n\n    # Calculate the average of the three numbers\n    average = total / 3\n\n    # Check if the sum of the numbers is odd or even\n    if total % 2 == 0:\n        # If it's even, return the average of the two middle numbers\n        middle_index = total // 2\n        return (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    else:\n        # If it's odd, return the middle number\n        return numbers[total // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a,b,c])\n    \n    # Find the middle index\n    mid = len(nums)//2\n    \n    # Check if the length of the list is odd or even\n    if len(nums) % 2 == 0:\n        # If it's even, return the average of the two middle numbers\n        return (nums[mid-1] + nums[mid]) / 2\n    else:\n        # If it's odd, return the middle number\n        return nums[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    nums = sorted([a,b,c])\n    # Check if the length of the array is odd or even\n    if len(nums) % 2 == 0:\n        # If the length is even, return the average of the two middle numbers\n        return (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    else:\n        # If the length is odd, return the middle number\n        return nums[len(nums)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle number\n    middle_number = (sorted_numbers[1] + sorted_numbers[2]) / 2\n\n    return middle_number"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n    mid_point = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[mid_point - 1] + sorted_list[mid_point]) / 2\n    else:\n        return sorted_list[mid_point]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr) // 2]\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    arr.sort()\n    n = len(arr)\n    if n % 2 == 0:\n        return (quickselect(arr, n // 2 - 1) + quickselect(arr, n // 2)) / 2\n    else:\n        return quickselect(arr, n // 2)"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the sorted numbers\n    length = len(sorted_numbers)\n\n    # Check if the length of the sorted numbers is odd or even\n    if length % 2 == 0:\n        # Return the average of the two middle numbers\n        return (sorted_numbers[length//2 - 1] + sorted_numbers[length//2])/2\n    else:\n        # Return the middle number\n        return sorted_numbers[length//2]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digit_sum = 0\n    for num in nums:\n        # convert the number to a string and iterate over its digits\n        for digit in str(num):\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize the sum variable\n    sum_of_digits = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string and iterate through each character\n        for digit in str(num):\n            # Add the integer value of the character to the sum variable\n            sum_of_digits += int(digit)\n            \n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a list to store the sum of digits\n    digit_sum = []\n\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n\n        # Compute the sum of digits in the current number\n        current_sum = sum(digits)\n\n        # Append the current sum of digits to the digit_sum list\n        digit_sum.append(current_sum)\n\n    # Return the final list of digit sums\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and loop through each character\n        for digit in str(num):\n            # Add the digit to the sum_of_digits variable\n            sum_of_digits += int(digit)\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = sum(int(d) for d in str(num))\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result += digit_sum\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # Add up all the digits\n        total_digits = sum(digits)\n        # Add the total digits to the running total\n        total_sum += total_digits\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        result += temp\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        sum_digits = sum([int(digit) for digit in str(num)])\n        total_sum += sum_digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        num_str = str(num)\n        for digit in num_str:\n            digit = int(digit)\n            sum += digit\n    return sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple to be the same length as the input tuples\n    result_tup = ()\n    # Iterate through the tuples and perform the bitwise xor operation\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n    # Pad the result tuple with zeros if necessary to make it the same length as the input tuples\n    if len(result_tup) < len(test_tup1):\n        result_tup += (0,) * (len(test_tup1) - len(result_tup))\n    if len(result_tup) < len(test_tup2):\n        result_tup += (0,) * (len(test_tup2) - len(result_tup))\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize a variable to store the result of the bitwise xor operation\n    result = 0\n    \n    # Iterate through each element in the first tuple\n    for num1 in test_tup1:\n        # Iterate through each element in the second tuple\n        for num2 in test_tup2:\n            # Perform the bitwise xor operation between the two numbers\n            result ^= num1 ^ num2\n    \n    # Return the result of the bitwise xor operation\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1,test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # XOR the elements of the two tuples using the ^ operator\n    xor_result = tuple(map(lambda x,y: x^y, test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = 0\n    for i in range(len(test_tup1)):\n        xor ^= test_tup1[i] ^ test_tup2[i]\n    return xor"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # initialize the result tuple with zeros\n    result_tup = (0, 0)\n    # iterate over the elements of the input tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation on the corresponding elements of the input tuples\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # initialize the result tuple to the size of the first tuple\n    result_tup = (0,) * len(test_tup1)\n\n    # perform bitwise xor operation on each element of the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    unique_tuples = set()\n    for key, value in freq_dict.items():\n        unique_tuples.add(key)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    # create a set to store unique tuples\n    unique_tuples = set()\n    # iterate through the list\n    for item in test_list:\n        # convert the item to a tuple\n        tuple_item = tuple(item)\n        # add the tuple to the set\n        unique_tuples.add(tuple_item)\n    # return the size of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        key = tuple(item)\n        if key in freq_dict:\n            freq_dict[key] += 1\n        else:\n            freq_dict[key] = 1\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for elem in test_list:\n        unique_tuples.add(tuple(elem))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        try:\n            if isinstance(test_tup1[i], tuple):\n                if isinstance(test_tup2[i], tuple):\n                    result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n                else:\n                    result_tup.append(test_tup1[i] + test_tup2[i])\n            else:\n                if isinstance(test_tup2[i], tuple):\n                    result_tup.append(test_tup1[i] + add_nested_tuples(test_tup2[i]))\n                else:\n                    result_tup.append(test_tup1[i] + test_tup2[i])\n        except IndexError:\n            result_tup.append(None)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(sum(test_tup1[i]) + sum(test_tup2[i]))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_list = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            if isinstance(test_tup2[i], tuple):\n                result_list.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                raise ValueError(\"The second element in the nested tuple must be a tuple\")\n        else:\n            if isinstance(test_tup2[i], tuple):\n                raise ValueError(\"The first element in the nested tuple must be a tuple\")\n            else:\n                result_list.append(test_tup1[i] + test_tup2[i])\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initializing an empty list to store the result\n    result = []\n\n    # iterating over the outer tuple to extract the elements\n    for i in range(len(test_tup1)):\n        # initializing a list to store the elements of the inner tuple\n        inner_list = []\n        # iterating over the elements of the outer tuple to extract the elements\n        for j in range(len(test_tup1[i])):\n            # adding the elements of the inner tuple\n            inner_list.append(test_tup1[i][j] + test_tup2[i][j])\n        # adding the inner list to the result\n        result.append(inner_list)\n\n    # returning the result\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same number of elements.\")\n        return\n    \n    # Create a new tuple with elements added\n    result_tup = tuple(test_tup1[i] + test_tup2[i] for i in range(len(test_tup1)))\n    \n    # Print the result tuple\n    print(\"Result tuple:\", result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple length mismatch\")\n        return\n\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        elif isinstance(test_tup1[i], tuple) or isinstance(test_tup2[i], tuple):\n            print(\"Error: Cannot add elements of tuples to scalar values\")\n            return\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple\n    result = ()\n    # Loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # Append the sum of corresponding elements\n        result += (test_tup1[i] + test_tup2[i],)\n    # Return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        new_tup = tuple([test_tup1[i][j] + test_tup2[i][j] for j in range(len(test_tup1[i]))])\n        result.append(new_tup)\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have same number of elements.\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (tuplex in tuple1)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two tuples, tuplex and tuple1. It checks whether an element exists within the tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple.\")\n    else:\n        print(\"The element does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    :param tuplex: The tuple to search in.\n    :type tuplex: tuple\n    :param tuple1: The element to search for.\n    :type tuple1: Any\n    :return: True if the element exists in the tuple, False otherwise.\n    :rtype: bool\n    \"\"\"\n    return tuple1 in tuplex"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            print(element, \"exists in\", tuple1)\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i in tuple1: \n            print(f\"{i} exists in the tuple.\") \n        else: \n            print(f\"{i} does not exist in the tuple.\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1: \n        print(f\"{tuplex} exists in {tuple1}\") \n    else: \n        print(f\"{tuplex} does not exist in {tuple1}\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    return tuplex in tuple1"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: #if the number is even, return True\n        return True\n    else: #else, return False\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    # check if the number is negative\n    if x < 0:\n        x = -x\n    # check if the number is even or odd\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = x % 2\n    if parity == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Calculate the parity of the number\n    parity = x % 2\n\n    # Return the result as a boolean value\n    return parity == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if the parity of the given number is odd, else it returns False.\n    \"\"\"\n    if x % 2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even\")\n    else:\n        print(f\"{x} is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n\n    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if x is odd or even\n    if x % 2 == 0: \n        # if x is even, return True\n        return True\n    else: \n        # if x is odd, return False\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns a boolean indicating whether the parity of the number is odd or even.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Create a list of digits of the input number\n    num_str = str(n)\n    num_list = list(num_str)\n\n    # Reverse the list\n    num_list.reverse()\n\n    # Convert the list back to string\n    new_num_str = ''.join(num_list)\n\n    # Convert the string back to integer and add 1 to it\n    new_num = int(new_num_str) + 1\n\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # initialize the next bigger number as the given number\n    next_bigger = n\n\n    # loop through the digits of the given number\n    for digit in str(n):\n        # if the digit is greater than 9, loop through the digits of the next bigger number\n        if int(digit) > 9:\n            for digit2 in str(next_bigger):\n                # if the digit is less than or equal to 9, append it to the next bigger number and break out of the loop\n                if int(digit2) <= 9:\n                    next_bigger = str(int(digit2) * 10 + int(digit))\n                    break\n        else:\n            # if the digit is less than or equal to 9, append it to the next bigger number and break out of the loop\n            next_bigger = str(int(digit) + 1)\n            break\n\n    # return the next bigger number\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # convert the integer to a string\n    s = str(n)\n    \n    # create a list of tuples representing the digits of the number\n    digits = [(int(c), i) for i, c in enumerate(s)]\n    \n    # sort the list by the length of the digits\n    digits.sort(key=lambda x: len(x[0]), reverse=True)\n    \n    # rearrange the digits and convert the result back to an integer\n    rearranged = sum([d[1] * 10**i for d in digits])\n    \n    # return the rearranged number\n    return rearranged"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    next_bigger_number = 0\n    for digit in digits:\n        next_bigger_number *= 10\n        next_bigger_number += int(digit)\n    return next_bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    for i in range(len(digits)):\n        if digits[i] == '9':\n            digits[i] = '0'\n        else:\n            digits[i] = str(int(digits[i])+1)\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Reverse the list of digits\n    digits.reverse()\n    # Count the number of occurrences of each digit\n    count = {}\n    for digit in digits:\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    # Find the digits with the highest count\n    top_digits = [digit for digit in count if count[digit] == max(count.values())]\n    # Reverse the list of digits with the highest count\n    top_digits.reverse()\n    # Join the digits with the highest count into a single string\n    biggest_digit = \"\".join(str(digit) for digit in top_digits)\n    # Convert the string of digits into an integer and increment it by 1\n    new_n = int(biggest_digit) + 1\n    # Convert the integer back into a list of digits and join them into a single string\n    new_digits = [str(digit) for digit in str(new_n)]\n    # Reverse the list of digits\n    new_digits.reverse()\n    # Join the reversed list of digits into a single string\n    new_biggest_digit = \"\".join(new_digits)\n    # Convert the string of digits into an integer\n    new_n = int(new_biggest_digit)\n    # Return the new number\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # convert the given number to a string\n    num = str(n)\n    # create a list of the digits of the number\n    digits = [int(digit) for digit in num]\n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    # convert the sorted digits back to a string and concatenate them with a space\n    result = ''.join(map(str, digits))\n    # convert the concatenated string back to an integer and add one to it\n    result = int(result) + 1\n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    n_str = str(n)\n    # Reverse the string\n    n_str_rev = n_str[::-1]\n    # Iterate through the reversed string and build a new string\n    new_str = ''\n    for digit in n_str_rev:\n        # Check if the current digit is 9\n        if int(digit) == 9:\n            # If yes, add 1 to the next digit\n            new_digit = str(int(n_str_rev[n_str_rev.index(digit) + 1]))\n        else:\n            # If no, add the current digit\n            new_digit = digit\n        new_str += new_digit\n    # Convert the new string to an integer and add 1\n    next_bigger = int(new_str) + 1\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the input number to a string\n    s = str(n)\n    # initialize an empty list to store the new digits\n    new_digits = []\n    # iterate over the digits of the input number in reverse order\n    for i in range(len(s) - 1, -1, -1):\n        # if the current digit is smaller than 5, add it to the new digits list\n        if int(s[i]) < 5:\n            new_digits.append(s[i])\n    # convert the new digits list to a string and convert it back to an integer\n    new_n = int(''.join(new_digits))\n    # return the next bigger number\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    while True:\n        digits = [int(digit) for digit in str(n)]\n        digits.sort(reverse=True)\n        n = int(''.join(str(digit) for digit in digits))\n        if digits[0] == 0:\n            return 0\n        elif n < 10:\n            return n\n        else:\n            n += 1"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Sort the given lists\n    nums1.sort()\n    nums2.sort()\n    # Initialize the result list\n    result = []\n    # Create a min heap to store the pairs with the smallest element first\n    min_heap = []\n    # Initialize the i and j pointers\n    i, j = 0, 0\n    # Loop until the result list is not full\n    while len(result) < k:\n        # If i pointer is less than the length of the first list, then we have found a pair which consist of a number from the first list and the minimum number from the second list\n        if i < len(nums1):\n            min_heapq.heappush(min_heap, (nums1[i], nums2[0]))\n            # Add the pair to the result list\n            result.append((nums1[i], nums2[0]))\n            # Increment the i pointer\n            i += 1\n        # If j pointer is less than the length of the second list, then we have found a pair which consist of a number from the second list and the minimum number from the first list\n        elif j < len(nums2):\n            # Add the pair to the result list\n            result.append((nums2[j], nums1[0]))\n            # Increment the j pointer\n            j += 1\n        # If both pointers are not less than the length of the lists, then we have found a pair which consist of a number from the second list and the minimum number from the second list\n        else:\n            # Add the pair to the result list\n            result.append((nums2[j], nums2[0]))\n            # Increment the j pointer\n            j += 1\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs of elements from the two arrays\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # If the pair is smaller than the smallest pair in the heap, add it to the heap and check if k is reached\n            if num1 + num2 < min_heap[0][0]:\n                heapq.heappushpop(min_heap, [num1 + num2, (num1, num2)])\n                if len(min_heap) == k:\n                    return [min_heap[0][1][0], min_heap[0][1][1]]\n    # If k is not reached, return None\n    return None"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n\n    for num1 in nums1:\n        while len(heap) > 0 and heap[0][1] > num1:\n            heapq.heappop(heap)\n        heapq.heappush(heap, (num1, 1))\n\n        for num2 in nums2:\n            if len(heap) > 0 and heap[0][0] < num2:\n                pair = (-heap[0][0], -heap[0][1])\n                heapq.heappop(heap)\n                heapq.heappush(heap, pair)\n\n                if len(heap) == k:\n                    return heapq.nsmallest(k, heap)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n    \n    # sort both arrays and create a heap with the smaller elements\n    nums1.sort()\n    nums2.sort()\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    for num in nums2:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            min_heap[0] = num\n            heapq.heapify(min_heap)\n        \n        if len(min_heap) == k:\n            result = [min_heap[0], min_heap[-1]]\n            return result\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap of size k\n    min_heap = []\n\n    # Iterate over both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add (num1, num2) to the min heap\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n            # If the size of the min heap becomes greater than k, remove the smallest element from the heap\n            while len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Extract the k smallest pairs from the heap\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(min_heap)[1])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the elements of nums1\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        # If the size of min_heap is greater than k, remove the smallest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Create a min heap to store the elements of nums2\n    min_heap2 = []\n    for num in nums2:\n        heapq.heappush(min_heap2, num)\n        # If the size of min_heap2 is greater than k, remove the smallest element\n        if len(min_heap2) > k:\n            heapq.heappop(min_heap2)\n    \n    # Initialize two pointers i and j to 0\n    i = 0\n    j = 0\n    \n    # Initialize an empty list to store the pairs\n    pairs = []\n    \n    # Iterate until i and j meet at the end of the two arrays\n    while i < len(nums1) and j < len(nums2):\n        # If the current element in nums1 is smaller than the current element in nums2, add a pair and increment i\n        if min_heap[i] < min_heap2[j]:\n            pairs.append((min_heap[i], min_heap2[j]))\n            heapq.heappop(min_heap)\n            i += 1\n        # Otherwise, add a pair and increment j\n        else:\n            pairs.append((min_heap[i], min_heap2[j]))\n            heapq.heappop(min_heap2)\n            j += 1\n    \n    # If there are any remaining elements in the min_heap, add them to the pairs list\n    if len(min_heap) > 0:\n        for num in min_heap:\n            pairs.append((num, None))\n    if len(min_heap2) > 0:\n        for num in min_heap2:\n            pairs.append((None, num))\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    # Create a dictionary to store the indices of the smallest elements in each list\n    index_dict = {}\n    # Iterate through the first list\n    for i in range(len(nums1)):\n        # Check if the index of the smallest element in the current list is already in the dictionary\n        if nums1[i] not in index_dict:\n            # If it is not, add it to the dictionary and insert it into the heap\n            index_dict[nums1[i]] = i\n            heapq.heappush(min_heap, -nums1[i])\n            # If the size of the heap is greater than k, pop the smallest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n        # If the index of the smallest element in the current list is already in the dictionary, continue\n        else:\n            # If the index of the current list is less than the index of the smallest element in the current list, continue\n            if index_dict[nums1[i]] < i:\n                continue\n            # If the index of the current list is greater than the index of the smallest element in the current list, swap the indices and continue\n            else:\n                index_dict[nums1[i]], index_dict[nums1[index_dict[nums1[i]]]] = index_dict[nums1[index_dict[nums1[i]]]], index_dict[nums1[i]]\n                continue\n    # Iterate through the second list\n    for j in range(len(nums2)):\n        # Check if the index of the smallest element in the current list is already in the dictionary\n        if nums2[j] not in index_dict:\n            # If it is not, add it to the dictionary and insert it into the heap\n            index_dict[nums2[j]] = j\n            heapq.heappush(min_heap, -nums2[j])\n            # If the size of the heap is greater than k, pop the smallest element from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n        # If the index of the smallest element in the current list is already in the dictionary, continue\n        else:\n            # If the index of the current list is less than the index of the smallest element in the current list, continue\n            if index_dict[nums2[j]] < j:\n                continue\n            # If the index of the current list is greater than the index of the smallest element in the current list, swap the indices and continue\n            else:\n                index_dict[nums2[j]], index_dict[nums2[index_dict[nums2[j]]]] = index_dict[nums2[index_dict[nums2[j]]]], index_dict[nums2[j]]\n                continue\n    # Initialize an empty list to store the k smallest pairs\n    pairs = []\n    # Iterate through the min heap until it is empty\n    while len(min_heap) > 0:\n        # Pop the smallest element from the heap\n        pair = -heapq.heappop(min_heap)\n        # If the size of the heap is less than k, continue\n        if len(min_heap) < k:\n            continue\n        # If the size of the heap is greater than k, break out of the loop\n        else:\n            # If the element at the smallest index in the list is already in the pairs list, continue\n            if pair in [p[0] for p in pairs]:\n                continue\n            # If the element at the smallest index in the list is not in the pairs list, add it to the pairs list\n            else:\n                pairs.append((pair, pair))\n            break\n    # Return the k smallest pairs\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # We will create a min heap with the smallest numbers in the first array and the smallest numbers in the second array\n    # The smaller number will be at the root of the heap\n    min_heap = [(float('inf'), float('inf'))]\n    # We will use a variable to keep track of the current number of pairs found\n    pairs_found = 0\n\n    for num1 in nums1:\n        for num2 in nums2:\n            # If the current number of pairs found is less than k, we can add this pair to the heap\n            if pairs_found < k:\n                if num1 < min_heap[0][0] or (num1 == min_heap[0][0] and num2 < min_heap[0][1]):\n                    heapq.heappushpop(min_heap, (num1, num2))\n                    pairs_found += 1\n            # If the current number of pairs found is equal to k, we can break out of the loop\n            elif pairs_found == k:\n                break\n\n    # We will return the smallest k pairs found in the heap\n    result = []\n    while min_heap and pairs_found >= k:\n        result.append(min_heap[0])\n        min_heap = min_heap[1:]\n        pairs_found -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Define a custom class to store the pairs and their distances\n    class Pair:\n        def __init__(self, pair, dist):\n            self.pair = pair\n            self.dist = dist\n    \n    # Sort the two arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Initialize a min heap to store the pairs\n    min_heap = []\n    \n    # Initialize the distance to the first element of the first array\n    distance1 = 0\n    \n    # Initialize the minimum distance to the second element of the second array\n    min_distance2 = float('inf')\n    \n    # Iterate through the two arrays\n    for i in range(len(nums1)):\n        # If the heap is empty or the current element of the second array is smaller than the minimum distance to the second element of the heap, update the minimum distance to the second element of the heap\n        if not min_heap or nums2[i] < min_heap[0].pair[1]:\n            min_heap = [Pair([nums1[i], nums2[i]], distance1)]\n            min_distance2 = nums2[i]\n        else:\n            # If the current element of the second array is equal to the minimum distance to the second element of the heap, add the pair to the heap\n            min_heap.append(Pair([nums1[i], nums2[i]], distance1))\n        \n        # Remove the pair with the smallest distance from the heap if the heap has more than k elements\n        if len(min_heap) > k:\n            distance1 += 1\n            min_heap = heapq.nsmallest(k, min_heap, key=lambda x: x.dist)\n    \n    # Extract the k smallest pairs from the heap\n    pairs = []\n    for _ in range(k):\n        pair = heapq.heappop(min_heap).pair\n        pairs.append(pair)\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    nums1.sort()\n    nums2.sort()\n    min_heap = []\n    result = []\n\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (-nums1[i], i))\n\n        while len(min_heap) > k:\n            heappop(min_heap)\n\n        while len(result) < k and len(min_heap) > 0:\n            pair = heappop(min_heap)\n            result.append((pair[1], pair[0]))\n\n        if len(result) == k:\n            break\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize the minimum product as infinity\n    min_product = float('inf')\n    # iterate over the tuples in the list\n    for i in range(len(list1)):\n        # for each tuple, iterate over the rest of the list and find the pair of tuples with the minimum product\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(2):\n                # find the product of the elements in the pair of tuples\n                product *= list1[i][k] * list1[j][k]\n            # update the minimum product if the current tuple has a smaller product\n            if product < min_product:\n                min_product = product\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables for the minimum and maximum values found so far\n    min_product = float('inf')\n    max_product = float('-inf')\n    \n    # iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples and update the minimum and maximum products\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n            if product > max_product:\n                max_product = product\n    \n    # return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # initialize minimum product to be positive infinity\n    min_product = float('inf')\n    \n    # iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            \n            # check if the product is less than the minimum product found so far\n            if product < min_product:\n                min_product = product\n    \n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                # Update the minimum product\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples\n    list1.sort(key=lambda x: x[1])\n\n    # Initialize variables to store minimum and maximum products\n    min_product = float('inf')\n    max_product = float('-inf')\n\n    # Initialize variables to store current product and current tuple\n    curr_product = 1\n    curr_tuple = None\n\n    # Loop through the sorted list of tuples\n    for i in range(len(list1)):\n        # Check if the current tuple has a larger value\n        if list1[i][1] > curr_tuple[1]:\n            # Update the current product and tuple\n            curr_product *= list1[i][0]\n            curr_tuple = list1[i]\n            # Check if the current product is smaller than the minimum product\n            if curr_product < min_product:\n                min_product = curr_product\n        # Check if the current tuple has a smaller value\n        elif list1[i][1] < curr_tuple[1]:\n            # Update the current product and tuple\n            curr_product *= curr_tuple[0]\n            curr_tuple = list1[i]\n            # Check if the current product is larger than the maximum product\n            if curr_product > max_product:\n                max_product = curr_product\n\n    # Check if the current tuple has a larger value\n    if curr_tuple[1] > curr_product:\n        # Update the current product and tuple\n        curr_product *= curr_tuple[0]\n        curr_tuple = curr_tuple\n\n    # Return the minimum and maximum products\n    return min_product, max_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n\n    # initialize variables for minimum product and tuple count\n    min_product = float('inf')\n    count = 0\n\n    # loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # check if the product is less than the minimum product\n            if product < min_product:\n                # if it is, update the minimum product and tuple count\n                min_product = product\n                count = 2\n            elif product == min_product:\n                # if it is equal to the minimum product, increment the tuple count\n                count += 1\n\n    # return the minimum product and tuple count\n    return min_product, count"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list of values as input and returns the minimum value in the list.\n\n    Args:\n        listval: list of values\n\n    Returns:\n        minimum value in the list\n    \"\"\"\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"Empty list\")\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) < type(minval):\n            minval = listval[i]\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize the minimum value\n    min_val = float('inf')\n\n    # Loop through the list\n    for val in listval:\n        # Check if the current value is less than the minimum value\n        if val < min_val:\n            # Update the minimum value\n            min_val = val\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n\n    :param listval: List of values.\n    :type listval: list of int, float, str\n    :return: Minimum value in the given list.\n    :rtype: int, float, str\n    \"\"\"\n    min_value = listval[0]\n\n    for i in listval:\n        if i < min_value:\n            min_value = i\n\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # initialize minimum value to first element of list\n    min_val = listval[0]\n\n    # loop through rest of list and compare to minimum\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # return minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError('List is empty')\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert snake case to camel case\n    camel = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n    # Remove leading and trailing underscores\n    camel = re.sub('^_|_$', '', camel)\n    return camel"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words[0] = words[0].capitalize()\n    # Convert the list of words back to a string and return it\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to uppercase\n    word = word.upper()\n    # Split the word into individual words\n    words = word.split('_')\n    # Initialize an empty string for the camel case word\n    camel_word = ''\n    # Loop through the individual words\n    for i in range(len(words)):\n        # Add the current word to the camel case word\n        if i == 0:\n            camel_word += words[i].capitalize()\n        else:\n            camel_word += words[i]\n    # Return the camel case word\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to camel case by capitalizing the first letter and converting the remaining letters to lowercase\n    return re.sub('_(.)', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n\n    Args:\n    word (str): snake case string.\n\n    Returns:\n    str: camel case string.\n    \"\"\"\n    # Convert all uppercase letters to lowercase\n    word = word.lower()\n    # Split the word into individual words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n    # Join the camel words into a single string\n    return ''.join(camel_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # convert the words to camel case\n    camel_case_words = [word.capitalize() for word in words]\n    # join the camel case words into a string\n    camel_case_word = ''.join(camel_case_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'(?<!^)(?=[A-Z])')\n    words = pattern.split(word)\n    camel_case_words = [word.capitalize() for word in words]\n    return ''.join(camel_case_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all lowercase letters to uppercase\n    word = word.upper()\n    # Split the word by underscore\n    words = word.split('_')\n    # Convert the first word to camel case\n    camel_word = words[0]\n    # Convert the rest of the words to camel case\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    # Return the camel case string\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words separated by underscores\n    words = re.findall(r'_(\\w)', word)\n    # Capitalize the first letter of each word\n    result = [word.capitalize() for word in words]\n    # Join the words with underscores as separator\n    return ''.join(result)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word into list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Convert the first letter of each word to uppercase and join them with an underscore\n    camel_case = ''.join([word[0].upper() + word[1:].lower() for word in words])\n\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for item in l:\n        if item % 2!= 0:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n\n    Parameters:\n    list1 (list of tuples): a list of tuples to extract the nth element from\n    n (int): the index of the element to extract (counting from the beginning of the list)\n\n    Returns:\n    tuple: the nth element from the list or None if there is no element at that index\n    '''\n    if n < 0 or n >= len(list1):\n        return None\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(lst):\n        return None\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n][0]\n    except:\n        return \"Error: Element not found\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and an integer 'n' as input and returns the nth element of the list.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    elif n == 1:\n        return list1[0]\n    else:\n        return extract_nth_element(list1[1:], n-1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # check if both sequences are of the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # iterate over the first sequence\n    for i in range(len(list1)):\n        # check if the current value exists in the second sequence\n        if list1[i] in list2:\n            return True\n\n    # if no overlapping value is found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    if not set(list1) <= set(list2):\n        return False\n    elif not set(list2) <= set(list1):\n        return False\n    else:\n        return True"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # iterate over the list1 to check if any value exists in list2\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Returns the pair with the highest product from a given array of integers.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n\n    for i in range(2, len(arr)):\n        temp1 = max1\n        max1 = max(max1 * arr[i], max2 * arr[i])\n        max2 = max(temp1 * arr[i], max2 * arr[i])\n\n        temp2 = min1\n        min1 = min(min1 * arr[i], min2 * arr[i])\n        min2 = min(temp2 * arr[i], min2 * arr[i])\n\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # initialize two variables to store the maximum and minimum products\n    max_product = float('-inf')\n    min_product = float('inf')\n    \n    # loop through the array and update the maximum and minimum products\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            min_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n    \n    # initialize variables to store the maximum and minimum indices of the pair with the highest product\n    max_index = -1\n    min_index = -1\n    \n    # loop through the array again and update the maximum and minimum indices of the pair with the highest product\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_index = i\n        elif arr[i] < min_product:\n            min_product = arr[i]\n            min_index = i\n    \n    # return a tuple containing the maximum index and the minimum index of the pair with the highest product\n    return (max_index, min_index)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Initialize variables to store the maximum product seen so far\n    max_product_pair = (arr[0], arr[1])\n    max_product = arr[0] * arr[1]\n\n    # Loop through the array and update the maximum product pair and maximum product seen so far\n    for i in range(2, len(arr)):\n        if arr[i] * max_product_pair[0] > max_product_pair[1] * arr[i]:\n            max_product_pair = (max_product_pair[0] * arr[i], max_product_pair[1] * max_product_pair[0])\n        elif arr[i] * max_product_pair[1] > max_product_pair[0] * arr[i]:\n            max_product_pair = (max_product_pair[1] * arr[i], max_product_pair[0] * max_product_pair[1])\n        max_product = max(max_product, max_product_pair[0] * max_product_pair[1])\n\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables to keep track of the largest and smallest numbers in the array\n    max_num = arr[0]\n    min_num = arr[0]\n    # Initialize variables to keep track of the maximum product and the pair of numbers with the maximum product\n    max_product = arr[0] * arr[1]\n    max_pair = [arr[0], arr[1]]\n    # Loop through the array and update the max_num and min_num variables accordingly\n    for num in arr:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n        # Update the maximum product and the pair of numbers with the maximum product\n        if num * max_pair[0] > max_product:\n            max_product = num * max_pair[0]\n            max_pair = [num, max_pair[0]]\n        elif num * max_pair[1] > max_product:\n            max_product = num * max_pair[1]\n            max_pair = [num, max_pair[1]]\n    # Return the pair of numbers with the highest product\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return max1 * max2, min1 * min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    # initialize two variables to keep track of the highest and lowest numbers in the array\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # loop through the array and update the max_ending_here and min_ending_here variables accordingly\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        # update the max_so_far and min_so_far variables if the max_ending_here is greater than it or if the\n        # min_ending_here is less than it\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    # return the pair with the highest product\n    return [max_so_far, min_so_far]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    common_list = []\n    for i in Input:\n        if len(common_list) == 0:\n            common_list.append(i)\n        else:\n            for j in common_list:\n                if i[0] == j[0]:\n                    common_list.append(i)\n                    break\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for tuple in Input:\n        common.append(tuple[0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    common_element = None\n    for t in Input:\n        if common_element is None:\n            common_element = t[0]\n        elif common_element == t[0]:\n            common_element = None\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    common_elem = None\n    for tup in Input:\n        if tup[0] == common_elem:\n            print(\"Already found common element:\", tup[0])\n        elif common_elem is None:\n            common_elem = tup[0]\n        else:\n            break\n    return common_elem"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # First, we need to find the first common element among all the tuples in the list\n    first_common_element = None\n    for t in Input:\n        if not first_common_element:\n            first_common_element = t[0]\n        elif t[0]!= first_common_element:\n            return first_common_element\n    # If we've made it through the loop without finding a common element, we've found none\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count = 0 \n    common_elements = [] \n\n    for tup in Input: \n        if tup[0] in common_elements: \n            count += 1 \n        else: \n            common_elements.append(tup[0]) \n\n    if count == 0: \n        return \"No common elements found.\" \n    else: \n        return \"Common elements: \", common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i][0] in Input[j]:\n                    result.append((Input[i], Input[j]))\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Dictionary to store common first element and its frequency\n    common_dict = {}\n\n    # Loop through the list of tuples\n    for i in Input: \n        # Extract the first element of the tuple\n        first_element = i[0]\n        # If the element is not present in the dictionary, add it with a frequency of 1\n        if first_element not in common_dict:\n            common_dict[first_element] = 1\n        # If the element is already present in the dictionary, increment its frequency by 1\n        else:\n            common_dict[first_element] += 1\n\n    # Loop through the dictionary and find the first element with the highest frequency\n    max_freq = 0\n    common_element = None\n    for key in common_dict:\n        if common_dict[key] > max_freq:\n            common_element = key\n            max_freq = common_dict[key]\n\n    # Return the common element with its frequency\n    return common_element, max_freq"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_list = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j and Input[i][0] == Input[j][0]:\n                common_list.append(Input[i][0])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common.append(Input[i])\n    return common"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    max_elem = lst[0]\n    for i in range(1, len(lst)):\n        if len(str(lst[i])) > len(str(max_elem)):\n            max_elem = lst[i]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_element = None \n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_element = i \n    return max_element "
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Calculate the total sum of the rounded numbers\n    total_sum = sum([round(num) for num in list1])\n\n    # Print the total sum and length of the list\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the total sum of the rounded numbers multiplied by the length of the list.\n    \"\"\"\n    # Convert all the numbers in the list to floats and round them to 2 decimal places.\n    rounded_lst = [round(num, 2) for num in lst]\n    # Calculate the total sum of the rounded numbers.\n    total_sum = sum(rounded_lst)\n    # Calculate the length of the list.\n    list_length = len(lst)\n    # Multiply the total sum by the length of the list to get the final result.\n    result = total_sum * list_length\n    return result"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum*len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    cube_sum = 0\n    for i in range(n, 1, -1):\n        cube_sum += i ** 3\n        count += 1\n        if count == n:\n            break\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        if i%2==0:\n            sum += i**3\n        i += 1\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer as input and returns the cube sum of the first n even natural numbers.\n    '''\n    # initializing sum variable to zero\n    sum = 0\n\n    # iterating over first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculating the cube of the even natural number i\n        cube = i ** 3\n        # adding the cube to the sum variable\n        sum += cube\n\n    # returning the sum of cubes\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize sum to 0\n    sum_cubes = 0\n    \n    # loop through the first n even numbers\n    for i in range(1, n+1, 2):\n        # calculate the cube of the current number and add it to the sum\n        sum_cubes += i**3\n        \n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing the variable to 0\n    cube_sum = 0\n    \n    # iterating from 0 to n-1\n    for i in range(n): \n        # adding the cube of each even number to the cube_sum\n        cube_sum += i**3\n    \n    # printing the cube_sum\n    print(\"The cube sum of first n even natural numbers is:\", cube_sum)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    i = 0\n    while i <= n:\n        sum_cubes += i**3\n        i += 1\n    return sum_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for elem in test_tup:\n        concatenated_string += str(elem) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str.strip(delimiter)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # initialize an empty string to store the concatenated string\n    concatenated_string = ''\n    # iterate over each element of the tuple\n    for element in test_tup:\n        # concatenate the element with the delimiter to the concatenated string\n        concatenated_string += str(element) +''\n    # return the concatenated string with spaces between the elements\n    return concatenated_string.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter ='- '\n    concatenated_str = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**3\n    average = total_sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n    # Initialize a variable to store the count of cubes\n    count_of_cubes = 0\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Find the cube of the number and add it to the sum of cubes\n        sum_of_cubes += i**3\n        # Increment the count of cubes\n        count_of_cubes += 1\n    # Calculate the average of cubes by dividing the sum by the count of cubes\n    average_of_cubes = sum_of_cubes / count_of_cubes\n    # Return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum and count to zero\n    sum = 0\n    count = 0\n    \n    # Loop through first n natural numbers\n    for i in range(1, n+1):\n        # Calculate cube of i and add it to sum\n        cube = i*i*i\n        sum += cube\n        \n        # Increment count\n        count += 1\n        \n    # Calculate average and return it\n    average = sum/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    #initialize sum variable to 0\n    sum = 0\n    #loop for n times\n    for i in range(n):\n        #add the cube of i to sum\n        sum += i*i*i\n    #find the average of sum\n    average = sum/n\n    #return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n        count += 1\n    return sum/count"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple)-1:\n            rear_list.append(test_tuple[i])\n        else:\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple) - 1\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == rear_index:\n            rear_list.append(test_tuple[rear_index])\n        else:\n            rear_list.append('')\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_element = string[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Initialize an empty list to store the rear index elements\n    rear_list = []\n    # Loop through each string in the tuple\n    for i in test_tuple:\n        # Get the length of the string\n        length = len(i)\n        # Check if the index is less than the length of the string\n        if i[length-1]!='':\n            # Append the rear index element to the list\n            rear_list.append(i[length-1])\n    # Return the list of rear index elements\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_element = []\n    for i in range(len(test_tuple)):\n        rear_element.append(test_tuple[i][-1])\n    return rear_element"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in range(len(test_tuple)):\n        rear_index_list.append(test_tuple[i][-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = [num for num in nums if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n\n    # Initialize an empty list to store the odd numbers\n    odd_nums = []\n\n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, add it to the odd_nums list\n            odd_nums.append(num)\n\n    # Return the list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern for matching a date in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the pattern in the date string\n    match = re.match(pattern, dt)\n    # Extract the groups from the match object\n    year, month, day = match.groups()\n    # Convert the date components to the desired format\n    new_date = f'{day}-{month}-{year}'\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format\""
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f\"{day}-{month}-{year}\"\n        return new_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression to extract the year, month, and day from the date string\n    regex = r'(?P<year>\\d{4})-(?P<month>\\d{2})-(?P<day>\\d{2})'\n    # use the regular expression to match the date string and extract the year, month, and day\n    match = re.match(regex, dt)\n    # if the regular expression matches, extract the year, month, and day and format them as dd-mm-yyyy\n    if match:\n        year, month, day = match.group('year'), match.group('month'), match.group('day')\n        formatted_date = f\"{day}-{month}-{year}\"\n        return formatted_date\n    # if the regular expression does not match, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the pattern for the input date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Use regular expressions to match the pattern in the input date string\n    match = re.match(pattern, dt)\n\n    # If the pattern is found, convert the date to dd-mm-yyyy format\n    if match:\n        return dt.replace('-', '') + '-'.join(dt.split('-')[::-1])\n    # Otherwise, return the input date string unchanged\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for date in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the pattern to match the date in the string\n    match = re.match(pattern, dt)\n    # Check if the match is successful\n    if match:\n        # Extract the year, month, and day components from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # Format the date components in dd-mm-yyyy format\n        formatted_dt = day + '-' + month + '-' + year\n    else:\n        # If the match is not successful, return the input date as is\n        formatted_dt = dt\n    return formatted_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use the re.sub() method to replace the format with the desired format\n    new_date = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regex pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use the re.sub() method to replace the date format with the desired format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.sub() to replace the date format with the desired format\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    # Find the length of the array\n    length = len(my_list)\n    \n    # Set the increment value for each pass\n    gap = length // 2\n    \n    # Main loop to perform the sorting\n    while gap > 0:\n        # Perform the insertion sort for the gap size\n        for i in range(gap, length):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        \n        # Decrease the gap size\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Calculate the largest gap\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to the next position\n        gap = gap // 2\n        # Iterate through the list, and swap elements according to gap\n        for i in range(gap, n):\n            temp = my_list[i]\n            # Shift elements greater than gap position to their correct positions\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Define the gap sequence\n    gap = my_list[1]\n    while gap < len(my_list) // 2:\n        gap = gap * 3 + 1\n    \n    # Start the gap sequence\n    while gap > 0:\n        # Move the gap elements to their correct position\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 3"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # create an empty list to store the elementwise and tuples\n    and_tup_list = []\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # perform the elementwise and operation on each element in the tuple\n        and_tup = test_tup1[i] & test_tup2[i]\n        # append the result to the list of elementwise and tuples\n        and_tup_list.append(and_tup)\n    # return the list of elementwise and tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = tuple(i and j for i, j in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the corresponding elements of the two tuples\n    tup1_elements = test_tup1[0]\n    tup2_elements = test_tup2[0]\n\n    # Initialize an empty list to store the result tuples\n    result_tuples = []\n\n    # Iterate through the two lists of elements\n    for i in range(len(tup1_elements)):\n        # Extract the corresponding elements from the two lists and apply the and operator\n        element_result = tup1_elements[i] & tup2_elements[i]\n        # Create a tuple with the result element and add it to the result list\n        result_tuple = (element_result,)\n        result_tuples.append(result_tuple)\n\n    # Return the result list of tuples\n    return result_tuples"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    result_list = []\n\n    # iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # extract the corresponding element from the second tuple and apply the and operator\n        element = test_tup1[i] & test_tup2[i]\n        # add the result to the result list\n        result_list.append(element)\n\n    # return the result list\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i], test_tup1[i], test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each element of the input tuples\n    for i in range(len(test_tup1)):\n        # Append the elementwise and tuple to the result list\n        result.append((test_tup1[i] & test_tup2[i], test_tup1[i] & test_tup2[i]))\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # find the equation of the parabola\n    equation = 'x^2 = a*x + b'\n\n    # substitute the given values for a, b and c in the equation\n    equation = equation.replace('a', str(a))\n    equation = equation.replace('b', str(b))\n    equation = equation.replace('c', str(c))\n\n    # use sympy to solve for the directrix\n    import sympy\n    x = sympy.Symbol('x')\n    directrix = sympy.solve(equation, x)[0]\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function finds the directrix of a parabola by solving the equation:\n\n    ax^2 + bx + c = 0\n\n    The directrix is the point where the parabola crosses the y-axis, i.e., the point where the derivative of the parabola is zero.\n\n    The function returns the value of the directrix or None if no such point exists.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # If the discriminant is non-negative, there exists a directrix\n    if disc >= 0:\n        # Calculate the directrix\n        directrix = (-b + disc**(1/2)) / (2*a)\n        return directrix\n\n    # Otherwise, the directrix doesn't exist\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is negative or zero\n    if discriminant < 0:\n        print(\"The parabola does not have a unique directrix.\")\n    elif discriminant == 0:\n        # Find the root\n        root = -b/(2*a)\n        print(\"The parabola has a unique directrix of:\", root)\n    else:\n        # Find the two roots\n        roots = (-b + discriminant**0.5)/(2*a) - (-b - discriminant**0.5)/(2*a)\n        print(\"The parabola has two unique directrixes:\", roots[0], roots[1])"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        print(\"No real roots\")\n    elif discriminant == 0:\n        print(\"There is one real root\")\n        x = -b/(2*a)\n        print(\"The directrix is x = \", x)\n    else:\n        x1 = (-b + discriminant**(0.5))/(2*a)\n        x2 = (-b - discriminant**(0.5))/(2*a)\n        print(\"There are two real roots\")\n        print(\"x1 = \", x1)\n        print(\"x2 = \", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    root_1 = (-b + discriminant**(0.5)) / (2*a)\n    root_2 = (-b - discriminant**(0.5)) / (2*a)\n    return (root_1, root_2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    determinant = b**2 - 4*a*c\n    directrix = (-b + determinant**0.5) / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the two points of the parabola where the equation is y^2 = ax^2 + bx + c\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    \n    # Find the first derivative of the equation y^2 = ax^2 + bx + c\n    dy2_dx = 2*a*x1**2\n    \n    # Find the second derivative of the equation y^2 = ax^2 + bx + c\n    dy2_dy2 = 2*a*x1*x2\n    \n    # Find the slope of the parabola\n    m = dy2_dx/dy2_dy2\n    \n    # Return the directrix of the parabola\n    return m"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is positive\n    if discriminant > 0:\n        # calculate the two roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # sort the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # return the middle root as the directrix\n        return roots[1]\n    else:\n        # otherwise, the directrix is at infinity\n        return float('inf')"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Formula for the directrix of a parabola\n    # Directrix = (-b +/- sqrt(b^2 - 4ac)) / 2a\n    \n    # First, we calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is negative, then the directrix has no real root, so we return None\n    if disc < 0:\n        return None\n    \n    # Otherwise, we calculate the directrix\n    root1 = (-b + disc**(1/2)) / (2*a)\n    root2 = (-b - disc**(1/2)) / (2*a)\n    \n    # We sort the roots in ascending order and return the one that is closer to the origin (0,0)\n    if abs(root1) < abs(root2):\n        return root1\n    else:\n        return root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # If the discriminant is less than zero, the parabola is degenerate\n    if discriminant < 0:\n        return \"The parabola is degenerate.\"\n    \n    # Calculate the root of the discriminant\n    root = math.sqrt(discriminant)\n    \n    # Calculate the directrix\n    directrix = (-b + root)/(2*a)\n    \n    # Return the directrix\n    return directrix"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set from list1 and a set from list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there is any element in set1 that is also in set2\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # find the intersection of the two sets (common elements)\n    common_elements = set1.intersection(set2)\n    # check if there are any elements in the intersection set\n    return bool(common_elements)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n\n    # Create a set of elements in list1 and list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if there is at least one common element between the two sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Convert the lists to sets to remove duplicates\n    list1_set = set(list1)\n    list2_set = set(list2)\n\n    # Check if there is at least one common element\n    if list1_set.intersection(list2_set):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of the elements in list1\n    set1 = set(list1)\n    # create a set of the elements in list2\n    set2 = set(list2)\n    # check if there is a common element\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element, False otherwise.\n    \"\"\"\n    # Create a set of elements in list1\n    set1 = set(list1)\n    \n    # Iterate over elements in list2\n    for element in list2:\n        # If the element is in set1, return True\n        if element in set1:\n            return True\n    \n    # If no common elements are found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists are non-empty\n    if not list1 or not list2:\n        return False\n    \n    # Find the intersection of the lists\n    intersection = list(set(list1) & set(list2))\n    \n    # Check if the intersection is not empty\n    return bool(intersection)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2) * height\n\n    # Calculate the length of the shorter side\n    shorter_side = perimeter / 2\n\n    # Calculate the length of the longer side\n    longer_side = 0.5 * base1 * 0.5 * height + 0.5 * base2 * 0.5 * height\n\n    # Calculate the sum of the shorter and longer sides\n    total_side = shorter_side + longer_side\n\n    # Calculate the area of the trapezium\n    trapezium_area = (shorter_side + longer_side) / 2\n\n    # Calculate the difference between the trapezium area and the area of the right triangle\n    difference_area = (trapezium_area - area) / 2\n\n    # Calculate the median length\n    median_length = shorter_side + difference_area\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height % 2 == 0:\n        return ((base1 + base2) / 2) + ((base1 + base2) / 2)\n    else:\n        return ((base1 + base2) / 2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    trapezium_length = base1 + base2 + height\n    half_trapezium = trapezium_length / 2\n    \n    # Sort the trapezium length array\n    trapezium_length_array = sorted(trapezium_length_array)\n    \n    # Calculate the median index\n    median_index = len(trapezium_length_array) // 2\n    \n    # Calculate the median\n    median = trapezium_length_array[median_index]\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5*base1*base2 + 0.5*base2*base1\n    \n    # calculate the length of the trapezium\n    length = area*height\n    \n    # sort the lengths of the two base sides\n    sorted_lengths = sorted([base1,base2])\n    \n    # calculate the median of the two sorted lengths\n    median = (sorted_lengths[0] + sorted_lengths[1])/2\n    \n    # return the median of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    \n    # Calculate the lengths of the three sides of the trapezium\n    side1 = base1 / 2\n    side2 = base2 / 2\n    side3 = (base1 + base2) / 2 - side1 - side2\n    \n    # Calculate the lengths of the two medians\n    median1 = (side1 + side2) / 2\n    median2 = (side2 + side3) / 2\n    \n    # Find the median of the two medians\n    median = (median1 + median2) / 2\n    \n    # Calculate the difference between the area and the median\n    difference = area - median\n    \n    # Return the median as the result\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the base and height of the upper half\n    upper_base = (base1 + base2) / 2\n    upper_height = height / 2\n\n    # Calculate the base and height of the lower half\n    lower_base = (base1 + base2 + height) / 2\n    lower_height = height / 2\n\n    # Calculate the length of the upper half\n    upper_length = upper_base + upper_height\n\n    # Calculate the length of the lower half\n    lower_length = lower_base + lower_height\n\n    # Return the median length\n    return max(upper_length, lower_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * height\n    # Calculate the length of the base of the trapezium using the formula\n    # L = (b/2)^2\n    base_length = (base1 / 2) ** 2\n    # Calculate the length of the height of the trapezium using the formula\n    # H = 2bh\n    height_length = 2 * base2 * height\n    # Calculate the length of the longer base of the trapezium\n    longer_base = (base1 + base2) / 2\n    # Calculate the length of the shorter base of the trapezium\n    shorter_base = base1 - longer_base\n    # Calculate the total length of the trapezium\n    total_length = longer_base * height + shorter_base * height\n    # Calculate the length of the shorter base that is a factor of the longer base\n    # If the longer base is 2 times longer than the shorter base, the shorter base will be half the longer base\n    factor = longer_base / shorter_base\n    shorter_base_factor = 2 * factor\n    # Calculate the length of the longer base that is a factor of the shorter base\n    # If the shorter base is half the longer base, the longer base will be 2 times the shorter base\n    factor = shorter_base / longer_base\n    longer_base_factor = 2 * factor\n    # Calculate the length of the longer base that is a factor of the total length\n    # If the total length is half the longer base, the longer base will be half the total length\n    factor = total_length / longer_base\n    longer_base_half = 0.5 * longer_base\n    # Calculate the length of the shorter base that is a factor of the total length\n    # If the total length is half the longer base, the longer base will be half the total length\n    factor = total_length / shorter_base\n    shorter_base_half = 0.5 * shorter_base\n    # Find the length of the shorter base that is greater than the length of the longer base\n    if (longer_base_factor - factor) >= 0:\n        shorter_base = shorter_base_half * (longer_base_factor - factor)\n    else:\n        shorter_base = 0\n    # Find the length of the longer base that is less than the length of the shorter base\n    if (shorter_base_factor - factor) <= 0:\n        longer_base = longer_base_half * (shorter_base_factor - factor)\n    else:\n        longer_base = 0\n    # Calculate the length of the middle base of the trapezium using the formula\n    # M = L/2\n    middle_base = base_length / 2\n    # Calculate the length of the trapezium using the formula\n    # T = 2(bL + bh) + M\n    trapezium_length = 2 * (base_length * height + height_length) + middle_base\n    # Calculate the median length of the trapezium using the formula\n    # Median = T/2\n    median = trapezium_length / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    # Calculate the lengths of the bases and height of the trapezium\n    base1_length = base1\n    base2_length = base2\n    trapezium_height = height\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * base1_length * height\n    \n    # Calculate the length of the trapezium base with the smallest length\n    smallest_length = min(base1_length, base2_length)\n    \n    # Calculate the number of times the smallest length will be repeated\n    n = int(area / smallest_length)\n    \n    # Calculate the length of the median base\n    median_base_length = 0.5 * (base1_length + base2_length)\n    \n    # Calculate the area of the median base\n    median_area = 0.5 * median_base_length * trapezium_height\n    \n    # Calculate the difference between the areas of the two smallest bases\n    diff_area = area - 2 * median_area\n    \n    # Calculate the length of the second smallest base\n    second_smallest_base_length = diff_area / (n * (n - 1))\n    \n    # Calculate the length of the median base\n    median_base_length = 0.5 * (base1_length + base2_length + second_smallest_base_length)\n    \n    # Calculate the length of the median trapezium\n    median_trapezium_length = 0.5 * (median_base_length + base1_length + base2_length)\n    \n    return median_trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the length of the half-trapezium\n    half_trapezium = (base1 + base2) / 2\n    \n    # Calculate the length of the upper half of the trapezium\n    upper_half = height / 2\n    \n    # Calculate the length of the lower half of the trapezium\n    lower_half = height / 2\n    \n    # Calculate the total length of the trapezium\n    total_length = half_trapezium + upper_half + lower_half\n    \n    # Return the median length of the trapezium\n    return total_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the half height of the trapezium\n    half_height = 0.5 * height\n    \n    # Calculate the length of the longest side of the trapezium\n    longest_side = 0.5 * (base1 + base2)\n    \n    # Calculate the median length of the trapezium\n    median_length = longest_side * (area / longest_side)\n    \n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than\", i)\n            return True\n    print(\"The number is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_found = False\n    for element in arr:\n        if element > number:\n            print(element)\n            greater_found = True\n    if not greater_found:\n        print(\"No element in the array was greater than the entered number.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for element in arr:\n        if element > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = False\n    for i in arr:\n        if number > i:\n            greater_than = True\n            break\n    return greater_than"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = re.compile(r'a\\w*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba\\w*\\b')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b\\w+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a{1,}b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer 'n' as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    This function takes an integer n and returns the last digit of the number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as an argument and returns a new list with the negative numbers.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns the negative numbers in the list.\n    \"\"\"\n    neg = []\n    for i in lst:\n        if i < 0:\n            neg.append(i)\n    return neg"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n\n    Parameters:\n    list1 (list): A list of integers.\n\n    Returns:\n    list: A list of negative numbers.\n    \"\"\"\n\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a list containing the negative numbers from the original list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isalnum(), str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha() and char.isupper():\n            new_str += char.upper()\n        elif char.isalpha() and char.islower():\n            new_str += char.lower()\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and removes all odd characters from it.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char % 2 == 0:  # If the character is even, add it to the new string.\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert string to list of characters\n    lst = list(str1)\n\n    # Remove odd characters from list\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            lst.pop(i)\n            i -= 1\n\n    # Convert list back to string and return\n    return ''.join(lst)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            if char.islower():\n                new_str += char.upper()\n            else:\n                new_str += char.lower()\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n        else:\n            new_str += \" \"\n    return new_str.strip()\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in string if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j] and test_list[j] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0] and test_list[j][1] == test_list[i][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[j][1] or (test_list[j][0], test_list[i][0]) in test_list[i][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize the sum variable\n    total = 0\n    \n    # Iterate through the list\n    for num in L:\n        # Check if the number is a multiple of 2\n        if num % 2 == 0:\n            # Add the number to the total\n            total += num\n    \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty list to store the sum of multiple integers\n    multiple_sum = []\n    \n    # Loop through the list and add the multiples of 3 to the list\n    for i in range(0, len(L), 3):\n        multiple_sum.append(L[i] + L[i+1] + L[i+2])\n    \n    # Join the list and return the sum\n    return sum(multiple_sum)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    for num in L:\n        multiple *= num\n    return multiple"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to hold the result\n    result = 0\n    # loop over each element in the list\n    for num in L:\n        # add the element to the result\n        result += num\n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for num in L:\n        single *= num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 0\n    for num in L:\n        single_int += num\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for num in L:\n        single = single * num\n    return single"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regex pattern to match an adverb\n    adverb_pattern = r'\\b(but|only|as|so|only|but|more|only|while|for|only|only|though|as|so|only|but|more|only|while|for)\\b'\n\n    # Use the re.findall() method to find all the matches of the pattern in the given text\n    matches = re.findall(adverb_pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Extract the adverb and its position from the matches list\n    adverb = matches[0]\n    position = matches.index(adverb)\n\n    # Return a dictionary with the adverb and its position\n    return {'adverb': adverb, 'position': position}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(?:no|a|an|the|that|this|these|those|than|against|about|again|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|before|after|during|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b(?:adv|advrb|advmod|advcl)\\b'\n    # Search for the pattern in the given sentence\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    # If no adverbs are found, return None\n    if not matches:\n        return None\n    # Otherwise, return a dictionary containing the adverbs and their positions\n    else:\n        result = {}\n        for i, match in enumerate(matches):\n            result[match] = i+1\n        return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b([a-z]{3,})\\b\\s*(?<![.,;:])(?=[a-z])')\n    matches = adverb_pattern.finditer(text)\n\n    adverbs = []\n    positions = []\n\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        adverbs.append(adverb)\n        positions.append(position)\n\n    return adverbs, positions\n\nif __name__ == '__main__':\n    text = \"The cat sits on the mat and ate the apple.\"\n    adverbs, positions = find_adverb_position(text)\n    print(\"Adverbs:\", adverbs)\n    print(\"Positions:\", positions)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Removing all non-alphanumeric characters and converting to lowercase\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text.lower())\n    # Splitting the text into words\n    words = text.split()\n    # Initializing variables to store adverb and its position\n    adverb = ''\n    position = 0\n    # Looping through the words and searching for an adverb\n    for i in range(len(words)):\n        # If the word is an adverb, updating the adverb and its position\n        if words[i] in ['very','seriously','really','so','very','much', 'absolutely', 'actually', 'actually', 'actually']:\n            adverb = words[i]\n            position = i\n            break\n    # Returning the adverb and its position\n    return adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(can|could|should|may|shall|would|might|must|couldnt|wouldnt|shouldnt|shouldn\\'t|mightn\\'t|mustnt|mustn\\'t|mustnt|shouldnt|wouldn\\'t)\\b', text)\n    adverb_positions = []\n\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((i+1, adverb))\n\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove any punctuation from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Convert the text to lowercase\n    text = text.lower()\n    # Split the text into words\n    words = text.split()\n    # Initialize variables for the adverb and its position in the sentence\n    adverb = None\n    adverb_position = None\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.search(r'(because|but|however|nevertheless|never|though|although|whereas|when|since|but|unless|although|after|as|because|before|by|either|inasmuch|insofar|since|so|then|therefore|where|while|yet|before|after|as|again|among|by|except|for|in|including|on|onto|out|outside|under|against|across|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|within|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|within|throughout|again|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|within|throughout|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|within|throughout|throughout|again|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|within|throughout|along|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|within|throughout|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|within|throughout|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|within|throughout|along|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|within|throughout|among|around|at|before|behind|below|beneath|beside|between|beyond|but|down|during|except|for|from|in|including|inside|into|near|of|off|on|onto|out|outside|over|since|through|till|under|upon|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    adverb_pattern = r\"\\b(adverbial|adjectival|adverbial|adverbial|adverbial)\\b\"\n    matches = re.findall(adverb_pattern, text)\n    for match in matches:\n        print(f\"{match}: {text.find(match)}\")\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(?:\\w+(?:\\s\\w+)*)\\s+(?:past|present|future|recent|near|far|long|short|close|distant|close|distant)\\b'\n    # Use the re.findall() method to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Iterate through the matches and extract the adverb and its position\n    for match in matches:\n        # Split the match into a list of words\n        words = match.split()\n        # Check if the first word is an adverb\n        if words[0].lower() in ['past', 'present', 'future','recent', 'near', 'far', 'long','short', 'close', 'distant']:\n            # Return the adverb and its position\n            return match, words.index(words[0])\n    # If no adverb is found, return None\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b\\w+ly\\b'\n    \n    # Use re.findall() to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n    \n    # Check if any adverbs were found\n    if not adverbs:\n        return \"No adverbs were found.\"\n    \n    # Initialize an empty dictionary to store adverb positions\n    adverb_positions = {}\n    \n    # Iterate through all the adverbs found\n    for i, adverb in enumerate(adverbs):\n        # Define the regular expression pattern for the position of the adverb\n        position_pattern = r'\\b' + adverb + r'\\b'\n        \n        # Use re.finditer() to find all the positions of the adverb in the text\n        position_iter = re.finditer(position_pattern, text)\n        \n        # Iterate through all the positions found\n        for match in position_iter:\n            # Store the position of the adverb in a dictionary\n            adverb_positions[adverb] = match.start()\n    \n    # Sort the adverb positions dictionary by their values (start positions)\n    sorted_positions = dict(sorted(adverb_positions.items(), key=lambda x: x[1]))\n    \n    # Print the first adverb and its position(s)\n    for adverb, position in sorted_positions.items():\n        print(f\"{adverb}: {position}\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    print(f\"The surface area of the cube is {surface_area:.2f}\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube\n    surface_area = 6 * (l ** 2)\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l * l) + (2 * l * l * l) + (2 * l * l) + (6 * l)\n    surface_area = round(surface_area, 2)\n    return surface_area\n"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the input array to a list of integers\n    nums_list = [int(x) for x in nums]\n    \n    # count the number of positive integers in the array\n    positive_count = sum(1 for x in nums_list if x > 0)\n    \n    # calculate the ration of positive integers\n    positive_ratio = float(positive_count) / len(nums_list)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    count_pos = 0\n    for i in arr:\n        if i > 0:\n            count_pos += 1\n    count_neg = len(arr) - count_pos\n    return count_pos / count_neg"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    \n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    positive_arr = array('i', [num for num in nums if num > 0])\n    negative_arr = array('i', [num for num in nums if num <= 0])\n\n    positive_count = len(positive_arr) / len(nums)\n    negative_count = len(negative_arr) / len(nums)\n\n    return positive_count, negative_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos_count += 1\n        elif arr[i] < 0:\n            neg_count += 1\n\n    if pos_count + neg_count == 0:\n        return 0\n\n    return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    total_count = len(nums)\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n\n    return pos_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive = array('i') # create an empty array for positive numbers\n\n    for num in nums:\n        if num > 0:\n            positive.append(num) # add positive numbers to the array\n\n    if len(positive) == 0: # if the array is empty, return 0\n        return 0\n\n    positive_sum = sum(positive) # calculate the sum of positive numbers\n    total_count = len(nums) # calculate the total number of elements in the array\n\n    return positive_sum/total_count # return the ratio of positive numbers to all elements"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf') \n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num \n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function finds the largest negative number in the list.\n\n    Parameters:\n    lst (list): List containing integers.\n\n    Returns:\n    int: Largest negative number in the list.\n    \"\"\"\n\n    largest = lst[0]\n\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # initialize an empty list to store trimmed tuples\n    trimmed_list = []\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # initialize a list to store the current tuple without the first k elements\n        temp_list = []\n        # loop through the current tuple and skip the first k elements\n        for j in range(len(test_list[i]) - K):\n            temp_list.append(test_list[i][j+K])\n        # append the trimmed tuple to the list of trimmed tuples\n        trimmed_list.append(tuple(temp_list))\n    # return the list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = ()\n        for i in range(K):\n            new_tup += (tup[i], )\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[K:])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple([x for x in tup if x[0]!= K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1], test_list[i][2][0:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:-K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])-K):\n            test_list[i] = test_list[i][:j] + test_list[i][j+K:]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the given tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The given tuples must have the same length.\")\n\n    # Create a new tuple to store the result\n    result_tup = ()\n\n    # Perform index wise multiplication of the tuple elements\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0, 0)\n\n    # Perform index wise multiplication of each element of the tuple\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuple lengths are not equal\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for element in lst: \n        count[element] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a dictionary to store the count of each element in the tuple\n    dict_count = Counter(tup)\n\n    # create a list to store the count of each element in the list\n    lst_count = []\n\n    # loop through each element in the list\n    for element in lst:\n        # check if the element is in the dictionary, if it is, add it to the list\n        if element in dict_count:\n            lst_count.append(dict_count[element])\n        # if the element is not in the dictionary, add it with a count of 0\n        else:\n            lst_count.append(0)\n\n    # return the list of count for each element in the list\n    return lst_count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a list so that we can count the elements easily.\n    lst = list(tup)\n\n    # Create a Counter object to count the frequency of each element in the list.\n    counter = Counter(lst)\n\n    # Count the frequency of each element in the list in the tuple.\n    for item in counter:\n        count = 0\n        for i in range(len(tup)):\n            if tup[i] == item:\n                count += 1\n        counter[item] = count\n\n    # Convert the Counter object to a dictionary.\n    d = dict(counter)\n\n    return d"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_list = [tup[0]] * len(lst)\n    for i in range(1, len(tup)):\n        count_list[i] += count_dict[tup[i]]\n    return tuple(count_list)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_dict_list = []\n    for key, value in count_dict.items():\n        count_dict_list.append(key)\n    for item in lst:\n        if item in count_dict_list:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(lst) \n    count_list = list(count_dict.values()) \n\n    for i in range(len(tup)): \n        tup[i] = tup[i] * count_list[i]\n    \n    return tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count = 0\n    for key in lst:\n        if key in count_dict:\n            count += count_dict[key]\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the tuple to list and sort it\n    lst = list(tup)\n    lst.sort()\n    # create a dictionary to store the count of each element in the list\n    count = Counter(lst)\n    # create a list to store the count of each element in the tuple\n    result = []\n    # iterate through the list of elements in the tuple\n    for element in tup:\n        # check if the element is present in the list, if it is then add its count to the result list\n        if element in lst:\n            result.append(count[element])\n        # if the element is not present in the list, then add 0 to its count in the result list\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list as input and returns a dictionary where the keys are the unique elements of the list and the values are the count of how many times each element appears in the tuple. \n    '''\n    count = Counter(tup)\n    return {key: count[key] for key in lst if key in count}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    count_tup = tuple(count_dict.items())\n    return count_tup"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5]\n    total_sum = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            total_sum += 2 * perrin_numbers[i]\n        else:\n            total_sum += perrin_numbers[i]\n\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        s += 1/i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 5, 13, 25, 49, 93, 167, 283, 467, 751, 1217, 1878, 3005, 4883, 7888]\n    total_sum = 0\n    for i in range(n):\n        total_sum += perrin_numbers[i]\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_nums = [1, 3, 4, 6, 8, 10, 12, 15, 18, 20, 24, 27, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\n    total = 0\n    for num in perrin_nums:\n        total += num\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    sum_perrin = 0\n    \n    for i in range(n):\n        sum_perrin += perrin_numbers[i]\n    \n    return sum_perrin\n\nprint(cal_sum(10)) # Output: 100"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize a counter variable\n    count = 0\n    # Initialize a sum variable\n    sum = 0\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # If i is a perrin number, add it to the sum and increment the counter\n        if is_perrin(i):\n            sum += i\n            count += 1\n    # Return the sum and the counter value\n    return sum, count"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin = [1, 3, 12, 45, 132, 429, 1430, 4862, 16796, 587869, 2203160, 75296307]\n    sum_perrin = sum(perrin[:n])\n    return sum_perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total_sum = 0\n    for num in perrin_numbers:\n        if num % 2 == 0:\n            total_sum += num\n    return total_sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size as input and returns a new list of extracted string values.\n    '''\n    extracted_list = []\n    for i in range(0, len(str_list), size):\n        extracted_list.append(''.join(str_list[i:i+size]))\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function takes a list of strings and a length of string to be extracted\n    as input and returns a list of extracted strings.\n    \"\"\"\n    extracted_list = []\n    for string in str_list:\n        if len(string) >= l:\n            extracted_list.append(string[:l])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(lst, size):\n    '''\n    Extract a string of specified size from a list of string values.\n    '''\n    result = []\n    for s in lst:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l, size):\n    '''\n    This function takes a list of strings, a size parameter to specify the length of the string to extract, and returns a list of extracted strings.\n    '''\n    result = []\n    for s in l:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(lst, l):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n        lst (list): List of strings.\n        l (int): Target string length.\n\n    Returns:\n        list: List of extracted strings.\n    \"\"\"\n\n    extracted_lst = []\n    for s in lst:\n        if len(s) == l:\n            extracted_lst.append(s)\n    return extracted_lst"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    This function takes a list of strings and a length as input. It returns a list of\n    strings of length \"length\" that are extracted from the given list of strings.\n    \"\"\"\n    extracted_list = []\n    for s in str_list:\n        extracted_list.append(s[:length])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings as input and returns a list of size specified strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and returns a list of specified size strings.\n    '''\n    output = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= size:\n            output.append(str_list[i])\n        else:\n            output.append(str_list[i][:size])\n    return output"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the size of the strings that we want to extract.\n    It returns a list of strings with the specified size of strings from the given list of strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in l if len(s) >= l]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text = re.sub('\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    pattern = r'\\s+'\n    text1 = re.sub(pattern, '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # replace all whitespaces with empty string\n    text1 = re.sub(r'\\s+', '', text1)\n    # remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile('\\s+')\n    text2 = pattern.sub('', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    \n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    \n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Removing all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text1)\n    \n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = (actual_cost - sale_amount) / sale_amount \n    if loss_percent >= 0.5: \n        loss_amount = sale_amount - actual_cost \n    else: \n        loss_amount = 0 \n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0: \n        return actual_cost - sale_amount\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    # calculate loss percentage\n    loss_percentage = (actual_cost - sale_amount) / actual_cost * 100\n    \n    # check if loss percentage is less than 10%\n    if loss_percentage < 10:\n        # calculate loss amount\n        loss_amount = sale_amount - actual_cost\n        \n        # return loss amount\n        return loss_amount\n    else:\n        # return 0 if loss percentage is greater than or equal to 10%\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Finding all even factors of the number\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            factors.append(i)\n    # Finding the sum of even factors\n    evenFactorsSum = sum(factors)\n    return evenFactorsSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of that number.\n    '''\n    \n    # Initialize variables\n    total = 0\n    count = 0\n    \n    # Loop through the numbers from 2 to n-1\n    for i in range(2, n+1):\n        \n        # Check if i is even\n        if i % 2 == 0:\n            \n            # Add i to total and count\n            total += i\n            count += 1\n            \n    # Return the total sum divided by the count\n    return total / count"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and n % (i * i) == 0:\n            sum += i\n            sum += n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all even factors of n.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum of the even factors of n.\n    \"\"\"\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = [i for i in range(2, n+1, 2)]\n    sumOfEvenFactors = 0\n    \n    for factor in evenFactors:\n        sumOfEvenFactors += factor\n        \n    return sumOfEvenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize variables\n    evenFactors = 0\n    sumOfFactors = 0\n    \n    # iterate over numbers from 1 to n\n    for i in range(1, n+1):\n        # check if i is even\n        if i % 2 == 0:\n            # add i to the list of even factors\n            evenFactors += i\n            \n            # add the factor to the sum of factors\n            sumOfFactors += i\n    \n    # return the sum of even factors\n    return sumOfFactors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b', re.IGNORECASE)\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z|Z)\\w+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w+z\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Find all occurrences of the word 'z' in the text\n    word_pattern = re.compile(r'\\b(z)\\w*\\b')\n    matches = word_pattern.findall(text)\n    \n    # Print the matches\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    pattern = r'\\b[a-z]+\\sz\\b' # matches words that contain 'z' at the end\n    matches = re.findall(pattern, text)\n\n    if len(matches) > 0:\n        print(f\"The word(s) containing 'z' are: {matches}\")\n    else:\n        print(\"No words containing 'z' were found.\")"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regular expressions to find all words that contain 'z'\n    pattern = r'\\b(z)\\w*\\b'\n    words = re.findall(pattern, text)\n    \n    # Print the words that contain 'z'\n    print(words)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 % 2 == 0:\n        print(\"The given month number contains 31 days.\")\n    else:\n        print(\"The given month number does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n    if monthnum2 in [4, 6, 9, 11]:\n        if monthnum2 % 2 == 0:\n            return \"30 days in February\"\n        else:\n            return \"29 days in February\"\n    else:\n        return \"31 days in all other months\"\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if 1 <= monthnum2 <= 12:\n        return True if 31 in [31 if i % 2 == 0 else 30 for i in range(1, monthnum2 + 1)] else False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if len(str(monthnum2)) == 2:\n        if monthnum2 in [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]:\n            return \"31\"\n        elif monthnum2 in [\"04\", \"06\", \"09\", \"11\"]:\n            return \"30\"\n        elif monthnum2 in [\"02\"]:\n            if (int(monthnum2) % 4 == 0 and int(monthnum2) % 100!= 0) or int(monthnum2) % 400 == 0:\n                return \"29\"\n            else:\n                return \"28\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum in days_in_months:\n        if days_in_months[monthnum] == 31:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 10 == 1 and monthnum2 % 100!= 11 or monthnum2 % 100 == 11:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # Reverse the string using string slicing notation\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0]) \n    min_sublist = [] \n    \n    for sublist in lst: \n        if len(sublist) < min_len: \n            min_len = len(sublist) \n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize variable to store minimum length\n    min_sublist = [] # initialize variable to store the sublist with minimum length\n    \n    for i in range(len(lst)): # iterate over the list\n        for j in range(i+1, len(lst)): # iterate over the remaining list\n            if len(lst[i:j+1]) < min_length: # check if the length of the sublist is less than minimum length\n                min_length = len(lst[i:j+1]) # if true, update the minimum length\n                min_sublist = lst[i:j+1] # update the sublist with minimum length\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n\n    min_lst = lst[0] # initialize the minimum sublist with the first sublist\n\n    for sublist in lst:\n        if len(sublist) < len(min_lst): # check if the current sublist has a smaller length than the minimum sublist\n            min_lst = sublist # update the minimum sublist with the current sublist\n\n    return min_lst # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Finding the length of the longest sublist\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    \n    # Finding the sublist with minimum length\n    min_length = max_length + 1\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    # Returning the sublist with minimum length\n    for sublist in lst:\n        if len(sublist) == min_length:\n            return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    #initialize minimum length and the minimum sublist\n    min_length = float('inf')\n    min_sublist = []\n\n    #iterate over the list and compare the length of each sublist with the minimum length\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n\n    #return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # creating a set of all possible sublists of the given list\n    all_sublists = set(map(tuple, combinations(lst, len(lst))))\n    # selecting the sublist with minimum length\n    min_sublist = min(all_sublists, key=len)\n    # converting the sublist to a list and returning it\n    return list(min_sublist)"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_list = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_list = lst[i:j]\n            if len(sub_list) < min_length:\n                min_length = len(sub_list)\n                min_list = sub_list\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initializing minimum length and index\n    min_length = float('inf')\n    min_index = 0\n    \n    # Looping through the list to find the sublist having minimum length\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_index = i\n    \n    # Returning the sublist having minimum length\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 1:\n        return lst\n    else:\n        min_length = len(lst[0])\n        min_index = 0\n        \n        for i in range(len(lst)):\n            if len(lst[i]) < min_length:\n                min_length = len(lst[i])\n                min_index = i\n        \n        return Find_Min(lst[min_index:])"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes the length and width of a rectangle as input and returns the area of the rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'\\b[A-Z]+\\b'\n    str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub('[A-Z]+', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]+', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'([A-Z]+)')\n    lowercase_pattern = re.compile(r'([a-z]+)')\n    \n    # remove uppercase substrings\n    string = re.sub(uppercase_pattern, '', string)\n    \n    # remove lowercase substrings\n    string = re.sub(lowercase_pattern, '', string)\n    \n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile(r'[A-Z]+') # find uppercase substrings\n    return regex.sub('', string) # remove substrings from string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to remove all uppercase substrings\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # find all occurrences of uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # loop through all matches and replace them with empty strings\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Use regular expressions to find uppercase substrings in the string\n    pattern = r'[A-Z]+'\n    matches = re.findall(pattern, str1)\n    \n    # Loop through each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'([A-Z][a-z]+)')\n\n    # Iterate over each match of the pattern in the string\n    for match in pattern.finditer(string):\n        # Extract the uppercase substring and convert it to lowercase\n        substring = match.group(0).lower()\n        # Replace the uppercase substring with its lowercase version in the string\n        string = string.replace(substring, substring)\n\n    return string"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Create a new list to store the extracted elements\n    extracted_lst = []\n    # Loop through each sublist in the original list\n    for sublist in lst:\n        # If the sublist has only one element, append it to the extracted list\n        if len(sublist) == 1:\n            extracted_lst.append(sublist[0])\n        # If the sublist has multiple elements, skip it\n        else:\n            pass\n    # Return the extracted list\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]] + [lst[i] for i in range(1, len(lst))]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    '''\n    This function counts the number of upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_case = 0\n    for char in str:\n        if char.isupper():\n            upper_case += 1\n    return upper_case"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # base case: if the length of the list is 0 or 1, there is only one combination\n    if len(list1) == 0 or len(list1) == 1:\n        return [list1]\n\n    # recursive case: generate all combinations of the remaining elements and add the current element\n    result = []\n    for i in range(len(list1)):\n        rest_of_list = list1[:i] + list1[i+1:]\n        for combo in combinations_list(rest_of_list):\n            result.append([list1[i]] + combo)\n\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to hold all possible combinations\n    all_combinations = []\n    \n    # Loop over all possible indices of the first element\n    for i in range(len(list1)):\n        # Loop over all possible indices of the remaining elements\n        for j in range(i+1, len(list1)+1):\n            # Create a tuple with the current combination\n            current_combination = tuple(list1[i:j])\n            # Add the current combination to the list of all combinations\n            all_combinations.append(current_combination)\n    \n    # Return the list of all combinations\n    return all_combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            combinations.append(list1[j:j+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        return list(combinations_list(list1[:-1]) + [list1[-1]])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return list(itertools.combinations(list1, len(list1)))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    combinations = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = float('-inf')\n    curr_product = 1\n    prev_product = 1\n\n    for i in range(len(arr)):\n        curr_product = arr[i]\n        prev_product = max(prev_product * curr_product, curr_product)\n        max_product = max(max_product, prev_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        if current_product < 0:\n            current_product = 1\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = 1\n\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        max_product = max(max_product, max_so_far)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], current_product * arr[i])\n        current_product = max_ending_here\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes in an array and returns the maximum product subarray.\n    '''\n\n    if len(arr) == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for num in arr:\n        if num > 0:\n            max_ending_here *= num\n            min_ending_here = 1\n        else:\n            min_ending_here *= num\n        \n        max_product = max(max_product, max_ending_here)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize the maximum product subarray\n    max_product = arr[0]\n    curr_product = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Update the current product\n        curr_product = max(arr[i], curr_product * arr[i])\n        # Update the maximum product subarray\n        max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # create a list to store the values of the dictionary\n    values = list(dict.values())\n    # check if all the values are same in the list\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values)!= 1:\n        return False\n    return all(values[0] == val for val in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(value == dict[next(iter(dict))][0] for value in dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if key == n:\n            continue\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    elif len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for i in dict.values():\n        if value is None:\n            value = i\n        elif i!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set()\n    for value in dict.values():\n        values.add(value)\n    \n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(1, n+1):\n        if dict[i]!= dict[1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Initialize an empty list to store values\n    values = []\n    # Loop through all the values in the dictionary\n    for value in dict.values():\n        # Append the value to the list of values\n        values.append(value)\n    # Check if all the values are the same in the list\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the non-empty items\n    non_empty_dict = {}\n    # Loop over the items in the original dictionary\n    for key, value in dict1.items():\n        # Check if the value is non-empty and not already in the non_empty_dict\n        if value and key not in non_empty_dict:\n            # Add the key-value pair to the non_empty_dict\n            non_empty_dict[key] = value\n    # Return the non-empty_dict\n    return non_empty_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # filter out empty items from the dictionary using filter()\n    filtered_dict = dict(filter(lambda item: item[1]!= \"\", dict1.items()))\n    # return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Initialize variables\n    max_product = float('-inf')\n    product = 1\n    increasing_subsequence = [arr[0]]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        if arr[i] > increasing_subsequence[-1]:\n            increasing_subsequence.append(arr[i])\n        else:\n            increasing_subsequence.pop()\n            increasing_subsequence.append(arr[i])\n        if len(increasing_subsequence) > 1:\n            product *= increasing_subsequence[-1]\n        if product > max_product:\n            max_product = product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    max_product = float('-inf')\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        max_product = max(max_product, dp[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Initialize the maximum product and the maximum product of the current subsequence\n    max_product = float('-inf')\n    max_product_subseq = 1\n\n    # Loop through all possible subsequences of the array\n    for i in range(1, len(arr)):\n        # Calculate the product of the numbers in the subsequence\n        product_subseq = arr[i] * max_product_subseq\n\n        # Update the maximum product and the maximum product of the current subsequence\n        max_product = max(max_product, product_subseq)\n        max_product_subseq = max(max_product_subseq, arr[i])\n\n    # Return the maximum product of the entire array\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize the maximum product and the current subsequence product\n    max_prod = arr[0]\n    curr_prod = arr[0]\n\n    # Iterate through the array from index 1 to n-1\n    for i in range(1, n):\n        # Update the current subsequence product if the current element is smaller\n        curr_prod = max(arr[i], curr_prod*arr[i])\n        # Update the maximum product if the current subsequence product is greater\n        max_prod = max(max_prod, curr_prod)\n\n    # Return the maximum product\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n\n    n = len(arr)\n    max_product_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_product_ending_here:\n            max_product_ending_here = arr[i]\n        elif arr[i] < max_product_ending_here:\n            max_product_ending_here = max(max_product_ending_here * arr[i], max_product_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_product_ending_here)\n        min_so_far = min(min_so_far, max_product_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num > 0:\n            current_product *= num\n            max_product = max(max_product, current_product)\n        else:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    # initialize variables for max_product and current_product\n    max_product = float('-inf')\n    current_product = 1\n    \n    # loop through the array\n    for i in range(1, len(arr)):\n        # if the current number is greater than the last number,\n        # update current_product\n        if arr[i] > arr[i-1]:\n            current_product *= arr[i]\n        else:\n            current_product = 1\n        \n        # update max_product if current_product is greater\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the sum of the pairwise addition of the neighboring elements.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"The input tuple should have at least two elements\")\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # define a list of the pairs of neighboring elements in the tuple\n    pairs = [(test_tup[i], test_tup[i+1]) for i in range(len(test_tup)-1)]\n    # iterate through the list of pairs and find their sum\n    total = 0\n    for pair in pairs:\n        total += sum(pair)\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #initialize sum to zero\n    sum = 0\n    #loop through the tuple and add the neighboring elements together\n    for i in range(1, len(test_tup)):\n        sum += test_tup[i-1] + test_tup[i]\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 0\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    for i in range(len(test_tup)-1):\n        sum += test_tup[i] + test_tup[i+1]\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    pairwise_sum = 0\n\n    for i in range(1, n):\n        pairwise_sum += test_tup[i]\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Initialize the first and second elements of the tuple\n    first_elem = test_tup[0]\n    second_elem = test_tup[1]\n\n    # Loop through the rest of the tuple and add the neighboring elements to the sum\n    for i in range(2, len(test_tup)):\n        third_elem = test_tup[i]\n        sum_pairwise = first_elem + second_elem + third_elem\n        print(\"Pairwise addition of element {} and element {}: {}\".format(first_elem, second_elem, sum_pairwise))\n        # Update the first and second elements for the next iteration\n        first_elem = second_elem\n        second_elem = third_elem"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Initialize a list to store the sum of adjacent elements\n    result = []\n\n    # Loop through the tuple and calculate the sum of adjacent elements\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    \n    # Create a list of pairs of neighboring elements\n    neighboring_pairs = [(test_tup[i], test_tup[i+1]) for i in range(len(test_tup)-1)]\n    \n    # Sum up the pairs and return the result\n    return sum(neighboring_pairs)"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = result * i % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result *= num\n        result %= n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)): \n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the product to 1 and the divisor to n\n    product = 1\n    divisor = n\n\n    # Iterate through the array and multiply each element with the product\n    for element in arr:\n        product = (product * element) % divisor\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments - an array and an integer n.\n    It calculates the product of the array elements modulo n and returns the result.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = result * num % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    if not l: \n        return False\n    \n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Initialize a flag variable to keep track of whether the list contains consecutive numbers or not\n    flag = False\n    \n    # Loop through the list from the second element to the last element\n    for i in range(1, len(l)): \n        # If the current element is not equal to the next element, then the list contains consecutive numbers\n        if l[i]!= l[i-1]+1: \n            flag = True\n            break\n        \n    # Return the flag variable indicating whether the list contains consecutive numbers or not\n    return flag"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether a given list contains consecutive numbers or not.\n    \"\"\"\n    # initialize variables\n    consecutive = False\n    current = None\n\n    # iterate through the list\n    for num in l:\n        # check if the current number is consecutive with the previous number\n        if consecutive:\n            if current + 1 == num:\n                consecutive = False\n            else:\n                consecutive = True\n                current = num\n        else:\n            # if the current number is the first number, set the consecutive variable to True and set the current variable to the current number\n            if current is None:\n                consecutive = True\n                current = num\n            else:\n                # if the current number is not the first number, check if it is consecutive with the previous number\n                if current + 1 == num:\n                    consecutive = True\n                else:\n                    consecutive = False\n                    current = num\n\n    # return the result\n    return consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1): \n        if l[i+1] - l[i]!= 1: \n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # First, create a set of unique elements in both lists\n    unique_elements1 = set(test_list1)\n    unique_elements2 = set(test_list2)\n    \n    # Now, create a set of tuples that contain the intersection of the two sets\n    common_elements = unique_elements1 & unique_elements2\n    \n    # Finally, convert the common elements back into tuples and return them\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    \n    result_list = []\n    \n    i = j = 0\n    \n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] < test_list2[j]:\n            i += 1\n        elif test_list1[i] > test_list2[j]:\n            j += 1\n        else:\n            result_list.append(test_list1[i])\n            i += 1\n            j += 1\n            \n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from test_list1\n    set1 = set(test_list1)\n    \n    # Create an empty set to store the common elements\n    common_elements = set()\n    \n    # Iterate through test_list2 and check if the element is present in set1\n    for element in test_list2:\n        if element in set1:\n            common_elements.add(element)\n    \n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # Create an empty set to store the unique elements from the first list\n    unique_elements1 = set()\n    # Iterate through the first list and add each unique element to the set\n    for element in test_list1:\n        unique_elements1.add(element)\n\n    # Create another empty set to store the unique elements from the second list\n    unique_elements2 = set()\n    # Iterate through the second list and add each unique element to the set\n    for element in test_list2:\n        unique_elements2.add(element)\n\n    # Use the intersection method to find the common elements between the two sets\n    common_elements = unique_elements1.intersection(unique_elements2)\n\n    # Convert the set back to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store the intersection of tuples\n    intersection = set()\n    # Loop through each tuple in the list 1\n    for t1 in test_list1:\n        # Loop through each tuple in the list 2 and check if they are equal\n        for t2 in test_list2:\n            if t1 == t2:\n                # Add the tuple to the intersection set\n                intersection.add(t1)\n                break\n    # Return the intersection set\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = set()\n    # convert lists to sets to remove duplicates\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    # use set intersection to find common elements\n    common = test_list1.intersection(test_list2)\n    # convert back to tuples to remove duplicates\n    for element in common:\n        result.add(tuple(element))\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    \n    # Create a set of the first list to get unique elements\n    set1 = set(test_list1)\n    \n    # Iterate over the second list and add the elements that are in the first list\n    for element in test_list2:\n        if element in set1:\n            intersection.append(element)\n    \n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # create sets to store unique elements of both lists\n    unique_list1 = set(test_list1)\n    unique_list2 = set(test_list2)\n\n    # find the intersection of unique elements in both lists\n    intersection = unique_list1.intersection(unique_list2)\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns the tuple intersection of the elements in the two lists.\n    '''\n    intersection = []\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    for element in set1:\n        if element in set2:\n            intersection.append(element)\n    return tuple(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Check if the current character is the target character\n        if str1[i] == ch:\n            # Replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of character `ch` in the string `str1` with `newch`.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The character to replace all occurrences of ch with.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character in a given string with another character.\n    \n    Parameters:\n    str1 (string): The input string.\n    ch (string): The character to be replaced.\n    newch (string): The new character to replace the old character.\n    \n    Returns:\n    A new string with all occurrences of the old character replaced with the new character.\n    \"\"\"\n    # Loop through each character in the input string\n    for i in range(len(str1)):\n        # If the current character is the old character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string to hold the modified string\n    modified_str = ''\n    # loop through each character in the original string\n    for char in str1:\n        # if the current character is not the character to be replaced, add it to the modified string\n        if char!= ch:\n            modified_str += char\n        # if the current character is the character to be replaced, add the new character instead\n        else:\n            modified_str += newch\n    # return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = {}\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new dictionary with the sorted items\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes in a dictionary as an argument and sorts it based on the values of its keys.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # sort the counter object by values\n    sorted_dict = dict(sorted(counter.items()))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a sorted dictionary\n    by value in descending order.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # initialize variables to store the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n\n    # iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    # find the sum of the first and last elements\n    first_last_sum = nums[0] + nums[-1]\n    # find the sum of the second and second last elements\n    second_last_sum = nums[1] + nums[-2]\n    # return the sum of the first and second last elements\n    return first_last_sum + second_last_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest value in the array\n    largest = max(nums)\n    \n    # Find the smallest value in the array\n    smallest = min(nums)\n    \n    # Calculate the sum of the largest and smallest values\n    total_sum = largest + smallest\n    \n    # Return the sum\n    return total_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    else:\n        return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n\n    # add the two values together to get the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Calculate the sum of the largest and smallest value\n    max_sum = nums[0] + nums[-1]\n    min_sum = nums[0] + nums[-1]\n    \n    # Return the sum of the largest and smallest value\n    return max_sum + min_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is all lowercase or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function takes a string as input and returns the same string with lowercase substrings removed.\n    \"\"\"\n    # Use regex to find all lowercase substrings\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', string.lower())\n\n    # Loop through the substrings and remove them from the string\n    for substring in lowercase_substrings:\n        string = re.sub(substring, '', string)\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    return re.sub(r'\\b[a-z][a-z]+\\b', '', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the string\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    This function takes a string as input and returns a new string with all lowercase substrings removed.\n    \"\"\"\n    pattern = re.compile(r'[a-z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into list of words\n    words = str1.split()\n    # Iterate over the list of words and remove lowercase substrings\n    for i in range(len(words)):\n        if re.search('[a-z]', words[i]) is not None:\n            words.remove(words[i])\n    # Join the list of words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Use re.sub() method to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'([a-z])'\n    matches = re.findall(pattern, str1)\n    result = []\n    for match in matches:\n        result.append(match.upper())\n    return ''.join(result)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+') # pattern for lowercase substrings\n    str2 = lowercase_pattern.sub('', str1) # replace all lowercase substrings with an empty string\n    return str2"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    # Convert the given number to a string\n    num_str = str(n)\n    # Return the first character of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to a string\n    n_str = str(n)\n    # Return the first character of the string\n    return n_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10 :\n        return n\n    else :\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    first_digit = n // 10 ** (len(str(n)) - 1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the input number to string\n    str_num = str(n)\n    # convert the string to list of characters\n    num_list = list(str_num)\n    # return the first character of the list\n    return num_list[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    # Initialize an empty string to store the digits of the number\n    digits = \"\"\n    # Convert the input number to a string\n    str_n = str(n)\n    # Loop through each character of the string and append it to the digits string if it is a digit\n    for char in str_n:\n        if char.isdigit():\n            digits += char\n    # Return the first digit of the number\n    return digits[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    \"\"\"\n    This function takes a number as input and returns its first digit.\n    \"\"\"\n    return n//100"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2!= 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Function to calculate sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        return sum([i**3 for i in range(1, n+1)])\n\n    # Calculate sum of first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # Calculate difference between the sum of cubes of first n natural numbers and the sum of the first n natural numbers\n    return sum_of_cubes(n) - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural_numbers += i\n    return sum_cubes - sum_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate sum of cubes of first n natural numbers\n    cubes = sum(i**3 for i in range(1, n+1))\n    \n    # calculate sum of first n natural numbers\n    first_n = sum(range(1, n+1))\n    \n    # find the difference between the two sums\n    diff = cubes - first_n\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        \"\"\"\n        Write a python function to calculate the sum of cubes of the first n natural numbers.\n        \"\"\"\n        return sum([x**3 for x in range(1, n+1)])\n\n    # function to calculate the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        \"\"\"\n        Write a python function to calculate the sum of the first n natural numbers.\n        \"\"\"\n        return sum(range(1, n+1))\n\n    # calculate the sum of cubes of the first n natural numbers\n    first_n_cubes = sum_cubes(n)\n\n    # calculate the sum of the first n natural numbers\n    first_n = sum_natural_numbers(n)\n\n    # calculate the difference between the two sums\n    diff = first_n_cubes - first_n\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # find the sum of cubes of the first n natural numbers\n    cubes = 0\n    for i in range(1, n+1):\n        cubes += i**3\n    \n    # find the sum of the first n natural numbers\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    \n    # calculate the difference\n    diff = cubes - total\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum([i*i*i for i in range(1, n+1)])\n    \n    # calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # return the difference between the two sums\n    return cubes_sum - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(n+1)])\n    sum_of_natural_numbers = sum(range(n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the sum of first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of cubes of the first n natural numbers\n    sum_of_cubes = (n ** 3) * (n + 1) // 2\n    \n    # sum of the first n natural numbers\n    sum_of_numbers = n * (n + 1) // 2\n    \n    # difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        xor = A[i] ^ A[i+1]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    # Create a dictionary to store the count of odd numbers\n    odd_count = {}\n    for num in A:\n        if num in odd_count:\n            odd_count[num] += 1\n        else:\n            odd_count[num] = 1\n    \n    # Initialize the count of odd pairs\n    odd_pairs_count = 0\n    \n    # Iterate over the odd numbers and check their pairs\n    for num in odd_count:\n        # Calculate the xor value of num\n        xor_val = num ^ N\n        \n        # If the xor value is odd, increment the count\n        if xor_val in odd_count:\n            odd_pairs_count += odd_count[xor_val]\n    \n    return odd_pairs_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    # initialize count to 0\n    count = 0\n    \n    # loop through all the elements in array A\n    for i in range(N):\n        # calculate the xor of A[i] and A[j]\n        xor = A[i] ^ A[j]\n        \n        # check if xor is odd\n        if xor % 2 == 1:\n            # increment count by 1\n            count += 1\n    \n    # return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize two variables to store count of odd pairs\n    count = 0\n    odd_count = 0\n\n    # Loop through the array A and for each element, check if its xor value is odd or even\n    for num in A:\n        # Calculate the xor value of the current element with all the elements in A\n        xor_val = num ^ sum(A)\n\n        # If the xor value is odd, increment the odd_count variable\n        if xor_val % 2!= 0:\n            odd_count += 1\n\n        # If the xor value is even, increment the count variable\n        else:\n            count += 1\n\n    # Return the sum of odd_count and count\n    return odd_count + count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the toggled string\n    toggled_string = \"\"\n    \n    # Loop through each character in the original string\n    for char in string:\n        # If the character is a lowercase letter, convert it to uppercase\n        if char.islower():\n            toggled_string += char.upper()\n        # If the character is an uppercase letter, convert it to lowercase\n        elif char.isupper():\n            toggled_string += char.lower()\n        # If the character is neither lowercase nor uppercase, leave it as is\n        else:\n            toggled_string += char\n    \n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize a new string to store the toggled version of the input string\n    toggled_string = ''\n    # loop through each character in the input string\n    for char in string:\n        # convert the character to lowercase and append it to the new string\n        if char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char.upper()\n    # return the toggled version of the input string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_char = \"\"\n        if char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char.upper()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a variable to store the sum of per-digit differences\n    sum_diff = 0\n\n    # Loop through each digit of n1 and n2\n    for digit1, digit2 in zip(str(n1), str(n2)):\n        # Calculate the per-digit difference between the digits\n        diff = int(digit1) - int(digit2)\n\n        # Add the difference to the sum of per-digit differences\n        sum_diff += diff\n\n    # Return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Initialize variables\n    sum_diff = 0\n    diff = 0\n\n    # Loop through each digit of the two integers\n    for i in range(len(str(n1))):\n        diff = n1 % 10 - n2 % 10\n        sum_diff += diff\n        n1 //= 10\n        n2 //= 10\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert both numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Get the length of the smaller number\n    length = len(s1) if len(s1) < len(s2) else len(s2)\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through each digit in the smaller number\n    for i in range(length):\n        # Get the difference between the corresponding digits\n        diff = int(s1[i]) - int(s2[i])\n\n        # Add the difference to the total sum\n        total_sum += diff\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    \"\"\"\n    # convert both numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # initialize the sum variable\n    sum_diff = 0\n\n    # loop through each character in the strings\n    for i in range(len(n1_str)):\n        # convert each character to an integer\n        digit1 = int(n1_str[i])\n        digit2 = int(n2_str[i])\n\n        # calculate the per-digit difference and add it to the sum\n        diff = abs(digit1 - digit2)\n        sum_diff += diff\n\n    # return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_digit_diffs = 0\n    for i in range(10):\n        diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        sum_digit_diffs += diff\n    return sum_digit_diffs"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    # convert both numbers to lists of digits\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    # loop through each digit of the two numbers and calculate the per-digit difference\n    for i in range(max(len(num1), len(num2))):\n        if i < len(num1):\n            diff = abs(num1[i] - num2[i])\n        else:\n            diff = abs(num2[i] - 0)\n        sum += diff\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the sum of per-digit differences\n    distance = 0\n    for i in range(max(len(n1_digits), len(n2_digits))):\n        if i < len(n1_digits):\n            distance += abs(n1_digits[i] - n2_digits[i])\n        if i < len(n2_digits):\n            distance += abs(n2_digits[i] - n1_digits[i])\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert each integer to a list of its digits\n    num1 = [int(digit) for digit in str(n1)]\n    num2 = [int(digit) for digit in str(n2)]\n\n    # calculate the sum of the per-digit differences\n    sum_diff = 0\n    for i in range(len(num1)):\n        diff = abs(num1[i] - num2[i])\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    # Calculate the sum of absolute differences between digits of n1 and n2\n    diff = sum(abs(n1 % 10 - n2 % 10))\n    # Add up the sum of absolute differences between digits of n1 and n2\n    for i in range(1, 10):\n        # Calculate the absolute difference between the digits of n1 and n2\n        digit_diff = abs(n1 % 10 - n2 % 10)\n        # Add up the absolute difference between the digits of n1 and n2\n        diff += digit_diff * (i-1)\n        # Update the value of n1 and n2 to be the next larger digit\n        n1 //= 10\n        n2 //= 10\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    d1 = [int(digit) for digit in str(n1)]\n    d2 = [int(digit) for digit in str(n2)]\n    \n    # calculate the sum of per-digit differences\n    distance = 0\n    for i in range(len(d1)):\n        distance += abs(d1[i] - d2[i])\n    \n    return distance"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if i >= size-size:\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            curr_sum -= a[start]\n            start += 1\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size-size//2:\n            current_sum -= a[i-size//2]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list a and a size as input and returns the sum of the largest contiguous sublist in the list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist of a given list.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    # Iterate over the list\n    for i in range(size):\n        # If the current element is greater than the previous max sum, update max sum and start index\n        if a[i] > max_sum:\n            max_sum = a[i]\n            start = i\n\n        # If the current element is greater than the current max sum, add it to the current sum\n        current_sum += a[i]\n\n        # If the current sum exceeds the maximum sum, remove elements from the current sum until the sum is less than or equal to the previous maximum sum\n        while current_sum > max_sum:\n            current_sum -= a[start]\n            start += 1\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Args:\n    a (list): The list of integers.\n    size (int): The size of the subarray to be considered.\n\n    Returns:\n    int: The sum of the largest contiguous sublist of length size in the given list.\n    \"\"\"\n    if size > len(a):\n        return \"Error: size cannot be greater than the length of the list.\"\n\n    max_sum = float('-inf')\n    start = 0\n    end = size - 1\n\n    while end < len(a):\n        current_sum = sum(a[start:end+1])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = start\n        end += 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        raise ValueError(\"size must be less than or equal to the length of the list\")\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum, current_start"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty list to store the union\n    union = []\n    # Iterate through the first tuple\n    for element in test_tup1:\n        # Check if the element is not already present in the union list\n        if element not in union:\n            # If the element is not present, add it to the list\n            union.append(element)\n    # Iterate through the second tuple\n    for element in test_tup2:\n        # Check if the element is not already present in the union list\n        if element not in union:\n            # If the element is not present, add it to the list\n            union.append(element)\n    # Sort the union list in ascending order\n    union.sort()\n    # Return the sorted union list\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate both tuples and convert it to a set\n    union_set = set(test_tup1 + test_tup2)\n    # Sort the set and convert it back to a tuple\n    union_tup = tuple(sorted(union_set))\n    # Return the union tuple\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to sets so that we can find the union easily\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the union of the sets\n    union = set1.union(set2)\n    # convert the set back to a tuple and sort it\n    sorted_union = tuple(sorted(union))\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n    # Convert the union to a set to remove duplicates and sort the elements\n    unique_union = sorted(set(union))\n    # Print the sorted union\n    print(unique_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Add all the elements of the first tuple to the set\n    for element in test_tup1:\n        unique_elements.add(element)\n\n    # Add all the elements of the second tuple to the set\n    for element in test_tup2:\n        unique_elements.add(element)\n\n    # Convert the set to a list and sort it\n    sorted_list = sorted(list(unique_elements))\n\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a new tuple\n    combined_tuple = test_tup1 + test_tup2\n\n    # Remove duplicates from the combined tuple\n    unique_tuple = list(set(combined_tuple))\n\n    # Sort the unique tuple in ascending order\n    sorted_tuple = sorted(unique_tuple)\n\n    # Print the sorted unique tuple\n    print(sorted_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union_set = set(union)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_tup = test_tup1 + test_tup2\n    \n    # Sort the union_tup in ascending order\n    union_tup.sort()\n    \n    # Print the sorted union_tup\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # find the union of the two lists\n    union_list = list(set(test_tup1 + test_tup2))\n    # sort the list in ascending order\n    union_list.sort()\n    # print the sorted list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must be of the same length!\")\n        return None\n    \n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n    \n    # Sort the union in ascending order\n    union.sort()\n    \n    # Return the sorted union as a tuple\n    return tuple(union)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            if j-i+1 > max_len:  \n                max_len = j-i+1  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for num in lst:\n        if num == 1:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    # Iterate over the list\n    for i in range(len(lst)):\n        # Check if the current list element is equal to the last list element\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            # Update the maximum length if the current length is greater\n            if current_length > max_length:\n                max_length = current_length\n            # Reset the current length\n            current_length = 1\n    # Update the maximum length if the list is not empty\n    if current_length > max_length:\n        max_length = current_length\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize variables to store the length of the longest sublist\n    max_length = 0\n    current_length = 0\n\n    # iterate over the list and update the current_length\n    for i in range(len(lst)):\n        current_length += 1\n\n        # update the max_length if necessary\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        if i == 0:  \n            max_length = 1  \n        else:  \n            for j in range(i):  \n                if lst[i] in lst[j]:  \n                    max_length = max(max_length, j-i+1)  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # initialize variables\n    max_length = 0\n    current_length = 0\n\n    # loop through the list and calculate the length of each sublist\n    for i in range(len(lst)):\n        if i == 0:\n            current_length = 1\n        else:\n            current_length += 1\n\n        # if the current sublist is longer than the previous longest, update the maximum length\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize max_length to 0\n    max_length = 0\n    # loop through each element in the list\n    for i in range(len(lst)):\n        # initialize current_length to 0\n        current_length = 0\n        # loop through each element after the current element\n        for j in range(i+1, len(lst)):\n            # if the current element is equal to the next element, add 1 to the current_length\n            if lst[j] == lst[j-1]:\n                current_length += 1\n            else:\n                # if the current element is not equal to the next element, update the max_length if the current_length is greater than the max_length\n                if current_length > max_length:\n                    max_length = current_length\n                # reset current_length to 0\n                current_length = 0\n    # if the last element in the list has not been added to the max_length, add it\n    if current_length > max_length:\n        max_length = current_length\n    # return max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of sublists and returns the length of the longest sublist.\n    \"\"\"\n\n    max_length = 0\n    current_length = 0\n    for sublist in lst:\n        current_length = max(current_length, len(sublist))\n        max_length = max(max_length, current_length)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sublist_lengths = []\n    for i in range(len(lst)):\n        if i == 0:\n            sublist_lengths.append(1)\n        elif lst[i] == lst[i-1]:\n            sublist_lengths[-1] += 1\n        else:\n            sublist_lengths.append(1)\n    return max(sublist_lengths)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\".*?\")'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1).strip()\n    else:\n        return None"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    This function takes a string as input and extracts values between quotation marks.\n    \"\"\"\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\".*?\")'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text)\n    values = [match[0].strip() for match in match]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n\n    Args:\n    text: (str) - The input string from which values need to be extracted.\n\n    Returns:\n    A list of extracted values.\n\n    Raises:\n    TypeError: if the input is not a string.\n    '''\n\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    values = re.findall(r'\"([^\"]+)\"', text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"' # regular expression pattern to find quoted values\n    values = re.findall(pattern, text) # use re.findall to find all matches of the pattern in the text\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"' # regular expression pattern to match values between quotation marks\n    matches = re.findall(pattern, text) # find all occurrences of the pattern in the text\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Find all the quotation marks in the text\n    quotes = re.findall(r'\"([^\"]*)\"', text)\n\n    # Iterate over the quotes and extract the values\n    values = []\n    for quote in quotes:\n        # Check if the quote contains a value between double quotes\n        if re.search(r'\"([^\"]*)\"', quote):\n            # Extract the value between double quotes\n            value = re.findall(r'\"([^\"]*)\"', quote)[0]\n            # Add the value to the list of values\n            values.append(value)\n        else:\n            # If the quote does not contain a value between double quotes,\n            # add the quote itself as the value\n            values.append(quote)\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'(?<!\\\\)\"(?P<value>.*)\"')\n    matches = pattern.findall(text)\n    return [match['value'] for match in matches]"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Create an empty list to store characters\n    characters = []\n    \n    # Loop through each character in the word\n    for char in word:\n        # Add the character to the list of characters\n        characters.append(char)\n    \n    # Return the list of characters\n    return characters"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Convert the integer to a string\n    s = str(n)\n    \n    # Loop through each character in the string and add its integer value to the sum\n    for c in s:\n        sum += int(c)\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    digits_sum = 0\n    while n > 0:\n        digits_sum += n % 10\n        n //= 10\n    return digits_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit in the number string\n    for digit in num_str:\n        # Add the integer value of the digit to the sum\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # loop through each digit of the integer and add it to the sum\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input number to a string\n    n = str(n)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit in the string and add it to the sum\n    for digit in n:\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit of the number\n    while n > 0:\n        # Extract the last digit of the number\n        digit = n % 10\n        # Add the digit to the sum\n        sum += digit\n        # Remove the last digit of the number\n        n = n // 10\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted, otherwise it returns False.\n    \"\"\"\n    return sorted(lst) == lst"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # Check if the list is sorted\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    '''\n    Check whether a specified list is sorted or not.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if not lst:\n        return True\n\n    # Check if the first two elements are equal\n    if lst[0] == lst[1]:\n        return False\n\n    # Initialize two pointers for the list\n    i = 0\n    j = 1\n\n    # Check if the rest of the list is sorted\n    while j < len(lst):\n        if lst[i] > lst[j]:\n            return False\n        i += 1\n        j += 1\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(lst) > 1:\n        for i in range(len(lst)-1):\n            if lst[i] > lst[i+1]:\n                return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    This function takes an integer as input and creates a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list\n    for sublist in list1:\n        # sort the sublist using the sorted() function\n        sublist.sort()\n        # print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    # create an empty dictionary to store unique numbers\n    unique_nums = {}\n    # loop through each number in the list\n    for num in nums:\n        # if the number is not in the dictionary, add it\n        if num not in unique_nums:\n            unique_nums[num] = True\n    # create a new list with only unique numbers\n    unique_nums_list = list(unique_nums.keys())\n    # sort the list in ascending order\n    unique_nums_list.sort()\n    # return the unique numbers list\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Convert the input lists to sets to remove duplicates\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(set(num_list))\n    # Convert the set back to a list\n    unique_nums = list(unique_nums)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of numbers\n    freq_dict = {}\n    \n    # Iterate over all the lists in the input list\n    for lst in nums:\n        # Iterate over all the numbers in the list\n        for num in lst:\n            # If the number is not already in the dictionary, add it with a frequency of 1\n            if num not in freq_dict:\n                freq_dict[num] = 1\n            # If the number is already in the dictionary, increment its frequency by 1\n            else:\n                freq_dict[num] += 1\n    \n    # Create an empty list to store the unique numbers\n    unique_lst = []\n    \n    # Iterate over all the numbers in the frequency dictionary\n    for num in freq_dict:\n        # If the frequency of the number is 1, add it to the unique list\n        if freq_dict[num] == 1:\n            unique_lst.append(num)\n    \n    # Return the unique list of numbers\n    return unique_lst"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(*args):\n    \"\"\"\n    Function to remove duplicate numbers from multiple lists.\n    \"\"\"\n    unique_nums = []\n    for lst in args:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty dictionary to store the unique elements\n    unique_dict = {}\n\n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each element in the list\n        for element in num_list:\n            # If the element is not already in the dictionary, add it\n            if element not in unique_dict:\n                unique_dict[element] = True\n\n    # Loop through the list of unique elements and add them to a new list\n    new_nums = []\n    for element in unique_dict:\n        new_nums.append(element)\n\n    return new_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list with no duplicate elements.\n\n    :param nums: A list of lists of integers.\n    :return: A new list with no duplicate elements from the input lists.\n    \"\"\"\n    # Use a dictionary to store the unique elements of the lists.\n    unique_dict = {}\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            unique_dict[nums[i][j]] = True\n\n    # Convert the dictionary keys to a list and return the result.\n    unique_list = []\n    for key in unique_dict.keys():\n        unique_list.append(key)\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create an empty dictionary to store the unique numbers\n    unique_nums = {}\n\n    # Loop through each list in the input\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # Check if the number is already in the dictionary\n            if num in unique_nums:\n                # If it is, remove it from the list\n                num_list.remove(num)\n            # If the number is not in the dictionary, add it to the dictionary\n            else:\n                unique_nums[num] = True\n\n    # Return the modified lists with only unique numbers\n    return [num_list for num_list in nums if len(num_list) > 1]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    # create an empty set to store unique numbers\n    unique_set = set()\n    # iterate over each list in the given number of lists\n    for lst in nums:\n        # iterate over each number in the list\n        for num in lst:\n            # add each unique number to the set\n            unique_set.add(num)\n    # convert the set to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers[0] * unique_numbers[1]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set to store unique numbers\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data) # convert the list to a set to remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers and returns the product of the unique numbers in the list.\n    \"\"\"\n    # Initialize an empty list to store the unique numbers\n    unique_nums = []\n    \n    # Iterate through the list and add each unique number to the unique_nums list\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi*(r**2)*h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of a cylinder using the formula for a right circular cylinder\n    surface_area = (2*3.14159)*(r**2) + (2*3.14159)*(r**2)*h + (3.14159*r**2)*h**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    return 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    '''\n    return 2 * pi * r * h + 2 * pi * r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 2 * 3.14 * h**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h  # pi is a mathematical constant, equal to 3.14159"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2 * math.pi * r**2) + (2 * math.pi * h * r)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*(r**2)+(2*h)\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r ** 2 + 2 * 3.14159 * r * h + 3 * 3.14159 * h ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    S = (2 * math.pi * r * h) / 3\n    return S"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    if len(A) > len(B):\n        A,B = B,A\n    if len(A) > len(B):\n        return False\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n    else: \n        for i in range(len(B)): \n            if B[i] not in A: \n                return False \n        return True "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(A):\n        if A[j] == B[i]:\n            i += 1\n        if i == len(B):\n            return True\n        j += 1\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n\n    n = len(A) \n\n    for i in range(len(B)): \n        if A[i:n+1] == B: \n            return True \n\n    return False \n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    for i in range(len(B)): \n        if A.count(B[i])>=len(B): \n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    else:\n        i = 0\n        for j in range(len(A)-len(B)+1):\n            if A[j:j+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        A = sorted(A)\n    for i in range(len(B)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as input and checks whether B is a sublist of A or not.\n    It returns True if B is a sublist of A and False otherwise.\n    \"\"\"\n    # check if A is a sublist of B\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    i=0\n    j=0\n    while j < len(B): \n        if A[i] == B[j]: \n            i += 1\n            if i == len(A): \n                return True\n        j += 1\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string to get the last digit\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n and returns the last digit of its factorial.\n\n    Args:\n        n (int): an integer for which the factorial is to be calculated.\n\n    Returns:\n        int: the last digit of the factorial of n.\n    \"\"\"\n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the input number to a string\n    n_str = str(n)\n\n    # Get the last digit of the string\n    last_digit = n_str[-1]\n\n    # Convert the last digit to an integer\n    last_digit_int = int(last_digit)\n\n    # Find the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit_int + 1):\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # find the last digit in the string\n    last_digit = num_str[-1]\n    # convert the last digit to an integer\n    last_digit_int = int(last_digit)\n    # find the factorial of n\n    factorial = 1\n    for i in range(1, last_digit_int+1):\n        factorial *= i\n    # return the factorial\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # find the last digit in the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # extract the last digit of the factorial\n    last_digit = int(factorial % 10)\n    \n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Negative numbers are not allowed!\")\n        return\n    \n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    \n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = str(factorial)[-1]\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    last_digit = int(str(fact)[-1])\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    # Flatten the input lists to a single list\n    flat_list = list1 + list2 + list3\n    \n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Step through the flat list and add each element to the interleaved list\n    i = 0\n    while i < len(flat_list):\n        interleaved_list.append(flat_list[i])\n        interleaved_list.append(flat_list[i+1])\n        interleaved_list.append(flat_list[i+2])\n        i += 3\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    for i in range(max(len(list1), len(list2), len(list3))):\n        if i < len(list1):\n            result.append(list1[i])\n        elif i < len(list1) + len(list2):\n            result.append(list2[i - len(list1)])\n        else:\n            result.append(list3[i - len(list1) - len(list2)])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[j])\n        interleaved_list.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    if i < len(list1):\n        interleaved_list += list1[i:]\n    elif j < len(list2):\n        interleaved_list += list2[j:]\n    elif k < len(list3):\n        interleaved_list += list3[k:]\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): first list of the same length\n        list2 (list): second list of the same length\n        list3 (list): third list of the same length\n\n    Returns:\n        list: interleaved list of the same length as the input lists\n    \"\"\"\n    # check if the input lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All input lists must have the same length.\")\n\n    # initialize an empty list to hold the interleaved list\n    interleaved = []\n\n    # loop through the input lists and append their elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n\n    return interleaved"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of all the elements that are different in the two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # create a set of all elements in test_tup1\n    unique_elements = set(test_tup1)\n    \n    # create a list of all elements in test_tup2 that are not in unique_elements\n    dissimilar_elements = [element for element in test_tup2 if element not in unique_elements]\n    \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # If the elements are not equal, append it to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a dictionary to store the count of each element in both tuples\n    count_dict = {}\n    for elem in test_tup1 + test_tup2:\n        count_dict[elem] = count_dict.get(elem, 0) + 1\n    \n    # create a set to store the dissimilar elements\n    dissimilar_set = set()\n    \n    # iterate through the keys in the dictionary and check if the count of each key is less than 2\n    for key in count_dict:\n        if count_dict[key] < 2:\n            dissimilar_set.add(key)\n    \n    # return the dissimilar elements as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create sets of the first tuple and the second tuple to compare\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # find the difference between the sets to get the dissimilar elements\n    dissimilar = set1.difference(set2)\n    \n    # concatenate the intersection and the dissimilar sets to get the final result\n    result = sorted(list(intersection) + list(dissimilar))\n    \n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    for element in test_tup2:\n        if element not in common_elements:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    uneven_elements = []\n\n    for sub_tuple in test_tuple:\n        if len(sub_tuple) % 2!= 0:\n            uneven_elements.append(sub_tuple)\n\n    return [even_fnc(x) for x in uneven_elements]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if even_fnc(i):\n            result.append(i)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        print(\"Input is not a tuple.\")\n        return\n    \n    # Iterate through each element of the tuple\n    for i in test_tuple:\n        # If the element is a tuple, recursively call the function\n        if isinstance(i, tuple):\n            even_ele(i, even_fnc)\n        # If the element is not a tuple, check if it is even\n        elif even_fnc(i):\n            # If the element is even, remove it from the list\n            test_tuple.remove(i)\n        # If the element is not even, continue with the next element\n        else:\n            continue\n    \n    # Return the modified tuple\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a function to check if a number is even\n    def is_even(num): \n        return num % 2 == 0\n\n    # Filter out the even elements using the filter() function\n    even_tuple = filter(is_even, test_tuple)\n\n    # Convert the filtered tuple to a list and return it\n    return list(even_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not all(isinstance(t, (list, tuple)) for t in test_tuple):\n        raise ValueError(\"Invalid input. All elements must be lists or tuples.\")\n\n    def remove_uneven_elements(t):\n        if not all(isinstance(e, (int, float)) for e in t):\n            raise ValueError(\"Invalid input. All elements must be numbers.\")\n        return list(filter(lambda e: even_fnc(e), t))\n\n    return [remove_uneven_elements(t) for t in test_tuple]\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.append(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            even_list.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                even_list.append(item)\n    return even_list\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, (list, tuple)):\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(even_fnc(i))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # create a list to store even and odd elements\n    even_list = []\n\n    # iterate through each element in the tuple\n    for element in test_tuple:\n        # check if the element is even\n        if even_fnc(element):\n            # if the element is even, add it to the even_list\n            even_list.append(element)\n        else:\n            # if the element is odd, skip it\n            pass\n\n    # return the even_list as a tuple\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            if len(i) == 2:\n                if even_fnc(i[0]):\n                    result.append(i[1])\n            elif len(i) == 3:\n                if even_fnc(i[0]) and even_fnc(i[1]):\n                    result.append(i[2])\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return result"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * (b * s) + 2 * b * (b * (b - s) + s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # formula for surface area of square pyramid\n    surface_area = 2 * b * s + 6 * b * b\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Calculate the surface area of the base of the pyramid\n    base_area = 0.5*b*b\n\n    #Calculate the surface area of the top of the pyramid\n    top_area = 0.5*s*s\n\n    #Calculate the surface area of the pyramid\n    pyramid_area = 2*base_area + 2*top_area\n\n    #Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate surface area of the base and height\n    base_area = (b * b)\n    height_area = (s * s)\n\n    # calculate surface area of the pyramid using Heron's formula\n    pyramid_area = (1/2) * base_area * height_area\n\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b+s) + 6*b*s + 6*b**2 + 2*b*s**2 + s**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 6 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (4*b*s) + (4*b*b) + (4*s*s)\n    print(\"Surface area of the pyramid: \", surface_area)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes in a base edge and height of a square pyramid and returns the surface area of the pyramid.\n    '''\n    area = (b*s)*2\n    print(\"The surface area of the pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b+s)*2 + 2*(s*b)\n    return surface_area \n"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and checks if it is empty or not.\n    It returns True if the dictionary is empty, False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif num == 0:\n        return 1\n    else:\n        n = num\n        catalan = 0\n        for i in range(1, n+1):\n            catalan = catalan + (i * catalan_number(n-i))\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * 4 * (2*num-1) // (num+1)**2"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns nth catalan number.\n    \"\"\"\n    return num * (2 * num - 1) // (num + 1)\n\nn = int(input(\"Enter the number of terms: \"))\nprint(\"Catalan numbers:\", [catalan_number(i) for i in range(1, n+1)])"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)*n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    # Base case: n=0 or n=1, C(n) = 1\n    if n == 0 or n == 1:\n        return 1\n    # Recursive case: C(n) = (2n) * (C(n-1) + C(n-2))\n    else:\n        return 2*n * catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    '''\n    This function returns nth catalan number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*catalan_number(n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        catalan_array = [0] * (num+1)\n        catalan_array[0] = 1\n        catalan_array[1] = 1\n        for i in range(2, num+1):\n            catalan_array[i] = (2*i - 1) * catalan_array[i-1] + catalan_array[i-2]\n        return catalan_array[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2 * catalan_number(num - 1)) / (num + 1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b(really|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|quite|actually|surely|very|likely|possibly|really|so|actually|hypothetically|probably|really|might|tend|seemingly|incredibly|certainly|extremely|well|ultimately|absolutely|just|actually|mightily|absolutely|really|basically|definitely|probably|qu"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define the pattern to search for the adverbs ending with ly\n    pattern = r'\\b\\w*[ly]\\b'\n    # search for all the occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # initialize an empty list to store the positions of the adverbs\n    positions = []\n    # iterate over all the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # return the list of positions of the adverbs and the list of matches\n    return positions, matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Use regex to find all adverbs ending with ly\n    adverbs = re.findall(r'\\bly\\b', text)\n    \n    # Initialize empty list to store positions of adverbs\n    positions = []\n    \n    # Loop over all found adverbs and store their positions in the positions list\n    for i, adv in enumerate(adverbs):\n        positions.append((adv, text.index(adv)))\n    \n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\b(ly)\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return \"No adverbs found in the given string.\", -1"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n    # Use re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches along with their positions in the text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]+ly\\b'\n    adverbs = re.findall(pattern, text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regex pattern for matching adverbs ending with ly\n    pattern = re.compile(r'\\b(ly|l[ie])\\b', re.IGNORECASE)\n    \n    # Find all non-overlapping matches of the regex pattern in the given string\n    matches = re.findall(pattern, text)\n    \n    # Loop through the matches and store their positions and lengths\n    positions = []\n    for match in matches:\n        start = text.lower().find(match.lower())\n        end = start + len(match.lower())\n        positions.append((start, end, len(match.lower())))\n        \n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(?:\\w+)(?:\\s*ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n\n    # Use the re.finditer() function to iterate over all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverbs = []\n\n    # Iterate over each match and append its position to the adverbs list\n    for match in matches:\n        adverbs.append(match.start())\n\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is not full, add the item to the heap\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        # If the heap is full and the item is more expensive than the smallest item in the heap, remove the smallest item from the heap and add the new item to the heap\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the n most expensive items in the dataset\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and the number of items to be returned as an argument.\n    It finds the n most expensive items in the list and returns them in a new list.\n    '''\n    # Create a min heap to store the items in decreasing order of price\n    heap = []\n    # Iterate over the items and add them to the min heap\n    for item in items:\n        heapq.heappush(heap, item)\n        # Remove the least expensive item from the heap if the heap size exceeds n\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items from the heap in a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap of size n\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    # Iterate through the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # Keep only the top n elements in the min heap\n        while len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the n most expensive items in the min heap\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            # remove the smallest item from the heap\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    # return the n most expensive items in the dataset\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Parameters:\n    items (list): List of items with their corresponding prices.\n    n (int): Number of most expensive items to find.\n\n    Returns:\n    list: List of the n most expensive items.\n    \"\"\"\n    # Create a min-heap of size n to store the n most expensive items\n    max_heap = []\n    for item, price in items:\n        heapq.heappushpop(max_heap, (price, item))\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Extract and return the n most expensive items from the heap\n    return [item for price, item in max_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    # Add the first n items to the heap\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n    # Remove the least expensive item from the heap\n    for i in range(n, len(items)):\n        # If the new item is cheaper than the least expensive item in the heap, replace it with the new item\n        if items[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, items[i])\n    # Return the n most expensive items in descending order\n    return [heap[0]] + heapq.nlargest(n-1, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        # Insert the i-th most expensive item into the heap\n        heapq.heappush(min_heap, items[i])\n\n    # Extract the n most expensive items from the heap and return them\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n or item > heap[0]:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items, and an integer n, returns a list of the n most expensive items.\n    \"\"\"\n    # Convert the list of items into a heapq.\n    heap = [(item, cost) for item, cost in items]\n    heapq.heapify(heap)\n\n    # Remove and return the n most expensive items from the heap.\n    return [heapq.heappop(heap)[0] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Initialize a min-heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate over the items in the dataset\n    for item in items:\n        # If the heap is empty or the current item is cheaper than the\n        # smallest item in the heap, add the current item to the heap\n        if not min_heap or item < min_heap[0]:\n            heapq.heappush(min_heap, item)\n        # If the heap is not empty and the current item is not cheaper than\n        # the smallest item in the heap, pop the smallest item from the heap\n        elif item > min_heap[0]:\n            heapq.heappop(min_heap)\n\n        # If the heap has reached the desired size, pop the smallest item\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items from the dataset\n    return min_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Check if the list is empty\n    if len(l) == 0:\n        return l\n    # Check if the index is valid\n    if n < 0 or n >= len(l):\n        return []\n    # Split the list at the nth element\n    mid = n // 2\n    first_half = l[:mid]\n    second_half = l[mid:]\n    # Add the first part of the list to the end of the second part\n    return first_half + second_half"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"List is too small to split\"\n    else:\n        return [l[-n:], l[:-n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return l\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n+1:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    left = l[:n]\n    right = l[n:]\n    \n    # add the first part to the end of the list\n    l = right + left\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_split = l[:n] + l[n:]\n    l_split.append(l[0])\n    return l_split"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # initialize two empty lists\n    first_part = []\n    second_part = []\n    \n    # split the list at the nth element\n    mid = len(l) // 2\n    for i in range(mid, len(l)):\n        first_part.append(l[i])\n    \n    # add the first part to the second part\n    for i in range(mid):\n        second_part.append(l[i])\n    \n    # add the second part to the first part\n    for i in range(mid, len(l)):\n        first_part.append(l[i])\n        \n    # add the first part to the list\n    l.extend(first_part)\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l) // 2\n    if mid == n:\n        return l\n    if mid < n:\n        return split_Arr(l[mid+1:], n)\n    else:\n        return [l[0]] + split_Arr(l[1:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    This function finds the difference between the largest and smallest values in a given list.\n    '''\n    if len(nums) < 2:\n        print('List should have at least two values')\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        diff = largest - smallest\n        print(diff)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List should have at least 2 elements\"\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Find the largest and smallest values\n    largest = nums[-1]\n    smallest = nums[0]\n    \n    # Calculate the difference\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in descending order\n    nums.sort(reverse=True)\n    # calculate the difference between the largest and smallest value\n    diff = nums[0] - nums[1]\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 0\n\n    max_num = max(nums)\n    min_num = min(nums)\n\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Empty list\"\n    elif len(nums) == 1:\n        return \"Only one number in the list\"\n    else:\n        min_num = nums[0]\n        max_num = nums[0]\n        for num in nums:\n            if num < min_num:\n                min_num = num\n            elif num > max_num:\n                max_num = num\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i*i == a:\n            squares.append(i)\n        elif i*i == b:\n            squares.append(i)\n        else:\n            if i > b:\n                break\n            else:\n                j = i\n                while j <= b:\n                    squares.append(j)\n                    j += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize the list to store the perfect squares\n    perfect_squares_list = []\n\n    # loop through all the numbers between a and b (inclusive)\n    for i in range(a, b+1):\n        # check if the number is a perfect square\n        square = int(i**0.5)\n        if square*square == i:\n            # if the number is a perfect square, add it to the list\n            perfect_squares_list.append(i)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i**2\n        if i == square:\n            print(i)\n        elif i < square:\n            print(i)\n        else:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        square = i*i\n        if square == i:\n            print(f\"{i} is a perfect square\")\n        else:\n            print(f\"{i} is not a perfect square\")"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a**2 + i**2 and i**2 == b**2 + i**2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i ** 2\n        if square == i and square == int(square):\n            print(i, square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store perfect squares\n    perfect_squares_list = []\n    # Check if a is greater than b\n    if a > b:\n        a, b = b, a\n    \n    # Iterate through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to the current number\n        if i*i == i:\n            perfect_squares_list.append(i)\n    \n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i*i\n        if square == int(square):\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two arguments: a and b, and returns the number of perfect squares between them.\n    \"\"\"\n    count = 0\n    for i in range(int(a**0.5), int(b**0.5)+1):\n        if i*i == a:\n            count += 1\n        elif i*i == b:\n            count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(int(a**0.5)+1, int(b**0.5)+1):\n        if (i**2).is_integer():\n            print(i**2)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (radius r and angle theta) to rectangular coordinates.\n    \n    Parameters\n    ----------\n    r : float\n        The radius of the point.\n    theta : float\n        The angle in radians.\n    \n    Returns\n    -------\n    float\n        The x-coordinate of the point.\n    float\n        The y-coordinate of the point.\n    \n    Examples\n    --------\n    >>> polar_rect(3, cmath.pi/4)\n    (3.0, 1.0)\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Parameters:\n    r: float\n        The radius of the circle.\n    theta: float\n        The angle in radians measured counterclockwise from the positive x-axis.\n\n    Returns:\n    x: float\n        The x-coordinate of the point in rectangular coordinates.\n    y: float\n        The y-coordinate of the point in rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    return r*cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert x, y to complex numbers\n    complex_x = cmath.rect(x)\n    complex_y = cmath.rect(y)\n    \n    # Calculate the rectangular coordinates\n    rect_x = complex_x.real\n    rect_y = complex_y.real\n    \n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes in polar coordinates as r and theta (in radians) and returns the rectangular coordinates as (x,y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Find the last element in the list\n    last_index = len(newList) - 1\n    \n    # Swap the first and last elements\n    newList[0], newList[last_index] = newList[last_index], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    else:\n        print(\"The list must have at least two elements to be swapped.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # store the length of the list \n    length = len(newList) \n    # swap the first and last elements of the list \n    newList[0], newList[length-1] = newList[length-1], newList[0] \n    # print the updated list \n    print(\"New List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n    else:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        return \"List must contain at least two elements.\"\n\n    # Find the indices of the first and last elements\n    i = 0\n    while i < len(newList) - 1 and newList[i]!= newList[-1]:\n        i += 1\n    else:\n        if i == len(newList) - 1:\n            return \"List must contain the same elements.\"\n\n    # Swap the elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the input list is not empty\n    if newList:\n        # Get the length of the list\n        n = len(newList)\n        # Interchange the first and last elements\n        newList[0], newList[n-1] = newList[n-1], newList[0]\n        return newList\n    else:\n        return None"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as an input and swaps the first and last elements in the list.\n    '''\n    # Take the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n\n    # Replace the first and last elements with each other\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # First, calculate the binomial coefficient of n choose k\n    coeff = 1\n    for i in range(k):\n        coeff *= n-i\n    for i in range(1,k+1):\n        coeff //= i\n\n    # Next, calculate the sum of the product of consecutive binomial co-efficients\n    sum_coeff = 0\n    for i in range(k+1):\n        sum_coeff += coeff // (k-i+1)\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k or k < 0:\n        return 0\n    if n == k:\n        return 1\n    if n < k:\n        k = n - k\n\n    # Initialize a list of 0's to represent the binomial coefficients\n    coeff_list = [0] * (n + 1)\n    coeff_list[0] = 1\n    coeff_list[1] = 1\n\n    for i in range(2, k + 1):\n        coeff_list[i] = (coeff_list[i - 1] + coeff_list[i - 2]) % 1000000007\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    product_sum = 0\n    for i in range(1, k + 1):\n        product_sum += coeff_list[i] * (1 - 1 / coeff_list[i])\n\n    return product_sum % 1000000007"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through all possible combinations of k values up to n\n    for i in range(k, n+1): \n        # Calculate the binomial coefficient of k and i\n        coeff = (n-i+1) // i\n        # Add the product of the k-th term and the i-th term to the sum\n        sum += coeff * binomial_Coeff(n, i-k)\n    # Return the sum of all products\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of the product of consecutive binomial co-efficients to zero\n    sum_of_product = 0\n    \n    # Calculate the product of consecutive binomial co-efficients for 0 <= k <= n\n    for i in range(k+1):\n        product = 1\n        for j in range(i,n+1):\n            product *= j\n        sum_of_product += product\n    \n    return sum_of_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable\n    sum_binomial = 0\n\n    # Loop through all possible combinations of k and n\n    for i in range(n+1): \n        for j in range(k+1): \n            # Check if the combination is valid\n            if i >= j and i-j <= n-k: \n                # Calculate the binomial coefficient\n                binomial = (1*(n-i+j))//(j*(k-j+1))\n                # Add the product of the coefficients to the sum\n                sum_binomial += binomial\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_binomial"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Base case\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n\n    # Recursive case\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n: \n        return 0\n\n    if k == 0: \n        return 1\n\n    if k == 1: \n        return n\n\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k:\n        return 0\n    else:\n        if k == 0:\n            return 1\n        else:\n            return binomial_Coeff(n - 1, k - 1) * n // k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    if n < k or k < 0 or n < 0:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from ip address using regular expression\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_parts = re.split(r'\\.|\\:', ip)\n    new_ip = []\n    for part in ip_parts:\n        new_part = re.sub(r'^\\0*', '', part)\n        new_ip.append(new_part)\n    new_ip = '.'.join(new_ip)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    pattern = r'^([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$'\n    match = re.match(pattern, ip)\n    if not match:\n        raise ValueError(\"Invalid IP address format\")\n    groups = match.groups()\n    for i in range(4):\n        groups[i] = groups[i].lstrip('0')\n    return '.'.join(groups)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+(?=\\.\\d+)|(\\.\\d+)$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\.0+', '', ip)\n        return ip\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet using regular expressions\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each octet\n    ip = re.sub('^0+', '', ip)\n    # remove leading zeros from the whole address\n    ip = re.sub('^0+', '', ip, flags=re.IGNORECASE)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_without_zero = re.sub(r'^0+', '', ip)\n    return ip_without_zero\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference between the first even and first odd numbers in a list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The difference between the first even and first odd numbers in the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        elif odd_num is None:\n            odd_num = num\n        else:\n            break\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if i == 0:\n                print(\"The first even number is:\", list1[i])\n            elif i == 1:\n                print(\"The first odd number is:\", list1[i])\n            else:\n                print(\"The difference between the first even and first odd numbers is:\", list1[i]-list1[i-2])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    \n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n            \n    if first_even is None or first_odd is None:\n        return None\n    \n    return abs(first_even - first_odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd numbers.\n    \"\"\"\n    even = lst[0]\n    odd = lst[1]\n    if even % 2 == 0:\n        even_diff = 0\n    else:\n        even_diff = abs(lst[0] - lst[1])\n    if odd % 2!= 0:\n        odd_diff = 0\n    else:\n        odd_diff = abs(lst[0] - lst[1])\n    return even_diff + odd_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    if list1[0] % 2 == 0:\n        even_num = list1[0]\n    else:\n        odd_num = list1[0]\n\n    if list1[1] % 2 == 0:\n        even_num = list1[1]\n    else:\n        odd_num = list1[1]\n\n    diff = even_num - odd_num\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # initialize variables for even and odd numbers\n    even = -1\n    odd = -1\n\n    # iterate through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even == -1:\n                even = num\n            else:\n                even = abs(even - num)\n        else:\n            if odd == -1:\n                odd = num\n            else:\n                odd = abs(odd - num)\n\n    # calculate the difference between the first even and first odd number\n    diff = abs(even - odd)\n\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(list1) < 2:\n        return None\n    \n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n    \n    # Loop through the list to find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                return None\n        else:\n            if odd is None:\n                odd = num\n            else:\n                return None\n    \n    # If the list only has one even and one odd number, return the difference\n    if even is None and odd is None:\n        return None\n    elif even is None:\n        return odd\n    elif odd is None:\n        return even\n    else:\n        return odd - even"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference of the first even and first odd numbers of the list.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    \n    if even_num % 2 == 0:\n        diff_num = even_num - odd_num\n    else:\n        diff_num = odd_num - even_num\n    \n    return diff_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[1]\n    diff = first_even - first_odd\n    return diff\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary strings to lists of digits\n    lst1 = [int(d) for d in str1]\n    lst2 = [int(d) for d in str2]\n\n    # Initialize the two lists to store the swaps\n    swap_list = []\n\n    # Compare the two lists of digits\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            # If the digits don't match, add a swap to the swap_list\n            swap_list.append((i, lst1[i], lst2[i]))\n\n    # Count the number of swaps\n    num_swaps = len(swap_list)\n\n    # Return the number of swaps\n    return num_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            j = i\n            while str1[j]!= str2[j]:\n                j += 1\n            count += (j - i)\n            i = j - 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = abs(str1[i] - str2[i])\n    for l in range(1,n):\n        for i in range(n-l):\n            j = i+l\n            if str1[i] == '1' and str1[j] == '1':\n                dp[i][j] = min(dp[i][j], dp[i][i]+dp[i+1][j]+dp[i+1][j+1])\n                dp[i][j] = min(dp[i][j], dp[i+1][i]+dp[i+2][j]+dp[i+2][j+1])\n            elif str1[i] == '0' and str1[j] == '0':\n                dp[i][j] = min(dp[i][j], dp[i][i]+dp[i+1][j]+dp[i+1][j+1])\n    min_swaps = dp[0][n-1]\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n\n    # initialize variables\n    swaps = 0\n    len1 = len(str1)\n    len2 = len(str2)\n\n    # loop through all bits in the binary numbers and swap them if they are not equal\n    for i in range(len1):\n        if bin1 & (1 << i)!= bin2 & (1 << i):\n            swaps += 1\n\n    # loop through all bits in the binary numbers and swap them if they are not equal\n    for i in range(len2):\n        if bin1 & (1 << i)!= bin2 & (1 << i):\n            swaps += 1\n\n    # return the minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0]*2 for i in range(n)]\n\n    for i in range(n):\n        dp[i][0] = i\n        dp[i][1] = i\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if str1[i] == '0' and str2[j] == '0':\n                dp[j][0] = min(dp[i][0], dp[j][1])\n                dp[j][1] = min(dp[i][1], dp[j][0]) + 1\n\n    return dp[n-1][0]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    # Create a list to store the position of each character in the binary strings\n    str1_pos = [binary.index(char) for char in str1]\n    str2_pos = [binary.index(char) for char in str2]\n\n    # Create a dictionary to store the number of swaps required to convert each binary number to the other\n    min_swaps = {}\n\n    for i in range(len(str1)):\n        # Calculate the minimum number of swaps required to convert str1[i] to str2[i]\n        min_swaps[i] = min(abs(str1_pos[i] - str2_pos[i]), abs(str2_pos[i] - str1_pos[i]))\n\n    # Return the minimum number of swaps required to convert one binary number to the other\n    return min(min_swaps.values())"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize counters for each digit in each string\n    count1 = [0]*10\n    count2 = [0]*10\n\n    # Count the occurrences of each digit in the two strings\n    for i in range(len(str1)):\n        count1[int(str1[i])] += 1\n        count2[int(str2[i])] += 1\n\n    # Find the difference between the two counts\n    diff = [0]*10\n    for i in range(10):\n        diff[i] = count1[i] - count2[i]\n\n    # Iterate through the difference array and count the number of swaps required\n    swaps = 0\n    for i in range(10):\n        if diff[i] < 0:\n            swaps += abs(diff[i])\n            diff[i] = 0\n        elif diff[i] > 0:\n            swaps += diff[i]\n            diff[i] = 0\n        else:\n            diff[i] = 0\n\n    # Return the minimum number of swaps required to convert the two binary numbers\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert\n    the first number to the second number.\n\n    Args:\n    str1 (str): The first binary number to be converted.\n    str2 (str): The second binary number to be converted.\n\n    Returns:\n    int: The minimum number of swaps required to convert str1 to str2.\n\n    Raises:\n    TypeError: If either str1 or str2 is not of type str.\n    \"\"\"\n    if not (isinstance(str1, str) and isinstance(str2, str)):\n        raise TypeError(\"Both input strings must be of type str.\")\n\n    # Initialize variables\n    len1 = len(str1)\n    len2 = len(str2)\n    min_swaps = float('inf')\n\n    # Loop through all possible swaps and calculate the minimum number of swaps required to convert str1 to str2\n    for i in range(len1):\n        for j in range(len2):\n            # Calculate the number of swaps required to swap str1[i] and str2[j]\n            temp = str1[:i] + str2[j] + str1[i+1:]\n            num_swaps = 0\n            while temp!= str2:\n                temp = temp.replace('0', '1')\n                temp = temp.replace('1', '0')\n                num_swaps += 1\n\n            # Update the minimum number of swaps if the current swap is lesser than the current minimum\n            if num_swaps < min_swaps:\n                min_swaps = num_swaps\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # converting the binary strings into lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # creating two arrays of the same size to store the swaps\n    swaps = [[0]*len(list1) for i in range(len(list1)+1)]\n\n    # iterating through all possible swaps\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            # calculating the number of swaps required for the current swap\n            if list1[i] == list2[j]:\n                swaps[i+1][j+1] = swaps[i][j] + 1\n            else:\n                swaps[i+1][j+1] = min(swaps[i][j+1], swaps[i+1][j]) + 1\n\n    # finding the minimum number of swaps required\n    min_swaps = swaps[len(list1)][len(list2)]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # create a lookup table for each binary string\n    table = {}\n    for i in range(2**len(str1)):\n        table[i] = []\n        for j in range(2**len(str2)):\n            table[i].append(abs(num1 - num2))\n\n    # find the minimum number of swaps required\n    min_swaps = float('inf')\n    for i in range(2**len(str1)):\n        swaps = 0\n        for j in range(2**len(str2)):\n            if i & j!= 0:\n                swaps += table[i][j]\n            else:\n                swaps += min(table[i][j], table[i ^ j][j])\n        min_swaps = min(min_swaps, swaps)\n\n    # return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        for j in i:\n            size += sys.getsizeof(j)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_list = []\n    for i in range(len(tuple_list)):\n        size_list.append(sys.getsizeof(tuple_list[i]))\n    return sum(size_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and an integer k as input and returns the kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1) and j < len(arr2):\n        return arr2[j]\n    elif j == len(arr2) and i < len(arr1):\n        return arr1[i]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the length of the two arrays\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    # Check if k is valid\n    if k > len1 + len2:\n        return \"k is greater than the total number of elements in the two arrays\"\n\n    # Initialize two pointers i and j\n    i = 0\n    j = 0\n\n    # Initialize two variables to store the kth element\n    kth_element = 0\n    kth_index = 0\n\n    # Iterate through the arrays\n    while i < len1 and j < len2:\n        # If arr1[i] is smaller than arr2[j], increment i\n        if arr1[i] < arr2[j]:\n            i += 1\n            if kth_index < k:\n                kth_index += 1\n                kth_element = arr1[i - 1]\n        # If arr1[i] is greater than arr2[j], increment j\n        else:\n            j += 1\n            if kth_index < k:\n                kth_index += 1\n                kth_element = arr2[j - 1]\n\n    # Check if k is less than the total number of elements in the two arrays\n    if k > len1 + len2:\n        return \"k is less than the total number of elements in the two arrays\"\n\n    # If k is equal to the total number of elements in the two arrays, return the kth element\n    if kth_index == k - 1:\n        return kth_element\n    # If k is less than the total number of elements in the two arrays, return -1\n    elif kth_index < k - 1:\n        return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Merge the two arrays in ascending order\n    merged_arr = merge_sort(arr1 + arr2)\n\n    # Return the kth element\n    return merged_arr[k-1]\n\n\ndef merge_sort(arr):\n    '''\n    Write a function to sort the given array in ascending order using merge sort.\n    '''\n\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    '''\n    Write a function to merge two sorted arrays.\n    '''\n\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays as input and k as the value of the element to be found.\n    It returns the kth element of the two arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the total number of elements in both arrays\n    total_elements = len(arr1) + len(arr2)\n\n    # Find the indices of the kth element in both arrays\n    kth_index1 = 0\n    kth_index2 = 0\n    while kth_index1 < len(arr1) and kth_index2 < len(arr2):\n        if arr1[kth_index1] < arr2[kth_index2]:\n            kth_index1 += 1\n        elif arr1[kth_index1] > arr2[kth_index2]:\n            kth_index2 += 1\n        else:\n            kth_index1 += 1\n            kth_index2 += 1\n\n    # Return the element at the kth index\n    if k == total_elements - kth_index1:\n        return arr1[kth_index1 - 1]\n    elif k == total_elements - kth_index2:\n        return arr2[kth_index2 - 1]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    m = len(arr1)\n    n = len(arr2)\n\n    while i < m and j < n:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n        if i == m:\n            return arr2[j-1]\n        elif j == n:\n            return arr1[i-1]\n        elif i < m and j < n:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n\n    if i == m:\n        return arr2[j-1]\n    else:\n        return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments:\n    arr1: the first sorted array\n    arr2: the second sorted array\n    k: the value of k\n    \n    This function returns the kth smallest element from the two arrays.\n    \"\"\"\n    \n    # Find the midpoint of the first array\n    mid1 = len(arr1) // 2\n    \n    # Find the midpoint of the second array\n    mid2 = len(arr2) // 2\n    \n    # If the length of the first array is less than or equal to the kth element,\n    # we simply need to find the kth element in the first array.\n    if mid1 <= k:\n        return find_kth(arr1, arr2, k)\n    \n    # If the length of the second array is less than or equal to the kth element,\n    # we simply need to find the kth element in the second array.\n    elif mid2 <= k:\n        return find_kth(arr2, arr1, k)\n    \n    # If the kth element is in both arrays, we need to compare the kth element in both arrays.\n    else:\n        # Find the kth smallest element in the first array\n        kth1 = find_kth(arr1, arr1, k)\n        \n        # Find the kth smallest element in the second array\n        kth2 = find_kth(arr2, arr2, k)\n        \n        # Compare the kth smallest elements and return the smallest one.\n        if kth1 < kth2:\n            return kth1\n        else:\n            return kth2"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize the sum of digits of the number to zero\n    sum_of_digits = 0\n    # Iterate over each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Add the integer representation of the digit to the sum\n        sum_of_digits += digit_int ** len(num_str)\n    # Return True if the sum of digits equals the original number, else False\n    return sum_of_digits == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number, else False.\n    \"\"\"\n    s = 0\n    temp = n\n    while temp > 0:\n        last_digit = temp % 10\n        s += last_digit ** 3\n        temp //= 10\n    return n == s"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize a variable to store the sum of the cube of each digit\n    sum_of_cubes = 0\n\n    # iterate through each digit of the number\n    for digit in str(number):\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # cube the digit\n        digit_cube = digit_int ** 3\n        # add the cube to the sum of cubes\n        sum_of_cubes += digit_cube\n\n    # check if the sum of cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Converting the input number to a string\n    num_str = str(number)\n    # Initializing a variable to store the sum of the power of each digit\n    power_sum = 0\n    # Looping through each digit of the number and calculating its power\n    for digit in num_str:\n        power_sum += int(digit)**len(num_str)\n    # Returning True if the sum of the power of each digit equals to the original number\n    return number == power_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize a variable to keep track of the sum of the digits of the number\n    digit_sum = 0\n\n    # Convert the number to a string and iterate through its digits\n    for digit in str(number):\n        # Add the current digit to the sum\n        digit_sum += int(digit) ** len(str(number))\n\n    # Compare the sum with the original number\n    if digit_sum == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    number = str(number)\n    n = len(number)\n    sum_of_square = 0\n    temp = 0\n    \n    for i in range(n):\n        temp = int(number[i]) ** n\n        sum_of_square += temp\n    \n    if sum_of_square == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the given number to a string and find its length\n    num_str = str(n)\n    num_len = len(num_str)\n\n    # Initialize the sum of the powers of each digit\n    sum_of_powers = 0\n\n    # Iterate through the digits and calculate the sum of the powers of each digit\n    for digit in num_str:\n        digit = int(digit)\n        power = 0\n        while digit > 0:\n            power += digit % 10\n            digit //= 10\n        sum_of_powers += power ** num_len\n\n    # Compare the sum of the powers with the original number\n    return sum_of_powers == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, otherwise False.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # calculate the sum of the cubes of the digits\n    digit_sum = sum(int(digit) ** 3 for digit in num_str)\n    # compare the sum of the cubes with the original number\n    if digit_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(n):\n    num = n\n    while num > 0:\n        digit = num % 10\n        num //= 10\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit ** 3\n            num //= 10\n        if n == total:\n            return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    num_str = str(number)\n    \n    # Initialize a variable to store the sum of the digits of the number\n    sum_of_digits = 0\n    \n    # Loop through each character in the string\n    for digit in num_str:\n        # Convert the character to an integer and add it to the sum of digits\n        sum_of_digits += int(digit) ** len(num_str)\n    \n    # Check if the sum of digits is equal to the original number\n    if sum_of_digits == number:\n        # The number is armstrong\n        return True\n    else:\n        # The number is not armstrong\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    count = 1\n    while count <= number:\n        sum_of_numbers += count\n        count += 1\n    average = sum_of_numbers/number\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < number:\n        sum += count\n        count += 1\n    average = sum / number\n    return sum, average\n\nprint(sum_average(10)) # Output: (55, 5.0)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to zero\n    total = 0\n    count = 0\n    # loop through first n numbers\n    for i in range(1, number+1):\n        # add each number to total\n        total += i\n        # increment count\n        count += 1\n    # calculate and print sum and average\n    avg = total / count\n    print(\"Sum of first\", number, \"natural numbers is\", total)\n    print(\"Average of first\", number, \"natural numbers is\", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum += i\n        average += i / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_num = 0\n    count = 1\n    \n    for i in range(number):\n        sum_num += i\n        count += 1\n    \n    average = sum_num/count\n    \n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    sum = 0\n    count = 0\n    # calculate sum of first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n    # calculate average of first n natural numbers\n    average = sum / n\n    # return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # loop through the first n numbers\n    for i in range(1, n+1):\n        # add i to the sum and increment count\n        sum += i\n        count += 1\n    \n    # calculate and print the sum and average\n    average = sum / count\n    print(\"The sum is:\", sum)\n    print(\"The average is:\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether a given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns True if it's even, and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0 : \n        return True \n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    # create a dictionary to store the character frequencies\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the first repeated character\n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n    \n    # no repeated character was found\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character.\n    If no repeated character is found, it returns None.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Initialize variables\n    char = None\n    count = 0\n    \n    # Loop through each character in the string\n    for c in str1:\n        # If the current character is equal to the previous character\n        if c == char:\n            # Increment the count\n            count += 1\n        else:\n            # If the count is greater than 0, return the current character and its count\n            if count > 0:\n                return char, count\n            \n            # Reset the count and the previous character\n            count = 1\n            char = c\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    char_count = {}\n\n    # Count the number of occurrences of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character\n    first_repeated = None\n    for char, count in char_count.items():\n        if count == 1:\n            first_repeated = char\n            break\n\n    return first_repeated"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If there is no repeated character, then it returns None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # find the first character in the dictionary that has a count greater than 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # if no characters have a count greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize an empty dictionary to store the character count\n    char_count = {}\n    # Iterate through each character in the given string\n    for char in str1:\n        # Check if the character is already in the dictionary\n        if char in char_count:\n            return char\n        # If not, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    # If all characters are unique, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic_numbers.append(i)\n        elif i == 2:\n            ludic_numbers.append(i)\n        elif i % 2 == 0:\n            j = 3\n            while j <= int(i**0.5):\n                if i % j == 0:\n                    ludic_numbers.append(j)\n                    ludic_numbers.append(i//j)\n                j += 2\n        else:\n            j = 5\n            while j*j <= i:\n                if i % j == 0:\n                    ludic_numbers.append(j)\n                    ludic_numbers.append(i//j)\n                j += 2\n\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    i = 2\n    while i <= n:\n        if i % 2 == 1:\n            ludic_list.append(i)\n        i += 1\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = [i for i in range(2, n+1) if all(i % j!= 0 for j in range(2, int(i**0.5)+1))]\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucid_numbers.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a given integer is a lucid number.\n    '''\n    digit_sum = 0\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n    return digit_sum == len(str(n))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        is_lucid = True\n        j = 2\n        while j <= i // 2:\n            if i % j == 0:\n                is_lucid = False\n                break\n            j += 1\n        if is_lucid:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    while num <= n:\n        if is_lucid(num):\n            lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Check if a given number is a lucid number or not.\n    '''\n    return (num % 2 == 0) and (num % 3 == 0) and (num % 5 == 0)\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize a set to store the lucid numbers\n    lucid_numbers = set()\n    \n    # Iterate over all integers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a lucid number\n        if all(i % j!= 0 for j in range(1, int(i**0.5)+1)):\n            # If it is, add it to the set of lucid numbers\n            lucid_numbers.add(i)\n    \n    # Return the set of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            ludic_numbers.append(i)\n        elif i % 2 == 0:\n            ludic_numbers.append(2*i)\n        else:\n            ludic_numbers.append(3*i+1)\n    return ludic_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the words back into a single string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into a list of words\n    words.reverse() # reverse the list\n    return''.join(words) # join the list back into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the words back into a string\n    reversed_words =''.join(words)\n    # return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them back into a string\n    return''.join(word[::-1] for word in words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words using the space as the separator\n    words = s.split()\n    \n    # Reverse the list of words\n    words.reverse()\n    \n    # Join the reversed words back into a string using the space as the separator\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the list of words\n    words.reverse()\n    # Join the reversed list of words back into a string\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Split the string into words\n    words.reverse()  # Reverse the list of words\n    return''.join(words)  # Join the reversed words into a string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if the given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(prime_num(7)) # True\nprint(prime_num(10)) # False\nprint(prime_num(100)) # True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number and False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number and False otherwise.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n        \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Check if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    This function checks if a given integer is a prime number or not.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    # if none of the above conditions are true, the number is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given number is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function will convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None\n\ntext = \"This is a sample text with literals like 2020 and 2021.\"\npattern = r'\\d{4}'\n\nresult = find_literals(text, pattern)\nprint(result)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Compile the regex pattern\n    pattern = re.compile(pattern)\n\n    # Find all matches in the text\n    matches = pattern.findall(text)\n\n    # Check if there are any matches\n    if len(matches) == 0:\n        return None, None, None\n\n    # Return the first match\n    start, end = matches[0]\n    return matches[0][0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0][0], matches[0][1], len(text)\n    else:\n        return None\n\ntext = \"This is a test string with some literals like 123 and 456.\"\npattern = r'(?<=\\d)\\d+(?=\\D)'\nstart_index, end_index, length = find_literals(text, pattern)\n\nprint(\"Matching substring: \", text[start_index:end_index])\nprint(\"Start index: \", start_index)\nprint(\"End index: \", end_index)\nprint(\"Length: \", length)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Use the search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If a match is found, return the subtring, start index, and end index\n    if match:\n        return match.group(), match.start(), match.end()\n\n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_Number(n//2) + bell_Number(n//2)\n    else:\n        return bell_Number((n-1)//2) + bell_Number((n-1)//2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (bell_Number(n-1) + bell_Number(n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Calculate the nth Bell number.\n\n    :param n: The index of the Bell number to find (positive integer).\n    :return: The nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_seq = [1]\n    for i in range(1, n+1):\n        bell_seq.append(bell_seq[-1] + bell_seq[-2])\n    return bell_seq[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    \"\"\"\n    This function calculates the nth Bell number.\n    \"\"\"\n    if n <= 0:\n        return \"Please enter a positive integer value.\"\n    elif n == 1:\n        return 1\n    else:\n        bell_num = 1\n        for i in range(1, n):\n            bell_num = bell_num * (i + 1) // (i)\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return (1 + 10**((n-1)/2))*(1 + 10**((n-1)/2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n\n    for i in range(n):\n        print(a, end=' ')\n        a, b, c = b, c, a + b + c"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_seq = [1]\n    for i in range(2, n+1):\n        bell_seq.append(bell_seq[i-1] + bell_seq[i-2])\n    return bell_seq[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a new list to store the elements of the original list\n    list2 = []\n\n    # iterate over the original list and append the elements to the new list\n    for i in range(len(list1)):\n        list2.append(list1[i])\n\n    # remove the k'th element from the new list\n    list2.pop(L - 1)\n\n    # return the new list with the k'th element removed\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    n = len(list1)\n    k = L-1\n    \n    # Move the last element to k'th position\n    list1[k] = list1[n-1]\n    \n    # Reduce the length of the list\n    list1 = list1[:n-1]\n    \n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L > len(list1):\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1 # k-th element\n    list2 = []\n    for i in range(len(list1)):\n        if i!= k:\n            list2.append(list1[i])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and removes the kth element of the list.\n    \"\"\"\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1) # Remove the kth element from the list\n    return list1 # Return the modified list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return [list1.pop(0)]\n    elif L > len(list1):\n        return list1\n    else:\n        return remove_kth_element(list1[1:], L-1) + [list1[0]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1) # removes the kth element from the list\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_val = 0\n    for row in test_list:\n        if N <= len(row):\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row in the matrix\n    first_row_length = len(test_list[0])\n    # Initialize the max value as the first element of the first row\n    max_val = test_list[0][0]\n    # Iterate over the other rows of the matrix\n    for i in range(1, len(test_list)):\n        # Check if the current value in then'th column is greater than the max value\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    if N > num_cols:\n        return None\n    for i in range(num_rows):\n        if i == N - 1:\n            max_val = max(test_list[i])\n            return max_val\n    return None"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Get the length of the first row of the matrix\n    row_length = len(test_list[0])\n    \n    # Create an empty list to store the max values\n    max_list = []\n    \n    # Loop through all the rows of the matrix\n    for i in range(row_length):\n        \n        # Create an empty list to store the values of then'th column\n        nth_column_list = []\n        \n        # Loop through all the rows of the matrix\n        for j in range(len(test_list)):\n            \n            # Add the value of then'th column to the list of values\n            nth_column_list.append(test_list[j][i])\n            \n        # Sort the list of values in descending order\n        nth_column_list = sorted(nth_column_list, reverse=True)\n        \n        # Append the max value of then'th column to the max_list\n        max_list.append(nth_column_list[N-1])\n    \n    # Return the max_list\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Convert the list of lists to a 2D numpy array\n    test_array = np.array(test_list)\n\n    # Calculate the maximum value of then'th column and return it\n    return np.max(test_array[:, N - 1])"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Calculate the number of rows in the matrix\n    num_rows = len(test_list)\n\n    # Check if the value of N is valid\n    if N > num_rows or N <= 0:\n        return \"Invalid input: N should be between 1 and the number of rows in the matrix\"\n\n    # Initialize the maximum value to be the first element in the first row of the matrix\n    max_value = test_list[0][0]\n\n    # Loop through the matrix and compare then'th column with the maximum value found so far\n    for i in range(num_rows):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # initialize max value\n    max_val = 0\n\n    # loop through all rows in matrix\n    for row in test_list:\n        # get nth column value\n        val = row[N]\n        # check if current value is greater than max value\n        if val > max_val:\n            # update max value\n            max_val = val\n\n    # return max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Convert the list of lists to a 2D numpy array\n    arr = np.array(test_list)\n\n    # Get then'th column of the matrix\n    col = arr[:, N]\n\n    # Find the maximum value in the column\n    max_val = np.max(col)\n\n    # Return the maximum value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        if i < N:\n            continue\n        max_val = max(test_list[i][j] for j in range(n))\n        for j in range(n):\n            if j == N-1:\n                test_list[i][j] = max_val\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    \n    #initialize empty lists for first and second elements\n    first_elements = []\n    second_elements = []\n    \n    #loop through each sublist of lst\n    for sublist in lst:\n        \n        #append the first element to first_elements list\n        first_elements.append(sublist[0])\n        \n        #append the second element to second_elements list\n        second_elements.append(sublist[1])\n        \n    #create a new list with the first and second elements\n    merged_list = [first_elements, second_elements]\n    \n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for i in range(len(lst)):\n        first_elem = lst[i][0]\n        second_elem = lst[i][1]\n        merged_lst.append([first_elem, second_elem])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > 0:\n            sum_list.append(sum(test_list[i]))\n    if len(sum_list) > 0:\n        return sum_list[-1]\n    else:\n        return None"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize cumulative sum with the first element of the list\n    cumulative_sum = test_list[0]\n\n    # Loop through the list from the second element\n    for i in range(1, len(test_list)):\n        # Add the current element to the cumulative sum\n        cumulative_sum += test_list[i]\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for val in test_list:\n        cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_of_values = 0\n    for i in range(len(test_list)):\n        sum_of_values += test_list[i][1]\n    return sum_of_values"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not isinstance(test_list, list):\n        return 'Input must be a list'\n    cum_sum = 0\n    for num in test_list:\n        if isinstance(num, int):\n            cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        cumsum += test_list[i]\n    return cumsum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to hold the averages for each tuple\n    averages = []\n    # Iterate over each tuple in the input list\n    for tup in nums:\n        # Initialize a variable to hold the sum of the values in the tuple\n        total = 0\n        # Iterate over each value in the tuple\n        for num in tup:\n            # Add the value to the sum\n            total += num\n        # Divide the sum by the number of values in the tuple to get the average\n        avg = total / len(tup)\n        # Add the average to the list of averages\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        averages.append(total/len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over the tuples in the input list\n    for tup in nums:\n        # Calculate the average value for this tuple\n        avg = sum(tup) / len(tup)\n        # Add the average value to the list of averages\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to hold the average values\n    averages = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Loop through each element in the tuple and add it to the sum\n        sum = 0\n        for num in tup:\n            sum += num\n        # Divide the sum by the length of the tuple to get the average\n        avg = sum / len(tup)\n        # Append the average to the list of averages\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        averages.append(sum(num) / len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the averages\n    averages = []\n    \n    # Loop through each tuple in the input list\n    for tup in nums:\n        # Calculate the average of the tuple elements\n        avg = sum(tup)/len(tup)\n        # Append the average to the list\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup)/len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        average = total / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Checking if the two tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are of different lengths.\")\n        return\n\n    # Taking element wise modulo\n    result_tup = [x % y for x, y in zip(test_tup1, test_tup2)]\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    else:\n        return [(i % j) for i, j in zip(test_tup1, test_tup2)]"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0,) * len(test_tup1)\n    \n    # Perform the element-wise modulo operation on the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] % test_tup2[i]\n        \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n\n    # Perform element-wise modulo\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of the same length!\")\n    # perform element-wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return None\n    # Element by element modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return None\n    \n    # perform element wise modulo and return the result\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables for count and step count\n    count = 0\n    step_count = 0\n\n    # Loop through steps and count jumps\n    for i in range(steps):\n        if i+d > steps-1:\n            break\n        step_count += 1\n\n    # Calculate the number of jumps required\n    count = int(step_count/d)\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 0 or d <= 0:\n        return 0\n\n    # Find the minimum number of jumps required to reach (d, 0) from origin\n    min_steps = 0\n    steps_list = []\n\n    # Initialize the current position (x, y) and the number of jumps required\n    x, y = 0, 0\n    jumps = 0\n\n    # Iterate through the steps and compute the minimum number of jumps required\n    while steps > 0:\n        steps -= 1\n        # Move up or down the y-axis\n        if y == 0:\n            y += 1\n        elif y == d:\n            y -= 1\n            steps = 0\n        else:\n            y += 1\n        # If the current position is (d, 0), return the number of jumps required\n        if x == d and y == 0:\n            return jumps\n        # If the current position is not (d, 0), add 1 to the number of jumps required\n        jumps += 1\n        # Keep track of the current position (x, y) and the number of jumps required\n        steps_list.append((x, y, jumps))\n        # If the current position is not (d, 0), check if there is a valid position to jump to\n        if x < d and y == 0:\n            x += 1\n            jumps = 1\n        elif x == d and y < d:\n            y += 1\n            jumps = 1\n\n    # Compute the minimum number of jumps required by iterating through the list of positions and keeping track of the minimum number of jumps required\n    min_jumps = 0\n    for i in range(len(steps_list)):\n        pos, jumps = steps_list[i]\n        if i == 0 or (pos!= d and jumps < min_jumps):\n            min_jumps = jumps\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Calculate the number of jumps needed to reach the origin point\n    jumps = 0\n    for i in range(steps):\n        jumps += min(d, i + 1)\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 0:\n        return 0\n    \n    jumps = 0\n    x, y = 0, 0\n    direction = 1\n    \n    for i in range(steps):\n        x += direction\n        y += 1\n        \n        if x == d:\n            return jumps + 1\n        \n        if direction == 1:\n            direction = 0\n        else:\n            direction = 1\n        \n        jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # If the steps are less than d, there can be no jumps\n    if steps < d:\n        return 0\n    \n    # If the distance is 0, there is only one way to reach the point\n    if d == 0:\n        return 1\n    \n    # Initialize variables for number of jumps and steps left to reach the point\n    jumps = 0\n    steps_left = steps\n    \n    # While steps left is greater than or equal to d, continue to check for jumps\n    while steps_left >= d:\n        # Decrease steps left by d\n        steps_left -= d\n        \n        # Increase the number of jumps by 1\n        jumps += 1\n        \n        # If the distance is equal to the number of jumps, there is only one way to reach the point\n        if d == jumps:\n            return 1\n    \n    # If the loop exits without finding any jumps, there are no possible jumps\n    return 0"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    '''\n    This function takes two parameters: the number of steps to take, and the distance to travel.\n    It returns the minimum number of jumps required to reach (d, 0) from the origin.\n\n    The function uses dynamic programming to solve the problem. It stores the minimum number of jumps required to reach each position (i, j), where i and j are integers between 0 and steps - 1. The final answer is stored in the variable min_steps.\n\n    The time complexity of this algorithm is O(steps^2), where steps is the number of steps and d is the distance to travel.\n    '''\n\n    # Create a 2d array to store the minimum number of jumps required to reach each position (i, j)\n    min_steps = [[float('inf')] * steps for _ in range(steps)]\n\n    # Initialize the first row with 0 jumps\n    min_steps[0] = [0] * steps\n\n    # Fill in the rest of the array\n    for i in range(1, steps):\n        for j in range(i):\n            # If the distance from the origin to (i, j) is less than the distance to (i, j-1), then\n            # take a jump to get there. Otherwise, take no jumps.\n            if abs(i - j) < d:\n                min_steps[i][j] = min(min_steps[i][j], min_steps[i-1][j-1] + 1)\n            # If the distance from the origin to (i, j) is equal to the distance to (i, j-1), then\n            # take no jumps. Otherwise, take a jump to get there.\n            else:\n                min_steps[i][j] = min(min_steps[i][j], min_steps[i-1][j] + 1)\n\n    return min_steps[steps-1][steps-1]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    jumps = 0\n    steps_taken = 0\n    \n    # Calculate steps to reach d, 0\n    steps_to_d = abs(steps[0]) + abs(steps[1])\n    \n    # Check if steps_to_d is greater than d\n    if steps_to_d > d:\n        return jumps\n    \n    # Continue until steps_to_d is less than or equal to d\n    while steps_to_d <= d:\n        steps_taken += steps_to_d\n        steps_to_d = abs(steps_to_d - steps[0]) + abs(steps_to_d - steps[1])\n        jumps += 1\n    \n    # Check if we can reach the point (d, 0) from origin with a single jump\n    if steps_taken == abs(steps[0]) + abs(steps[1]):\n        return jumps\n    \n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    This function takes a list of steps and distance as input and returns the minimum number of jumps required to reach the given point (d, 0) from the origin in a 2D plane.\n    \"\"\"\n    n = len(steps)\n    jumps = [0] * n  # Initialize jumps list with all zeros\n    min_jumps = 0  # Initialize minimum jumps counter\n    \n    for i in range(1, n):\n        if steps[i] < d:  # If the step required to reach the point is less than the given distance\n            jumps[i] = min_jumps + 1  # Add the current minimum jumps counter to the jumps at this point\n            min_jumps = max(jumps[i], min_jumps)  # Update the minimum jumps counter to the max of the current minimum jumps counter and the jumps at this point\n        else:  # If the step required to reach the point is greater than or equal to the given distance\n            jumps[i] = 0  # Set the jumps at this point to zero\n    \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the minimum number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def min_jumps_helper(dist, jumps, memo):\n        if (dist, jumps) in memo:\n            return memo[(dist, jumps)]\n        if dist == 0:\n            return 0\n        if dist % 2 == 0:\n            memo[(dist, jumps)] = min(min_jumps_helper(dist-1, jumps+1, memo), min_jumps_helper(dist//2, jumps, memo))\n        else:\n            memo[(dist, jumps)] = min(min_jumps_helper(dist-1, jumps, memo), min_jumps_helper(dist//2, jumps+1, memo))\n        return memo[(dist, jumps)]\n    return min_jumps_helper(steps, 0, {})"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # We'll use binary search to find the number of jumps required to reach the destination point.\n    # We'll initialize the start and end points of the range.\n    start = 0\n    end = steps\n\n    # While the range is not empty, we'll use binary search to find the middle point.\n    while start <= end:\n        # Compute the middle point of the range.\n        mid = (start + end) // 2\n\n        # If we can reach the destination point from the middle point, we'll update the end point of the range.\n        if (d - mid) >= 0:\n            end = mid - 1\n        else:\n            # If we can't reach the destination point, we'll update the start point of the range.\n            start = mid + 1\n\n    # The number of jumps required is the end point of the range.\n    return end"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Check if the two lists are the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    # Divide each element of the two lists\n    result = [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return None\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(\"Error: Cannot divide by zero\")\n            return None\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"The two lists are not of equal length!\")\n        return\n    \n    # Divide each element of the two lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: The second list contains 0 in the position\", i)\n            return\n        else:\n            result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables to store the original string and the new string with numbers moved to the end\n    original_str = test_str\n    new_str = ''\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the new string, then add a space\n            new_str += char +''\n        # if the character is not a number, add it to the new string\n        else:\n            new_str += char\n    # return the new string with all numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create a list of digits from the given string\n    digits = [char for char in test_str if char.isdigit()]\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Join the digits together into a string\n    result = ''.join(digits)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    # Initialize an empty string to store the numbers\n    num_str = \"\"\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, append it to the num_str\n        if char.isdigit():\n            num_str += char\n    # If there are no numbers in the input string, return the original string\n    if not num_str:\n        return test_str\n    # Otherwise, concatenate the num_str with the rest of the string\n    else:\n        return test_str.replace(num_str, \"\") + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # create an empty string to store the numbers\n    num_str = \"\"\n    \n    # iterate through each character in the input string\n    for char in test_str:\n        # if the character is a number, append it to the num_str variable\n        if char.isdigit():\n            num_str += char\n            \n    # add the num_str to the end of the input string and return it\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    # Split the string into a list of characters\n    char_list = list(test_str)\n\n    # Initialize two pointers to the start and end of the list\n    start = 0\n    end = len(char_list) - 1\n\n    # Loop until the start pointer is less than the end pointer\n    while start < end:\n        # If the current character is a number, move it to the end of the list\n        if char_list[start].isdigit():\n            char_list[start], char_list[end] = char_list[end], char_list[start]\n        # Move the pointer to the next character\n        start += 1\n        end -= 1\n\n    # Convert the list back into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store the numbers\n    num_list = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the number list\n        if char.isdigit():\n            num_list.append(char)\n\n    # reverse the number list to get the new order\n    reversed_num_list = num_list[::-1]\n\n    # join the numbers back into the string and return it\n    return ''.join(reversed_num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort()\n    for num in num_list:\n        test_str = test_str.replace(num, '')\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize two empty lists to hold the digits and non-digits\n    digits = []\n    non_digits = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a digit, append it to the digits list\n        if char.isdigit():\n            digits.append(char)\n        # otherwise, append it to the non-digits list\n        else:\n            non_digits.append(char)\n    # join the digits and non-digits lists together into a new string\n    return ''.join(digits + non_digits)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    nums = []\n    output = ''\n    \n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the nums list\n            nums.append(char)\n        else:\n            # add the non-number character to the output string\n            output += char\n    \n    # loop through each number in the nums list and add it to the end of the output string\n    for num in nums:\n        output += num\n    \n    # return the final output string\n    return output"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Convert the input list to a set to remove duplicates and make it faster to check membership\n    a = set(a)\n    # Initialize variables\n    size = 0\n    max_size = 0\n    # Loop over all pairs of numbers in the list\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # Check if the numbers are divisible by each other\n            if a[i] % a[j] == 0:\n                # If so, update the size and max_size variables\n                size += 1\n                if size > max_size:\n                    max_size = size\n    # Return the maximum size found\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Find the greatest common divisor of a and b.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def is_divisible(a, b):\n        \"\"\"\n        Check if a is divisible by b.\n        \"\"\"\n        return a % b == 0\n    \n    def is_pair_divisible(a, b):\n        \"\"\"\n        Check if a and b form a pair that is divisible by their gcd.\n        \"\"\"\n        return is_divisible(a, gcd(a, b)) and is_divisible(b, gcd(a, b))\n    \n    def check_subset(nums):\n        \"\"\"\n        Check if the given list of numbers is a subset of the subset of numbers that are divisible by their gcd.\n        \"\"\"\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if is_pair_divisible(nums[i], nums[j]):\n                    return True\n        return False\n    \n    def find_largest_subset(nums):\n        \"\"\"\n        Find the size of the largest subset of numbers that are divisible by their gcd.\n        \"\"\"\n        largest_size = 0\n        subset = []\n        for num in nums:\n            if is_divisible(num, gcd(num, largest_size)) and (not subset or is_pair_divisible(subset[-1], num)):\n                subset.append(num)\n                largest_size = max(largest_size, len(subset))\n        return largest_size\n    \n    return find_largest_subset(a)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                dp[j] = max(dp[j], dp[i] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # sort the list in ascending order\n    a.sort()\n    \n    # initialize variables to keep track of the maximum subset and the current subset\n    max_subset = 0\n    curr_subset = [a[0]]\n    \n    # iterate through the list\n    for num in a[1:]:\n        # if the current number is divisible by the smallest number in the current subset, add it to the current subset\n        if num % curr_subset[0] == 0:\n            curr_subset.append(num)\n        else:\n            # otherwise, update the maximum subset\n            max_subset = max(max_subset, len(curr_subset))\n            # and reset the current subset\n            curr_subset = [num]\n    \n    # update the maximum subset\n    max_subset = max(max_subset, len(curr_subset))\n    \n    # return the maximum subset\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize the largest subset size to 1\n    largest_size = 1\n    # Initialize the current subset size to 1\n    current_size = 1\n    # Iterate over the list, adding numbers to the subset until the next pair is divisible\n    for num in a:\n        if current_size >= largest_size and num % a[largest_size-1]!= 0:\n            # If adding this number to the subset would make it larger, update the largest subset size\n            largest_size += 1\n        current_size += 1\n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] += 1\n\n    i, j = 0, 1\n    size = 1\n    while j < n:\n        if a[i] % 2!= 0 and a[j] % 2 == 0:\n            i += 1\n            j += 1\n            size += 1\n        elif a[i] % 2 == 0 and a[j] % 2!= 0:\n            j += 1\n        else:\n            if a[i] < a[j]:\n                i += 1\n            else:\n                j += 1\n\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables to keep track of the largest subset and the current subset\n    largest = 1\n    current = 1\n\n    # Loop through the list\n    for i in range(1, len(a)):\n        # If the current element is divisible by the next element, add it to the current subset\n        if a[i] % a[i-1] == 0:\n            current += 1\n        # If the current element is not divisible by the next element, reset the current subset and update the largest subset\n        else:\n            largest = max(largest, current)\n            current = 1\n\n    # Update the largest subset with the last element of the list\n    largest = max(largest, current)\n\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # create a set to store all possible pairs of numbers\n    pairs = set(zip(a, a[1:]))\n\n    # create a set to store the size of the largest subset\n    max_size = 0\n\n    # iterate over all possible pairs of numbers in the list\n    for i in range(len(a)):\n        # find the size of the subset containing the current pair\n        subset_size = len(pairs.difference(set([(a[i], a[j]) for j in range(i+1, len(a))])))\n        # update max_size if necessary\n        if subset_size > max_size:\n            max_size = subset_size\n\n    # return the largest subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_size = 1\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                max_size = max(max_size, j-i+1)\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables for the largest subset size and the current subset size\n    largest = 0\n    current = 0\n\n    # loop through the list\n    for i in range(len(a)):\n        # if the current element is not divisible by the next element, increase the largest subset size\n        if a[i] % a[i+1]!= 0:\n            current = 0\n        else:\n            current += 1\n\n        # update the largest subset size if the current subset size is larger\n        if current > largest:\n            largest = current\n\n    # return the largest subset size\n    return largest\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    arr.sort()\n    \n    # Find the median index\n    mid = n // 2\n    \n    # If the length of the list is odd, the median is the middle element\n    if n % 2 == 1:\n        return arr[mid]\n    # If the length of the list is even, the median is the average of the two middle elements\n    else:\n        return (arr[mid-1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays\n    arr = arr1 + arr2\n\n    # Sort the merged array\n    arr.sort()\n\n    # Find the median\n    median = arr[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the median of the first list\n    arr1_median = find_median(arr1, n)\n\n    # Find the median of the second list\n    arr2_median = find_median(arr2, n)\n\n    # Check which median is smaller\n    if arr1_median < arr2_median:\n        median = arr1_median\n    else:\n        median = arr2_median\n\n    return median\n\ndef find_median(arr, n):\n    '''\n    Helper function to find the median of an array of size n.\n    '''\n    # Sort the array\n    arr.sort()\n\n    # Find the middle index\n    mid_index = n // 2\n\n    # If the array has an odd length, the median is the middle element\n    if n % 2 == 1:\n        return arr[mid_index]\n\n    # If the array has an even length, the median is the average of the two middle elements\n    else:\n        return (arr[mid_index - 1] + arr[mid_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists into a single list\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Get the median based on the length of the list\n    if n % 2 == 0:\n        # If the length of the list is even, return the average of the two middle elements\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        # If the length of the list is odd, return the middle element\n        median = merged_list[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one\n    merged = sorted(arr1 + arr2)\n    # Find the middle element\n    mid = len(merged) // 2\n    # Find the median based on the size of the lists\n    if n % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2\n    else:\n        return merged[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Find the middle index of the merged list\n    mid = n // 2\n    \n    # If the length of the merged list is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged_list[mid]\n    \n    # If the length of the merged list is even, the median is the average of the middle two elements\n    else:\n        return (merged_list[mid - 1] + merged_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr1[k] = arr1[i]\n            i += 1\n        else:\n            arr1[k] = arr2[j]\n            j += 1\n        k += 1\n    while i < n:\n        arr1[k] = arr1[i]\n        i += 1\n        k += 1\n    while j < n:\n        arr1[k] = arr2[j]\n        j += 1\n        k += 1\n    arr1.sort()\n    m = n // 2\n    if n % 2 == 0:\n        return (arr1[m - 1] + arr1[m]) / 2\n    else:\n        return arr1[m]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # combine the two lists into a single list\n    combined_list = arr1 + arr2\n\n    # sort the combined list\n    combined_list.sort()\n\n    # determine the index of the middle element\n    mid = n // 2\n\n    # return the median value\n    if n % 2 == 0:\n        return (combined_list[mid - 1] + combined_list[mid]) / 2\n    else:\n        return combined_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the middle element of the merged list\n    middle_element = len(merged_list) // 2\n    \n    # Return the middle element if it is an odd number of elements,\n    # otherwise, return the average of the two middle elements\n    if len(merged_list) % 2 == 0:\n        return (merged_list[middle_element - 1] + merged_list[middle_element]) / 2\n    else:\n        return merged_list[middle_element]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    results = []\n    for num in nums:\n        result = 1\n        for i in range(n):\n            result *= num\n        results.append(result)\n    return results"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # initialize a list to store the n-th power of each number in the input list\n    result = []\n    # loop through each number in the input list\n    for num in nums:\n        # compute the n-th power of the number and append it to the result list\n        result.append(num**n)\n    # return the result list\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and returns a new list containing the n-th power of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        result += char.upper()\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: \n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"List must have at least two elements.\"\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n        return\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the input list has at least 2 elements\n    if len(newList) < 2:\n        print(\"Error: list must have at least 2 elements\")\n        return\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # print the new list\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    pi = math.pi\n\n    # calculate the area of the circle\n    area_circle = pi * r ** 2\n\n    # calculate the area of the largest possible triangle inscribed in the semicircle\n    area_triangle = 0.5 * r * r * math.sin(2 * math.pi / 3)\n\n    # calculate the area of the smallest possible triangle inscribed in the semicircle\n    area_triangle_smallest = 0.5 * r * r * math.sin(2 * math.pi / 6)\n\n    # calculate the maximum possible area of the largest triangle that can be inscribed in the semicircle\n    max_area = area_circle + area_triangle_smallest + area_triangle_smallest + area_triangle\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate semi-circle area\n    area_semi_circle = 4 * r * r\n\n    # calculate side length of triangle\n    side_length = (3 * r * r * r) / (4 * area_semi_circle)\n\n    # calculate area of triangle\n    area_triangle = (1 / 2) * side_length * side_length\n\n    # calculate area of largest triangle\n    area_largest_triangle = area_semi_circle - area_triangle\n\n    return area_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a Python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Formula to find the area of a triangle given its base and height\n    def triangle_area_formula(b, h):\n        s = (b + h) / 2\n        area = sqrt(s * (s - b) * (s - h) * (s - b + h))\n        return area\n\n    # Function to find the area of a triangle with a given radius\n    def triangle_area_with_radius(radius):\n        # Calculate the semi-perimeter of the circle\n        semi_perimeter = 2 * pi * radius\n\n        # Calculate the area of the largest triangle that can be inscribed in the circle\n        area_1 = triangle_area_formula(semi_perimeter / 2, semi_perimeter / 2)\n        area_2 = triangle_area_formula(semi_perimeter / 2, semi_perimeter / 2 + radius)\n\n        # Return the maximum area of any two triangles\n        return max(area_1, area_2)\n\n    return triangle_area_with_radius(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Convert radius to radians\n    r = math.radians(r)\n    \n    # Calculate the semi-perimeter of the semicircle\n    s = 2*math.pi*r\n    \n    # Calculate the area of the largest triangle\n    a = (3*s**2)/(4*math.tan(math.pi/3))\n    \n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a right triangle with sides of length r\n    area = (r**2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    smallest_triangle = r**2 * (1 - (2 * r) / (r + 1))\n\n    # Return the larger area\n    return max(area, smallest_triangle)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the semi-perimeter of the triangle\n    semi_perimeter = 2 * r\n    \n    # Calculating the semi-perimeter of the largest triangle that can be inscribed in the semicircle\n    max_semi_perimeter = r + r * r\n    \n    # Calculating the area of the largest triangle\n    area = (semi_perimeter * semi_perimeter) / (4 * max_semi_perimeter)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to find the area of the largest triangle\n    # A = sqrt(s * (s-a) * (s-b) * (s-c))\n    # where s = r^2 and a, b, c are the lengths of the edges of the triangle\n    a = r * (r-1)\n    b = r * (r-1)\n    c = r * (r-1)\n    s = r * r\n    area = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle inscribed in the semicircle.\n\n    \"\"\"\n\n    # Define the semi-circle as the set of points (x, y) where x^2 + y^2 <= r^2.\n    x, y = 0, 1\n    points = set([(x, y)])\n    while y >= x:\n        x += 1\n        y = int(math.sqrt(r*r - x*x))\n        points.add((x, y))\n\n    # Calculate the area of the largest triangle inscribed in the semicircle.\n    area = 0\n    for p1, p2 in combinations(points, 2):\n        x1, y1 = p1\n        x2, y2 = p2\n        area = max(area, 0.5 * abs(x1 * y2 - x2 * y1))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def s(r):\n        return 2 * r\n\n    def area_of_triangle(a, b, c):\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # finding the semi-perimeter\n    s_prime = s(r)\n\n    # finding the area of the largest triangle\n    a = (2 * r) ** 2\n    b = s_prime ** 2\n    c = s_prime ** 2\n    largest_area = area_of_triangle(a, b, c)\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the semi-circle's area\n    semi_circle_area = math.pi * (r ** 2)\n\n    # Find the largest possible triangle's area\n    largest_triangle_area = 0.5 * semi_circle_area * (r ** 2)\n\n    return largest_triangle_area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: The sorted list of natural numbers.\n    :type array: list of int\n    :param start: The starting index of the array to search in.\n    :type start: int, optional\n    :param end: The ending index of the array to search in. If None, search through the entire array.\n    :type end: int, optional\n    :return: The smallest missing number from the sorted list.\n    :rtype: int\n    \"\"\"\n\n    if not array:\n        return None\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n        elif array[i] < i:\n            return i\n        elif array[i] > i:\n            return i + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    This function takes a sorted list of natural numbers and returns the first missing number.\n    '''\n    # Check if the list is empty or not\n    if len(array) == 0:\n        return None\n    \n    # Find the maximum number in the list\n    max_num = array[-1]\n    \n    # If the last element is the maximum number, there is no missing number\n    if max_num == array[-1]:\n        return None\n    \n    # Set the end index as the length of the array if not specified\n    if end is None:\n        end = len(array)\n    \n    # Initialize the first missing number to be the first element of the array\n    first_missing = array[0]\n    \n    # Iterate over the array from the first element to the last element\n    for i in range(start,end):\n        # Check if the current element is present in the array\n        if array[i] == first_missing:\n            # If the current element is present, increment the missing number\n            first_missing += 1\n        else:\n            # If the current element is not present, update the missing number to be the current element\n            break\n    \n    # Check if the missing number is present in the array\n    if first_missing in array:\n        return None\n    \n    return first_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): A sorted list of natural numbers.\n    start (int): The starting index of the search. Default is 0.\n    end (int): The ending index of the search. Default is None (i.e., all elements in the array).\n\n    Returns:\n    int: The smallest missing number.\n    '''\n\n    if end == None:\n        end = len(array)\n\n    if start >= end:\n        return start\n\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if input array is sorted or not\n    if array!= sorted(array):\n        return \"Input array is not sorted.\"\n\n    # Find the first missing number\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return \"All numbers in the input array are present.\""
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The start index of the search range. (default: 0)\n        end (int): The end index of the search range. (default: None)\n\n    Returns:\n        int: The smallest missing number from the given array.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst): \n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_nums = []\n    for num in lst: \n        if num % 2 == 0: \n            even_nums.append(num) \n    return even_nums "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers and returns a new list containing only the even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only even numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes in a list of numbers and returns a new list containing only the even numbers in the original list.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    if len(sub) == 0:\n        sub.append((x, y))\n    else:\n        sub.append((x+1, y))\n        sub.append((x, y+1))\n        sub.append((x-1, y))\n        sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x, y-1))\n    sub.append((x+1, y))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                x, y = ele[0] + i, ele[1] + j\n                if (x, y) not in sub:\n                    adjacent.append((x, y))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # get the coordinates of the given element\n    x, y = ele\n    \n    # extract all possible adjacent coordinates\n    adj_coords = [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if (dx!=0 or dy!=0)]\n\n    # filter out the coordinates that are already in the sublist\n    adj_coords = [adj_coord for adj_coord in adj_coords if adj_coord not in sub]\n\n    # return the filtered adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=None):\n    if sub is None:\n        sub = []\n    if isinstance(ele, tuple):\n        sub.append(ele)\n        if len(ele) == 2:\n            return sub\n        else:\n            return sub + [tuple(ele[i:i+2]) for i in range(0, len(ele), 2)]\n    elif isinstance(ele, list):\n        return [adjac(x, sub) for x in ele]\n    else:\n        raise TypeError(\"Element should be a tuple or a list\")"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = [(x+dx, y+dy) for dx in range(-1, 2) for dy in range(-1, 2) if (dx, dy)!= (0, 0)]\n    if (x, y) in sub:\n        adj = [x for x in adj if x not in sub]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    x, y = ele\n    \n    if x > 0:\n        adj.append((x-1, y))\n    if x < 10:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 10:\n        adj.append((x, y+1))\n    \n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the coordinates of the current element\n    x, y = ele\n    \n    # Create a list to store the adjacent coordinates\n    adj = []\n    \n    # Add the element to the list of adjacent coordinates\n    adj.append(ele)\n    \n    # Check the adjacent elements to the right and down\n    if x < len(sub) - 1 and y < len(sub[0]) - 1:\n        adj.append((x+1, y+1))\n    if x < len(sub) - 1 and y > 0:\n        adj.append((x+1, y-1))\n    if x > 0 and y < len(sub[0]) - 1:\n        adj.append((x-1, y+1))\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    \n    # Remove duplicates from the list of adjacent coordinates\n    adj = list(set(adj))\n    \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_x = []\n    adj_y = []\n    \n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            x1 = x + i\n            y1 = y + j\n            if 0 <= x1 < len(sub) and 0 <= y1 < len(sub[0]):\n                adj_x.append(x1)\n                adj_y.append(y1)\n    \n    return adj_x, adj_y"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    # replace whitespaces with underscores\n    new_text = text.replace(' ', '_')\n    # replace underscores with whitespaces\n    new_text = new_text.replace('_','')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces all the spaces in a given string with underscores and vice versa.\n    '''\n    spaces_re = r'\\s+'\n    underscores_re = r'_+'\n    text = re.sub(spaces_re, '_', text)\n    text = re.sub(underscores_re,'', text)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    for i in range(len(text)):\n        if text[i].isspace():\n            text = text[:i] + '_' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # create a string with spaces to replace\n    replace_str =''\n\n    # split the string into words\n    words = text.split()\n\n    # iterate through the words\n    for i, word in enumerate(words):\n        # check if the word contains spaces\n        if'' in word:\n            # replace spaces with underscore\n            words[i] = word.replace(' ', '_')\n        else:\n            # replace underscore with spaces\n            words[i] = word.replace('_','')\n\n    # join the words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the text into words\n    words = text.split()\n\n    # Iterate over each word\n    for i in range(len(words)):\n        # Check if the word has a space\n        if'' in words[i]:\n            # Replace the space with an underscore\n            words[i] = words[i].replace(' ', '_')\n        # Check if the word has an underscore\n        elif '_' in words[i]:\n            # Replace the underscore with a space\n            words[i] = words[i].replace('_','')\n\n    # Join the words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    return text.replace(\"_\", \" \").replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Loop through each word\n    for word in words:\n        # Check if the word contains only alphabets\n        if word.isalpha():\n            # Replace spaces with underscores\n            if'' in word:\n                new_word = word.replace(' ', '_')\n            # Replace underscores with spaces\n            else:\n                new_word = word.replace('_','')\n            # Update the word in the list\n            words[words.index(word)] = new_word\n    # Join the words back into a string\n    result =''.join(words)\n    # Return the modified string\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index is not None:\n        num_list.pop(zero_index)\n        for i in range(len(num_list)):\n            if num_list[i] == 0:\n                num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n                break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, one for the start of the list and another for the end.\n    start = 0\n    end = len(num_list) - 1\n\n    # Iterate through the list, moving the zeroes to the end of the list.\n    while start < end:\n        if num_list[start] == 0:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            start += 1\n        else:\n            end -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    for i in range(zero_index, len(num_list)-1):\n        num_list[i] = num_list[i+1]\n    num_list[len(num_list)-1] = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    num_list.reverse()\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of integers as input and returns a new list with all zeroes moved to the end.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index == -1:\n        return num_list\n    \n    for i in range(len(num_list)-1, zero_index, -1):\n        num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n\n    if zero_index == -1:\n        return num_list\n\n    for j in range(len(num_list)-1, zero_index-1, -1):\n        num_list[j+1] = num_list[j]\n\n    num_list[zero_index] = 0\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = None\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index is not None:\n        for i in range(len(num_list)-1, zero_index-1, -1):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # initialize two pointers: left and right\n    left = 0\n    right = 0\n\n    # loop through the list\n    while right < len(num_list):\n        # check if the current element is zero\n        if num_list[right]!= 0:\n            # move the current element to its correct position\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            # increment the left pointer\n            left += 1\n        # increment the right pointer\n        right += 1\n\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            for j in range(i, len(num_list)):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                break\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 1:\n        return arr[0]\n    \n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    \n    return pair_xor_Sum(arr, n-1) + xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes in a list of integers and returns the sum of xor of all pairs of integers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list and its length as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = arr[i] ^ arr[j]\n            sum += xor_sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    # Pop the smallest element from the heap and append it to the result list\n    result = [hq.heappop(iterable)]\n    # Repeat until the heap is empty\n    while iterable:\n        # Pop the smallest element from the heap and append it to the result list\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the heap sort algorithm.\n    '''\n    heap = []\n    # Build the max heap from the given list\n    for item in iterable:\n        hq.heappush(heap, item)\n    # Sort the max heap\n    for _ in range(len(heap)):\n        # Extract the maximum element from the heap\n        max_item = hq.heappop(heap)\n        # Insert the maximum element into the sorted list\n        hq.heappush(heap, max_item)\n    # Return the sorted list\n    return [x for x in heap]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using the heap sort algorithm.\n    '''\n    # Convert the iterable to a heap.\n    heap = [hq.heappushpop(None, x) for x in iterable]\n    # Sort the heap.\n    while len(heap) > 1:\n        hq.heappush(heap, hq.heappop(heap))\n    # Convert the sorted heap back to the original iterable.\n    return [hq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using Heap Sort algorithm.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n\n    # Extract the maximum element from the heap and append it to the result\n    result = []\n    while iterable:\n        max_element = hq.heappop(iterable)\n        result.append(max_element)\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a max heap\n    max_heap = []\n    for item in iterable:\n        hq.heappush(max_heap, item)\n    \n    # Build a new list from the max heap\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(hq.heappop(max_heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    return [hq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(iterable)\n    # Remove elements from the heap and add them to a new list in sorted order\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n\n    profit_before = actual_cost - sale_amount\n    profit_after = actual_cost\n\n    if profit_before == 0 and profit_after == 0:\n        return True\n\n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount == actual_cost: # if the sale amount is equal to the actual cost\n        return True # return True because there's no profit or loss\n\n    if actual_cost > sale_amount: # if the actual cost is greater than the sale amount\n        return False # return False because there's a loss\n\n    if actual_cost < sale_amount: # if the actual cost is less than the sale amount\n        return True # return True because there's no loss but there's a profit"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount == actual_cost:\n        return True\n    elif sale_amount > actual_cost:\n        return False\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        print(\"No profit and no loss possible\")\n        return True\n    else:\n        print(\"Profit or loss possible\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n\n    Args:\n        actual_cost (float): The actual cost of the sale.\n        sale_amount (float): The amount being sold.\n\n    Returns:\n        bool: True if the sale has no profit and no loss, False otherwise.\n    \"\"\"\n    if actual_cost - sale_amount >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (float): The actual cost of the sale.\n    sale_amount (float): The amount of money the buyer made for the sale.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    if actual_cost - sale_amount == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill formula\n    wc = -459.67 + 35.75 * v + 0.6215 * t - 35.75 * t**2 + 0.4275 * v**2 - 13.37 * v**3 + 0.0068 * t**3\n    \n    # Round the result to the next integer\n    wc_int = math.ceil(wc)\n    \n    # Return the rounded value\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temperature = t\n    \n    # Calculate the heat capacity ratio (HCR)\n    HCR = 6.112 * math.exp((17.625 * temperature) / (temperature + 237.3))\n    \n    # Calculate the dew point temperature\n    dew_point = (243.12 * (1 - 0.0065 * math.exp((17.625 * temperature) / (temperature + 237.3))))\n    \n    # Calculate the wind chill index\n    wci = (dew_point - 273.15) / (HCR * (dew_point - 273.15))\n    \n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    \n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t <= 0:\n        raise ValueError(\"Temperature must be positive.\")\n    elif v <= 0:\n        raise ValueError(\"Wind velocity must be positive.\")\n    else:\n        # Formula for wind chill index\n        fc = 13.12 + (0.6215*t) + (11.37*math.log(v)) - (0.3965*t*math.log(v))\n        fc = round(fc)\n        return fc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature from celsius to fahrenheit\n    f = (9/5)*t + 32\n    \n    # calculate wind chill temperature\n    wc = 23.44 * v**0.16 + 35.72 * math.exp((-16.67 * v)/(v+0.78)) - 0.6215 * t\n    \n    # calculate the wind chill index\n    wci = math.ceil(wc)\n    \n    # calculate the wind chill index in fahrenheit\n    wcf = (wci - 32) * 5/9\n    \n    return wcf"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to Kelvin\n    k = t + 273.15\n    # convert wind velocity to m/s\n    ms = v * 1000\n    # calculate the wind chill index\n    wc = 35.74 + 0.6215 * k - 35.757 * math.pow(ms, 0.16) + 0.4275 * k * math.pow(ms, 0.16)\n    # round the wind chill index to the nearest integer\n    wc_int = round(wc)\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert temperature to Kelvin\n    kelvin = t + 273.15\n    \n    # Calculate wind speed in m/s\n    wind_speed = v * 1000\n    \n    # Calculate the absolute vane angle\n    abs_vane = math.degrees(math.atan(28.75 * (math.exp(3.16 * kelvin / (273.15 + kelvin)) - 1) / 1.46))\n    \n    # Calculate the wind chill temperature\n    wind_chill_t = kelvin + 0.5 * (math.sin(abs_vane) + math.cos(abs_vane)) * (24.379 * (kelvin - 273.15)) / (29.65 * (kelvin - 273.15) + 768.0)\n    \n    # Convert the wind chill temperature to Celsius and round it to the nearest integer\n    wind_chill_c = math.ceil(wind_chill_t - 273.15)\n    \n    return wind_chill_c"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.0065 # Fahrenheit to Celsius conversion factor\n    t_f = t * 9/5 + 32\n    if t_f < 0 or t_f > 100:\n        raise ValueError('Temperature must be between 0 and 100 degrees Fahrenheit.')\n    if v < 0:\n        raise ValueError('Wind velocity must be a non-negative number.')\n    \n    # Calculate wind chill index\n    wc = 35.74 + 0.6215*t_f - 35.75*math.pow(t_f, 2) + 0.4275*math.pow(v, 2) - 0.000075*math.pow(v, 3)\n    \n    # Round to the nearest integer\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 0:\n        raise ValueError(\"Wind velocity must be a positive number.\")\n    if t < -10 or t > 40:\n        raise ValueError(\"Temperature must be between -10 and 40 degrees Celsius.\")\n    \n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n    \n    # Calculate the wind chill index\n    if v <= 3:\n        wci = math.floor(23 + 0.6215 * v + 17.625 * (v ** 0.16))\n    elif 3 < v <= 10:\n        wci = math.floor(23 + 0.6215 * v - 0.3965 * (v ** 0.16) + 17.625 * (v ** 0.16))\n    else:\n        wci = math.floor(23 + 0.6215 * v - 0.3965 * (v ** 0.16) + 17.625 * (v ** 0.16))\n    \n    # Round the wind chill index to the next integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v == 0:\n        return 0\n    else:\n        if t >= 0 and t < 10:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))\n        elif t >= 10 and t < 15:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))\n        elif t >= 15 and t < 20:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))\n        elif t >= 20 and t < 25:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))\n        elif t >= 25 and t < 30:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))\n        elif t >= 30 and t < 35:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))\n        elif t >= 35 and t < 40:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))\n        elif t >= 40 and t < 45:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))\n        elif t >= 45 and t < 50:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))\n        else:\n            return math.ceil(35.74 + (0.6215 * t) - (35.75 * math.log10(v)) + (0.4275 * t * math.log10(v)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t < 0 or v <= 0:\n        return \"Invalid input!\"\n\n    # Convert wind velocity to m/s\n    speed_ms = v * 1000\n\n    # Convert temperature to Fahrenheit\n    temp_f = (t * 1.8) + 32\n\n    # Calculate the wind chill index\n    if speed_ms <= 25:\n        wind_chill_index = 0\n    elif speed_ms <= 75:\n        wind_chill_index = 13.12 + (0.6215 * temp_f) - (11.37 * math.log(speed_ms/25))\n    else:\n        wind_chill_index = 13.12 + (0.4275 * temp_f) - (3.567 * math.log(speed_ms/25)) + (0.14 * temp_f**2) - (8.12 * math.log(speed_ms/25)**2)\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_len += len(name)\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names after removing those starting with a lowercase letter\n    length_sum = 0\n    \n    # Iterate over each name in the sample_names list\n    for name in sample_names:\n        # If the name starts with a lowercase letter, skip it and move on to the next one\n        if name[0].islower():\n            continue\n        # Otherwise, add the length of the name to the length_sum variable\n        else:\n            length_sum += len(name)\n    \n    # Return the sum of the lengths of the names after removing those starting with a lowercase letter\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            name_sum += len(name)\n    return name_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that meet the criteria\n    valid_names = []\n    \n    # iterate through each name in the sample_names list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, append it to the valid_names list\n        if name[0].islower():\n            valid_names.append(name)\n    \n    # sum the length of the valid_names list to get the total length of names that meet the criteria\n    total_length = sum([len(name) for name in valid_names])\n    \n    # return the total length of names that meet the criteria\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of lengths of names that start with uppercase letters\n    uppercase_sum = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, add its length to the sum\n            uppercase_sum += len(name)\n    # Return the sum of lengths of names that start with uppercase letters\n    return uppercase_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            filtered_names.append(name)\n    return sum([len(name) for name in filtered_names])"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove parenthesis from the string\n    pattern = r'\\([^)]+\\)'\n    result = re.sub(pattern, '', items)\n\n    # Return the result\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Split the string by space and remove empty strings\n    items = items.split()\n    # Join the split string with space again\n    items =''.join(items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # define the pattern to match the parenthesis\n    pattern = re.compile(r'\\([^)]+\\)')\n\n    # use the pattern to find all matches in the string\n    matches = pattern.findall(items)\n\n    # loop through the matches and remove the parenthesis and what is inbetween them\n    for match in matches:\n        items = items.replace(match, '')\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them from the string.\n    '''\n    pattern = re.compile(r'[^\\s()]+')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub('\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to remove parenthesis\n    pattern = r'\\([^()]+\\)'\n    result = re.sub(pattern, '', items)\n\n    # Remove any whitespaces\n    result = result.replace(' ', '')\n\n    # Remove any special characters\n    result = ''.join(e for e in result if e.isalnum())\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parentheses from the string\n    items = re.sub(r'\\(.*?\\)', '', items)\n    # Return the string without the parentheses\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = n * (n - 1)\n    return nonagonal\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_nonagonal(n)\nprint(\"The\", n, \"th nonagonal number is\", result)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize the variables\n    rows = 1\n    cols = 1\n    num = 1\n\n    # Calculate the nth nonagonal number\n    while rows <= n:\n        num += cols\n        cols += 1\n        rows += 1\n\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    # Initialize the first nonagonal number to 1\n    nonagonal = 1\n    # Iterate from the second nonagonal number to n\n    for i in range(1, n+1):\n        # Multiply the current nonagonal number by i\n        nonagonal *= i\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer `n` and returns the nth nonagonal number.\n    \"\"\"\n    def nonagonal(k):\n        \"\"\"\n        This helper function takes an integer `k` and returns the `k`th nonagonal number.\n        \"\"\"\n        return k * (k + 1) // 2\n\n    return nonagonal(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the number of rows and columns in a square\n    rows = int(n**0.5) + 1\n    cols = rows\n    \n    # Initialize the variable for the nonagonal number\n    nonagonal = 0\n    \n    # Initialize a variable to keep track of the number of squares that have already been visited\n    squares_visited = 0\n    \n    # Initialize a variable to keep track of the number of squares in the square\n    squares_in_square = 0\n    \n    # Loop until all squares have been visited\n    while squares_visited < n:\n        \n        # Check if the square is already visited\n        if squares_visited in squares_visited:\n            break\n        \n        # Increment the number of squares visited\n        squares_visited += 1\n        \n        # Check if the current square has more than 4 sides\n        if squares_in_square > 4:\n            break\n        \n        # Calculate the number of squares in the square\n        squares_in_square += 1\n        \n        # Add the number of squares to the nonagonal number\n        nonagonal += squares_in_square\n        \n        # Calculate the number of squares to the left and top of the square\n        squares_to_left = squares_in_square\n        squares_to_top = squares_in_square\n        \n        # Move to the next square in the grid\n        for i in range(1, rows):\n            for j in range(1, cols):\n                squares_to_left += 1\n                squares_to_top += 1\n                if squares_to_left > squares_in_square:\n                    squares_to_left -= squares_in_square\n                    squares_to_top += 1\n                if squares_to_top > squares_in_square:\n                    squares_to_top -= squares_in_square\n                    squares_to_left += 1\n        \n        # Increment the number of squares in the square\n        squares_in_square += 1\n        \n        # Check if the current square has more than 4 sides\n        if squares_in_square > 4:\n            break\n    \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first row of the matrix\n    row = [1]\n\n    # Initialize the matrix\n    matrix = [row]\n\n    # Iterate through the matrix to calculate the nth nonagonal number\n    for i in range(1, n):\n        # Initialize the next row of the matrix\n        next_row = [1]\n\n        # Iterate through the previous row to calculate the next row\n        for j in range(1, len(matrix[i-1])):\n            # Calculate the sum of the current element and the previous element\n            next_row.append(matrix[i-1][j-1] + matrix[i-1][j])\n\n        # Add the next row to the matrix\n        matrix.append(next_row)\n\n    # Return the nth nonagonal number\n    return matrix[-1][-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the variables\n    a = 1\n    b = 1\n\n    # Loop until the nth nonagonal number is found\n    for i in range(n): \n        a = (a**2 + b**2)**0.5\n        b = 2*a\n\n    # Return the nth nonagonal number\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return \"The number must be odd.\"\n    else:\n        for i in range(1, (n * n) // 2 + 1, 2):\n            if n - i == i:\n                return \"The nth nonagonal number is:\", i"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 5 * (n - 1) + 1"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]*[zZ][a-zA-Z0-9]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # define pattern for finding words that contain 'z'\n    pattern = r'\\b[zZ]\\w+\\b'\n    \n    # use re.findall() to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n    \n    # check if any matches were found\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Check if 'z' is present in the middle of each word\n    for word in words:\n        if word[1] == 'z':\n            return True\n    # If no 'z' was found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w[az]*\\w\\b'\n    matches = re.findall(pattern, text)\n\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define regular expression pattern to match word boundaries\n    pattern = r'\\b\\w+\\b'\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Check if there is a 'z' in the middle of the matches\n    if 'z' in ''.join(matches):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n\n    # Replace all non-alphanumeric characters with spaces\n    text = re.sub(r'[^a-zA-Z0-9\\s]','', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Loop through each word and check if it starts or ends with 'z'\n    for word in words:\n        if word.startswith('z'):\n            if word.endswith('z'):\n                print(word)\n            elif word.find('z') == len(word) - 1:\n                print(word)\n            else:\n                continue\n        elif word.endswith('z'):\n            if word.startswith('z'):\n                print(word)\n            elif word.find('z') == 0:\n                print(word)\n            else:\n                continue\n        else:\n            continue\n\n    # Print the total number of words that contain 'z'\n    print('Number of words containing \"z\":', len(words))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Remove any non-alphanumeric characters from the input string\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Split the text into individual words\n    words = text.split()\n\n    # Loop through each word and check if it contains 'z' except at the start and end of the word\n    for i in range(len(words)):\n        word = words[i]\n        if i == 0 or i == len(words) - 1:\n            if 'z' in word:\n                return True\n        else:\n            if 'z' in word and word[0]!= 'z' and word[-1]!= 'z':\n                return True\n\n    # If we make it through the loop without finding any 'z' except at the start and end of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern for matching words that end with 'z' and are not at the start\n    pattern = r'\\b\\w+z\\b(?!\\w)'\n\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return True, otherwise return False\n    return match is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove any non-alphanumeric characters from the input text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split the input text into words\n    words = text.split()\n    \n    # Check if 'z' is present at the start and end of each word\n    for i in range(len(words)):\n        # Check if the word starts with 'z'\n        if words[i][0] == 'z':\n            # Check if the word ends with 'z'\n            if words[i][-1] == 'z':\n                # If both conditions are true, return True\n                return True\n    \n    # If no words start with 'z' and end with 'z', return False\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)): \n        input[i], input[i-1] = input[i-1], input[i] \n    return input "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 1 or k > len(input):\n        return \"Invalid input: k should be between 1 and length of input array.\"\n    else:\n        for i in range(k-1, len(input)-1, -1):\n            input[i], input[len(input)-1] = input[len(input)-1], input[i]\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k):\n        left = 0\n        right = n - 1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a new empty list\n    reversed_array = []\n    # iterate over the input array\n    for i in range(len(input)-1, -1, -1):\n        # if i is less than or equal to k, add the current element to the reversed list\n        if i <= k:\n            reversed_array.append(input[i])\n        # if i is greater than k, stop iterating and return the reversed list\n        else:\n            break\n    # return the reversed list\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    n = len(input)\n    left = 0\n    right = k - 1\n    while left < right: \n        input[left], input[right] = input[right], input[left] \n        left += 1 \n        right -= 1 "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    for i in range(k - 1, -1, -1):\n        if i == k - 1:\n            input[i], input[0] = input[0], input[i]\n        else:\n            input[i], input[i+1] = input[i+1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the entire array\n    input[:] = input[::-1]\n    \n    # Reverse the array upto the given position\n    input[:k] = input[:k][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array 'input' and a position 'k' as input and reverses the array upto position 'k'.\n    '''\n    # Step 1: Reverse the entire array\n    input.reverse()\n\n    # Step 2: Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n\n    # Step 3: Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n\n    # Step 4: Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from 0 to k-1\n    for i in range(k): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i] \n\n    return input "
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = (test_tup + tuple(test_dict.items()))\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup, test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n\n    # check if the input is valid\n    if not isinstance(test_tup, tuple):\n        print(\"The input must be a tuple\")\n        return None\n\n    if not isinstance(test_dict, dict):\n        print(\"The input must be a dictionary\")\n        return None\n\n    # add the dictionary to the tuple\n    new_tup = tuple(test_tup)\n    new_tup += (test_dict,)\n\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup + tuple(test_dict.values()))\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = (test_tup[0], test_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {**test_dict}\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_dict['new_key'] = 'new_value'\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize a list to store the visited cells and their corresponding path\n    visited = []\n    max_path_avg = 0\n    # Iterate over all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if the current cell is a boundary cell\n            if i == 0 or i == N-1 or j == 0 or j == N-1:\n                # If it is, skip it and move to the next cell\n                continue\n            # Compute the total cost of the path\n            total_cost = cost[i][j] + cost[i-1][j] + cost[i][j-1] - cost[i-1][j-1]\n            # Check if the current cell has already been visited\n            already_visited = False\n            for cell in visited:\n                if cell[0] == i and cell[1] == j:\n                    already_visited = True\n                    break\n            if already_visited:\n                # If it has, skip it and move to the next cell\n                continue\n            # If not, add the current cell to the visited list and update the maximum average if necessary\n            visited.append((i, j))\n            if total_cost > max_path_avg:\n                max_path_avg = total_cost\n    # Return the maximum average\n    return max_path_avg/len(visited)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        max_avg = max(max_avg, dp[i][i])\n\n    for k in range(1, N):\n        for i in range(N-k):\n            j = i+k\n            if j == N-1:\n                dp[i][j] = cost[i][j] + dp[i+1][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i+1][j], dp[i][j+1])\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                path_avg = cost[i][j]\n            elif i == 0:\n                path_avg = cost[i][j] + path_avg\n            elif j == 0:\n                path_avg = cost[i][j] + path_avg\n            else:\n                path_avg = (cost[i][j] + path_avg) / 2.0\n            if path_avg > max_avg:\n                max_avg = path_avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Find the maximum value in the cost matrix\n    max_val = max(cost[i][j] for i in range(len(cost)) for j in range(len(cost[0])))\n    \n    # Create a list of lists to store the maximum averages for each row and column\n    max_avg_row = [0] * len(cost[0])\n    max_avg_col = [0] * len(cost)\n    \n    # Initialize the maximum average as the maximum value\n    max_avg = max_val\n    \n    # Iterate over all possible paths and calculate their maximum average\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Calculate the maximum average of the cells above and to the left of the current cell\n            above_avg = max_avg_col[j] if j > 0 else max_val\n            to_left_avg = max_avg_row[i] if i > 0 else max_val\n            \n            # Calculate the maximum average of the cells above and to the left of the current cell plus the current cell's cost\n            new_avg = above_avg + to_left_avg + cost[i][j]\n            \n            # Update the maximum average if the current maximum average is less than the new maximum average\n            if new_avg > max_avg:\n                max_avg = new_avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Step 1: Calculate the sum of all the costs in each row\n    row_sums = [sum(cost[i]) for i in range(N)]\n    # Step 2: Calculate the sum of all the costs in each column\n    col_sums = [sum(cost[j][i] for j in range(N)) for i in range(N)]\n    # Step 3: Calculate the sum of all the costs in the main diagonal\n    main_diag_sum = sum(cost[i][i] for i in range(N))\n    # Step 4: Calculate the sum of all the costs in the anti-diagonal diagonal\n    anti_diag_sum = sum(cost[i][N-i-1] for i in range(N))\n    # Step 5: Calculate the maximum average\n    max_average = max(row_sums[i] / N + col_sums[j] / N + (main_diag_sum - anti_diag_sum) / (N*(N-1)) for j in range(N) for i in range(N))\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                avg = cost[i][j]\n            elif i == 0:\n                avg = cost[i][j] + maxAverageOfPath(cost[i+1:])\n            elif j == 0:\n                avg = cost[i][j] + maxAverageOfPath(cost[:,j+1:])\n            else:\n                avg = cost[i][j] + min(maxAverageOfPath(cost[i-1:i+2,j]), maxAverageOfPath(cost[i:i+2,j-1:j+2]))\n            max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_path_avg = float('-inf')\n    paths = []\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                paths.append(j)\n                max_path_avg = max(max_path_avg, sum(cost[0][j:j+N]) / (j+1))\n            elif j == 0:\n                paths.append(i)\n                max_path_avg = max(max_path_avg, sum(cost[i][0:i+N]) / (i+1))\n            elif i == N-1 and j == N-1:\n                paths.append(i*N+j)\n                max_path_avg = max(max_path_avg, sum(cost[i][j]) / (i*N+j+1))\n            else:\n                paths.append(i*N+j)\n                max_path_avg = max(max_path_avg, sum(cost[i][j])/ (i*N+j+1))\n\n    for p in paths:\n        if p == len(cost)*len(cost)-1:\n            continue\n        paths.append(p)\n        max_path_avg = max(max_path_avg, sum(cost[p//N][p%N:N]) / len(cost[p//N]))\n        paths.pop()\n\n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    visited = [[0 for i in range(n)] for j in range(n)]\n    max_path_avg = 0\n    max_path_cost = 0\n\n    def dfs(i, j, path_cost, path_avg):\n        nonlocal max_path_avg, max_path_cost\n        if i == n - 1 and j == n - 1:\n            if path_avg > max_path_avg:\n                max_path_avg = path_avg\n                max_path_cost = path_cost\n            return\n\n        visited[i][j] = 1\n        dfs(i + 1, j, path_cost, path_avg + cost[i][j])\n        dfs(i, j + 1, path_cost, path_avg + cost[i][j])\n        visited[i][j] = 0\n\n    dfs(0, 0, 0, 0)\n\n    return max_path_avg, max_path_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    def dfs(i, j, curr_cost, path_sum, total_cells):\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            if total_cells > 0:\n                average = path_sum / total_cells\n                if average > max_avg:\n                    max_avg = average\n            return\n        if i < len(cost) and j < len(cost[0]):\n            dfs(i + 1, j, curr_cost + cost[i][j], path_sum + curr_cost, total_cells + 1)\n            dfs(i, j + 1, curr_cost + cost[i][j], path_sum + curr_cost, total_cells + 1)\n\n    max_avg = float('-inf')\n    dfs(0, 0, 0, 0, 0)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables to store the maximum average and the current path with maximum average\n    max_avg = 0\n    max_path = []\n\n    # Loop through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if this cell is the start of a path\n            if i == 0 and j == 0:\n                # Add the first cell to the path and move down\n                path = [(i, j, 1)]\n                total_cost = cost[i][j]\n                while i < len(cost) - 1 and j < len(cost[i]) - 1:\n                    i += 1\n                    j += 1\n                    total_cost += cost[i][j]\n                    path.append((i, j, 1))\n                # Check if this path has a higher average than the current maximum average\n                if total_cost / len(path) > max_avg:\n                    max_avg = total_cost / len(path)\n                    max_path = path\n            # Check if this cell is a valid move for the current path\n            elif i < len(cost) - 1 and j < len(cost[i]) - 1:\n                # Check if the last cell is on the right or bottom side of the current cell\n                if cost[i][j] <= cost[i+1][j]:\n                    # Move right and check if the current cell is the bottom right corner\n                    if j == len(cost[i]) - 2:\n                        # Add the last cell to the path and move down\n                        path.append((i+1, j, 1))\n                        total_cost += cost[i+1][j]\n                        while i < len(cost) - 1 and j < len(cost[i]) - 1:\n                            i += 1\n                            j += 1\n                            total_cost += cost[i][j]\n                            path.append((i, j, 1))\n                        # Check if this path has a higher average than the current maximum average\n                        if total_cost / len(path) > max_avg:\n                            max_avg = total_cost / len(path)\n                            max_path = path\n                    # Move down and check if the current cell is the bottom left corner\n                    elif i == len(cost) - 2:\n                        # Add the last cell to the path and move right\n                        path.append((i, j+1, 1))\n                        total_cost += cost[i][j+1]\n                        while i < len(cost) - 1 and j < len(cost[i]) - 1:\n                            i += 1\n                            j += 1\n                            total_cost += cost[i][j]\n                            path.append((i, j, 1))\n                        # Check if this path has a higher average than the current maximum average\n                        if total_cost / len(path) > max_avg:\n                            max_avg = total_cost / len(path)\n                            max_path = path\n                # Check if the last cell is on the left or bottom side of the current cell\n                elif cost[i][j] <= cost[i][j+1]:\n                    # Move left and check if the current cell is the bottom right corner\n                    if i == len(cost) - 2:\n                        # Add the last cell to the path and move down\n                        path.append((i, j, 1))\n                        total_cost += cost[i][j]\n                        while i < len(cost) - 1 and j < len(cost[i]) - 1:\n                            i += 1\n                            j += 1\n                            total_cost += cost[i][j]\n                            path.append((i, j, 1))\n                        # Check if this path has a higher average than the current maximum average\n                        if total_cost / len(path) > max_avg:\n                            max_avg = total_cost / len(path)\n                            max_path = path\n                    # Move down and check if the current cell is the bottom left corner\n                    elif j == len(cost[i]) - 2:\n                        # Add the last cell to the path and move left\n                        path.append((i, j-1, 1))\n                        total_cost += cost[i"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: info for name, info in students.items() if info[0] > h and info[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(i + 1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    \n    sum = 0\n    while base > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n    \n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum_digits = 0\n    \n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Loop through each digit of the base\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_digits += int(digit)\n    \n    # Calculate the sum of the digits to the specified power\n    result = sum_digits ** power\n    \n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and split it into a list of digits\n    digits = list(str(base))\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate through the digits list and calculate the sum of digits raised to the specified power\n    for digit in digits:\n        total += int(digit) ** power\n        \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(1, power + 1):\n        result += int(base[-i])\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp = base\n    while power > 0:\n        if power % 10 == 0:\n            result += temp\n        temp *= base\n        power //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # convert the base to a string\n    base_str = str(base)\n    \n    # loop through each character in the string\n    for char in base_str:\n        # convert the character to an integer\n        char_int = int(char)\n        \n        # add the integer to the sum\n        sum += char_int\n    \n    # calculate the sum to the power of the specified power\n    result = sum ** power\n    \n    # return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum to zero\n    total = 0\n    # loop through the digits of the base\n    for digit in str(base):\n        # multiply the digit by the current power\n        total += int(digit) ** power\n    # return the sum of all digits raised to the specified power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string\n    base_str = str(base)\n    # initialize sum to 0\n    total_sum = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert digit to integer\n        digit_int = int(digit)\n        # calculate the power of the digit to the power of the power\n        power_digit_sum = digit_int ** power\n        # add the power of the digit to the total sum\n        total_sum += power_digit_sum\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string and returns a list of all the values between quotation marks \" \" of the string.\n    '''\n    # Define the regular expression pattern to match quotation marks and values inside them\n    pattern = r'\"(.*?)\"'\n    \n    # Use the re.findall() function to find all the matches of the pattern in the string\n    matches = re.findall(pattern, text1)\n    \n    # Return the list of matches as the output\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the regular expression pattern for matching quotation marks\n    pattern = r'(\")(.*?)(?<!\\\\)\\1'\n    \n    # Use the re.findall() function to find all the matches of the pattern in the text\n    matches = re.findall(pattern, text1)\n    \n    # Create a list to store the extracted values\n    extracted_values = []\n    \n    # Loop through all the matches and append the values to the extracted_values list\n    for match in matches:\n        extracted_values.append(match[1])\n    \n    # Return the extracted_values list\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to extract values between quotation marks \" \"\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=[\\s\"'])([\\w]+)(?=[\\s\"'])'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regular expression to find all the quotes and their respective values\n    pattern = r'(?<=\")[^\"]*?(?=\")'\n    matches = re.findall(pattern, text1)\n    # converting the list of matches to a string with values separated by commas\n    values = ','.join(matches)\n    return values"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Check if the input is a tuple of length N+1\n    if len(test_tup)!= len(test_tup) - 1:\n        raise ValueError('Input tuple must be of length N+1')\n    # Initialize the output tuple with the first element of the input tuple\n    out_tup = (test_tup[0],)\n    # Iterate through the input tuple and append the result of multiplying the current element and the next element to the output tuple\n    for i in range(1, len(test_tup)):\n        out_tup += (test_tup[i] * test_tup[i+1],)\n    # Return the output tuple\n    return tuple(out_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # get the length of the tuple\n    N = len(test_tup)\n    # create a new tuple with N elements\n    result_tup = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3],\n                 test_tup[1] * test_tup[2], test_tup[1] * test_tup[3], test_tup[2] * test_tup[3])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the sum of the two lists\n    result = []\n    # Loop through each element of the first list\n    for i in range(len(lst1)):\n        # Append the sum of the corresponding elements of the two lists\n        result.append(lst1[i] + lst2[i])\n    # Return the list of summed elements\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    sum_list = []\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i] + lst2[i])\n    return sum_list"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their sum as a new list.\n\n    Parameters:\n        lst1 (list): A list of numbers.\n        lst2 (list): A list of numbers.\n\n    Returns:\n        list: A new list with the sum of the two input lists.\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    result = []\n    for key, group in groupby(enumerate(nums)):\n        if key == 0:\n            result.append(group[0][1])\n        elif key == 1:\n            if group[0][0] + 1!= group[1][0]:\n                result.append(group[0][1])\n        else:\n            if group[0][0] + 1 == group[1][0]:\n                group = group[1:]\n            result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    for i, g in groupby(nums):\n        if i == 0:\n            yield from g\n        else:\n            prev = next(g)\n            if prev == next(g):\n                continue\n            yield prev"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list of numbers.\n    '''\n    # Use groupby to group the list of numbers by their indices\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] - x[1])\n\n    # Create a new list to store the consecutive duplicates\n    consecutive_nums = []\n\n    # Iterate over the grouped list of numbers\n    for key, group in grouped_nums:\n        # Check if the group has more than one element\n        if len(list(group)) > 1:\n            # Append the first element of the group to the new list\n            consecutive_nums.append(list(group)[0])\n        # Check if the group has only one element\n        elif len(list(group)) == 1:\n            # Append the first element of the group to the new list\n            consecutive_nums.append(list(group)[0])\n\n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    return [next(group) for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i, num in enumerate(nums):\n        if i == 0 or num!= nums[i-1]:\n            yield num"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    nums = set(nums)\n\n    # Group the numbers by their consecutive duplicates\n    grouped_nums = groupby(nums)\n\n    # Filter out the groups of consecutive duplicates\n    consecutive_duplicates = (key for key, group in grouped_nums if len(list(group)) > 1)\n\n    # Convert the consecutive duplicates to a list\n    result = list(consecutive_duplicates)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by each number in consecutive pairs\n    grouped_nums = groupby(nums)\n    # Filter out consecutive duplicates and return the result\n    return [num for _, group in grouped_nums if len(list(group)) == 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def merge_groups(iterable):\n        prev = next(iterable)\n        for item in iterable:\n            if item!= prev:\n                yield prev, item\n            prev = item\n\n    def grouper(iterable, n):\n        args = [iter(iterable)] * n\n        return zip(*args)\n\n    groups = grouper(nums, 2)\n    return [x[0] for x in merge_groups(groups)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    result = []\n    prev_num = None\n    for num in nums:\n        if prev_num is None or num!= prev_num + 1:\n            result.append(num)\n        prev_num = num\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone using the formula A = pi*(r^2+h^2)\n    lateral_surface_area = math.pi * (r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone using Pythagorean theorem\n    lateral_surface_area = (2*r*h)/(3*math.sqrt(3))\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Define the lateral surface area of the cone\n    LSA = math.pi * r ** 2 + math.pi * r * h + math.pi * r ** 2\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculating the area of the base of the cone\n    area_base = math.pi * r * r\n\n    # Calculating the area of the lateral surface\n    area_lateral = math.pi * (r * r) * h\n\n    # Returning the lateral surface area\n    return area_lateral - area_base"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes two arguments, r and h, representing the radius and height of the cone respectively.\n    It returns the lateral surface area of the cone as a float value.\n    '''\n    return math.pi * r**2 * h / 3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to calculate lateral surface area of cone\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r ** 2 * h\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Using Law of Cosines to find the lateral surface area of a cone\n    s = (r**2 * h**2 + r**2 * (math.tan(math.pi/6) - math.tan(math.pi/12)) + r**2 * (math.tan(math.pi/6) + math.tan(math.pi/12)) + r**2 * math.tan(math.pi/6) * math.tan(math.pi/6)) / (2 * r**2 * math.tan(math.pi/6))\n    return s"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regular expression pattern\n    pattern = r'[\\s,\\.]+'\n    # replace the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'([,\\.])')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = r'[\\s,\\.]'\n    colon_char = ':'\n    return re.sub(special_chars, colon_char, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_specialchar(text):\n    pattern = r'[\\s,\\.]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s+|,|\\.')\n    text = pattern.sub(':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colon\n    text = re.sub(r'\\s+', ':', text)\n    # Replace commas with colon\n    text = re.sub(r',', ':', text)\n    # Replace dots with colon\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"[^\\w\\s]\", \"\", text)\n    text = re.sub(r\"\\s+\", \":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_specialchar(text):\n    return re.sub(r'\\s+|,+|\\..+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s|,|.|:|!|?'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the leftmost index that is greater than or equal to x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    # Return the index of the leftmost occurrence of x\n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    for i in range(1, len(A)):\n        if A[i] == x:\n            return i\n        elif A[i] > x:\n            return index\n    return None"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize first occurrence index to -1\n    first_occurrence_index = -1\n\n    # loop through the array\n    for i in range(len(A)):\n        # if x is equal to the current element, set the first occurrence index to i\n        if A[i] == x:\n            first_occurrence_index = i\n\n    # return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the index of the first occurrence to -1\n    index = -1\n\n    # Traverse the array from the left to right\n    for i in range(len(A)):\n\n        # If the current element is equal to the given number\n        if A[i] == x:\n\n            # If the current index is -1, update it to the current index\n            if index == -1:\n                index = i\n\n            # If the current index is already set, but the current element is smaller, update the index\n            elif i < index:\n                index = i\n\n    # Return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index to the first element of the array\n    i = 0\n\n    # Iterate through the array until we find the first occurrence of x\n    while i < len(A) and A[i] < x:\n        i += 1\n\n    # If we didn't find x in the array, return -1\n    if i == len(A) or A[i]!= x:\n        return -1\n\n    # If we found x in the array, return its index\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index to -1\n    index = -1\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # If the right pointer is less than 0\n    while right >= 0:\n        # Calculate the midpoint of the current range\n        mid = (left + right) // 2\n        \n        # If the element at the midpoint is equal to the given number\n        if A[mid] == x:\n            # Set the index to the midpoint\n            index = mid\n            # Move the right pointer to the left of the midpoint\n            right = mid - 1\n        # If the element at the midpoint is less than the given number\n        elif A[mid] < x:\n            # Move the left pointer to the right of the midpoint\n            left = mid + 1\n        # If the element at the midpoint is greater than the given number\n        else:\n            # Move the right pointer to the left of the midpoint\n            right = mid - 1\n            \n    # Return the index of the first occurrence of the number\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number x in a sorted array A.\n\n    Args:\n        A (list): A sorted array.\n        x (int): A number to search for in the array.\n\n    Returns:\n        int: The index of the first occurrence of x in A, or -1 if x is not found.\n    \"\"\"\n\n    # Initialize left and right pointers to the first and last indices of A\n    left = 0\n    right = len(A) - 1\n\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # Loop until the left pointer is greater than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, update first_occurrence_index and move left pointer to mid+1\n        if A[mid] == x:\n            first_occurrence_index = mid\n            left = mid + 1\n\n        # If the middle element is greater than x, move the right pointer to mid-1\n        elif A[mid] > x:\n            right = mid - 1\n\n        # If the middle element is less than x, move the left pointer to mid+1\n        else:\n            left = mid + 1\n\n    # Return the index of the first occurrence of x\n    return first_occurrence_index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Initialize a boolean array to keep track of the prefix sums\n    prefix_sum = [0] * (n+1)\n\n    # Calculate the prefix sums\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    # Initialize the sum of products\n    result = 0\n\n    # Iterate over all sublists of length k\n    for k in range(1, n+1):\n\n        # Calculate the product of the sublist\n        product = 1\n        for i in range(k):\n            product *= arr[i]\n\n        # Iterate over all possible starting indices of the sublist\n        for start in range(n-k+1):\n\n            # Calculate the sum of products of the sublist\n            temp_result = 0\n            for i in range(start, start+k):\n                temp_result += prefix_sum[i+1] - prefix_sum[i]\n            result += temp_result * product\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Creating a new list to store the products of subarrays\n    product_list = []\n    \n    # Traversing through the array\n    for i in range(len(arr)):\n        \n        # Resetting the product of the subarray\n        subarray_product = 1\n        \n        # Traversing through the remaining elements of the array\n        for j in range(i+1, len(arr)):\n            \n            # Adding the product of the current element with the subarray_product\n            subarray_product *= arr[j]\n            \n            # Adding the subarray_product to the product_list\n            product_list.append(subarray_product)\n    \n    # Finding the sum of all products in the product_list\n    sum_of_products = sum(product_list)\n    \n    # Returning the sum of products\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product = 1\n    subarray_product = []\n    prefix_product = [1] * n\n    suffix_product = [1] * n\n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i - 1] * arr[i - 1]\n        suffix_product[i] = suffix_product[i - 1] * arr[i]\n\n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j + 1):\n                product *= arr[k]\n            subarray_product.append(product)\n\n    for i in range(1, n):\n        subarray_product[i] *= subarray_product[i - 1]\n\n    return sum(subarray_product)\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # if the length of the list is less than 1, return 0\n    if len(arr) < 1:\n        return 0\n    # initialize the sum of products to 0\n    sum_prod = 0\n    # iterate over the sublists of the list\n    for i in range(len(arr)):\n        # calculate the product of all elements in the sublist\n        prod = 1\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n        # add the product to the sum of products\n        sum_prod += prod\n    # return the sum of products\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the list of products of all sublists\n    prod_lst = [1] * n\n\n    # Calculate the products of all sublists\n    for i in range(1, n):\n        prod_lst[i] = prod_lst[i-1] * arr[i-1]\n\n    # Initialize the result\n    result = 0\n\n    # Calculate the sum of products of all sublists\n    for i in range(n):\n        for j in range(i, n):\n            result += prod_lst[j]\n\n    # Return the result\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    sum_prod = 0\n\n    # Calculate sum of products of subarrays\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n        sum_prod += product\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Find the sum of products of all subarrays\n    subarray_prod = 1\n    for i in range(1, len(arr)):\n        subarray_prod *= arr[i]\n    # Initialize the result\n    result = 0\n    # Iterate through the subarrays and calculate the sum of products\n    for i in range(len(arr)):\n        # Initialize the current subarray sum\n        subarray_sum = 0\n        # Iterate through the remaining elements in the subarray\n        for j in range(i, len(arr)):\n            # Calculate the current product and add it to the sum\n            subarray_sum += arr[j]\n            # Calculate the sum of products of the remaining elements in the subarray\n            result += subarray_prod * subarray_sum\n    # Return the sum of products\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # initialize the result to zero\n    result = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        # loop through the array again and find the maximum value\n        max_value = arr[i]\n        for j in range(i+1, len(arr)):\n            max_value = max(max_value, arr[j])\n\n        # find the sum of products of all possible sublists of length i+1\n        sublist_prod = 1\n        for k in range(i+1):\n            sublist_prod *= arr[k]\n\n        # add the sum of products of all possible sublists of length i+1 to the result\n        result += max_value * sublist_prod\n\n    # return the final result\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum of products to 0\n    sumprods = 0\n    # Initialize a list to store the products of all sublists\n    products = []\n    # Loop through each element in the list\n    for i in range(n):\n        # If i is the first element in the list, add 1 to the products list\n        if i == 0:\n            products.append(1)\n        # If i is not the first element in the list, add the product of the current element and the previous element to the products list\n        else:\n            products.append(products[i-1] * arr[i])\n    # Loop through each possible starting index i in the list\n    for i in range(n):\n        # Initialize the sum of products to 0\n        prodsum = 0\n        # Loop through each possible ending index j in the list\n        for j in range(i, n):\n            # Add the product of the sublist from i to j to prodsum\n            prodsum += products[j]\n            # If the sum of products is greater than the sum of products in the current sublist, update the sum of products in the current sublist to be the sum of products of the sublist\n            if prodsum > sumprods:\n                sumprods = prodsum\n    # Return the sum of products of all sublists\n    return sumprods"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    MOD = 10**9 + 7\n    result = 0\n    for i in range(n):\n        # subarray ending at index i\n        s = 1\n        for j in range(i+1):\n            s *= arr[j]\n            s %= MOD\n        # add the subarray product to the result\n        result += s\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # get the length of the binary representation of n\n    n_length = len(bin(n)[2:])\n    \n    # loop through all possible combinations of first and last bit toggles\n    for i in range(2**n_length):\n        # create a mask of first and last bits\n        first_bit_mask = (1 << n_length) - 1\n        last_bit_mask = 1 << n_length\n        \n        # set the middle bits to the toggled value\n        middle_bit_mask = first_bit_mask ^ last_bit_mask\n        middle_bit = ((n >> i) & middle_bit_mask) ^ ((n >> i) & (middle_bit_mask >> 1))\n        \n        # create a new binary number with the middle bit toggled\n        new_binary = bin(n ^ (1 << i))[2:]\n        \n        # convert the new binary number to an integer\n        new_integer = int(new_binary, 2)\n        \n        # check if the new integer is equal to the original integer\n        if new_integer == n:\n            # if it is, return the new binary number\n            return new_binary"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables to keep track of the bits that should be toggled\n    toggle_bits = []\n    \n    # Iterate over the bits of the number\n    for bit in bin(n)[2:]:\n        # Add the bits that should be toggled to the list\n        toggle_bits.append(int(bit))\n    \n    # Calculate the index of the first and last bits\n    first_index = 0\n    last_index = len(toggle_bits) - 1\n    \n    # Toggle the first and last bits\n    toggle_bits[first_index] = not toggle_bits[first_index]\n    toggle_bits[last_index] = not toggle_bits[last_index]\n    \n    # Calculate the new number by joining the toggled bits back together\n    new_number = 0\n    for bit in toggle_bits:\n        new_number = new_number << 1\n        new_number = new_number | bit\n    \n    return new_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # first and last bits are always 1\n    n = n ^ 0b1111111111111111111111111111111111111111111111111111111111111111\n    \n    # toggle the middle bit\n    n = n ^ 0b01010101010101010101010101010101010101010101010101010101010101\n    \n    # set the first and last bits back to 0\n    n = n ^ 0b11111111111111111111111111111111111111111111111111111111111111\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of n\n    bin_repr = bin(n)[2:]\n    # Get the length of the binary representation\n    length = len(bin_repr)\n\n    # Create a list to store the new binary representation of n\n    new_bin_repr = []\n\n    # Iterate through each bit of the binary representation of n\n    for i in range(length):\n        # If the bit is not the first or last bit, toggle the bit\n        if i % 2!= 0 and i!= length - 1:\n            # If the bit is 0, toggle it to 1\n            if bin_repr[i] == '0':\n                new_bin_repr.append('1')\n            # If the bit is 1, toggle it to 0\n            else:\n                new_bin_repr.append('0')\n        # If the bit is the first or last bit, leave it unchanged\n        else:\n            new_bin_repr.append(bin_repr[i])\n\n    # Convert the new binary representation to an integer\n    new_n = int(''.join(new_bin_repr), 2)\n\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # initialize the first and last bit of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # toggle the first and last bit of the number\n    n = (n & ~1) ^ 1 ^ ((first_bit ^ last_bit) << 31)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # find the index of the middle bit\n    mid = n.bit_length() // 2\n    # reverse the number to get the middle bits\n    mid_bits = bin(n)[mid:][::-1]\n    # iterate over the bits of the middle bits\n    for i in range(len(mid_bits)):\n        # toggle the bit\n        mid_bits[i] = '1' if mid_bits[i] == '0' else '0'\n    # reverse the bits and convert back to an integer\n    return int(mid_bits, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize left and right bits of the number\n    left_bit = 0\n    right_bit = n & 1\n    \n    # set all other bits except the left and right bits\n    n &= ~(1 << left_bit) & ~(1 << right_bit)\n    \n    # toggle left and right bits of the number\n    n ^= (1 << left_bit) ^ (1 << right_bit)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Convert binary to integer\n    n = int(n, 2)\n    # Get number of bits\n    num_bits = bin(n).count('1')\n\n    # Get the first and last bits\n    first_bit = n & (2 ** (num_bits - 1))\n    last_bit = n & (2 ** num_bits - 1)\n\n    # Get the middle bits\n    middle_bits = n & ~(first_bit | last_bit)\n\n    # Toggle middle bits\n    toggled_bits = middle_bits ^ (middle_bits & first_bit | middle_bits & last_bit)\n\n    # Convert integer back to binary and return\n    return bin(toggled_bits)[2:].zfill(num_bits)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # initialize variables\n    mask = 0\n    first_bit = n & mask\n    \n    # toggle bits of first_bit\n    for i in range(0, 32):\n        if i!= 0 and i!= 31:\n            first_bit ^= (first_bit & 1) << i\n    \n    # toggle bits of last_bit\n    last_bit = n >> 32\n    for i in range(0, 32):\n        if i!= 0 and i!= 31:\n            last_bit ^= (last_bit & 1) << i\n    \n    # combine both bits\n    result = (first_bit << 32) + last_bit\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize variables\n    first_bit = n & 1\n    last_bit = n & (2**32 - 1)\n    toggled_bits = n ^ (first_bit + last_bit)\n    middle_bits = n & ~(first_bit + last_bit)\n\n    # return the middle bits\n    return middle_bits"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    :param a: sorted list\n    :param x: value to be inserted\n    :return: index of the left insertion point\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): A sorted list of integers.\n        x (int): An integer value to be inserted in the sorted list.\n\n    Returns:\n        int: The left insertion point of x in the sorted list a.\n\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    :param a: sorted list\n    :type a: list\n    :param x: value to be inserted\n    :type x: int or float\n    :return: index of the left insertion point\n    :rtype: int\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    # Define a function to find the left insertion point\n    def find_left_insertion_point(arr, x):\n        low = 0\n        high = len(arr) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return low\n\n    # Use the bisect module to find the left insertion point\n    index = bisect.bisect_left(a, x)\n\n    # Return the left insertion point\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): Sorted list of integers.\n        x (int): Integer to be searched for.\n\n    Returns:\n        int: Index of the left insertion point for x in a.\n\n    \"\"\"\n    # Use binary search to find the insertion point\n    low = 0\n    high = len(a) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if a[mid] == x:\n            # Search left for the last occurrence of x\n            low = mid + 1\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x) - 1\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    else:\n        # Recursive case\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 + geometric_sum(n-1)) ** n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n\n    Args:\n        n (int): The value of n.\n\n    Returns:\n        int: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return (1 - (1 / n)) * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number and its index\n    smallest = 0\n    index = 0\n    \n    # Loop through the numbers from 1 to 2^n - 1 and check if each number is a triangular number\n    for i in range(1, 2**n-1):\n        triangular = i * (i+1) // 2\n        \n        # If the current number is smaller than the smallest triangular number, update the smallest and index values\n        if triangular < smallest:\n            smallest = triangular\n            index = i\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # maximum number of digits for a triangular number is n+1\n    max_triangular_digits = n+1\n    # initialize a list to store the triangular numbers\n    triangular_numbers = []\n    \n    # iterate from 1 to n+1\n    for i in range(1, max_triangular_digits+1):\n        # calculate the triangular number\n        triangular = math.comb(max_triangular_digits, i-1) * math.pow(5, i-1)\n        # add the triangular number to the list\n        triangular_numbers.append(triangular)\n        \n    # initialize a variable to store the index of the smallest triangular number\n    min_index = 0\n    \n    # iterate over the list of triangular numbers\n    for i in range(len(triangular_numbers)-1):\n        # calculate the difference between the current triangular number and the previous triangular number\n        diff = triangular_numbers[i+1] - triangular_numbers[i]\n        # if the difference is smaller than the current smallest difference, update the index and the smallest difference\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    \n    # return the index of the smallest triangular number\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    triangular_num = 0\n    for i in range(1, n+1):\n        triangular_num = triangular_num + math.pow(10, i-1)\n    \n    triangular_num = math.ceil(triangular_num)\n    \n    return triangular_num\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Using the formula: triangular number = (n*(n+1))/2 \n    # Calculate n*(n+1) \n    n_squared = n * n \n    # Calculate the sum of digits of n_squared \n    sum_of_digits = sum(int(digit) for digit in str(n_squared)) \n    # Calculate the number of digits of n_squared \n    n_digits = len(str(n_squared)) \n    # Calculate the index of the smallest triangular number with n_digits digits \n    index = (n_digits * (n_digits + 1)) // 2 - (sum_of_digits - n_squared) \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest_triangular = math.sqrt(5) * 5 // 2\n    n_digits = len(str(smallest_triangular))\n    while n_digits < n:\n        smallest_triangular = 5 * smallest_triangular + 1\n        n_digits = len(str(smallest_triangular))\n    \n    triangular_num = int(str(smallest_triangular).zfill(n))\n    index = 1\n    while True:\n        triangular_num += 1\n        triangular_str = str(triangular_num)\n        triangular_len = len(triangular_str)\n        if triangular_len == n:\n            return index\n        elif triangular_len < n:\n            triangular_str = \"0\" * (n - triangular_len) + triangular_str\n        elif triangular_len > n:\n            triangular_str = triangular_str[-n:]\n        triangular_num = int(triangular_str)\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    if n == 1:\n        return 1\n    \n    triangular_nums = []\n    triangular_nums.append(1)\n    \n    for i in range(1,n):\n        triangular_nums.append(int(math.sqrt(triangular_nums[-1]) + 1))\n    \n    smallest_triangular = min(triangular_nums)\n    \n    return triangular_nums.index(smallest_triangular) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def smallest_triangular_number(n):\n        triangular_numbers = [1]\n        i = 1\n        while len(str(triangular_numbers[-1])) < n:\n            triangular_numbers.append(triangular_numbers[-1] + i)\n            i += 1\n        return triangular_numbers[-1]\n\n    triangular_numbers = smallest_triangular_number(n)\n    smallest_triangular = math.floor(triangular_numbers * 1.0 / 2)\n    smallest_triangular = int(smallest_triangular)\n    index_of_smallest_triangular = 1 + smallest_triangular\n    return index_of_smallest_triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Function to find the smallest triangular number with n digits\n    def find_SmallestTriangularNumber(n): \n        # Initialize variables \n        smallest = math.ceil(10**(n-1)) \n        max_triangular = 10**(n) \n        triangular = 0 \n        index = 0 \n        count = 0 \n        while triangular < max_triangular: \n            count += 1 \n            triangular += smallest \n            index += 1 \n            if triangular == max_triangular: \n                break \n        return index - count\n\n    # Find the smallest triangular number with n digits \n    smallest_triangular = find_SmallestTriangularNumber(n) \n    return smallest_triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the smallest triangular number that has n digits\n    triangular_number = 10**(n-1)\n    # Find the index of the smallest triangular number\n    index = math.ceil(math.log10(triangular_number))\n    # Return the index\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    def triangular_number(n):\n        return n * (n + 1) // 2\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_triangular(num):\n        return triangular_number(len(str(num))) == num\n    \n    index = 0\n    triangular_num = triangular_number(n)\n    \n    while not is_triangular(triangular_num):\n        index += 1\n        triangular_num = triangular_number(n)\n    \n    return index\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    i = 0\n    while i < len(test_tup) - 1:\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n        i += 2\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    test_dict = {}\n    # Iterate through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    # loop through the given tuple\n    for i in range(len(test_tup) - 1):\n        # append the first element of the tuple to the dictionary\n        result_dict[i] = test_tup[i]\n        # append the second element of the tuple to the dictionary\n        result_dict[i+1] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    dict_ = {}\n    # Loop through the tuple\n    for i in range(len(test_tup)):\n        # If the index is even, add the current element to the dictionary as key and the next element as value\n        if i % 2 == 0:\n            dict_[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Convert the tuple to a dictionary using zip function\n    dict_tup = dict(zip(test_tup, test_tup[1:]))\n    return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: The given tuple should have an even number of elements.\")\n        return None\n    \n    dict_obj = {}\n    \n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    \n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i:test_tup[i+1] for i in range(len(test_tup)-1)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through the list and add the pairs of adjacent elements as key-value pairs to the dictionary\n    for i in range(len(test_list)):\n        result_dict[test_list[i]] = test_list[i+1]\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    # loop through each character in the string\n    for i in range(len(s)):\n        # compare the current character to the next character\n        if s[i]!= s[i+1]:\n            # if the characters are not the same, return False\n            return False\n    # if all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert string to lowercase\n    s = s.lower()\n    # get the first character\n    first_char = s[0]\n    # check if all characters are the same\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase\n    s = s.lower()\n    # Get the first character of the string\n    first_char = s[0]\n    # Iterate through the string to check whether all the characters are same or not\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # initialize a variable to store the first character of the string\n    first_char = s[0]\n    # loop through the string and check if all characters are same\n    for char in s:\n        if char!= first_char:\n            return False\n    # if all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif s[0]!= s[-1]:\n        return False\n    else:\n        return all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to a list\n    lst = list(s)\n\n    # check if the length of the list is 1\n    if len(lst) == 1:\n        return True\n    \n    # check if all the characters in the list are the same\n    for i in range(1, len(lst)):\n        if lst[i]!= lst[0]:\n            return False\n    \n    # all characters are the same\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6*side**2 / (4*math.tan(math.pi/5))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula to calculate area of tetrahedron\n    area = math.sqrt(3) / 4 * side ** 2\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*side**2*math.tan(math.pi/3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    area = 0.5 * side**2 * math.sin(math.pi/3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base_area = math.pi * (side ** 2) / 6\n    return base_area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side ** 2 * math.sqrt(2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the area using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2) ** (1/2)\n    area = (1/6) * s * math.sqrt(3)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    area = (1/3) * side ** 3\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Reverse the entire list\n    list = list[::-1]\n    # Reverse the sublist starting from index 0 to index m-1\n    list = list[:m][::-1] + list[m:]\n    # Reverse the entire list\n    list = list[::-1]\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # Ensure that m is less than n\n    \n    # Reverse the first m elements of the list\n    list[:m] = reversed(list[:m])\n    list[m:] = reversed(list[m:])\n    \n    # Reverse the entire list\n    list[:] = reversed(list)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Get the length of the list\n    n = len(list)\n    # Initialize the index of the last item to rotate\n    last = n - 1\n    # Rotate the list\n    for i in range(m):\n        # Move the first item to the end of the list\n        list[0], list[last] = list[last], list[0]\n        # Decrement the index of the last item to rotate\n        last -= 1\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Reverse the list\n    list = list[::-1]\n    \n    # Get the length of the list\n    length = len(list)\n    \n    # Check if the number of items to be rotated is greater than the length of the list\n    if n >= length:\n        # If it is, rotate the entire list by n items\n        for _ in range(n):\n            list.append(list.pop(0))\n    else:\n        # If not, rotate the first n items and then rotate the remaining items by n items\n        for _ in range(n):\n            list.append(list.pop(0))\n        for _ in range(length - n):\n            list.insert(0, list.pop())\n    \n    # Reverse the list again\n    list = list[::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number as input and rotates the list to the right direction by the specified number of items.\n\n    Args:\n        lst (list): List to be rotated.\n        m (int): Number of items to be rotated.\n\n    Returns:\n        list: Rotated list.\n\n    \"\"\"\n    n = len(lst)\n    m %= n\n    # Reverse the entire list\n    lst = lst[::-1]\n    # Reverse the first m elements of the list\n    lst[:m] = lst[:m][::-1]\n    # Reverse the last n-m elements of the list\n    lst[m:] = lst[m:][::-1]\n    # Reverse the entire list again to obtain the rotated list\n    return lst[::-1]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:]+list[:m], list[:m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    This function checks if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_val = False\n    for item in test_tup:\n        if item is None:\n            none_val = True\n            break\n    return none_val"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for i in test_tup:\n        if i is None:\n            none_count += 1\n    return none_count!= len(test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n\n    # Loop through each number in the range\n    for num in range(startnum, endnum + 1):\n\n        # Split the number into digits\n        digits = [int(digit) for digit in str(num)]\n\n        # Check if all digits are divisible by 1, 2, 3,... 9\n        if all(digit % 1 == 0 for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Define a lambda function to check if a number is divisible by any digit\n    divisible_by_digit = lambda x: all(digit in str(x) for digit in str(x))\n    \n    # Use a list comprehension to find all numbers within the given range that are divisible by every digit\n    result = [x for x in range(startnum, endnum+1) if divisible_by_digit(x)]\n    \n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % 2 == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(digit) % num == 0 for digit in str(num))\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num):\n        \"\"\"\n        Check if a given number is divisible by every digit.\n        \"\"\"\n        return all(d in str(num) for d in str(num))\n\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # define a lambda function that takes a number and returns True if it is divisible by every digit it contains, False otherwise\n    is_divisible = lambda x: all(int(digit) % int(digit) for digit in str(x))\n\n    # iterate over the range of numbers between startnum and endnum\n    for num in range(startnum, endnum+1):\n        # check if the current number is divisible by every digit it contains\n        if is_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit % num == 0 for digit in str(x)), range(startnum, endnum + 1)))\n\nprint(divisible_by_digits(100, 200)) # [120, 240, 360]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1))\n    return list(result)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n\n    # Convert angle from degrees to radians\n    angle_rad = math.radians(a)\n\n    # Calculate area of sector\n    area = r * r * angle_rad\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Convert angle from degrees to radians\n    a = math.radians(a)\n\n    # Calculate area of sector\n    area = r * a\n    \n    # Check if angle is larger than 360 degrees\n    if a > math.pi*2:\n        return None\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is within 360 degrees\n    if a > 360:\n        return None\n\n    # Calculate area of a sector using Heron's formula\n    s = 2 * r * math.sin(math.radians(a/2))\n    area = math.sqrt(s * (s-r) * (s-2*r))\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate the area using the formula: area = pi * r * r * sin(theta/2)\n    area = math.pi * r * r * math.sin(math.radians(a)/2)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * r ** 2 * a / 360\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Base case: If any of the strings is empty, return an empty string\n    if not X or not Y or not Z:\n        return \"\"\n\n    # Initialize variables for rows and columns\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of LCS of all three strings\n    L = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Fill the table in bottom-up fashion\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Initialize variables for LCS\n    i, j, k = m, n, o\n    lcs = \"\"\n\n    # Traverse the table to find the LCS\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i - 1][j][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    L = [[0 for j in range(p + 1)] for i in range(m + 1)]\n\n    # Step 1\n    for i in range(m + 1):\n        for j in range(p + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Step 2\n    i = m\n    j = p\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p + 1) for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    lcs = []\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j - 1][k]:\n            i -= 1\n        elif dp[i][j - 1][k] == dp[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(lcs[::-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a table to store lengths of LCS for every possible combination of strings\n    table = [[0] * (len(Z) + 1) for _ in range(len(X) + 1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i-1] == Z[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Print the LCS\n    i, j = len(X), len(Z)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the list of LCS and return it\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    M = len(X)\n    N = len(Y)\n    O = len(Z)\n\n    # Create a table to store lengths of longest common subsequences of prefixes of X, Y, Z\n    L = [[0] * (O + 1) for _ in range(M + 1)]\n\n    # Build table L in bottom up manner\n    for i in range(1, M + 1):\n        for j in range(1, N + 1):\n            for k in range(1, O + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                elif X[i - 1] == Y[j - 1]:\n                    L[i][j][k] = L[i - 1][j][k]\n                elif Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i][j - 1][k]\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Find the length of longest common subsequence\n    max_length = L[M][N][O]\n\n    # Initialize variables to store index of characters in X, Y, Z\n    i, j, k = M, N, O\n\n    # Initialize a list to store characters of longest common subsequence\n    lcs = []\n\n    # Add characters of longest common subsequence in decreasing order of length\n    while max_length > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n            max_length -= 1\n        elif X[i - 1] == Y[j - 1]:\n            i -= 1\n            max_length -= 1\n        elif Y[j - 1] == Z[k - 1]:\n            j -= 1\n            max_length -= 1\n        else:\n            k -= 1\n\n    # Reverse the list to get the correct order of characters in the LCS\n    lcs = lcs[::-1]\n\n    # Return the length of the LCS and the characters of the LCS\n    return max_length, lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    # Initialize variables\n    lenX, lenY, lenZ = len(X), len(Y), len(Z)\n    table = [[0] * (lenZ + 1) for _ in range(lenX + 1)]\n    \n    # Fill the table\n    for i in range(lenX + 1):\n        for j in range(lenY + 1):\n            for k in range(lenZ + 1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    table[i][j][k] = table[i - 1][j - 1][k - 1] + 1\n                else:\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i][j][k - 1])\n    \n    # Find the LCS\n    i, j, k = lenX, lenY, lenZ\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i - 1][j][k] == table[i][j - 1][k]:\n            i -= 1\n        elif table[i][j - 1][k] == table[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    # Reverse the LCS\n    return ''.join(reversed(lcs))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # find the lengths of the strings\n    n, m, l = len(X), len(Y), len(Z)\n    \n    # create a table to store the lengths of the LCS for subproblems\n    table = [[0] * (m + 1) for i in range(n + 1)]\n    \n    # fill the table using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n    \n    # trace the LCS back through the table\n    i, j = n, m\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif table[i - 1][j] > table[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # reverse the list to get the lcs\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    # create a dictionary to store the lengths of subsequences of X, Y, and Z\n    dp = {}\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            for k in range(len(Z) + 1):\n                # if all characters are same, then length of lcs is 1 + length of lcs of X and Y and Z\n                if i == 0 and j == 0 and k == 0:\n                    dp[(i, j, k)] = 1\n                # if all characters are same and same in X, Y, Z, then length of lcs is 1 + length of lcs of X and Y and Z\n                elif i == 0 and j == 0 and X[k - 1] == Y[k - 1] == Z[k - 1]:\n                    dp[(i, j, k)] = 1 + dp[(i, j, k - 1)]\n                # if characters are different in X and Y, then length of lcs is maximum of length of lcs of X and Y and Z\n                elif X[i - 1]!= Y[j - 1]:\n                    dp[(i, j, k)] = max(dp[(i - 1, j, k)], dp[(i, j - 1, k)], dp[(i, j, k - 1)])\n                # if characters are same in X and Y, then length of lcs is length of lcs of X and Y and Z - 1\n                else:\n                    dp[(i, j, k)] = 1 + dp[(i - 1, j - 1, k - 1)]\n    \n    # initialize variables to store the lcs of X, Y, and Z\n    lcs_X = \"\"\n    lcs_Y = \"\"\n    lcs_Z = \"\"\n    \n    # fill the lcs_X, lcs_Y, and lcs_Z variables using the dp dictionary\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs_X = X[i - 1] + lcs_X\n            i -= 1\n            j -= 1\n        elif X[i - 1] < Y[j - 1]:\n            if X[i - 1] in Z and Y[j - 1] in Z:\n                lcs_X = X[i - 1] + lcs_X\n                lcs_Y = Y[j - 1] + lcs_Y\n                lcs_Z = X[i - 1] + lcs_Z\n                i -= 1\n                j -= 1\n            elif X[i - 1] in Z:\n                lcs_X = X[i - 1] + lcs_X\n                i -= 1\n            else:\n                lcs_Y = Y[j - 1] + lcs_Y\n                j -= 1\n        else:\n            if X[i - 1] in Z and Y[j - 1] in Z:\n                lcs_Y = Y[j - 1] + lcs_Y\n                lcs_X = X[i - 1] + lcs_X\n                lcs_Z = X[i - 1] + lcs_Z\n                i -= 1\n                j -= 1\n            elif Y[j - 1] in Z:\n                lcs_Y = Y[j - 1] + lcs_Y\n                j -= 1\n            else:\n                lcs_X = X[i - 1] + lcs_X\n                i -= 1\n    \n    # return the lcs of X, Y, and Z\n    return lcs_X, lcs_Y, lcs_Z"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n\n    :param X: First string sequence\n    :param Y: Second string sequence\n    :param Z: Third string sequence\n    :return: Returns the longest common subsequence of the three input strings.\n    \"\"\"\n\n    # Convert all the strings to lists of characters\n    X = list(X)\n    Y = list(Y)\n    Z = list(Z)\n\n    # Initialize the base case to an empty list\n    lcs = []\n\n    # Initialize two variables for the current lengths of the LCS\n    i, j = 0, 0\n\n    # Iterate through the three string sequences\n    while i < len(X) and j < len(Y) and i < len(Z):\n        # Compare the characters at the current positions of the three strings\n        if X[i] == Y[j] and X[i] == Z[i]:\n            # If they are equal, append the character to the LCS and move to the next positions\n            lcs.append(X[i])\n            i += 1\n            j += 1\n            k = 1\n        elif X[i] == Y[j]:\n            # If X is shorter, move to the next character in Y\n            i += 1\n            k = 1\n        elif X[i] == Z[j]:\n            # If X is shorter, move to the next character in Z\n            j += 1\n            k = 1\n        elif Y[j] == Z[i]:\n            # If Y is shorter, move to the next character in X\n            i += 1\n            k = 1\n\n    # Return the LCS as a string\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Step 1: Create a 3D table to store LCS of three strings\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    table = [[[0]*(p+1) for j in range(m+1)] for i in range(n+1)]\n\n    # Step 2: Fill the table using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Step 3: Backtrack to find the LCS\n    lcs = []\n    i = n\n    j = m\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i-1][j][k-1]:\n            i -= 1\n        elif table[i][j-1][k] == table[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS and return it as a string\n    lcs = ''.join(reversed(lcs))\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', string)\n\n    # Join the words with spaces between them\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    words = re.findall(r'\\b\\w+\\b', str1)\n    capitalized_words = []\n    for word in words:\n        capitalized_word = word.capitalize()\n        capitalized_words.append(capitalized_word)\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Define a regular expression pattern to match capitalized words\n    pattern = r'\\b[a-z]+\\b'\n    # Split the string into words\n    words = re.findall(pattern, str1)\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Use regular expressions to match words that start with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Replace the matched words with spaces\n    result = re.sub(pattern, r'\\1 ', str1)\n    # Remove leading and trailing spaces and return the modified string\n    return result.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Convert the string to lowercase and split it into words\n    words = re.findall(r'\\b[a-z][a-z]+\\b', str1.lower())\n\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z]'\n    words = re.findall(pattern, str1)\n    words_with_spaces =''.join(words)\n    return words_with_spaces"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub('[^a-zA-Z0-9\\s]', '', str1)\n    # Split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w', str1)\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove any non-alphanumeric characters from the string\n    str1 = re.sub('[^a-zA-Z0-9\\s]+', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word and join them with spaces\n    new_words = [word[0].upper() + word[1:].lower() for word in words]\n    return''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    return \" \".join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Use regular expressions to match words with capital letters at the beginning and replace them with spaces\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    str1 = re.sub(r'\\b[A-Z][a-z]*\\b', r' \\1', str1)\n    \n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # split the list into a list of numbers and a list of strings\n    nums = [float(x) for x in nums_str if x.isnumeric()]\n    strings = [x for x in nums_str if not x.isnumeric()]\n    \n    # sort the numbers numerically\n    nums.sort()\n    \n    # concatenate the sorted numbers and strings lists\n    result = nums + strings\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # create a list of numbers from the strings in the list\n    nums = [float(num) for num in nums_str]\n    # sort the list in numeric order\n    nums.sort()\n    # create a list of strings from the sorted list\n    sorted_nums_str = [str(num) for num in nums]\n    # return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to integers and sort them in numeric order\n    nums_int = sorted([int(x) for x in nums_str])\n    # Convert integers back to strings and return the sorted list\n    return [''.join(str(x)) for x in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: (int(x) if x.isdigit() else float('inf'), x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all string elements to floats\n    nums_float = [float(num) for num in nums_str]\n\n    # Sort the list in numeric order\n    nums_float.sort()\n\n    # Convert back to strings\n    sorted_nums_str = [str(num) for num in nums_float]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings as input and sorts them numerically.\n    \"\"\"\n    # remove any non-numeric characters from the list of strings\n    nums_str = [num for num in nums_str if num.isdigit()]\n    # convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # sort the list of integers using the built-in sorted() function\n    nums_sorted = sorted(nums)\n    # convert the sorted list of integers back to a list of strings and return it\n    return [str(num) for num in nums_sorted]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_list = []\n    for string in nums_str:\n        try:\n            num_list.append(int(string))\n        except ValueError:\n            continue\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to numeric values\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to strings\n    result = [str(num) for num in nums]\n\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = [float(x) for x in nums_str]\n    nums.sort()\n    return [str(x) for x in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(\"The updated list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # create a new list that contains all elements of the input list and the input tuple\n    new_list = test_list + test_tup\n    # print the new list\n    print(new_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # create a new list to store the result\n    result_list = []\n    \n    # iterate through the given list and append each element to the result list\n    for elem in test_list:\n        result_list.append(elem)\n    \n    # iterate through the given tuple and append each element to the result list\n    for elem in test_tup:\n        result_list.append(elem)\n    \n    # return the result list\n    return result_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    elif i*2+1 <= len(arr)-1 and arr[i] > arr[i*2+1]:\n        return False\n    else:\n        return True\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] >= arr[2*i+1] and arr[i] >= arr[2*i+2]:\n        return False\n    if arr[2*i+1] < arr[2*i+2]:\n        return check_min_heap_helper(arr, 2*i+1)\n    else:\n        return check_min_heap_helper(arr, 2*i+2)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_index = i\n\n    if left < len(arr) and arr[left] < arr[min_index]:\n        min_index = left\n\n    if right < len(arr) and arr[right] < arr[min_index]:\n        min_index = right\n\n    if min_index!= i:\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        check_min_heap_helper(arr, min_index)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(n - 1, 0, -1):\n        if arr[i] < arr[0]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        # if i is greater than half of the array, then it is a valid min heap\n        return True\n    else:\n        # if i is less than half of the array, then it is not a valid min heap\n        return False\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    if arr[i] < arr[parent]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[(i-1)//2]:\n        return False\n    if i < len(arr)-1 and arr[i] > arr[(i+1)//2]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case\n    if i == 0:\n        return True\n\n    # Check if the current element is smaller than its parent\n    if arr[i] < arr[i // 2]:\n        return False\n\n    # Recursively check if the parent is also a min heap\n    return check_min_heap_helper(arr, i // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if i is greater than 0, then check if the parent of i is smaller\n    if i > 0 and arr[i] < arr[i//2]:\n        # if parent is smaller, return False\n        return False\n    # if i is not greater than 0, then it means that i is the root of the heap\n    # and therefore it is always a min heap\n    return True\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    # iterate through the array and check if each element is smaller than or equal to its children\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            # if any element is smaller than or equal to its children, then return False\n            return False\n    # if all elements are smaller than or equal to their children, then return True\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] >= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 43\n    elif n == 8:\n        return 85\n    elif n == 9:\n        return 171\n    elif n == 10:\n        return 341\n    elif n == 11:\n        return 683\n    elif n == 12:\n        return 1365\n    elif n == 13:\n        return 2731\n    elif n == 14:\n        return 5461\n    elif n == 15:\n        return 10923\n    elif n == 16:\n        return 21845\n    elif n == 17:\n        return 43691\n    elif n == 18:\n        return 87382\n    elif n == 19:\n        return 174763\n    elif n == 20:\n        return 349526\n    elif n == 21:\n        return 699052\n    elif n == 22:\n        return 1398104\n    elif n == 23:\n        return 2796208\n    elif n == 24:\n        return 5592416\n    elif n == 25:\n        return 11184831\n    elif n == 26:\n        return 22369662\n    elif n == 27:\n        return 44739324\n    elif n == 28:\n        return 89478648\n    elif n == 29:\n        return 178957296\n    elif n == 30:\n        return 357914591\n    elif n == 31:\n        return 715829182\n    elif n == 32:\n        return 1431658364\n    elif n == 33:\n        return 2863316728\n    elif n == 34:\n        return 5726633456\n    elif n == 35:\n        return 11453266912\n    elif n == 36:\n        return 22906533824\n    elif n == 37:\n        return 45813067648\n    elif n == 38:\n        return 91626135296\n    elif n == 39:\n        return 183252270592\n    elif n == 40:\n        return 366504541184\n    elif n == 41:\n        return 733009082368\n    elif n == 42:\n        return 1466018164736\n    elif n == 43:\n        return 2932036329472\n    elif n == 44:\n        return 5864072658944\n    elif n == 45:\n        return 11728145317888\n    elif n == 46:\n        return 23456290635776\n    elif n == 47:\n        return 46912581271552\n    elif n == 48:\n        return 93825162543104\n    elif n == 49:\n        return"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    jacobsthal_num = 1\n    count = 1\n\n    while count <= n:\n        jacobsthal_num = a + b\n        a = b\n        b = jacobsthal_num\n        count += 1\n\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    jacobsthal_numbers = [0, 1, 1]  # Start with the first three jacobsthal numbers\n    for i in range(3, n + 1):\n        jacobsthal_numbers.append(jacobsthal_numbers[i - 1] + jacobsthal_numbers[i - 2])\n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal_lst = []\n    jacobsthal_lst.append(0)\n    jacobsthal_lst.append(1)\n    for i in range(2, n+1):\n        jacobsthal_lst.append(jacobsthal_lst[i-1] + jacobsthal_lst[i-2])\n    return jacobsthal_lst[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    # Initialize variables for the jacobsthal number and the previous jacobsthal number\n    j = 1\n    p = 1\n\n    # Loop through the range of numbers up to n\n    for i in range(1, n+1):\n        # Calculate the jacobsthal number\n        j = (j * p) // i\n        # Calculate the previous jacobsthal number\n        p = (p * j) % i\n\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n):\n    for i in range(2, n + 1):\n        if is_prime(i) and n % i == 0:\n            return i\n    return None\n\ndef jacobsthal_num(n):\n    jacobsthal_count = 0\n    jacobsthal_num = 1\n    while jacobsthal_count < n:\n        jacobsthal_num = (jacobsthal_num * 2) % 4\n        jacobsthal_count += 1\n    return jacobsthal_num\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    jacobsthal_num_n = jacobsthal_num(n)\n    print(f\"The {n}th Jacobsthal number is: {jacobsthal_num_n}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Find minimum k records from tuple list.\n    \"\"\"\n    # Sort the list of tuples based on the second element (i.e., the second field)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize the minimum count as infinity\n    min_count = float('inf')\n    \n    # Initialize the index to the start of the sorted list\n    index = 0\n    \n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        # If the count of the current tuple is less than the minimum count, update the minimum count and the index\n        if sorted_list[i][0] < min_count:\n            min_count = sorted_list[i][0]\n            index = i\n    \n    # Return the minimum count and the index where the minimum count was found\n    return min_count, index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    min_list = []\n    for tup in test_list:\n        if len(min_list) < K:\n            min_list.append(tup)\n        else:\n            min_list = [min(min_list, key=lambda x: x[1]), tup]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i][0])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[0])  # sort by first element of tuple\n    min_lst = []\n    for i in range(len(test_list)-K):\n        min_lst.append(test_list[i])\n    return min_lst"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    test_list.sort(key=lambda x: x[1])\n    min_list = []\n    for i in range(len(test_list)-K):\n        min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples based on the second element\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize the minimum number of records found so far\n    min_k_count = 0\n    \n    # Initialize the minimum value of the second element\n    min_val = float('inf')\n    \n    # Initialize the index of the minimum value\n    min_index = None\n    \n    # Iterate through the sorted list of tuples\n    for i in range(K):\n        # If the value in the second element is smaller than the minimum value, update the minimum value and the index of the minimum value\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_index = i\n        \n        # If the current record has the same value as the minimum value, increment the minimum number of records found so far\n        if min_val == test_list[i][1]:\n            min_k_count += 1\n    \n    # Return the minimum number of records found\n    return min_k_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i][0] < min_list[0][0]:\n                min_list = [test_list[i]]\n            elif test_list[i][0] == min_list[0][0] and test_list[i][1] < min_list[0][1]:\n                min_list = [test_list[i]]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i][0] < min_list[0][0]:\n                min_list = [test_list[i]]\n            elif test_list[i][0] == min_list[0][0]:\n                if test_list[i][1] < min_list[0][1]:\n                    min_list = [test_list[i]]\n            if len(min_list) == K:\n                break\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the count of each key in the list\n    count = {}\n    # loop through the list and update the count dictionary\n    for i in test_list:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    # sort the count dictionary in descending order of values\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    # initialize an empty list to store the minimum K records\n    min_k_records = []\n    # loop through the sorted count dictionary and add the keys to the min_k_records list\n    for i in range(K):\n        min_k_records.append(sorted_count[i][0])\n    # return the min_k_records list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return None\n\n    min_list = []\n    for i in range(len(test_list)-K+1):\n        min_list.append(min(test_list[i:i+K]))\n\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Iterate through all indices of the first list\n    for i in range(len(l1)):\n        # If the element at the current index is present in all three lists, add it to the common elements list\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # create a set of common elements in all three lists\n    common_elements = set(l1) & set(l2) & set(l3)\n    \n    # create a dictionary to map each element in l1 to its index in the list\n    index_map = {}\n    for i, elem in enumerate(l1):\n        index_map[elem] = i\n    \n    # create an empty list to store the common elements\n    common_list = []\n    \n    # iterate through each element in common_elements\n    for elem in common_elements:\n        # find its index in l1\n        index1 = index_map[elem]\n        \n        # iterate through each list\n        for l in [l1, l2, l3]:\n            # find its index in the list\n            index2 = index_map[l[index1]]\n            \n            # if the indices are the same, add the element to the common list\n            if index1 == index2:\n                common_list.append(elem)\n    \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the count of each element in each list\n    count1 = {}\n    count2 = {}\n    count3 = {}\n    \n    # Iterate through each element in l1 and l2\n    for elem in l1 + l2:\n        # If the element is not in count1, add it with a count of 1\n        if elem not in count1:\n            count1[elem] = 1\n        else:\n            # If the element is already in count1, increment its count by 1\n            count1[elem] += 1\n    \n    # Iterate through each element in l3 and increment its count in count2 if it is in count1\n    for elem in l3:\n        if elem in count1:\n            count2[elem] = 1\n        else:\n            count2[elem] = 0\n    \n    # Iterate through count1 and count2 and combine the two dictionaries\n    common_elems = {}\n    for elem, count in count1.items():\n        if count == 1 and elem in count2:\n            common_elems[elem] = count\n    \n    # Return the common elements as a list\n    return list(common_elems.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the frequency of each element in each list\n    freq_dict1 = {}\n    freq_dict2 = {}\n    freq_dict3 = {}\n    \n    # Iterate through each element in each list and add it to the corresponding dictionary\n    for elem in l1:\n        freq_dict1[elem] = freq_dict1.get(elem, 0) + 1\n        \n    for elem in l2:\n        freq_dict2[elem] = freq_dict2.get(elem, 0) + 1\n        \n    for elem in l3:\n        freq_dict3[elem] = freq_dict3.get(elem, 0) + 1\n        \n    # Iterate through the first list and check if each element is common for all three lists\n    common_list = []\n    for elem in l1:\n        if (elem in freq_dict1 and freq_dict1[elem] == 1 and\n            elem in freq_dict2 and freq_dict2[elem] == 1 and\n            elem in freq_dict3 and freq_dict3[elem] == 1):\n            common_list.append(elem)\n        \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Find the second smallest number in a list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The second smallest number in the list.\n    '''\n    if len(numbers) < 2:\n        return None\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least 2 numbers.\")\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    # find the second smallest number\n    second_smallest = numbers[-2]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    first_smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = number\n        elif number < second_smallest and number!= first_smallest:\n            second_smallest = number\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = min(numbers)\n        second_smallest = min(set(numbers) - {smallest})\n        return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab{1,}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b.*)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(s):\n    '''\n    Check if a given string is a reverse of its own\n    '''\n    return s == s[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # Check if the substring from i to j is a reverse of the substring from j to i\n            if test_list[i][:j] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Sort the list in non-descending order\n    test_list.sort()\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Iterate over the list\n    for i in range(len(test_list)):\n        # Check if the next string in the list is in reverse\n        j = len(test_list) - 1\n        while j > i and test_list[j] == test_list[i][::-1]:\n            j -= 1\n        # If we find a reverse string, check if it's in the list\n        if j > i:\n            count += j - i - 1\n            \n    # Return the count of pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create an empty dictionary\n    sublist_dict = {}\n\n    # Loop through each element in the list\n    for item in list1:\n        # Convert the element to a tuple\n        item_tuple = tuple(item)\n\n        # Check if the tuple is already in the dictionary\n        if item_tuple in sublist_dict:\n            # Increment the count of the tuple\n            sublist_dict[item_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            sublist_dict[item_tuple] = 1\n\n    # Return the dictionary\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each tuple\n    count_dict = {}\n    # iterate through the list\n    for i in list1:\n        # convert the list to a tuple and count its occurrences in the original list\n        count = len([item for item in list1 if item == i])\n        # add the tuple and its count to the dictionary\n        count_dict[(i,)] = count\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count:\n            count[sublist_tuple] += 1\n        else:\n            count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    count = {}\n    \n    # Iterate through each element in the list\n    for elem in list1:\n        # Convert the element to a tuple\n        tup = tuple(elem)\n        \n        # If the tuple is not in the dictionary, add it with value 1\n        if tup not in count:\n            count[tup] = 1\n        # Otherwise, increment the value of the tuple by 1\n        else:\n            count[tup] += 1\n            \n    # Return the count dictionary\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of sublists\n    counts = {}\n\n    # Loop through each list in the original list\n    for i in range(len(list1)):\n        # Convert each list to a tuple to check for duplicates\n        tuple_list = tuple(list1[i])\n        # If the tuple is already in the dictionary, increment its count\n        if tuple_list in counts:\n            counts[tuple_list] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[tuple_list] = 1\n\n    # Return the dictionary with the counts of sublists\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_lists = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in unique_lists:\n            unique_lists[sublist] += 1\n        else:\n            unique_lists[sublist] = 1\n    return unique_lists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for item in list1:\n        for sublist in list(item):\n            if sublist not in list_dict:\n                list_dict[sublist] = 1\n            else:\n                list_dict[sublist] += 1\n    return list_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    \n    # Iterate through each element in the list\n    for element in list1:\n        # Convert the element to a tuple\n        element_tuple = tuple(element)\n        \n        # Check if the tuple exists in the count dictionary\n        if element_tuple in count_dict:\n            # Increment the count of the tuple by 1\n            count_dict[element_tuple] += 1\n        else:\n            # Add the tuple to the count dictionary with a count of 1\n            count_dict[element_tuple] = 1\n            \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Creating a dictionary to store the count of each unique sublist\n    count_dict = {}\n\n    # Looping through the list of lists\n    for sublist in list1:\n        # Converting the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Checking if the sublist tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            # Incrementing the count if it is already in the dictionary\n            count_dict[sublist_tuple] += 1\n        else:\n            # Adding the sublist tuple and its count to the dictionary\n            count_dict[sublist_tuple] = 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if type(subitem) == tuple:\n                    key = tuple(sorted(subitem))\n                else:\n                    key = subitem\n                if key in sublists:\n                    sublists[key] += 1\n                else:\n                    sublists[key] = 1\n    return sublists"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    num_parts = num.split('.')\n    if len(num_parts)!= 2:\n        return False\n    int_part, dec_part = num_parts\n    if len(int_part) > 1 or len(dec_part) > 2:\n        return False\n    for char in int_part:\n        if char not in '0123456789':\n            return False\n    for char in dec_part:\n        if char not in '0123456789.':\n            return False\n    if len(dec_part) > 1 and '.' not in dec_part[1:]:\n        return False\n    if int(int_part) > 2**31 - 1:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if num.count('.')!= 1:\n        return False\n    if '.' in num:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) > 2:\n            return False\n    if len(num) > 10:\n        return False\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if there are only digits in the string\n    if not num.isdigit():\n        return False\n    \n    # Check if the length of the string is greater than 2\n    if len(num) > 2:\n        return False\n    \n    # Check if the string starts with a digit\n    if not num[0].isdigit():\n        return False\n    \n    # Check if the string has a precision of 2\n    if num[-1] == '0' or num[-1] == '.' or num[-2] == '.' or num[-3] == '.':\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n\n    # Define the regular expression pattern for decimal number with precision of 2\n    pattern = r'^[-+]?\\d+(\\.\\d{2})?$'\n\n    # Use the regular expression pattern to match the given string\n    match = re.match(pattern, num)\n\n    # Check if the match object is not None\n    if match:\n        # If the match object is not None, return True\n        return True\n    else:\n        # If the match object is None, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not num.replace('.', '', 1).isdigit():\n        return False\n    elif '.' not in num:\n        return True\n    else:\n        decimal_part = num.split('.')[-1]\n        if len(decimal_part) > 2:\n            return False\n        for digit in decimal_part:\n            if not digit.isdigit():\n                return False\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        num_string = str(num)\n        if num_string[-2] == '.' and num_string[-1] == '0':\n            return True\n        elif num_string.count('.') == 1 and '.' in num_string and num_string[-2] == '0':\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' not in num:\n        return False\n    \n    if len(num.split('.')[1]) > 2:\n        return False\n    \n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        dec_part = num.split('.')[1]\n        if len(dec_part) > 2:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n        if count == 2:\n            return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        return arr[0] == arr[1] and unique_Element(arr[1:])"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns True if all the elements in the list are distinct,\n    and False otherwise.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return False\n    else:\n        return unique_Element(arr[1:]) and (arr[0]!= arr[1])"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n\n    Parameters:\n    arr: list of numbers\n\n    Returns:\n    True if the list contains only one distinct element, False otherwise.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # check if all the counts are equal to 1\n    for count in count.values():\n        if count!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        arr: a list of numbers\n\n    Returns:\n        True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate over the list and add unique elements to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # Check whether the set has only one element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return False\n    \n    unique_elements = set(arr)\n    \n    if len(unique_elements) == 1:\n        return True\n    \n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        if monthnum3 % 100 == 0:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 in [4, 6, 9, 11]:\n            days_in_month[1] = 29\n        if days_in_month[monthnum3-1] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum in days_in_month:\n        if days_in_month[monthnum] == 30:\n            print(f\"{monthnum} is a leap year!\")\n        else:\n            print(f\"{monthnum} does not contain 30 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        print(\"The month does not contain 30 days.\")\n    elif monthnum3 in [4,6,9,11]:\n        print(\"The month does contain 30 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = int(monthnum3)\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        if monthnum3[2] == '0':\n            return False\n        else:\n            return True\n    else:\n        if monthnum3[2] == '0':\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum elements\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[n - 1] - arr[n - 2]\n\n    # Traverse through the array to find the minimum and maximum difference\n    for i in range(n):\n        if i == 0:\n            continue\n        diff = arr[i] - arr[i - 1]\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    min_diff = arr[1] - arr[0] \n    for i in range(2,n): \n        if (arr[i]-arr[i-1]) < min_diff: \n            min_diff = arr[i]-arr[i-1] \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n\n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i - 1])\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    The function uses the merge sort algorithm to sort the array in ascending order.\n    \"\"\"\n    # Merge sort function\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_arr = arr[:mid]\n            right_arr = arr[mid:]\n\n            merge_sort(left_arr)\n            merge_sort(right_arr)\n\n            i = j = k = 0\n\n            while i < len(left_arr) and j < len(right_arr):\n                if left_arr[i] < right_arr[j]:\n                    arr[k] = left_arr[i]\n                    i += 1\n                else:\n                    arr[k] = right_arr[j]\n                    j += 1\n                k += 1\n\n            while i < len(left_arr):\n                arr[k] = left_arr[i]\n                i += 1\n                k += 1\n\n            while j < len(right_arr):\n                arr[k] = right_arr[j]\n                j += 1\n                k += 1\n\n    # Sort the array\n    merge_sort(arr)\n\n    # Find the minimum difference between any two elements\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() # Sort the array in ascending order\n    min_diff = abs(arr[n-1]-arr[0]) # Initialize minimum difference as the absolute difference between the last and first element in the array\n    for i in range(1,n-1):\n        curr_diff = abs(arr[n-1]-arr[i]) # Calculate the current difference between the last and current element in the array\n        if curr_diff < min_diff:\n            min_diff = curr_diff # Update the minimum difference if the current difference is smaller\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    min_diff_index = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_index = [i, j]\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    if n == 1:\n        return abs(arr[0] - arr[1])\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers for traversing the array\n    left = 0\n    right = n-1\n\n    # Initialize the minimum difference and the current difference\n    min_diff = arr[1] - arr[0]\n    cur_diff = arr[1] - arr[0]\n\n    # Traverse the array using two pointers\n    while left < right:\n        # Calculate the current difference\n        cur_diff = arr[right] - arr[left]\n\n        # Update the minimum difference if necessary\n        if cur_diff < min_diff:\n            min_diff = cur_diff\n\n        # If the current difference is odd, move the left pointer\n        if cur_diff % 2!= 0:\n            left += 1\n\n        # If the current difference is even, move the right pointer\n        else:\n            right -= 1\n\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Loop through the array\n    for i in range(n - 1):\n        # Calculate the difference between current element and the next element\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 0\n    count = 1\n    polite_number = 0\n    \n    while count <= n:\n        polite_number += 1\n        if i % 2 == 0:\n            polite_number += 1\n        i += 1\n        count += 1\n    \n    return polite_number - 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    temp = 0\n    \n    for i in range(1, n+1):\n        count += 1\n        temp += i\n        \n        if temp == 1:\n            break\n        \n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        if n % 2 == 0:\n            return 2 * is_polite((n // 2) + 1)\n        else:\n            return (is_polite((n - 1) // 2) + 2)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 9\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 15\n    elif n == 9:\n        return 17\n    elif n == 10:\n        return 19\n    elif n == 11:\n        return 21\n    elif n == 12:\n        return 23\n    elif n == 13:\n        return 25\n    elif n == 14:\n        return 27\n    elif n == 15:\n        return 29\n    elif n == 16:\n        return 31\n    elif n == 17:\n        return 33\n    elif n == 18:\n        return 35\n    elif n == 19:\n        return 37\n    elif n == 20:\n        return 39\n    elif n == 21:\n        return 41\n    elif n == 22:\n        return 43\n    elif n == 23:\n        return 45\n    elif n == 24:\n        return 47\n    elif n == 25:\n        return 49\n    elif n == 26:\n        return 51\n    elif n == 27:\n        return 53\n    elif n == 28:\n        return 55\n    elif n == 29:\n        return 57\n    elif n == 30:\n        return 59\n    elif n == 31:\n        return 61\n    elif n == 32:\n        return 63\n    elif n == 33:\n        return 65\n    elif n == 34:\n        return 67\n    elif n == 35:\n        return 69\n    elif n == 36:\n        return 71\n    elif n == 37:\n        return 73\n    elif n == 38:\n        return 75\n    elif n == 39:\n        return 77\n    elif n == 40:\n        return 79\n    elif n == 41:\n        return 81\n    elif n == 42:\n        return 83\n    elif n == 43:\n        return 85\n    elif n == 44:\n        return 87\n    elif n == 45:\n        return 89\n    elif n == 46:\n        return 91\n    elif n == 47:\n        return 93\n    elif n == 48:\n        return 95\n    elif n == 49:\n        return 97\n    elif n == 50:\n        return 99\n    else:\n        return math.ceil((math.log(n) / math.log(2)) + 1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Initialize a variable to store the current polite number\n    polite_num = 1\n\n    # Calculate the next polite number\n    for i in range(2, n+1):\n        # Check if the current polite number is prime or not\n        if all(i%j!= 0 for j in range(2, int(math.sqrt(i))+1)):\n            polite_num += 1\n\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "There is no such problem as \"nth polite number\" on GeeksForGeeks website. You can only find \"nth prime number\" or \"nth perfect square\" or \"nth perfect number\" which are all problems related to arithmetic sequences."
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n\n    # First, let's check if n is a positive integer.\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Check if n is a perfect square.\n    if int(math.sqrt(n))**2!= n:\n        return False\n\n    # Let's check if n is a prime number.\n    if not all(n % i!= 0 for i in range(2, int(math.sqrt(n)) + 1)):\n        return False\n\n    # If all the checks have passed, then n is a polite number.\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            if i % 2 == 0:\n                result += 2\n            else:\n                result += 1\n        return result"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function finds the nth polite number.\n    '''\n\n    # initialize variables\n    i = 0\n    polite_number = 1\n    num_digits = 0\n\n    # loop until i reaches n\n    while i < n:\n\n        # increment i by 1\n        i += 1\n\n        # initialize variable for last digit of polite number\n        last_digit = math.floor(polite_number % 10)\n\n        # check if last digit is prime\n        is_prime = True\n        for j in range(2, int(math.sqrt(last_digit)) + 1):\n            if last_digit % j == 0:\n                is_prime = False\n                break\n\n        # if last digit is prime, add it to the polite number\n        if is_prime:\n            num_digits += 1\n            polite_number *= 10\n\n        # if polite number is less than 10^n, increment it by 10^n\n        while polite_number < 10**n:\n            polite_number *= 10\n\n    # return the nth polite number\n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return \"Please enter a positive integer\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        count = 1\n        i = 2\n        while count < n:\n            if math.gcd(i, n) == 1:\n                count += 1\n            i += 1\n        return i - 1"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(lst):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # initialize a list to store the pairs\n    pairs = []\n    # loop through the list\n    for i in range(len(lst)-1):\n        # append the current item to the pairs list\n        pairs.append(lst[i])\n        # if the next item is not None, append a tuple of the current item and the next item to the pairs list\n        if lst[i+1] is not None:\n            pairs.append((lst[i], lst[i+1]))\n    # return the pairs list\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input, and returns the count of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    difference = []\n    for item in li1:\n        if item not in li2:\n            difference.append(item)\n    return difference"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input, lists1 and lists2, respectively. It returns the difference between the two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # set difference list to empty list\n    diff_list = []\n    \n    # loop through first list and add elements that are not in second list to diff_list\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    \n    # loop through second list and add elements that are not in first list to diff_list\n    for i in li2:\n        if i not in li1:\n            diff_list.append(i)\n    \n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a list of their differences.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes in two lists as input and returns a new list containing the elements that are in li1 but not in li2.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i ** 4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    sum_of_powers = 0\n    current_num = 1\n\n    for i in range(n):\n        if current_num % 2!= 0:\n            sum_of_powers += current_num ** 4\n        current_num += 1\n\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            sum += i**4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to zero\n    sum = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the fourth power of the current number\n        fourth_pow = i ** 4\n        # add the fourth power to the sum\n        sum += fourth_pow\n    # return the sum of fourth powers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum_of_powers = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Find fourth power of i\n        fourth_power = i ** 4\n\n        # Add fourth power to sum_of_powers\n        sum_of_powers += fourth_power\n\n    # Return the sum of fourth powers of odd natural numbers\n    return sum_of_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # Create an empty stack\n    stack = deque()\n\n    # Traverse the expression from right to left\n    for i in range(len(exp)-1, -1, -1):\n        # If the current character is an opening parenthesis, push it onto the stack\n        if exp[i] == '(':\n            stack.append(i)\n        # If the current character is a closing parenthesis, pop the top element from the stack and compare the corresponding opening parenthesis.\n        # If the opening parenthesis is not present in the expression, return False, else return True.\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == -1:\n                return False\n\n    # If the loop completes, then all the opening parentheses have been popped from the stack and the expression is balanced.\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1]!= '(':\n                return False\n            elif i == ']' and stack[-1]!= '[':\n                return False\n            elif i == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            last_char = stack.pop()\n            if last_char!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    This function checks if the given expression is balanced or not. It uses a stack to keep track of the opening and closing parentheses.\n\n    Args:\n    exp (str): The expression to check for balanced parentheses.\n\n    Returns:\n    bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            opening_char = stack.pop()\n            if char in ['(', '{']:\n                if char == opening_char:\n                    continue\n                else:\n                    return False\n            elif char in [')', '}']:\n                if char == opening_char:\n                    continue\n                else:\n                    return False\n            elif char in ['[', ']']:\n                if char == opening_char:\n                    continue\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if not (last_char == '(' and char == ')' or\n                    last_char == '[' and char == ']' or\n                    last_char == '{' and char == '}'):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return \"Not Balanced\"\n            else:\n                stack.pop()\n\n    if not stack:\n        return \"Balanced\"\n    else:\n        return \"Not Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                continue\n            else:\n                return False\n    \n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in ['(', '{']:\n                if last_char == '(' or last_char == '{':\n                    continue\n                else:\n                    return False\n            elif char in [')', '}']:\n                if last_char == '[' or last_char == '{':\n                    continue\n                else:\n                    return False\n            elif char in [')', ']']:\n                if last_char == '(': or last_char == '[':\n                    continue\n                else:\n                    return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # Splitting the string into list of words\n    i = 0 # Initialize the index variable\n    while i < len(words):\n        if len(words[i]) == K:\n            del words[i] # Removing the word with k length from the list\n        else:\n            i += 1 # Moving to the next word\n    return''.join(words) # Joining the words with space and returning the result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store the words without length k\n    words_without_k = []\n    # loop through each word\n    for word in words:\n        # check if the length of the word is greater than or equal to k\n        if len(word) < K:\n            # if the length is less than k, add it to the list of words without length k\n            words_without_k.append(word)\n    # join the words without length k into a string\n    result_str =''.join(words_without_k)\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with k length or less\n    words_with_k_or_less = []\n    # Loop through each word\n    for word in words:\n        # If the length of the word is greater than or equal to k, add it to the list\n        if len(word) >= K:\n            words_with_k_or_less.append(word)\n    # Join the words with k length or less into a string and return it\n    return''.join(words_with_k_or_less)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes a string and a pattern and finds the occurrence and position of the substrings in the string. If there is no match, it returns None.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    for match in matches:\n        index = text.index(match)\n        print(f\"The substring '{match}' occurs at position {index} in the string.\")\n    return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0][0], matches[0][1]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use regex to find all substrings in the text that match the pattern\n    matches = re.findall(pattern, text)\n    \n    # if there are no matches, return None\n    if not matches:\n        return None\n    \n    # loop through all the matches and find their positions in the original text\n    for i, match in enumerate(matches):\n        match_start = text.find(match)\n        match_end = match_start + len(match)\n        print(f'Match {i+1}: {match} found at position {match_start} to {match_end}')\n    \n    # return the count of matches\n    return len(matches)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            pos = text.find(match)\n            return match, pos\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    for matchNum, match in enumerate(matches, start=1):\n        print(f\"Occurrence {matchNum}: {match.start()}, {match.end()}\")\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(\"Match found at position: \", match.start())\n            print(\"Substring: \", match.group())\n        return matches[0].start()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(str(nums[i])) & set('1')) > 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue  # skip even indices\n        count = 0\n        for num in nums[i:]:\n            count += 1\n            if count % 2 == 0:\n                break\n        if count % 2 == 0:\n            return False  # found an even number in odd position\n    return True  # all numbers in odd positions are odd"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 1:\n            odd_count += 1\n    if odd_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:  # check if current index is odd\n            for j in range(i+1, len(nums), 2):  # check if odd numbers are present starting from odd index\n                if nums[j] % 2 == 0:\n                    return False  # if any even number is found, return False\n            odd_count += 1\n    if odd_count == 0:\n        return True  # if no odd numbers were found, return True\n    else:\n        return False  # if odd numbers were found, return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            if i % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2!= 0 and (nums[i] % 2!= 0 or nums[i] % 2 == 0):\n            return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:  # check if i is even\n            if nums[i] % 2 == 0:  # check if nums[i] is even\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(1, len(test_str)-1):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            j = i + 1\n            while j < len(test_str) and test_str[j] in vowels:\n                j += 1\n            count += j - i - 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a set to store unique elements of the list\n    unique_elements = set(arr)\n    \n    # Calculate the sum of unique elements\n    unique_sum = sum(unique_elements)\n    \n    # Return the sum\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # converting the list to set to remove duplicates\n    unique_set = set(arr)\n    # converting the set back to a list to get the elements\n    unique_list = list(unique_set)\n    # finding the sum of the unique elements\n    sum_unique = sum(unique_list)\n    # returning the sum of non-repeated elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the unique elements\n    unique_elements = set(arr)\n    # Initialize the sum to zero\n    total_sum = 0\n    # Loop through the unique elements and add their values to the sum\n    for element in unique_elements:\n        total_sum += element\n    # Return the total sum of non-repeated elements\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    # creating an empty set to store unique elements of the list\n    unique_elements = set() \n    \n    # iterating through the list and adding each element to the set\n    for i in arr: \n        unique_elements.add(i) \n    \n    # finding the sum of the unique elements\n    sum_of_unique_elements = sum(unique_elements)\n    \n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_elements = set(arr)\n\n    # Calculate the sum of the unique elements\n    sum_unique = sum(unique_elements)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set of unique elements in the list\n    unique_elements = set(arr)\n\n    # find the sum of unique elements\n    unique_sum = sum(unique_elements)\n\n    # return the sum\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the array\n    unique_elements = set(arr)\n    # find the sum of unique elements\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_arr = list(set(arr))\n    return sum(unique_arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create an empty dictionary to store the elements and their indices\n    element_dict = {}\n\n    # Loop through the array and add each element to the dictionary\n    for i in range(len(arr)):\n        element_dict[arr[i]] = i\n\n    # Initialize the sum variable to 0\n    sum_non_repeated = 0\n\n    # Loop through the dictionary to find the sum of non-repeated elements\n    for i in range(len(arr)):\n        if i!= element_dict[arr[i]]:\n            sum_non_repeated += arr[i]\n\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # using itertools groupby function to group consecutive duplicates\n    groups = groupby(list1)\n    \n    # using list comprehension to pack consecutive duplicates into sublists\n    packed_groups = [list(group) for group in groups]\n    \n    return packed_groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item, group in groupby(list1):\n        if not item:\n            continue\n        if len(list(group)) > 1:\n            sublist = list(group)\n            sublist.pop(0)\n            result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create an iterator over the list1 and group by consecutive duplicates\n    grouped_iter = groupby(list1)\n\n    # Initialize an empty list to store the sublists\n    sublists = []\n\n    # Iterate over the grouped iterator and pack consecutive duplicates into sublists\n    for key, group in grouped_iter:\n        sublists.append(list(group))\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Using groupby() function from itertools module to group consecutive duplicates of list1\n    for key, group in groupby(list1):\n        # Grouping consecutive duplicates of list1 based on key\n        if len(list(group)) > 1:\n            # Finding the consecutive duplicates of key and packing them into sublist\n            sublist = list(group)\n            sublist.pop(0)\n            yield sublist"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # create a dictionary to store the index of each element\n    index_dict = {key:idx for idx, key in enumerate(list1)}\n\n    # group the elements by the index values\n    grouped_elements = groupby(sorted(index_dict.items()), key=lambda x: x[1])\n\n    # create a sublist for each group of consecutive duplicates\n    packed_list = [list(group) for group in grouped_elements]\n\n    # return the packed list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive duplicates\n    groups = groupby(list1)\n    # Filter out duplicates and pack the remaining consecutive duplicates into sublists\n    return list(map(list, groups))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Iterate through the list using the groupby function and yield each group\n    for key, group in groupby(list1):\n        # Check if the group is a consecutive duplicate and yield it as a sublist\n        if key == len(list1) - 1:\n            if len(list(group)) > 1:\n                yield list(group)\n        elif len(list(group)) > 1:\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if sublist not in sublists:\n            sublists[tuple(sublist)] = 1\n        else:\n            sublists[tuple(sublist)] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple not in counts:\n            counts[sublist_tuple] = 1\n        else:\n            counts[sublist_tuple] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            sublist_tuple = tuple(list1[i])\n            if sublist_tuple in sublist_dict:\n                sublist_dict[sublist_tuple] += 1\n            else:\n                sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Creating a dictionary to store the count of sublists\n    count = {}\n\n    # Looping through each sublist in the list\n    for sublist in list1:\n\n        # Creating a tuple of the sublist\n        sublist_tuple = tuple(sublist)\n\n        # If the tuple is already present in the dictionary, increment its count\n        if sublist_tuple in count:\n            count[sublist_tuple] += 1\n        # If the tuple is not present in the dictionary, add it to the dictionary with a count of 1\n        else:\n            count[sublist_tuple] = 1\n\n    # Returning the final dictionary of counts\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the counts of unique sublists\n    counts = {}\n\n    # loop through each element in the list\n    for item in list1:\n        # check if the element is a list\n        if isinstance(item, list):\n            # turn the list into a tuple to make it unique\n            key = tuple(item)\n            # check if the key is already in the dictionary\n            if key in counts:\n                # increment the count of the key\n                counts[key] += 1\n            else:\n                # add the key and a count of 1 to the dictionary\n                counts[key] = 1\n\n    # return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if isinstance(j, list):\n                    sublist_count[(tuple(j),)] = sublist_count.get((tuple(j),), 0) + 1\n                else:\n                    sublist_count[(j,)] = sublist_count.get((j,), 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Iterate through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple to count its occurrences\n        count_tuple = tuple(sublist)\n        # Check if the tuple is already a key in the dictionary\n        if count_tuple in count_dict:\n            # If it is, increment its value by 1\n            count_dict[count_tuple] += 1\n        else:\n            # If it's not, add it as a new key with a value of 1\n            count_dict[count_tuple] = 1\n    \n    # Return the dictionary with the counts for each list\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(test_list[i:j]) == 0:\n                yield tuple(test_list[i:j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(1, total_sum + 1):\n        if i % 10000 == 0:\n            print(\"Current combination:\", i)\n        for combo in combinations(test_list, i):\n            yield tuple(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    total_sum = sum(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                total_sum -= test_list[i]\n                total_sum -= test_list[j]\n                total_sum -= test_list[k]\n                if total_sum == 0:\n                    print(tuple(sorted((test_list[i], test_list[j], test_list[k]))))\n    return"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Sort the test_list in increasing order\n    test_list.sort()\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate through all pairs of numbers in the test_list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the current pair of numbers\n            current_sum = test_list[i] + test_list[j]\n\n            # If the current sum is found in the test_list, add it as a tuple to the combinations_list\n            if current_sum in test_list:\n                combinations_list.append((test_list[i], test_list[j]))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of tuples with each element as a combination of 2 elements\n    comb_list = list(combinations(test_list, 2))\n    # filter the list to get only the combinations of sums with tuples\n    comb_sum_list = [comb for comb in comb_list if sum(comb) == sum(test_list)]\n    return comb_sum_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # create a set of tuples to avoid duplicates\n    unique_tuples = set(test_list)\n    \n    # sort the unique tuples\n    sorted_tuples = sorted(unique_tuples)\n    \n    # find all combinations of sums with unique tuples\n    comb_sum_tuples = []\n    for i in range(len(sorted_tuples)):\n        for j in range(i + 1, len(sorted_tuples)):\n            if sorted_tuples[i][0] + sorted_tuples[j][0] == sorted_tuples[i][1] + sorted_tuples[j][1]:\n                comb_sum_tuples.append((sorted_tuples[i], sorted_tuples[j]))\n                \n    # convert the list of tuples to set of tuples\n    comb_sum_set = set(comb_sum_tuples)\n    \n    # convert the set of tuples back to list\n    result_list = list(comb_sum_set)\n    \n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(set(test_list)) # Calculate the total sum of all tuples in the list\n    for comb in combinations(test_list, len(test_list)): # Loop through all possible combinations of length len(test_list)\n        sum_comb = sum(comb)\n        if sum_comb == total: # Check if the sum of the current combination is equal to the total sum\n            return comb # Return the current combination if it's the desired result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    for i in range(1, total+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == total:\n                print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Step 1: Sort the given list of tuples\n    sorted_tuples = sorted(test_list)\n    # Step 2: Calculate the total sum of the tuples in the list\n    total_sum = sum(tup[0] + tup[1] for tup in test_list)\n    # Step 3: Generate all combinations of sums by using the itertools library\n    comb = combinations(sorted_tuples, 2)\n    # Step 4: Filter the combinations to get only the combinations with the sum equal to the total sum\n    filtered_comb = filter(lambda x: sum(x) == total_sum, comb)\n    # Step 5: Convert the filtered combinations into a list of tuples\n    result_list = list(filtered_comb)\n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def find_combination(combination, current_sum):\n        if current_sum == target:\n            print(combination)\n            return True\n        elif current_sum > target:\n            return False\n        for num in test_list:\n            if current_sum + num in combination:\n                if find_combination(combination + (num,), current_sum + num):\n                    return True\n        return False\n\n    for combination in combinations(test_list, len(test_list)):\n        if find_combination(combination, 0):\n            return"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # find the number of divisors using a loop\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n\n    # count the number of divisors using a loop\n    count = 0\n    for i in divisors:\n        count += 1\n\n    # check whether the count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def count_divisor(n, i):\n        if i * i > n:\n            return 0\n        elif n % i == 0:\n            return 1 + count_divisor(n, i+1)\n        else:\n            return count_divisor(n, i+1)\n    \n    def count_divisors_even(n):\n        divisors = count_divisor(n, 2)\n        count = 0\n        while divisors > 0:\n            count += divisors\n            divisors = count_divisor(divisors, 2)\n        return count\n    \n    divisors_count = count_divisors_even(n)\n    divisors_count_odd = count_divisors_even(n-1)\n    return divisors_count_odd % 2 == 0 and divisors_count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # function to calculate the count of divisors\n    def count_divisors_helper(num):\n        if num < 2:\n            return 0\n        count = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                count += 1\n        return count\n    \n    # calculate the count of divisors\n    count = count_divisors_helper(n)\n    \n    # check whether the count of divisors is even or not\n    if count % 2 == 0:\n        print(f\"The count of divisors of {n} is even.\")\n    else:\n        print(f\"The count of divisors of {n} is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # get the number of divisors\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            \n    # check whether the count of divisors is even\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    # function to count the number of divisors of a number\n    def count_div(n):\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    # count the number of divisors of the given number\n    count_div_num = count_div(n)\n\n    # check if the count of divisors is even or not\n    if count_div_num % 2 == 0:\n        print(f\"The count of divisors of {n} is even.\")\n    else:\n        print(f\"The count of divisors of {n} is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n            if n // i!= i:\n                divisor_count += 1\n    return divisor_count % 2 == 0\n\nprint(count_divisors(28)) # Output: True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # calculate the sum of divisors of n using a loop\n    sum = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            sum += i + n // i\n            \n    # check if the count of divisors is even or odd\n    if sum == 2*n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # initialize sum variable\n    sum_odd = 0\n    # loop through each subarray\n    for i in range(len(arr)):\n        # check if current subarray is odd length\n        if i < len(arr) // 2:\n            # if subarray length is odd, add the first element of the subarray to the sum\n            if len(arr[i]) % 2 == 1:\n                sum_odd += arr[i][0]\n        else:\n            # if subarray length is odd, add the last element of the subarray to the sum\n            if len(arr[i]) % 2 == 1:\n                sum_odd += arr[i][-1]\n    # return the sum of all odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum_of_odd_length_subarrays = 0\n    \n    # Iterate over each subarray in the array\n    for i in range(len(arr)):\n        # Check if the length of the subarray is odd\n        if i % 2 == 1:\n            # If the length is odd, iterate over each element in the subarray and add it to the sum\n            for j in range(i, len(arr), 2):\n                sum_of_odd_length_subarrays += arr[j]\n                \n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum_odd_length = 0\n    for i in range(len(arr)):\n        if i == 0 or i == len(arr)-1:\n            sum_odd_length += arr[i]\n        else:\n            sum_odd_length += arr[i] + arr[i-1]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    current_sum = 0\n    max_sum = 0\n    \n    for i in range(len(arr)):\n        current_sum += arr[i]\n        \n        if i % 2!= 0:\n            count += 1\n            current_sum -= arr[i-count]\n            \n            if count == 1 and current_sum > max_sum:\n                max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Traverse through the array and keep adding odd length subarrays to the sum\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            subarray = arr[i:j]\n            sum += sum(subarray)\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        left = i\n        right = i\n        while right < n-1:\n            if right-left+1 % 2 == 1:\n                result += arr[right]\n            right += 1\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1) % 2 == 1:\n                subarr = arr[i:j+1]\n                subarr.sort()\n                result += subarr[j-i]\n    \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        temp_sum = 0\n        for j in range(i, n):\n            temp_sum += arr[j]\n            if j - i + 1 % 2 == 1:\n                result += temp_sum\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum_of_odd_length_subarrays = 0\n    n = len(arr)\n    \n    for i in range(1, n, 2):\n        temp_sum = sum(arr[i-1:i+1])\n        sum_of_odd_length_subarrays += temp_sum\n        \n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_len = 0\n\n    for i in range(n):\n        for j in range(i+1, n-1):\n            sub_arr = arr[j-i:j+1]\n            sum_odd_len += sum(sub_arr) if len(sub_arr) % 2 == 1 else 0\n\n    return sum_odd_len"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Calculate the maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    # Calculate the difference between maximum and minimum values\n    delta = max_value - min_value\n    \n    # Calculate the hue\n    if delta == 0:\n        hue = 0\n    elif max_value == r:\n        hue = 60 * ((g - b) / delta) % 6\n    elif max_value == g:\n        hue = 60 * ((b - r) / delta) + 120\n    else:\n        hue = 60 * ((r - g) / delta) + 240\n    \n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        if max_value == 0:\n            saturation = 0\n        else:\n            saturation = delta / max_value\n    \n    # Calculate the value\n    value = max_value\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB values to float\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find the greatest and smallest values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the delta between the greatest and smallest values\n    delta = max_val - min_val\n\n    # Calculate the hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Calculate the value\n    value = max_val\n\n    # Convert hue and saturation to percentages\n    hue = hue / 6 * 100\n    saturation = saturation * 100\n    value = value * 100\n\n    return round(hue), round(saturation), round(value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in three integer values for red, green, and blue color values.\n    It then converts the rgb color values to hsv color values using the following formula:\n\n    H = (R + G + B) / 3\n\n    S = max(R, G, B) - min(R, G, B)\n\n    V = max(R, G, B)\n\n    Then, it returns a tuple containing the hsv color values in the following order:\n\n    (H, S, V)\n\n    \"\"\"\n\n    R = r / 255.0\n    G = g / 255.0\n    B = b / 255.0\n\n    max_value = max(R, G, B)\n    min_value = min(R, G, B)\n    delta = max_value - min_value\n\n    if delta == 0:\n        H = 0\n    elif max_value == R:\n        H = (G - B) / delta\n    elif max_value == G:\n        H = 2 + (B - R) / delta\n    else:\n        H = 4 + (R - G) / delta\n\n    H = round(H * 60)\n    if H < 0:\n        H += 360\n\n    if max_value == 0:\n        S = 0\n    else:\n        S = delta / max_value\n\n    V = max_value\n\n    return H, S, V"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts RGB color to HSV color.\n\n    Parameters:\n    r, g, b (int): Red, green, and blue components of the input color.\n\n    Returns:\n    h, s, v (float): Hue, saturation, and value components of the output color.\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        elif max_value == b:\n            h = 4 + (r - g) / delta\n\n        h = h / 6.0\n\n        if h < 0:\n            h += 1\n\n        s = (max_value - min_value) / delta\n\n    v = max_value\n\n    hsv = (h, s, v)\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h / 6\n    \n    s = delta / (1 - abs(2*cmax - 1)) if delta!= 0 else 0\n    v = cmax\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB to HSV\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_value\n    \n    delta = max_value - min_value\n    \n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        s = delta / max_value\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB to R, G, and B values\n    r, g, b = r/255, g/255, b/255\n    \n    # Find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find range of the color\n    range_val = max_val - min_val\n    \n    # Calculate saturation and value\n    if max_val == min_val:\n        h, s, v = 0, 0, max_val\n    else:\n        if r == max_val:\n            h = (g - b) / range_val\n        elif g == max_val:\n            h = 2 + (b - r) / range_val\n        else:\n            h = 4 + (r - g) / range_val\n            \n        if h < 0:\n            h += 6\n            \n        h, s, v = h * 60, range_val / max_val, max_val\n        \n    # Calculate hue\n    h = int(h)\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three parameters, r, g, b, which represent the red, green and blue color components of the color.\n    It converts the color from RGB to HSV color model.\n    \"\"\"\n    # Convert RGB to HSV\n    h = (r * 11 + g * 17 + b * 3) // 256\n    s = max(r, g, b) / min(r, g, b)\n    v = max(r, g, b)\n\n    # Convert HSV to HSL\n    if s == 0:\n        h = 0\n        l = 0\n    else:\n        if l < 0.5:\n            l = (v + s) / (2 * l)\n        else:\n            l = (v + s) / (2 - 2 * l)\n\n        if r == v:\n            h = (g - b) / (6 * s)\n        elif g == v:\n            h = (b - r) / (6 * s) + 2\n        elif b == v:\n            h = (r - g) / (6 * s) + 4\n\n        h = h % 6\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Normalize the RGB values to a range of 0-1\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the max and min values\n    delta = max_val - min_val\n    \n    # Calculate the hue value based on the RGB values\n    if max_val == min_val:\n        h = 0\n    elif r == max_val:\n        h = 60 * ((g - b) / delta)\n    elif g == max_val:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n    \n    # Calculate the saturation value based on the RGB values\n    if delta == 0:\n        s = 0\n    elif max_val == r:\n        s = delta / (max_val + delta)\n    elif max_val == g:\n        s = delta / (max_val + delta)\n    else:\n        s = delta / (max_val + delta)\n    \n    # Calculate the value value based on the RGB values\n    v = max_val\n    \n    # Convert the hue, saturation, and value to a format that can be used in HSV color model\n    hsv = [int(h * 65535), int(s * 65535), int(v * 65535)]\n    \n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n\n    Parameters:\n    r (int): red value of the color\n    g (int): green value of the color\n    b (int): blue value of the color\n\n    Returns:\n    hsv (tuple): a tuple of the form (hue, saturation, value)\n    \"\"\"\n\n    # Convert rgb to intensities\n    r = int(r / 255 * 65535)\n    g = int(g / 255 * 65535)\n    b = int(b / 255 * 65535)\n\n    # Find the maximum and minimum intensities\n    max_intensity = max(r, g, b)\n    min_intensity = min(r, g, b)\n\n    # Find the delta between maximum and minimum intensities\n    delta = max_intensity - min_intensity\n\n    # Calculate the hue\n    if max_intensity == r:\n        hue = (g - b) / delta\n    elif max_intensity == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # If the hue is less than zero, add 65536 to it\n    if hue < 0:\n        hue += 65536\n\n    # Calculate the saturation\n    if max_intensity == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_intensity\n\n    # Calculate the value\n    value = max_intensity\n\n    # Convert hue and saturation to floats between 0 and 1\n    hue = hue / 65535.0\n    saturation = saturation / 65535.0\n\n    # Return the hsv tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product = num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product = num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an input and finds the product of first even and odd number in the list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n            \n    if even_count > 0 and odd_count > 0:\n        return even_sum * odd_sum\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    product = even_num * odd_num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # Initializing variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    # Looping through the list\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        # Product of even and odd counts\n        product = product * even_count * odd_count\n\n    # Returning the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count > 0:\n        product *= even_count\n    if odd_count > 0:\n        product *= odd_count\n        \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the product of the first even and odd number in the list.\n    '''\n\n    # Iterate through the list and store even and odd numbers in separate lists\n    even_numbers = []\n    odd_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n\n    # Multiply the first even and first odd number from the two separate lists\n    result = even_numbers[0] * odd_numbers[0]\n\n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count += i\n        else:\n            count += 1\n    return count * 2"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # split the string by commas\n    str_list = test_str.split(\",\")\n    \n    # initialize an empty integer tuple\n    int_tuple = ()\n    \n    # loop through the string list and convert each string to an integer\n    for string in str_list:\n        try:\n            int_tuple += (int(string),)\n        except ValueError:\n            # if the string cannot be converted to an integer, add a placeholder value\n            int_tuple += (None,)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the converted integers\n    integers = []\n    # Loop through the words and convert each word to an integer\n    for word in words:\n        try:\n            # Convert the word to an integer\n            num = int(word)\n            # Add the integer to the list\n            integers.append(num)\n        except ValueError:\n            # If the word cannot be converted to an integer, print an error message\n            print(f\"Error: {word} is not an integer.\")\n    # Return the converted integers as a tuple\n    return tuple(integers)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual elements\n    str_list = test_str.split(',')\n\n    # Convert each string element to an integer\n    int_list = [int(s) for s in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a tuple\n    test_tuple = tuple(test_str.split())\n    \n    # Convert each element in the tuple to an integer\n    for i in range(len(test_tuple)):\n        test_tuple[i] = int(test_tuple[i])\n    \n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the enclosing brackets and split the string into individual elements\n    elements = test_str[1:-1].split(',')\n    # Convert each element to an integer and append it to a new list\n    int_elements = [int(x.strip()) for x in elements]\n    # Return the new list as an integer tuple\n    return tuple(int_elements)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    string_list = list(map(str, test_str))\n\n    # Convert each string in the list to an integer\n    integer_list = list(map(int, string_list))\n\n    # Return the integer list as an integer tuple\n    return tuple(integer_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by the comma and convert each element to integer\n    int_tuple = tuple(map(int, test_str.split(',')))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # Split the input string by comma and space\n    split_str = test_str.split(\", \")\n    # Convert each element to integer\n    int_tuple = tuple(map(int, split_str))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # split the input string by ',' and''\n    split_str = test_str.split(',')\n    int_list = []\n    for s in split_str:\n        # convert the string to integer and append it to the list\n        int_list.append(int(s))\n    # convert the list to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Convert the string to a list of strings\n        str_list = [str(item) for item in test_str]\n        \n        # Convert each string in the list to an integer using the int() function\n        int_list = [int(num) for num in str_list]\n        \n        # Convert the list of integers back to a tuple using the tuple() function\n        int_tuple = tuple(int_list)\n        \n        # Return the integer tuple\n        return int_tuple\n        \n    except Exception as e:\n        # If there's an exception, print the error message\n        print(e)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): The sorted list to search in.\n    x (int): The value to search for.\n\n    Returns:\n    int: The right insertion point of the specified value in the sorted list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the input list is not sorted.\n\n    \"\"\"\n\n    if not isinstance(a, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if not a:\n        raise ValueError(\"Input list must not be empty.\")\n\n    if len(a)!= len(set(a)):\n        raise ValueError(\"Input list must not contain duplicates.\")\n\n    if not all(isinstance(i, int) for i in a):\n        raise TypeError(\"Input list must contain integers only.\")\n\n    if len(a) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Get the index of the leftmost element greater than or equal to x\n    i = bisect.bisect_left(a, x)\n    # If x is already present in the list, return its index\n    if i!= len(a) and a[i] == x:\n        return i\n    # Otherwise, return the index of the element immediately to the left of x\n    return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return right_insertion(a[index:], x)\n    else:\n        return bisect.bisect_left(a[:index], x) + index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{2}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb\\bb\\bb'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?:(?!b{3})[bB])(?:(?!b{3})[bB])(?:(?!b{3})[bB])'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*?b{3}')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a(?:b{2})*')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile('a{3}b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a+b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_data = (test_str,) + test_list\n    return new_tuple_data"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list + [test_str]\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_tuple = tuple(test_list)\n    # Convert the string to a list\n    new_list = list(test_str)\n    # Join the two lists into a single list\n    new_list.extend(new_tuple)\n    # Convert the new list to a tuple and return it\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(str(test_str) + str(item) for item in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple((test_str, test_list))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple_list = []\n    for item in test_list:\n        new_tuple_list.append(item + test_str)\n    return tuple(new_tuple_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert the list into a tuple\n    new_list = tuple(test_list)\n    # concatenate the tuple and the string\n    new_tuple = new_list + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_str = test_str + str(test_list)\n    new_tuple_list = [int(x) for x in new_tuple_str.split()]\n    return tuple(new_tuple_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not any(x%2==0 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    :param nums: a list of integers\n    :return: a boolean indicating whether every even index contains even numbers\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len([num for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len([num for num in nums[i::2] if num % 2 == 0]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(nums[i]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # initialize a boolean flag to true\n    even_flag = True\n\n    # loop through each index in the list\n    for i in range(len(nums)):\n        # if the current index is even, check if it contains an even number\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                # if the current index contains an even number, set the flag to false and exit the loop\n                even_flag = False\n                break\n\n    # return the final flag value\n    return even_flag"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:i+2]):\n            return False\n\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n\n    Args:\n    test_tup (tuple): A tuple containing tuples to be removed.\n\n    Returns:\n    (tuple): The original tuple with nested tuples removed.\n    \"\"\"\n\n    def remove_inner(inner_tup):\n        \"\"\"\n        Recursive function to remove inner tuples.\n\n        Args:\n        inner_tup (tuple): A tuple containing tuples to be removed.\n\n        Returns:\n        (tuple): The original tuple with nested tuples removed.\n        \"\"\"\n        if not inner_tup:\n            return ()\n        if not isinstance(inner_tup[0], tuple):\n            return (inner_tup[0],)\n        else:\n            return inner_tup[0] + remove_inner(inner_tup[1:])\n\n    return remove_inner(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize a new tuple to store the flattened list of elements\n    flattened_tup = []\n    # Loop through each element in the tuple\n    for item in test_tup:\n        # If the element is a list, flatten it and append to the flattened list\n        if type(item) == list:\n            flattened_tup += item\n        # If the element is not a list, append it to the flattened list\n        else:\n            flattened_tup.append(item)\n    # Return the flattened list as the final result\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_tup.append(j)\n        else:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Remove tuples from the given tuple\n    while isinstance(test_tup, tuple):\n        test_tup = test_tup[0]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_list.append(elem)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # convert the tuple to a list\n    lst = list(test_tup)\n    # iterate through the list\n    for i in range(len(lst)):\n        # if the item is a tuple, remove it recursively\n        if isinstance(lst[i], tuple):\n            lst[i] = remove_nested(lst[i])\n        # if the item is not a tuple, ignore it\n        else:\n            pass\n    # remove the tuples from the list\n    return [x for x in lst if not isinstance(x, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for tup in test_tup for i in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n\ninput_list = [1, 2, [3, 4, 5], [6, 7, [8, 9, [10, 11]]], 12, [13, 14, [15, 16, 17]]]\nprint(count_list(input_list))  # Output: 4"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # While left pointer is less than right pointer\n    while left < right:\n        # Find the middle index of the array\n        mid = (left + right) // 2\n        # If element at mid is greater than x, then right pointer will move towards mid\n        if arr[mid] > x:\n            right = mid\n        # If element at mid is less than or equal to x, then left pointer will move towards mid\n        else:\n            left = mid + 1\n\n    # If the element is not found in the array, return -1\n    if arr[left]!= x:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    :param arr: List of sorted integers.\n    :param x: Integer to find the last position of.\n    :return: The last position of x in the sorted array or -1 if x is not in the array.\n    \"\"\"\n\n    # Initialize a variable to keep track of the last position of x\n    last_position = -1\n\n    # Iterate through the array from the first element to the last element\n    for i in range(len(arr)):\n        # If the current element is equal to x, update the last_position variable\n        if arr[i] == x:\n            last_position = i\n\n    # Return the last position of x in the array or -1 if x is not in the array\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left == len(arr) - 1 and arr[left] == x:\n        return left\n    elif left == len(arr) - 1 and arr[left]!= x:\n        return -1\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    left,right = 0,len(arr)-1\n    while left<=right:\n        mid = left+(right-left)//2\n        if arr[mid]==x:\n            right = mid-1\n        elif arr[mid]<x:\n            left = mid+1\n        else:\n            right = mid-1\n    if left<0:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i >= 0:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments - an array and an element. It returns the last position of the element in the array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element as input and returns the last position of that element in the array.\n    \"\"\"\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] == x:\n            return j\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(.*?)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)\\w*b(?=\\Z)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dictionary.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_list = 0\n    for item in dict.values():\n        sum_list += item\n    return sum_list"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Check if i is odd\n        if i % 2 == 1:\n            # Add i to the sum\n            sum += i\n    # Return the sum of all odd numbers within the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum to 0\n    s = 0\n    \n    # loop through the range from l to r (inclusive)\n    for i in range(l, r+1):\n        # if the number is odd, add it to the sum\n        if i % 2!= 0:\n            s += i\n            \n    # return the sum\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    odd_sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            odd_sum += l\n        l += 1\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input from user\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    # initialize variables\n    sum_odd_nums = 0\n    num = l\n\n    # loop through odd numbers in the range\n    while num <= r:\n        if num % 2!= 0:\n            sum_odd_nums += num\n        num += 1\n\n    # return the sum of odd numbers\n    return sum_odd_nums"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the lower and upper limit of the range: \").split())\n    if l > r:\n        return \"The lower limit must be less than or equal to the upper limit\"\n    elif r > 10**6:\n        return \"The range must be within the range of 1 to 1,000,000\"\n    else:\n        sum = 0\n        for i in range(l, r+1, 2):\n            sum += i\n        return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for num in range(l, r+1, 2):\n        total += num\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each odd number between 1 and n\n    for i in range(1, n+1, 2):\n        # Add the odd number to the sum\n        sum += i\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum_of_odds = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_of_odds += l\n        l += 1\n    return sum_of_odds"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "There is no problem with the given code. It is a simple function to find the sum of an array. Please use this code as it is."
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # initialize a variable to hold the sum\n    total = 0\n    \n    # iterate through the array and add up the values\n    for value in arr:\n        total += value\n    \n    # return the total sum\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    # Extract the last d bits\n    shifted = (n >> d) & 0xFFFFFFFF\n    # Shift all the bits to the left by d bits\n    rotated = (n << (32 - d)) & 0xFFFFFFFF\n    # Combine the shifted and rotated bits\n    return shifted | rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    while d > 0:\n        carry = n & 0x80000000\n        n = n << 1\n        n = n | carry\n        d = d - 1\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to be rotated\n    num_bits = 32\n\n    # Check if d is negative\n    if d < 0:\n        d = num_bits + d\n\n    # Calculate the new bit position for the leftmost bit\n    new_bit_pos = d % num_bits\n\n    # Extract the bits to be rotated from the leftmost bit position\n    left_bits = n >> new_bit_pos\n\n    # Extract the bits to be shifted out of the rightmost bit position\n    right_bits = n << (num_bits - new_bit_pos)\n\n    # Combine the left bits with the right bits\n    rotated_bits = left_bits | right_bits\n\n    # Return the rotated bits\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    n &= mask\n    for _ in range(d):\n        n = ((n << 1) | (n >> 31)) & mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n &= 0xffffffff\n    d &= 0x1f\n    n = n << d | n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary string\n    binary = bin(n)[2:]\n    # Pad binary string with 0's to d bits\n    padded = binary.zfill(d)\n    # Convert padded string back to integer\n    rotated = int(padded, 2)\n    # Return rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the most significant d bits and rotate it to the left\n    result = (n << d) | (n >> (32 - d))\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    \"\"\"\n    # Calculate the number of bits to rotate\n    num_bits = len(bin(n)) - 2\n    d = d % num_bits\n    # Shift the bits to the left by d bits\n    n = (n << d) | (n >> (num_bits - d))\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all spaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regex\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z:\n        count += 1\n    if x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x, y, z)):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y):\n        if i == x:\n            continue\n        elif i == y:\n            continue\n        elif i == z:\n            continue\n        elif i == x + 1:\n            continue\n        elif i == y - 1:\n            continue\n        elif i == z + 1:\n            continue\n        elif i == x - 1:\n            continue\n        elif i == y + 1:\n            continue\n        elif i == z - 1:\n            continue\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, max(x, y, z)+1):\n        if x == i and y == i and z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i == j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        for j in range(i+1, z+1):\n            for k in range(j+1, y+1):\n                if i == j == k or i == k == j or j == k == i:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Initialize count and current index of sorted array\n    count = 0\n    current = 0\n    # Traverse through the array to find the current element\n    while current < n:\n        if arr[current] > arr[current + 1]:\n            break\n        current += 1\n    # If current element is already sorted, return 0\n    if current == n:\n        return 0\n    # Traverse through the sorted array and count the number of rotations\n    while current > 0:\n        if arr[0] < arr[current]:\n            break\n        arr.insert(0, arr.pop())\n        count += 1\n        current = 0\n        while current < n:\n            if arr[current] > arr[current + 1]:\n                break\n            current += 1\n        if current == n:\n            break\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    # Calculate the length of the array\n    n = len(arr)\n    # Initialize two pointers to the start and end of the array\n    i = 0\n    j = n - 1\n    # Initialize a counter variable to keep track of the number of rotations\n    count = 0\n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # Check if the array is already sorted in reverse order\n    if arr == sorted(arr, reverse=True):\n        return 0\n    # Traverse the array until they meet in the middle\n    while i < j:\n        # Check if the elements at the start and end of the subarray are equal\n        if arr[i] == arr[j]:\n            # Increment the count of rotations and move both pointers to the middle\n            count += 1\n            i += 1\n            j -= 1\n        # Check if the elements at the start and end of the subarray are not equal\n        elif arr[i]!= arr[j]:\n            # Increment the count of rotations and move the pointers to the right side\n            count += 1\n            i += 1\n        else:\n            # Increment the count of rotations and move the pointers to the left side\n            count += 1\n            j -= 1\n    # If the pointers meet in the middle, there was only one rotation\n    if i == j:\n        return count\n    # If the pointers are not meeting in the middle, there are two rotations\n    else:\n        return count + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if all elements are the same\n    if all(arr[0] == x for x in arr):\n        return 0\n    # Count number of rotations required\n    count = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[j] > arr[i]:\n            j += 1\n        count += j - i - 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # find the minimum element\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    \n    # if all the elements are greater than the minimum element, there is no rotation required\n    if min_val >= arr[-1]:\n        return 0\n    \n    # find the index of the first occurrence of the minimum element\n    first_occurrence = arr.index(min_val)\n    \n    # find the index of the last occurrence of the minimum element\n    last_occurrence = arr[::-1].index(min_val)\n    \n    # calculate the number of rotations required\n    rotations = last_occurrence - first_occurrence\n    \n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                # If the element at index j is greater than the element at index j+1, then swap them\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Find the smallest element in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    \n    # Calculate the number of rotations required\n    count = 0\n    for i in range(1, n):\n        if arr[i] > min_val:\n            break\n        count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n            \n    if arr[left] < arr[right]:\n        count = left\n    else:\n        count = right\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[j-1] > arr[j]:\n            j += 1\n        if j - i > 1:\n            return j - i\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    # Initialize a counter variable to 0\n    count = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Initialize a variable to keep track of the number of elements that can be shifted to the left\n        left = 0\n\n        # Loop through each element that can be shifted to the left\n        for j in range(len(arr)):\n            # Check if the element at index j can be shifted to the left by one position to get to the element at index i\n            if arr[j] >= arr[i] and j >= left:\n                left += 1\n            # If an element can be shifted to the left by more than one position, the rotation is complete and break out of the loop\n            elif j > left:\n                break\n\n        # Increment the count variable if the number of elements shifted to the left is less than the total number of elements in the array\n        if left < len(arr):\n            count += 1\n\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5) + 1\n    for i in range(sqrt_n):\n        if n % (i * i) == 0:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Initialize a variable to keep track of the square root of n\n    sqrt_n = 0\n\n    # Loop until the square root is greater than or equal to the square of n\n    while sqrt_n**2 < n:\n        # Increase the square root by 1\n        sqrt_n += 1\n\n    # If the square root is equal to the square of n, then n is a perfect square\n    if sqrt_n**2 == n:\n        return True\n\n    # If we make it here, then n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # check if n is even or not\n    if n % 2 == 0:\n        return False\n\n    # calculate the square root of n\n    sqrt_n = int(n**0.5)\n\n    # check if the square root is an integer or not\n    if sqrt_n**2!= n:\n        return False\n\n    # if we have reached here, then n is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # To check whether the number is a perfect square or not, we can use the fact that the sum of the squares of its digits and the square of the sum of the digits, divided by the sum of the digits is equal to the square root of the sum of the squares of the digits.\n    # The sum of the squares of the digits and the square of the sum of the digits are computed using the formula: (a^2 + b^2) = sqrt((a^2 + b^2)^2 - 4ab)\n    # where a and b are the digits of the given number n.\n    # Therefore, we can compute the sum of the squares of the digits as:\n    # sum_of_squares_of_digits = sum_of_digits * (sum_of_digits + 1)\n    # where sum_of_digits is the sum of the digits of n.\n    # We can use the formula for computing the square root of a number using the Newton-Raphson method to compute the square root of the sum of the squares of the digits.\n    # The Newton-Raphson method is a numerical method used to find the root of a function. In this case, we can use the formula: x_(n+1) = x_n - f(x_n)/f'(x_n), where x_0 is the initial guess, f(x) is the function to be solved, and f'(x) is the derivative of the function.\n    # Therefore, we can compute the sum of the squares of the digits using the Newton-Raphson method as follows:\n    sum_of_squares_of_digits = 0\n    digit = 0\n    while digit * (digit + 1) <= n:\n        sum_of_squares_of_digits += digit * (digit + 1)\n        digit += 1\n    # Now, we can use the formula for computing the square root of a number using the Newton-Raphson method to compute the square root of the sum of the squares of the digits:\n    # square_root = x_n - (f(x_n) / f'(x_n)) * (f(x_n) / f'(x_n))\n    # where x_0 is the initial guess and x_n is the nth iteration of the Newton-Raphson method.\n    # We can use a loop to compute the square root of the sum of the squares of the digits using the Newton-Raphson method until we get a value that is close to the square root of the sum of the squares of the digits.\n    square_root = n\n    while square_root * (square_root + 1) > sum_of_squares_of_digits:\n        square_root = (square_root + sum_of_squares_of_digits / square_root) / 2\n    # Finally, we can check whether the computed square root is equal to the square root of the sum of the squares of the digits.\n    return square_root * (square_root + 1) == sum_of_squares_of_digits"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is negative or zero\n    if n < 0:\n        return False\n    \n    # check if the number is less than the square root of the number\n    root = int(n**0.5)\n    return root*root == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return False\n    \n    # Check if the square of n is equal to n\n    square = n ** 0.5\n    if square ** 2!= n:\n        return False\n    \n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Initialize a variable to keep track of the square root\n    root = int(n**0.5)\n    # Check if the square root is an integer\n    if n % root!= 0:\n        # If not, then the number is not a perfect square\n        return False\n    # If the square root is an integer, then check if the difference between the square root and the integer part is less than or equal to 1\n    if abs(int(root) - root) <= 1:\n        # If it is, then the number is a perfect square\n        return True\n    # If the above condition is not met, then the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    :param n: the number to be checked\n    :return: True if the number is a perfect square, False otherwise\n    \"\"\"\n    if n < 0:\n        return False\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Find the square root of n using the formula sqrt(x) = x^(1/2)\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Check if the square root is equal to the original square root\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        if arr[0] * arr[1] % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] * arr[i+1] % 2 == 0:\n                return False\n            else:\n                return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers is even.\")\n    else:\n        print(\"The product of the numbers is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of numbers in the list is even.\")\n    else:\n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product is even\")\n    else:\n        print(\"The product is odd\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize variables to store the product and evenness of the product\n    product = 1\n    is_even = True\n\n    # Iterate over the list of numbers\n    for num in arr: \n        # Multiply the product by the current number\n        product *= num\n        # Check if the product is even or not\n        if product % 2 == 0: \n            is_even = True\n        else: \n            is_even = False\n\n    # Return the evenness of the product\n    return is_even"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of numbers in the list is even.\")\n    else:\n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n    # Initialize the result list to be an empty list\n    result = []\n    # Loop through the lists of lists\n    for sublist in lists:\n        # Initialize the current sum to be 0\n        current_sum = 0\n        # Loop through the sublist\n        for element in sublist:\n            # Add the element to the current sum\n            current_sum += element\n            # If the current sum is greater than the maximum sum, update the maximum sum and the result list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = sublist\n    # Return the result list\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n    \n    for list_ in lists:\n        sum_ = sum(list_)\n        if sum_ > max_sum:\n            max_sum = sum_\n            result = list_\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize maximum sum and list to None\n    max_sum = float('-inf')\n    max_list = None\n\n    # Loop through each list in the list of lists\n    for sub_list in lists:\n        # Initialize a temporary sum variable\n        temp_sum = 0\n\n        # Loop through each element in the sub-list and add it to the temporary sum\n        for num in sub_list:\n            temp_sum += num\n\n        # If the temporary sum is greater than the maximum sum so far, update both maximum sum and list\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = sub_list\n\n    # Return the list with the highest sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lists[i]\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = 0\n    max_list = []\n    # Iterate over the lists and calculate the sum of their elements\n    for sublist in lists:\n        current_sum = 0\n        for element in sublist:\n            current_sum += element\n        # Check if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(j+1, len(lists[i])):\n                current_sum += lists[i][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = [[lists[i][j]]]\n            elif current_sum == max_sum:\n                result.append([lists[i][j]])\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize a 2D array to store the maximum sum for each sublist\n    max_sums = [[0] * len(lists) for _ in range(len(lists[0]))]\n\n    # Fill the first row and column of the array\n    for i in range(len(lists)):\n        max_sums[i][0] = lists[i][0]\n        max_sums[0][i] = lists[0][i]\n\n    # Fill the rest of the array using dynamic programming\n    for i in range(1, len(lists)):\n        for j in range(1, len(lists[0])):\n            max_sums[i][j] = max(max_sums[i-1][j], max_sums[i][j-1]) + lists[i][j]\n\n    # Find the list in the array that has the highest sum\n    max_sum = max(max_sums[len(lists)-1])\n    list_index = max_sums.index(max_sum)\n    return [lists[i][list_index] for i in range(len(lists))]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and the list containing the maximum sum\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Initialize the current sum and a boolean variable to keep track of whether the current sum is a local maximum\n        current_sum = 0\n        is_local_max = False\n\n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to the current sum and check if it's a local maximum\n            current_sum += num\n            if current_sum > max_sum:\n                max_sum = current_sum\n                is_local_max = True\n\n            # If the current sum is not a local maximum, then check if it's a new maximum and update the maximum sum if necessary\n            if current_sum < max_sum:\n                is_local_max = False\n\n        # If the current sum is a local maximum, then check if it's a new maximum and update the maximum sum if necessary\n        if is_local_max:\n            max_sum = current_sum\n            max_sum_list = lst\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    # iterate over each list in the list of lists\n    for sublist in lists:\n        # calculate the sum of the elements in the list\n        total_sum = sum(sublist)\n        # check if the total sum is greater than the current maximum sum\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = sublist\n    \n    # return the list whose sum of elements is the highest\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables for current run and maximum run\n    curr_run = 0\n    max_run = 0\n    \n    # iterate through each character in the string\n    for i in range(len(test_str)):\n        # if the current character is uppercase, increment the current run\n        if test_str[i].isupper():\n            curr_run += 1\n        # if the current character is not uppercase, reset the current run\n        else:\n            curr_run = 0\n        \n        # if the current run is greater than the maximum run, update the maximum run\n        if curr_run > max_run:\n            max_run = curr_run\n            \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_run:\n                max_run = count\n                start = i - count + 1\n            count = 0\n\n    if count > max_run:\n        max_run = count\n        start = len(test_str) - count\n\n    return test_str[start:start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 1\n    current_run = 1\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 1\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # loop through the string\n    for char in test_str:\n        \n        # if the character is uppercase, add 1 to the current run\n        if char.isupper():\n            current_run += 1\n        \n        # if the character is not uppercase, reset the current run to 0\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    # if the last run is longer than the previous maximum, update the maximum\n    if current_run > max_run:\n        max_run = current_run\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables\n    max_run = 0\n    max_run_start = 0\n    current_run = 0\n\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the previous character was not, increment the current run\n        if (test_str[i].isupper() and not test_str[i-1].isupper()) and i == len(test_str) - 1:\n            current_run += 1\n            max_run = current_run\n        # If the current character is uppercase and the previous character was not, increment the current run\n        elif (test_str[i].isupper() and not test_str[i-1].isupper()) and i < len(test_str) - 1:\n            current_run += 1\n            max_run = max(max_run, current_run)\n        # If the current character is not uppercase and the previous character was not, reset the current run\n        elif not test_str[i].isupper() and not test_str[i-1].isupper():\n            current_run = 0\n        # If the current character is uppercase and the previous character was uppercase, reset the current run\n        elif test_str[i].isupper() and test_str[i-1].isupper():\n            current_run = 0\n        # If the current character is uppercase and the previous character was uppercase, increment the current run\n        elif test_str[i].isupper() and test_str[i-1].isupper():\n            current_run += 1\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n    # Initialize variables to store the start index and end index of the current run of uppercase characters\n    start = 0\n    end = 0\n    # Initialize variables to store the maximum run of uppercase characters found so far\n    max_run = 0\n    # Loop through the string\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i] == test_str[i].upper():\n            # If it is, update the end index and check if the current run of uppercase characters is longer\n            if i - start + 1 > max_run:\n                max_run = i - start + 1\n                end = i\n    # Return the maximum run of uppercase characters found\n    return test_str[start:end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = ''\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the current character is uppercase\n        if char.isupper():\n            # If it is, increment the current run counter\n            current_run += 1\n        else:\n            # If not, reset the current run counter and check if it is longer than the maximum run\n            if current_run > max_run:\n                max_run = current_run\n                prev_char = char\n            # Reset the current run counter\n            current_run = 0\n        \n        # Check if we've gone past the end of the string\n        if current_run == 0 and char == prev_char:\n            break\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find the maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of the current run of uppercase characters and the maximum run found\n    current_run = 0\n    max_run = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase, reset the current run to 0\n        else:\n            current_run = 0\n        \n        # If the current run is longer than the maximum run found so far, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n    \n    # Return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables to store the maximum run and the current run\n    max_run = 0\n    curr_run = 1\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, increase the current run count\n        if test_str[i].isupper():\n            curr_run += 1\n        # If the current character is not uppercase, reset the current run count and check if it is longer than the maximum run\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 1\n\n    # Check if the last run is longer than the maximum run\n    if curr_run > max_run:\n        max_run = curr_run\n\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    max_run = 0\n    max_run_start = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            max_run += 1\n        else:\n            if max_run > max_run_start:\n                max_run_start = 0\n            max_run = 0\n    if max_run > max_run_start:\n        max_run_start = 0\n    return test_str[max_run_start:max_run_start+max_run]\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # If no odd number is found in the list\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # iterate through the list and find the first odd number\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    # if no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i] not in test_tup[K:]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for t in test_tup:\n        if t == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) < K:\n        return False\n    \n    for i in range(K):\n        if not all(test_tup[j] == test_tup[i] for j in range(i+1, K)):\n            return True\n    \n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(f\"The given tuple contains {K}\")\n    else:\n        print(f\"The given tuple does not contain {K}\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_found = False\n    for tup in test_tup:\n        if tup == K:\n            k_found = True\n            break\n    return k_found"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element of the second tuple is smaller than its corresponding element in the first tuple\n        if test_tup1[i] > test_tup2[i]:\n            # If it's smaller, return True\n            return True\n    # If no elements in the second tuple are smaller than corresponding elements in the first tuple, return False\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]