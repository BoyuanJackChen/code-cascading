[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the tuples to lists to make it easier to compare their elements\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Create an empty set to store the shared elements\n    shared_set = set()\n\n    # Loop through the elements of both lists and compare them\n    for elem in list1:\n        if elem in list2:\n            shared_set.add(elem)\n\n    # Convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of the shared elements from the two input tuples.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the common elements in both sets\n    common_elements = set1.intersection(set2)\n    # convert the set back to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_list:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in common_elements:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_set = set(test_tup1) & set(test_tup2)\n    shared_list = list(shared_set)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return True\n    \n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return True\n    \n    # Check if n is divisible by any number between 3 and n-1\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # If none of the above conditions are met, then n is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_not_prime(10)) # Output: True\nprint(is_not_prime(13)) # Output: False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap of the first n numbers\n    heap = nums[:n]\n    hq.heapify(heap)\n    # Build a min heap of the rest of the numbers\n    heapq.heapify(nums[n:])\n    # Compare the two heaps and return the n largest numbers from the larger heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_nums = []\n    # push the first n elements of the list into the heap\n    for i in range(n):\n        heapq.heappush(largest_nums, nums[i])\n    # pop the largest elements from the heap and add them to the result list\n    for i in range(n, len(nums)):\n        if nums[i] > largest_nums[0]:\n            hq.heappop(largest_nums)\n            hq.heappush(largest_nums, nums[i])\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max heap from the given list of numbers\n    hq.heapify(nums)\n\n    # Pop the n largest elements from the heap and return them as a list\n    return [heapq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # initialize an empty max-heap with the first n elements of the input list\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n    \n    # iterate over the remaining elements of the input list\n    for num in nums[n:]:\n        # if the new number is greater than or equal to the maximum element in the heap, pop the maximum element and push the new number\n        if num >= hq.heappop(max_heap):\n            hq.heappush(max_heap, num)\n    \n    # return the max-heap as a list in descending order\n    return [num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers to a min heap\n    min_heap = hq.nsmallest(n, nums)\n    # Extract the n largest integers from the min heap\n    largest = []\n    while min_heap:\n        largest.append(min_heap.pop())\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    heap = [nums[i] for i in range(n)]\n    hq.heapify(heap)\n\n    # iterate through the remaining numbers\n    for i in range(n, len(nums)):\n        # if the current number is larger than the root of the heap, replace it with it\n        if nums[i] > heap[0]:\n            heap[0] = nums[i]\n            # re-heapify the heap after updating the root\n            hq.heapify(heap)\n\n    # extract the n largest numbers from the heap and return them in descending order\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # create a min heap of n largest elements\n    hq.heapify(nums, n, hq.nsmallest)\n\n    # extract n largest elements from the heap\n    largest = []\n    for _ in range(n):\n        largest.append(hq.heappop(nums))\n\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a heap\n    nums_heap = nums[:n]\n    hq.heapify(nums_heap)\n    \n    # Remove the smallest element from the heap\n    for _ in range(n):\n        nums_heap.pop()\n    \n    # Return the heap\n    return nums_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and returns the n largest integers from the list in descending order.\n    '''\n    # convert the list to a max heap\n    max_heap = [-x for x in nums]\n    hq.heapify(max_heap)\n    # extract the n largest integers from the heap\n    result = []\n    for i in range(n):\n        result.append(max_heap[0])\n        hq.heappop(max_heap)\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the given numbers to binary strings \n    num1_bin = bin(x)[2:] \n    num2_bin = bin(y)[2:] \n\n    # Check the number of bits that differ between the two binary strings \n    count = 0 \n    for i in range(len(num1_bin)): \n        if num1_bin[i]!= num2_bin[i]: \n            count += 1 \n\n    # If the count is 1, the two numbers differ at one bit position only \n    if count == 1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n\n    :param x: The first number to check.\n    :return: True if x is a power of two, False otherwise.\n    '''\n    \n    if x == 0:\n        return False\n\n    while x & 1 == 0:\n        x >>= 1\n\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # get the highest bit position of the input number\n    highest_bit_position = bin(x).count('1')\n    \n    # get the highest bit position of the second number\n    second_highest_bit_position = bin(x-1).count('1')\n    \n    # check if the highest and second highest bit positions are same or not\n    if highest_bit_position == second_highest_bit_position:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x - 1) == 0:\n        return False\n    else:\n        return is_Power_Of_Two(x - 1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(n):\n    if n == 0 or n == 1:\n        return True\n    else:\n        for i in range(1, 32):\n            if (n & (1 << i))!= 0:\n                return False\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0: # check if x has only one bit set\n        x &= (x - 1) # set x to its least significant bit position\n    return x == 1 # if x has only one bit set, then return True, otherwise False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    i = 1\n    while (x & i) == 0:\n        i <<= 1\n    return (x ^ i)!= 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    count = 0\n    while x > 1:\n        if x & 1:\n            count += 1\n        x >>= 1\n\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert both numbers to binary strings\n    bin_x = bin(x)[2:]\n    bin_y = bin(y)[2:]\n    \n    # Check if the two binary strings differ only at one bit position\n    if bin_x[-1]!= bin_y[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            x = 3 * x + 1\n        count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w*[a-zA-Z]\\w*\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog slept all day.\"\nresult = find_char_long(text)\nprint(result)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b' # define the pattern to match words with at least 4 characters\n    words = re.findall(pattern, text) # find all the matches in the text\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter out words with less than 4 characters\n    filtered_words = [word for word in words if len(word) >= 4]\n    # return the filtered words\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # using \\b to match word boundaries\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through the list of numbers\n    for num in nums:\n        # Square the number and append the result to a new list\n        squares.append(num ** 2)\n    # Return the new list of squares\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    min_rotations = n \n    for i in range(1, n): \n        for j in range(i+1, n): \n            if str[j] < str[i]: \n                min_rotations = min(min_rotations, j - i + 1) "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Get the length of the string\n    n = len(str)\n    # Create a boolean array of size n to keep track of the characters in the string\n    visited = [False] * n\n    # Initialize the count of rotations as 0\n    count = 0\n    # Initialize the starting index and ending index of the string\n    start = 0\n    end = n - 1\n\n    # Traverse the string and check if the characters are visited\n    while start <= end:\n        if visited[start]:\n            start += 1\n        else:\n            visited[start] = True\n            # Check if the characters are equal\n            if str[start] == str[end]:\n                # If they are, move the start and end indices\n                start += 1\n                end -= 1\n            else:\n                # If they are not, reset the start index and increment the count\n                start = 0\n                count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a Python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    \n    # Find the length of the input string\n    n = len(str)\n    \n    # Initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n    \n    # Initialize the suffix array\n    suffix_array = sorted(range(n), key=lambda x: str[x:])\n    \n    # Initialize the reverse suffix array\n    reverse_suffix_array = sorted(range(n), key=lambda x: str[::-1][x:])\n    \n    # Iterate through the suffix array\n    for i in range(n - 1, -1, -1):\n        \n        # If the suffix array is greater than the reverse suffix array, then update the minimum number of rotations\n        if suffix_array[i] > reverse_suffix_array[i]:\n            min_rotations = min(min_rotations, i)\n    \n    # If the minimum number of rotations is greater than 0, then the string is already rotated\n    if min_rotations > 0:\n        return min_rotations\n    \n    # Otherwise, the string is not rotated\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # initialize the count of rotations\n    count = 0\n    \n    # find the length of the string\n    n = len(str)\n    \n    # loop through all possible rotations\n    for i in range(n):\n        for j in range(i+1, n):\n            # get the substrings at the current positions\n            left_substring = str[j:i+1]\n            right_substring = str[i+1:j+1]\n            \n            # check if the substrings are equal\n            if left_substring == right_substring:\n                # if they are, increment the count\n                count += 1\n    \n    # return the minimum number of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n\n    :param str: The string whose rotations need to be found.\n    :return: The minimum number of rotations required to get the same string.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    temp = str\n    \n    # Loop until the string is the same as its initial state\n    while temp!= str:\n        # Increment the count\n        count += 1\n        # Reverse the string\n        temp = temp[::-1]\n        \n    # Return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = list(str)\n    n = len(str)\n    max_rot = 0\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            max_rot += 1\n    return max_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rot = float('inf')\n    \n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                min_rot = min(min_rot, j - i + 1)\n    \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Initialize variables to keep track of minimum rotations and the length of the string\n    min_rotations = 0\n    len_str = len(str)\n\n    # Loop through each character of the string\n    for i in range(len_str):\n        # Find the index of the next character to compare to i\n        j = (i + 1) % len_str\n\n        # If the next character is not equal to the current character, we've found a rotation\n        if str[j]!= str[i]:\n            min_rotations += 1\n\n    # Return the minimum number of rotations found\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    if len(str) == 1:\n        return 0\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for l in range(1, n + 1):\n        for i in range(l, n + 1):\n            if i == l:\n                dp[l][i] = 0\n            elif i == l + 1:\n                dp[l][i] = 1\n            else:\n                for j in range(l, i):\n                    dp[l][i] = min(dp[l][i], dp[l][j] + dp[j][i])\n    return dp[1][n]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the string to a set to remove duplicates\n    str_set = set(str)\n\n    # Find the length of the string\n    length = len(str)\n\n    # Initialize the minimum number of rotations\n    min_rotations = length\n\n    # Loop through all possible rotations of the string\n    for i in range(length):\n        # Find the number of occurrences of each character in the rotated string\n        rotated_count = {}\n        for j in range(i, length):\n            if str[j] in rotated_count:\n                rotated_count[str[j]] += 1\n            else:\n                rotated_count[str[j]] = 1\n\n        # Check if the rotated string is equal to the original string\n        if rotated_count == str_set:\n            # If it is, update the minimum number of rotations\n            min_rotations = min(min_rotations, length - i)\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find the index of the first occurrence of the character in the string\n    first_index = s.find(ch)\n\n    # If the first index is not -1, remove the character at that index\n    if first_index!= -1:\n        s = s[:first_index] + s[first_index+1:]\n\n    # Find the index of the last occurrence of the character in the string\n    last_index = s.rfind(ch)\n\n    # If the last index is not -1, remove the character at that index\n    if last_index!= -1:\n        s = s[:last_index] + s[last_index+1:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Finding the first and last index of the given character\n    first = s.find(ch)\n    last = s.rfind(ch)\n\n    # If the character is found at the first or last index, then it will be removed from the string\n    if first!= -1:\n        s = s[:first] + s[first+len(ch):]\n    if last!= -1:\n        s = s[:last] + s[last+len(ch):]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occurrence = s.find(ch)\n    if first_occurrence!= -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n        last_occurrence = s.rfind(ch)\n        if last_occurrence!= -1:\n            s = s[:last_occurrence] + s[last_occurrence+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        s = s[1:]\n    elif s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string and a character as input and removes the first and last occurrence of the character from the string.\n    '''\n    if s.find(ch)!= -1:\n        s = s[:s.find(ch)] + s[s.find(ch)+len(ch):]\n        s = s[:s.rfind(ch)] + s[s.rfind(ch)+len(ch):]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, \"\")\n    return s[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence\n    s = s.replace(ch,'',1)\n    # remove last occurrence\n    s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    if s.find(ch)!= -1:\n        s = s.replace(ch, \"\", 1)\n    if s.find(ch)!= -1:\n        s = s.replace(ch, \"\", 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two arguments - string and character to be removed.\n    It removes the first and last occurrence of the character from the string.\n    '''\n    # checking for first occurrence of character in string\n    if s.find(ch) == 0:\n        s = s[1:]\n    \n    # checking for last occurrence of character in string\n    if s.find(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').strip()"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # create a temporary matrix to store the sorted matrix\n    sorted_M = [[0] * n for i in range(n)]\n\n    # sort each row of the matrix in ascending order\n    for i in range(n):\n        row = [M[j][i] for j in range(n)]\n        row.sort()\n        for j in range(n):\n            sorted_M[j][i] = row[j]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Calculate the sum of each row of the matrix\n    row_sums = []\n    for i in range(rows):\n        row_sum = sum(M[i])\n        row_sums.append(row_sum)\n    \n    # Sort the row sums in ascending order\n    row_sums.sort()\n    \n    # Create a new matrix to store the sorted matrix\n    sorted_matrix = []\n    for i in range(rows):\n        sorted_row = []\n        for j in range(cols):\n            sorted_row.append(M[i][j])\n        sorted_matrix.append(sorted_row)\n    \n    # Add the sorted row sums to the matrix\n    for i in range(rows):\n        sorted_matrix[i].append(row_sums[i])\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # calculate the sum of each row\n    rows_sums = [sum(row) for row in M]\n    \n    # sort the matrix in ascending order based on the row sums\n    sorted_M = sorted(M, key=lambda x: rows_sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Sort the current row\n        M[i].sort()\n        # Calculate the sum of the current row\n        row_sum = sum(M[i])\n        # Swap adjacent rows if necessary\n        if i > 0 and M[i][0] <= M[i-1][0]:\n            M[i], M[i-1] = M[i-1], M[i]\n        # Move the swapped row to its final position\n        j = i\n        while j > 0 and row_sum < M[j-1][0]:\n            M[j], M[j-1] = M[j-1], M[j]\n            j -= 1\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables\n    n = len(M)\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n    \n    # Loop through each row of the matrix\n    for i in range(n):\n        # Create a temporary list to store the row values for sorting\n        row_values = []\n        # Loop through each column of the row\n        for j in range(n):\n            # Add the value of the cell to the temporary list\n            row_values.append(M[i][j])\n        # Sort the temporary list in ascending order\n        row_values.sort()\n        # Loop through each value in the temporary list and add it to the sorted matrix\n        for value in row_values:\n            sorted_M.append(value)\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row in the matrix\n    for i in range(len(M)):\n        # sort the elements of the row in ascending order\n        M[i].sort()\n        # calculate the sum of the sorted row\n        row_sum = sum(M[i])\n        # loop through each column in the matrix\n        for j in range(len(M)):\n            # if the sum of the current element is less than the row sum, swap them\n            if M[i][j] < row_sum:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M[i])):\n            if M[i][j] < M[i][i]:\n                # swap rows\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        # Find the maximum element in the current row\n        max_index = i\n        for j in range(i+1, n):\n            if M[j][i] > M[max_index][i]:\n                max_index = j\n        # Swap the maximum element with the first element in the current row\n        M[i], M[max_index] = M[max_index], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    num_rows = len(M)\n    num_cols = len(M[0])\n    \n    # Create a list of tuples containing the row sums and the matrix indices\n    row_sums = [(sum(row), i, j) for i in range(num_rows) for j in range(num_cols)]\n    \n    # Sort the list of tuples by row sum\n    row_sums.sort()\n    \n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[0] * num_cols for _ in range(num_rows)]\n    for row_sum, i, j in row_sums:\n        sorted_matrix[i][j] = M[i][j]\n    \n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h #volume of the prism"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length of the base and height of the prism, and calculates the volume using Heron's formula.\n    '''\n    area = (l * b * h) / 2\n    volume = area * 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length, width, and height of a triangular prism as input parameters.\n    It then calculates and returns the volume of the prism.\n    '''\n\n    volume = l * b * h / 6\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l * b * h / 3 # Formula to calculate the volume of a triangular prism\n    print(\"The volume of the triangular prism is:\", Volume) # Printing the volume of the triangular prism"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters, l, b, and h, which are the lengths of the sides of the triangular prism.\n    The function calculates the volume of the prism using the formula V = (1/2) * l * b * h.\n    '''\n    V = (1/2) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    #Calculate the semi-perimeter of the prism\n    s = (l+b+h)/2\n    \n    #Calculate the volume of the prism\n    V = (l*b*h)/3\n    \n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+_)+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text.lower())\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # define regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b[a-z]*[_][a-z]*\\b'\n\n    # use re.search() function to search for a match in the input string\n    match = re.search(pattern, text)\n\n    # check if a match was found and return its value\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]*_[a-z]*$'\n    match = re.match(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z])(_[a-z])+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = re.compile(r'([a-z])_([a-z])')\n    lowercase_pattern = re.compile(r'([a-z])')\n    \n    if underscore_pattern.search(text):\n        return True\n    \n    if lowercase_pattern.search(text):\n        return False\n    \n    return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^([a-z]+)_+([a-z]+)$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function removes characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(string1)\n\n    # Iterate over the characters in the list\n    for i, char in enumerate(char_list):\n        # If the character is present in the second string, remove it from the list\n        if char in string2:\n            char_list.pop(i)\n\n    # Convert the list back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_set = set(\"abcdefghijklmnopqrstuvwxyz0123456789\")\n    first_string = string.lower()\n    result = []\n    for char in first_string:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    # Create a list to store the characters in the first string\n    list_of_chars = [0] * NO_OF_CHARS\n    \n    # Convert the string to a list of ASCII values\n    ascii_list = [ord(char) for char in string]\n    \n    # Iterate through the ASCII values and check if the character is present in the second string\n    for char in ascii_list:\n        if char in ascii_list:\n            # If the character is present in the second string, remove it from the list\n            index = ascii_list.index(char)\n            list_of_chars[index] = 0\n    \n    # Convert the list of characters to a string\n    result = \"\".join(chr(char) for char in list_of_chars)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of all ASCII characters\n    ascii_list = [chr(i) for i in range(NO_OF_CHARS)]\n    \n    # Create a list of characters to be removed\n    remove_list = [chr(i) for i in range(NO_OF_CHARS) if string.count(chr(i)) > 0]\n    \n    # Create a new list without the characters to be removed\n    result = [char for char in ascii_list if char not in remove_list]\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a list containing all the characters that are not present in the second string.\n    '''\n    second_string = input(\"Enter the second string: \")\n    # convert both strings to lists of characters\n    char_list1 = list(string)\n    char_list2 = list(second_string)\n    # find the intersection of the two lists\n    common_chars = [char for char in char_list1 if char in char_list2]\n    # remove the characters from the first string\n    new_string = ''.join([char for char in string if char not in common_chars])\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters to be removed from the first string\n    set_of_chars = set(string)\n    # Remove the characters from the first string which are present in the set of characters\n    result = ''.join(char for char in string if char not in set_of_chars)\n    # Return the result string\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string)\n    set_string = set(string)\n\n    for char in set_string:\n        if char in list_string:\n            list_string.remove(char)\n\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    list_string = list(string)\n\n    # Check if the string has more than NO_OF_CHARS characters\n    if len(list_string) > NO_OF_CHARS:\n        raise ValueError(\"String has more than {} characters.\".format(NO_OF_CHARS))\n\n    # Create an empty list to store the characters to be removed\n    remove_list = []\n\n    # Iterate through the list of characters and check if they are present in the second string\n    for char in list_string:\n        if char not in string:\n            remove_list.append(char)\n\n    # Remove the characters from the list of characters\n    for char in remove_list:\n        list_string.remove(char)\n\n    # Convert the list of characters back to a string\n    result_string = ''.join(list_string)\n\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    CHARS_LIST = list(range(NO_OF_CHARS))\n    char_set = set(string)\n    final_list = []\n    for char in CHARS_LIST:\n        if char not in char_set:\n            final_list.append(chr(char))\n    return ''.join(final_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    # Remove all characters which are present in the second string\n    result = \"\"\n    for char in string:\n        if char not in string2:\n            result += char\n    \n    # Convert the resulting string to a list of characters\n    result = list(result)\n    \n    # Remove duplicates\n    result = list(dict.fromkeys(result))\n    \n    # Return the resulting list of characters\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the indices of the elements\n    indices = {}\n    # iterate over the array of integers\n    for i in range(len(arraynums)):\n        # check if the current element is already in the dictionary\n        if arraynums[i] in indices:\n            # if it is, return True since there is a duplicate element\n            return True\n        else:\n            # if not, add the index to the dictionary\n            indices[arraynums[i]] = i\n    # if no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the indices of each element in the array\n    indices = {}\n\n    # Iterate over the array and for each element, check if it's already in the dictionary\n    for i, num in enumerate(arraynums):\n        if num in indices:\n            # If it is, return True because there's at least one duplicate element\n            return True\n        else:\n            # Otherwise, add the index of the current element to the dictionary\n            indices[num] = i\n\n    # If we reach this point, the loop has completed without finding any duplicates, so return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty dictionary\n    duplicate_dict = {}\n\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the current number is already in the dictionary, return True\n        if num in duplicate_dict:\n            return True\n        # Otherwise, add the number to the dictionary\n        else:\n            duplicate_dict[num] = True\n\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        hashset.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the elements of the array\n    element_dict = {}\n\n    # loop through the array and add each element to the dictionary\n    for num in arraynums:\n        if num in element_dict:\n            # if the element already exists in the dictionary, return True\n            return True\n        else:\n            # if the element does not exist in the dictionary, add it to the dictionary\n            element_dict[num] = True\n\n    # if the loop completes without finding any duplicate elements, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    # Iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n    # Check if the set has any elements (if there are no duplicates, the set will have a size of 0)\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty dictionary to store the elements\n    elements = {}\n    for num in arraynums:\n        # If the element is not already in the dictionary, add it\n        if num not in elements:\n            elements[num] = True\n        else:\n            # If the element is already in the dictionary, return True\n            return True\n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n\n    # Check if the length of the unique set is equal to the length of the original array\n    if len(unique_set) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if the array contains any duplicate elements, and False otherwise.\n    \"\"\"\n    # create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arraynums:\n        # if the element is already in the dictionary, increment its count by 1\n        if num in count_dict:\n            count_dict[num] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # iterate over the dictionary and check if any element has a count greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n\n    # if no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 13:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define a list of valid woodball numbers\n    valid_numbers = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n    # Check if the given number is in the list of valid woodball numbers\n    if x in valid_numbers:\n        # If it is, return True\n        return True\n    else:\n        # If it isn't, return False\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the set of possible values for the digits of the number\n    woodball_values = {1, 2, 4, 7}\n\n    # Check if the number has at least three digits and at most four digits\n    if len(str(x)) < 3 or len(str(x)) > 4:\n        return False\n\n    # Convert the number to a list of digits\n    digits = list(str(x))\n\n    # Check if all the digits in the list are present in the woodball_values set\n    for digit in digits:\n        if int(digit) not in woodball_values:\n            return False\n\n    # If we've made it this far, the number is a woodball\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 10 or x > 90:\n        return \"Not a woodball\"\n    elif x < 30:\n        return \"Woodball\"\n    else:\n        return \"Woodball not possible\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the given number is divisible by 3 and 4\n    if x % 3 == 0 and x % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 24 or x == 48 or x == 72 or x == 96: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 12 or x == 7 or x == 4 or x == 2 or x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    if x == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse*10 + temp % 10\n        temp //= 10\n    return reverse == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num % 10\n        num //= 10\n    return (rev_num - 2*rev_num) % 10 == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    return num - reverse + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string and split it into digits\n    num_str = str(num)\n    num_list = list(num_str)\n    \n    # Reverse the digits of the number\n    reverse_list = num_list[::-1]\n    \n    # Convert the reversed digits back to a number\n    reverse_num = int(\"\".join(reverse_list))\n    \n    # Check if the reversed number is one less than twice the original number\n    if reverse_num < (2*num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    if num == reverse * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the input number to a string\n    str_num = str(num)\n\n    # Reverse the string\n    reversed_str = str_num[::-1]\n\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n\n    # Check if the reversed number is one less than twice the original number\n    if reversed_num == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    if num > 0 and num < 1000:\n        reverse = 0\n        temp = num\n        while temp > 0:\n            reverse = reverse * 10 + temp % 10\n            temp //= 10\n        if reverse < 2 * num:\n            print(f\"{num} is one less than twice its reverse.\")\n        else:\n            print(f\"{num} is not one less than twice its reverse.\")\n    else:\n        print(\"The given number is out of range.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    return reverse_num % 2 == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Calculate the reverse of the input number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n\n    # Check if the input number is one less than twice its reverse\n    if num == reverse - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # get the reverse of the number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n\n    # check if the reverse is one less than twice the original number\n    return rev_num == 2*num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) :\n        max_num = max(max_num, int(''.join(sorted(map(str,arr[i])))), int(''.join(sorted(map(str,arr[i][::-1])))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize max number as 0\n    max_num = 0\n\n    # Iterate through the sorted list\n    for num in arr:\n        # Check if the sum of current number and max number is greater than the current number\n        if num + max_num > num:\n            # Update max number with current number\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    num = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            num = 0\n        elif arr[i] == 1:\n            num = num*10 + 1\n        elif arr[i] == 2:\n            num = num*10 + 2\n        elif arr[i] == 3:\n            num = num*10 + 3\n        elif arr[i] == 4:\n            num = num*10 + 4\n        elif arr[i] == 5:\n            num = num*10 + 5\n        elif arr[i] == 6:\n            num = num*10 + 6\n        elif arr[i] == 7:\n            num = num*10 + 7\n        elif arr[i] == 8:\n            num = num*10 + 8\n        elif arr[i] == 9:\n            num = num*10 + 9\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    max_count = 0\n    for i in range(2**n):\n        count = 0\n        for j in range(n):\n            if (i>>j) & 1 == 1:\n                count += 1\n        if count > max_count:\n            max_num = i\n            max_count = count\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr:\n        if i > max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n    '''\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Function to check if a number is palindrome or not\n    def is_Palindrome(num):\n        # Convert the number to string and then reverse it\n        num_str = str(num)\n        return num_str == num_str[::-1]\n    \n    # Function to check if a number can be formed with the given digits\n    def can_Form_Number(num, digits):\n        # Check if the number is already palindrome\n        if is_Palindrome(num):\n            return True\n        \n        # Check if the number can be formed with the given digits by iterating over each digit\n        for digit in digits:\n            # Check if the remaining digits in the number is less than the current digit\n            if num % 10 < digit:\n                return False\n            \n            # Remove the current digit from the number and try to find a number that can be formed with the remaining digits\n            num = num // 10\n        \n        # If we have reached here, then the number can be formed with the given digits\n        return True\n    \n    # Initialize the largest number to be formed with all digits\n    max_num = 0\n    \n    # Iterate over all possible digits and check if they can be formed with the given digits\n    for i in range(10):\n        if can_Form_Number(i, arr):\n            # Update the largest number if the current digit can be formed with the given digits\n            max_num = i\n    \n    # Return the largest number that can be formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n\n    # Initialize variables \n    max_num = arr[0]\n    temp_num = arr[0]\n\n    # Loop through the list and find the maximum number \n    for i in range(1, len(arr)) : \n        temp_num = temp_num * 10 + arr[i]\n        if temp_num > max_num : \n            max_num = temp_num\n\n    return max_num "
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the given list of digits in non-decreasing order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number\n    max_num = 0\n\n    # Iterate through the sorted list of digits\n    for digit in arr:\n\n        # If the current digit is equal to or less than the maximum number, update the maximum number\n        if digit <= max_num:\n            max_num = digit\n\n    # Return the maximum number\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y >= 0:\n        return True\n    elif x >= 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    # check if both the numbers have the same sign\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"The given numbers have opposite signs.\"\n    elif x < 0 and y < 0:\n        return \"The given numbers have opposite signs.\"\n    elif x == 0 and y == 0:\n        return \"The given numbers are zero.\"\n    else:\n        return \"The given numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == y:\n        return True\n    elif x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y): \n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if the second integer is greater than the first integer and False otherwise.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x == 0 and y == 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = n * (3 * n - 1) // 2\n    return octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = 1\n    i = 1\n    while i <= n:\n        octagonal *= 10\n        i += 1\n    return octagonal - 10\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if input is integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Check if input is positive\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Initialize counter variable\n    counter = 1\n\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through all even numbers greater than or equal to 1\n    while counter >= 1:\n        # Add current even number to sum\n        sum += counter\n\n        # Divide counter by 2\n        counter //= 2\n\n    # Check if sum is equal to n\n    if sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(n+1)*(2*n+1)*(8*n**2 - 16*n + 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number and False otherwise.\n    An octagonal number is a number that can be expressed as the sum of three perfect squares.\n    For example, 15 is an octagonal number because 1^2 + 2^2 + 3^2 = 15.\n    '''\n    # To check if a number is octagonal or not, we need to check if its sum of three perfect squares is divisible by 12.\n    # The sum of two perfect squares is always even, so we need to check only odd numbers.\n    # We use a loop to calculate the sum of squares of odd numbers from 1 to n.\n    # We use the formula s = n^2 + (n-1)^2.\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i*i + (i-1)*i\n    # Check if the sum of squares is divisible by 12.\n    if s % 12 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        if i**2 == 8*i+1:\n            octagonal_numbers.append(i**2)\n    return octagonal_numbers[-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num = num * 8\n        if i < (n//2):\n            num += 1\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    # Define the function to find the nth octagonal number\n    def octagonal_number(n):\n        return n * (8 * n + 1) / 3\n\n    # Calculate the nth octagonal number\n    nth_octagonal = octagonal_number(n)\n\n    return nth_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2!= 0:\n        print('The number is not even.')\n        return\n    \n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i + j * j == n:\n                print(n)\n                return\n            j += 1\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n ** 2) + 1\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_octagonal(n)\nprint(f\"The {n}th octagonal number is: {result}\")"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[sum(int(c) for c in s[i:])] += 1\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += d[sum(int(c) for c in s[i:j])]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    for i in range(n):\n        dp[s[i]] += 1\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(s[i:j]) for i in range(j-1, -1, -1)) == j-i:\n                count += dp[str(j-i)]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Dictionary to store the count of substrings with given sum\n    counts = defaultdict(int)\n\n    # Loop through all possible substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            substring = int(s[i:j])\n\n            # Check if the sum of digits is equal to its length\n            if substring == len(substring):\n                # Increment the count for the substring\n                counts[substring] += 1\n\n    # Return the count of substrings with given sum\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Dictionary to store the number of substrings with sum of digits equal to length\n    count_dict = defaultdict(int)\n    \n    # Loop through the string and calculate the sum of digits for each substring\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            digit_sum = sum(int(digit) for digit in s[i:j])\n            count_dict[digit_sum] += 1\n            \n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    n = len(s)\n    count = 0\n    substrings = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digits = [int(d) for d in substring]\n            if sum(digits) == len(digits):\n                count += 1\n                substrings[substring] += 1\n    return count, substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[int(s[i])] += 1\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if j - i == len(s):\n                count += digit_count[sum(map(int, s[i:j]))]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    digit_count = defaultdict(int)\n    for i in range(n):\n        digit_count[ord(s[i]) - ord('0')] += 1\n    for i in range(n):\n        for j in range(i, n):\n            if sum(digit_count[ord(s[k]) - ord('0')] for k in range(i, j+1)) == j - i + 1:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    substrings = defaultdict(int)\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            if int(substring) == len(substring):\n                count += 1\n                substrings[len(substring)] += 1\n    \n    return count, substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Substrings(s):\n    def count_substring_sum(substring):\n        count = 0\n        for i in range(len(s)-len(substring)+1):\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n        return count\n\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            substrings[substring] += 1\n\n    count = sum(count_substring_sum(substring) for substring in substrings)\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        raise ValueError(\"The list is empty.\")\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1][0] - test_list[i][0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize maximum difference to zero\n    max_diff = 0\n    \n    # Iterate over all possible pairs of tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate difference between pairs\n            diff = test_list[j][1] - test_list[i][1]\n            \n            # Update maximum difference if current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Return maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    # Initialize variables\n    max_diff = 0\n    n = len(test_list)\n\n    # Loop through each pair of tuples in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples\n    sorted_list = sorted(test_list)\n    # Initialize the maximum difference variable to the first element of the list\n    max_diff = sorted_list[0][1] - sorted_list[0][0]\n    # Loop over all pairs of elements in the sorted list\n    for i in range(1, len(sorted_list)):\n        # Calculate the difference between the current and next pair of elements in the list\n        diff = sorted_list[i][1] - sorted_list[i][0]\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    # initialize variables for maximum difference and current difference\n    max_diff = float('-inf')\n    curr_diff = 0\n\n    # iterate through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the current pair of tuples\n            diff = test_list[j][0] - test_list[i][0]\n            # update the current difference if the new difference is greater\n            curr_diff = max(curr_diff, diff)\n            # update the maximum difference if the current difference is greater\n            max_diff = max(max_diff, curr_diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1])\n    max_diff = test_list[-1][1] - test_list[0][1]\n    for i in range(1, len(test_list)):\n        diff = test_list[i][1] - test_list[i-1][1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    # Initialize variables to store maximum difference and current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        # Calculate difference between current and next tuple\n        next_diff = abs(test_list[i][0] - test_list[i+1][0])\n\n        # Update current and maximum difference\n        curr_diff = next_diff\n        max_diff = max(max_diff, curr_diff)\n\n    # Return maximum difference\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value (i.e., the subject)\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples in ascending order based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Convert the list of tuples to a list of lists\n    marks_list = [list(i) for i in subjectmarks]\n\n    # Sort each list of marks in ascending order\n    for i in range(len(marks_list)):\n        marks_list[i].sort()\n\n    # Convert the list of lists back to a list of tuples\n    sorted_marks = [(i[0], i[1]) for j in marks_list for i in j]\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function sorts a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Using a lambda function to create a key function to sort the tuples\n    key_function = lambda x: x[1]\n    \n    # Sorting the list of tuples using the sorted() function with the key function\n    sorted_marks = sorted(subjectmarks, key=key_function)\n    \n    # Printing the sorted list of tuples\n    print(sorted_marks)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(sum(data_list, []))\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        '''\n        Recursive function to flatten a list.\n        '''\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        '''\n        Flatten a list recursively.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    def sum_flattened_list(flat_list):\n        '''\n        Sum all elements in a flattened list.\n        '''\n        return sum(flat_list)\n\n    flattened_list = flatten_list(data_list)\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # check if the input list is empty\n    if not data_list:\n        return 0\n    # if the input list has only one element, return the element\n    elif len(data_list) == 1:\n        return data_list[0]\n    # otherwise, recursively call the function with the rest of the list\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    total_sum = 0\n    for item in flattened_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element and the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst, result=[]):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item, result)\n            else:\n                result.append(item)\n        return result\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(recursive_list_sum(item))\n            else:\n                flat_list.append(item)\n        return recursive_list_sum(flat_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    A function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a Python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a Python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # recursive case\n        return (bell_number(n-1) + bell_number(n-2))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    # Initialize the number of ways to partition the set to 1.\n    ways = 1\n    \n    # Iterate over all possible sets of bell numbers up to n.\n    for i in range(1, n+1):\n        \n        # If the set contains only one bell number, there's only one way to partition it.\n        if i == 1:\n            ways *= 1\n        else:\n            # Find the number of ways to partition the set with the bell numbers i-1 and i.\n            ways *= (i-1)\n            \n            # Add the number of ways to partition the set with only one bell number.\n            ways += 1\n    \n    # Return the number of ways to partition the set.\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize an array to store the number of ways to partition\n    ways = [0] * (n + 1)\n\n    # Initialize the first three Bell numbers\n    ways[0] = 1\n    ways[1] = 1\n    ways[2] = 1\n\n    # Fill in the rest of the array\n    for i in range(3, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3]\n\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Create a list of the first n Bell numbers\n    bell_numbers = [1]\n    for i in range(2, n+1):\n        bell_numbers.append(2*bell_numbers[-1] + 1)\n\n    # Initialize the partition count to 0\n    partition_count = 0\n\n    # Iterate through the list of Bell numbers\n    for i in range(2, n+1):\n        # Calculate the number of ways to partition the first i Bell numbers\n        ways_to_partition = (bell_numbers[i] - 1) // 2\n\n        # Update the partition count if the current Bell number is odd\n        if i % 2 == 1:\n            partition_count += ways_to_partition\n\n    return partition_count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n < 0:\n        return \"Bell number is not defined for negative integers\"\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n) // (1 + 2 * n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n\n    # Create a set of all Bell numbers up to n\n    bell_set = set(range(n + 1))\n\n    # Initialize a count variable to 0\n    count = 0\n\n    # Iterate through all possible combinations of Bell numbers\n    for i in range(2, n + 1):\n        for j in range(2, i + 1):\n            # Check if the current combination of Bell numbers is a subset of the set of Bell numbers\n            if j in bell_set:\n                count += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(count, total):\n        if count == 0:\n            return 1\n        elif count == 1:\n            return total\n        else:\n            return (helper(count-1, total) + helper(count-2, total)) % (10**9 + 7)\n    \n    return helper(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return bell_number(n//2)\n    else:\n        return 2*bell_number(n//2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) == 0 or len(A) == 1: \n        return True\n    \n    if A[0] == A[-1]: \n        return is_Monotonic(A[1:-1])\n    \n    if A[0] < A[-1]: \n        return is_Monotonic(A[1:])\n    else: \n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is empty or has only one element\n    if len(A) < 2:\n        return True\n\n    # Check if the array is monotonic in terms of increasing or decreasing\n    if A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3]:\n        return True\n    elif A[0] >= A[1] and A[1] >= A[2] and A[2] >= A[3]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check if the given array is monotonic or not.\n\n    Args:\n        A: List of integers\n\n    Returns:\n        True if the array is monotonic, False otherwise.\n    \"\"\"\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # Initialize the last element and its direction\n    last_element = A[-1]\n    last_direction = \"+\"\n    \n    # Iterate through the array from the second to the last element\n    for i in range(len(A)-2, -1, -1):\n        if A[i] == last_element:\n            # If the current element is equal to the last element, then\n            # the array is not monotonic\n            return False\n        \n        # Check if the direction of the current element is the same as the direction of the last element\n        if A[i] > last_element:\n            if last_direction == \"-\":\n                # If the direction of the current element is greater than the last element, then\n                # the array is not monotonic\n                return False\n            last_direction = \"+\"\n        elif A[i] < last_element:\n            if last_direction == \"+\":\n                # If the direction of the current element is less than the last element, then\n                # the array is not monotonic\n                return False\n            last_direction = \"-\"\n            \n        # Update the last element and its direction\n        last_element = A[i]\n        \n    # If all elements are different, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[1] >= A[0]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[:-1])\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n    # Check if the array is monotonic\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    # Initialize variables for tracking monotonicity\n    increasing = True\n    decreasing = True\n\n    # Loop through the array and check monotonicity\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            increasing = False\n        if A[i] >= A[i-1]:\n            decreasing = False\n        if increasing == False and decreasing == False:\n            return False\n\n    # If we make it through the loop without returning False, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    A = sorted(A)\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    \n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if is_sublist(l[i:], s[1:]):\n                return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    elif len(s) == 0:\n        return True\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    return s[0] in l[0] and is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Create a dictionary to store the index of each element of the sublist\n    sublist_index = {}\n    for i, elem in enumerate(s):\n        sublist_index[elem] = i\n    # Iterate over the list and check if the sublist is present\n    for elem in l:\n        if elem in sublist_index and sublist_index[elem] < len(l) - len(s):\n            return True\n    # If the sublist is not present in the list, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length or False otherwise.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            for k in range(len(Input[i][j])):\n                if Input[i][j][k]!= Input[i][j][0]:\n                    return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(t) for t in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(set(i)) == 1:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple1 in Input:\n        if len(tuple1)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Convert the input list to a set of tuples to count the lengths of the tuples\n    tuples_lengths = set([len(x) for x in Input])\n    # Check if all the lengths are equal\n    if len(tuples_lengths) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = []\n    for tup in Input:\n        lengths.append(len(tup))\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    This function implements the Comb Sort algorithm for sorting a list of elements.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    gap = n\n\n    # Iterate until the gap is equal to 1\n    while gap > 1:\n        # Calculate the new gap based on the gap value\n        gap = int(gap / 1.3)\n\n        # Iterate through the list until the gap is reached\n        for i in range(gap, n):\n            # Calculate the index of the current element\n            j = i\n\n            # Compare the current element with its adjacent elements\n            while j >= gap and nums[j] > nums[j - gap]:\n                # Swap the elements if they are not in the correct order\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n\n                # Update the index to the previous element\n                j -= gap\n\n            # If the gap has been reached, stop iterating through the list\n            if j < gap:\n                break\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Comb sort algorithm.\n\n    Parameters:\n    nums (list): The list of elements to be sorted.\n\n    Returns:\n    The sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap //= 1\n        if gap == 1:\n            gap = n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        if gap <= 1 or not swapped:\n            break\n        gap //= 1.3\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums) // 2\n\n    while gap > 0:\n        for i in range(gap, len(nums)):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            nums[i], nums[j] = nums[j], nums[i]\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    max_iter = 10000\n    swapped = True\n\n    while swapped:\n        swapped = False\n\n        for i in range(max_iter):\n            swapped = False\n            gap = n // 2\n\n            for j in range(n-gap):\n                if nums[j] > nums[j+gap]:\n                    nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                    swapped = True\n\n            if not swapped:\n                break\n\n        max_iter = int(max_iter*1.1)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            nums[j], nums[i] = nums[i], nums[j]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            gap = gap // 2\n        else:\n            gap = n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    \"\"\"\n    # Initialize the variables for the algorithm\n    gap = len(nums)\n    swapped = True\n    i = 0\n\n    while swapped:\n        swapped = False\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n        gap = int(gap / 1.3)\n        i += 1\n\n        if i == 100:\n            raise ValueError(\"The list is already sorted.\")\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define the maximum number of swaps to be performed\n    max_swaps = len(nums)\n\n    # define the gap size\n    gap = max_swaps // 2\n\n    # define a boolean variable to keep track of whether the list is sorted or not\n    is_sorted = False\n\n    # start sorting the list\n    while not is_sorted:\n\n        # keep track of whether any swaps were made during the iteration\n        swapped = False\n\n        # iterate over the list and perform swaps\n        for i in range(gap, len(nums)):\n\n            # check if the current element is greater than the next element\n            if nums[i] > nums[i - gap]:\n\n                # swap the elements\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n                # mark that a swap was made\n                swapped = True\n\n        # check if the list is sorted\n        if not swapped:\n            is_sorted = True\n\n        # update the gap size\n        gap = (gap * 10) // 10\n\n        # if the gap size is too small, increase it\n        if gap < 1:\n            gap = 1\n\n        # print the list after each iteration\n        print(nums)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5)+1):\n        if i**2 + n == i*(i+1)**2 or i**2 + n == i*(i-1)**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function takes an integer n and returns True if it can be represented as the difference of two squares, and False otherwise.\n    \"\"\"\n    # Square of the digits\n    square_digits = [(int(digit)**2) for digit in str(n)]\n    # Concatenate the digits\n    digits_str = ''.join(str(digit) for digit in n)\n    # Square of the concatenated digits\n    square_concat_digits = int(digits_str)**2\n    # Check if the square of the concatenated digits is equal to the original number\n    return square_concat_digits == n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_diff_square(n):\n    # check if the number is divisible by 4\n    if n % 4!= 0:\n        return False\n\n    # divide the number by 4 and check if the result is an integer\n    diff = n // 4\n    if type(diff)!= int:\n        return False\n\n    # check if the difference is a valid square\n    for i in range(1, int(diff**0.5)+1):\n        if diff**2 == i**2 + i + diff**2:\n            return True\n        elif diff**2 == i**2 - i + diff**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x, y = 0, 0\n    while x**2 <= n:\n        y = x**2\n        x += 1\n    while y**2 <= n:\n        if n - y**2 == x**2:\n            return True\n        y += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is a power of 2\n    if n & (n - 1) == 0:\n        # Find the square root of the given number\n        sqrt_n = int(n ** 0.5)\n        # Check if the square root is a power of 2\n        if sqrt_n & (sqrt_n - 1) == 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the input number is greater than 0\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # loop through all possible values of difference between squares\n    for i in range(1, n):\n        for j in range(1, i+1):\n            # calculate the square of sum and difference of squares\n            sum_square = (i**2 + j**2)**0.5\n            diff_square = (i**2 - j**2)**0.5\n            \n            # check if the difference between squares is equal to the input number\n            if diff_square == n:\n                return f\"The number {n} can be represented as the difference of two squares: {i} and {j}.\"\n                \n    # if no such combination is found, return that the number cannot be represented as the difference of two squares\n    return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n ** 0.5\n    diff = square - int(square)\n\n    if diff ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Using the floor division operator to find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Checking whether n can be represented as the difference of two squares or not\n    if sqrt_n * sqrt_n == n:\n        print(f\"The given number can be represented as the difference of two squares: {sqrt_n}^2 = {n}\")\n    else:\n        print(f\"The given number cannot be represented as the difference of two squares: {sqrt_n}^2 = {n}\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(n**0.5)\n    b = int(n/a)\n    if a*a == n and b*b == n:\n        print(n, \"can be represented as the difference of two squares\")\n    else:\n        print(n, \"cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Calculate the square of the given number\n    square = n ** 2\n    # Initialize the difference between the squares to infinity\n    difference = float('inf')\n    # Check whether the square can be represented as the difference of two squares\n    for i in range(1, n):\n        if square - i ** 2 <= difference:\n            return True\n        elif square - i ** 2 > difference:\n            difference = square - i ** 2\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # get the length of the arrays\n    n1 = len(colors)\n    n2 = len(patterns)\n\n    # check if the lengths of the arrays are equal\n    if n1!= n2:\n        return False\n\n    # initialize a variable to keep track of the current index in the colors array\n    index = 0\n\n    # loop through the patterns array\n    for pattern in patterns:\n        # check if the current pattern matches the color at the current index in the colors array\n        if pattern!= colors[index]:\n            # if the pattern does not match, return False\n            return False\n        # increment the index by 1\n        index += 1\n\n    # if the loop completes without returning False, the function returns True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns = [set(p) for p in patterns]\n    i = 0\n    for color in colors:\n        if patterns[i] <= set(color):\n            i += 1\n        if i == len(patterns):\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize an empty dictionary to store the count of each color\n    color_count = {}\n\n    # Initialize the count of the first color in the sequence\n    color_count[colors[0]] = 1\n\n    # Iterate over the remaining colors in the sequence\n    for color in colors[1:]:\n        # If the color already exists in the dictionary, increment its count\n        if color in color_count:\n            color_count[color] += 1\n        # If the color does not exist in the dictionary, add it with a count of 1\n        else:\n            color_count[color] = 1\n\n    # Iterate over the patterns array and check if each pattern is followed by the count of each color\n    for pattern in patterns:\n        for i in range(len(pattern)):\n            # If the current color in the pattern does not exist in the dictionary, return False\n            if pattern[i] not in color_count:\n                return False\n            # If the current color in the pattern exists in the dictionary, decrement its count\n            else:\n                color_count[pattern[i]] -= 1\n                # If the count of the current color in the pattern is less than 0, return False\n                if color_count[pattern[i]] < 0:\n                    return False\n\n    # If the function reaches this point, it means that the sequence of colors follows the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n    \n    color_index = 0\n    pattern_index = 0\n    \n    while pattern_index < len(patterns):\n        if patterns[pattern_index] == colors[color_index]:\n            pattern_index += 1\n            color_index += 1\n        else:\n            pattern_index = 0\n            color_index += 1\n        \n        if pattern_index == len(patterns):\n            return True\n    \n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for color, pattern in zip(colors, patterns):\n        if pattern!= color:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Check if the number of colors matches the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Create a dictionary to store the count of each color in the colors array\n    color_counts = {}\n    for color in colors:\n        if color in color_counts:\n            color_counts[color] += 1\n        else:\n            color_counts[color] = 1\n    \n    # Loop through the patterns array and check if each pattern is followed\n    for pattern in patterns:\n        pattern_count = 0\n        for color in pattern:\n            if color in color_counts:\n                pattern_count += color_counts[color]\n                color_counts[color] -= 1\n            else:\n                return False\n        if pattern_count!= len(pattern):\n            return False\n    \n    # If we reach this point, the function has returned True, indicating that the colors follow the sequence in the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if all patterns have the same length\n    if len(patterns) == 0:\n        return True\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n    # check if each pattern matches the next color in the color sequence\n    for i in range(len(patterns)):\n        if patterns[i]!= []:\n            if patterns[i][0] == colors[i+1]:\n                patterns[i] = patterns[i][1:]\n            else:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # initialize variables for pattern matching\n    pattern_count = len(patterns)\n    current_pattern = 0\n    \n    # check if all colors are the same\n    if colors[0]!= colors[-1]:\n        return False\n        \n    # loop through colors and patterns\n    for color in colors:\n        if color!= patterns[current_pattern]:\n            return False\n        else:\n            current_pattern += 1\n            if current_pattern == pattern_count:\n                current_pattern = 0\n            \n    # if we make it through the entire loop without returning False, it means the colors and patterns match\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(len(patterns)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K == 0:\n                count += 1\n        if count == len(tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Iterate through the list of tuples and find the tuples with all elements divisible by k\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns a list of tuples\n    which have all elements divisible by K from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i] if num % K == 0) and all(num % K == 0 for num in test_list[j] if num % K == 0):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if all(x%K==0 for x in test_list[i][1:]) and all(x%K==0 for x in test_list[j][1:]) and all(x%K==0 for x in test_list[k][1:]):\n                    result.append((test_list[i][0], test_list[j][0], test_list[k][0]))\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns a boolean value indicating whether it is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # checking if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # Split the string into words\n    for word in words:\n        if len(word) % 2 == 1:  # Check if the length of each word is odd\n            return True\n    return False  # If no odd word is found, return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n    \n    # Check if there is only one word in the string\n    if len(words) == 1:\n        return \"True\"\n    \n    # Check if the length of the last word is odd\n    if len(words[-1]) % 2 == 1:\n        return \"True\"\n    \n    # If the length of the last word is even, check if the length of the previous word is odd\n    if len(words[-1]) % 2 == 0:\n        if len(words[-2]) % 2 == 1:\n            return \"True\"\n    \n    # If none of the above conditions are true, return False\n    return \"False\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    s = s.lower()  # convert all characters to lowercase\n    words = s.split()  # split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 1:  # check if the length of the word is odd\n            return word\n    return \"The length of the word is even.\"  # return the message if all words have even length"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd length.\")\n        else:\n            print(word, \"is even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd and False otherwise.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word + \" is an odd length word.\")\n        else:\n            print(word + \" is an even length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 0:\n            print(f\"{word} is even\")\n        else:\n            print(f\"{word} is odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into words\n    for word in words:\n        if len(word) % 2 == 0:  # if the length of the word is even\n            print(word + \" is an even length word.\")\n        else:\n            print(word + \" is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = \"\"\n    for i in s: \n        if i.isalpha(): \n            word += i \n        else: \n            break\n    if len(word) % 2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # loop through each word in the string\n    for word in s.split():\n        # get the length of the word\n        word_len = len(word)\n\n        # check if the length of the word is odd or not\n        if word_len % 2 == 0:\n            print(f\"{word} is an even length word.\")\n        else:\n            print(f\"{word} is an odd length word.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4 * (n - 1) * (n - 2) * (n - 3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Define the base case\n    if n == 1:\n        return 1\n\n    # Calculate the previous tetrahedral number\n    prev_tetrahedral = tetrahedral_number(n-1)\n\n    # Calculate the nth tetrahedral number\n    nth_tetrahedral = 2*prev_tetrahedral - n\n\n    return nth_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(1, n+1):\n        t = 3*i - 1\n        print(t, end=' ')"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the variable to store the sum of the first n terms\n    sum_tetrahedral = 0\n\n    # Iterate through the first n terms\n    for i in range(1, n+1):\n\n        # Calculate the next term for the sum\n        next_term = 4*i**2 - 4*i + 1\n\n        # Add the next term to the sum\n        sum_tetrahedral += next_term\n\n    # Return the sum of the first n terms\n    return sum_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c, d = 1, 1, 1, 1\n    for i in range(n):\n        temp = a + b + c + d\n        a, b, c, d = b, c, d, temp\n    return temp"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Helper function to find the number of edges in a triangle\n    def num_edges(n):\n        return n * (n - 1) // 2\n    \n    # Helper function to find the number of faces in a tetrahedron\n    def num_faces(n):\n        return n * (n - 1) * (n - 2) // 6\n    \n    # Initialize variables\n    num_triangles = n * (n - 1) // 2\n    num_tetrahedra = n * (n - 1) * (n - 2) // 6\n    \n    # Find the nth tetrahedral number\n    tetrahedral = num_triangles * num_tetrahedra * (num_triangles - num_tetrahedra) // num_edges(2)\n    \n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    def gcd(a, b):\n        return gcd(b, a % b) if b else a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def tetrahedral_arrangements(n):\n        # Generate all possible arrangements of n points\n        arrangements = []\n        for i in range(1, n + 1):\n            for j in range(1, i):\n                for k in range(1, j):\n                    for l in range(1, k):\n                        arrangements.append((i, j, k, l))\n\n        # Calculate the sum of the distances between any two points in each arrangement\n        min_sum = float('inf')\n        for arrangement in arrangements:\n            sum_distances = 0\n            for i in range(len(arrangement)):\n                for j in range(i + 1, len(arrangement)):\n                    sum_distances += lcm(arrangement[i][0], arrangement[j][0]), lcm(arrangement[i][1], arrangement[j][1]), lcm(arrangement[i][2], arrangement[j][2]), lcm(arrangement[i][3], arrangement[j][3])\n            min_sum = min(min_sum, sum_distances)\n\n        # Return the nth tetrahedral number\n        return min_sum\n\n    return tetrahedral_arrangements(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return ((n*(3*n-1))//2) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    The nth tetrahedral number is the number of ordered triples (a, b, c) such that a^3 + b^3 + c^3 = n.\n    \"\"\"\n    a = 1\n    b = 1\n    c = 1\n    count = 0\n\n    while a**3 + b**3 + c**3 < n:\n        count += 1\n        a += 1\n        b += 1\n        c += 1\n\n    return count"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and returns the volume of a sphere with that radius.\n    '''\n    # Formula to find the volume of a sphere\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # convert radius to meters\n    r = r * 1000\n    \n    # calculate the volume of the sphere using the formula V = (4/3)\u03c0r^3\n    V = (4/3) * math.pi * r**3\n    \n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    # Initialize the character to an empty string\n    char = \"\"\n    # Loop through each character of the string\n    for i in range(len(strr)):\n        # Calculate the ASCII value of the current character\n        ascii_value = ord(strr[i])\n        # Add the ASCII value to the current character\n        char += chr((ascii_value + 1) % 26)\n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_of_ascii = 0\n    for char in strr:\n        sum_of_ascii += ord(char)\n    return chr((sum_of_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if not isinstance(strr, str):  \n        return \"Invalid input: Please enter a string.\"  \n    sum_ascii = 0  \n    for char in strr:  \n        sum_ascii += ord(char)  \n    mod_ascii = sum_ascii % 26  \n    char = chr(mod_ascii + 65)  \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for i in range(len(strr)):\n        ascii_value += ord(strr[i])\n    return chr((ascii_value % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    char = 0\n    for char in strr:\n        char = ord(char) + char\n        if char > 90:\n            char = char - 90 + 65\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    char %= 26\n    return chr(char+65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr(((ascii_sum % 26) + 65) % 91)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # initialize the sequence with the first two numbers\n    sequence = [1, 1]\n    # loop n-1 times\n    for i in range(n-2):\n        # generate the next number in the sequence\n        next_num = (sequence[i] + sequence[i+1]) % 2\n        # add the next number to the sequence\n        sequence.append(next_num)\n    # return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1]\n    for i in range(n - 1):\n        next_seq = [seq[i] * 2]\n        for j in range(1, len(seq[i])):\n            next_seq.append(seq[i][j - 1] + seq[i][j])\n        seq = next_seq\n    return seq[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[i-1] + sequence[i-2])\n        else:\n            sequence.append(sequence[i-1] + 4*sequence[i-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return sequence(n // 2) + sequence(n // 2)\n    else:\n        return sequence(3 * n + 1) + sequence(3 * n + 1)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n):\n        sequence.append(sum(sequence[-1:]))\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 4*sequence(n-1) - sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i//2])\n        else:\n            sequence.append(sequence[i//2] + sequence[i//2 + 1])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    sequence = [0, 1]  # initialize the sequence\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])  # generate the next number in the sequence\n    return sequence[-1]  # return the last number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(1, n):\n        sequence.append(2 * sequence[-1] + 1)\n    return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    elif n == 4: \n        return 3\n    else: \n        return (n * sequence(n - 2)) % 25"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area of a sphere\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    area = (4/3)*pi*(r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the nth centered hexagonal number.\n    '''\n    # Initialize variables\n    num = 0\n    direction = 1\n    \n    # Iterate through each number in the range [1, n]\n    for i in range(1, n+1):\n        # Calculate the number and add it to the total\n        num += direction\n        # Move the direction up by 1 if direction is negative\n        direction = -direction\n    \n    # Return the total\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \"\"\"\n    def centered_hex_iter(n, a, b):\n        \"\"\"\n        An iterative solution for finding the centered hexagonal number.\n        \"\"\"\n        if n == 1:\n            return a\n        if n == 2:\n            return b\n        if n % 2 == 0:\n            a += b\n            b = 2 * a - b\n        else:\n            b += a\n            a = 2 * b - a\n        return centered_hex_iter(n//2, a, b)\n\n    def centered_hex_rec(n, a, b):\n        \"\"\"\n        A recursive solution for finding the centered hexagonal number.\n        \"\"\"\n        if n == 1:\n            return a\n        if n == 2:\n            return b\n        if n % 2 == 0:\n            a += b\n            b = 2 * a - b\n        else:\n            b += a\n            a = 2 * b - a\n        return centered_hex_rec(n//2, a, b)\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 6\n    return centered_hex_iter(n-1, 1, 6)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(1, 11):\n        hex_num += (i * (5 * i - 3))\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        print(\"Invalid input.\")\n        return\n    \n    # Compute the number of rows and columns required for n centered hexagonal numbers\n    num_rows = n // 2 + 1\n    num_cols = 2 * n - 1\n    \n    # Initialize the 2D matrix with zeros\n    matrix = [[0 for j in range(num_cols)] for i in range(num_rows)]\n    \n    # Fill the matrix with centered hexagonal numbers\n    for i in range(num_rows):\n        for j in range(num_cols):\n            if i == 0 and j >= n:\n                matrix[i][j] = 1\n            elif i == 0:\n                matrix[i][j] = (j - 1) * (2 * j - 1)\n            elif i == num_rows - 1 and j <= num_cols - n:\n                matrix[i][j] = num_rows * num_cols\n            elif i == num_rows - 1:\n                matrix[i][j] = (num_cols - j) * (2 * num_cols - 1)\n            else:\n                matrix[i][j] = (i * (2 * i - 1) + j) * (2 * i + 1)\n    \n    # Print the matrix\n    for row in matrix:\n        print(row)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Constants\n    a = 1.0 / 3.0\n    b = 1.0 / 2.0\n    c = 1.5\n    \n    # Find the nth centered hexagonal number using the formula\n    #   centered_hexagonal_number = a^(3n-2) * b^(2n-1) * c^(n-1)\n    centered_hexagonal_number = (a ** (3 * n - 2)) * (b ** (2 * n - 1)) * (c ** (n - 1))\n    \n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize the first centered hexagonal number\n    if n == 1:\n        return 1\n    \n    # initialize the second centered hexagonal number\n    elif n == 2:\n        return 2\n    \n    # initialize the third centered hexagonal number\n    elif n == 3:\n        return 5\n    \n    # initialize the fourth centered hexagonal number\n    elif n == 4:\n        return 12\n    \n    # initialize the fifth centered hexagonal number\n    elif n == 5:\n        return 21\n    \n    # initialize the sixth centered hexagonal number\n    elif n == 6:\n        return 34\n    \n    # initialize the seventh centered hexagonal number\n    elif n == 7:\n        return 51\n    \n    # initialize the eighth centered hexagonal number\n    elif n == 8:\n        return 72\n    \n    # initialize the ninth centered hexagonal number\n    elif n == 9:\n        return 97\n    \n    # initialize the tenth centered hexagonal number\n    elif n == 10:\n        return 126\n    \n    # initialize the eleventh centered hexagonal number\n    elif n == 11:\n        return 159\n    \n    # initialize the twelfth centered hexagonal number\n    elif n == 12:\n        return 196\n    \n    # initialize the thirteenth centered hexagonal number\n    elif n == 13:\n        return 237\n    \n    # initialize the fourteenth centered hexagonal number\n    elif n == 14:\n        return 282\n    \n    # initialize the fifteenth centered hexagonal number\n    elif n == 15:\n        return 331\n    \n    # initialize the sixteenth centered hexagonal number\n    elif n == 16:\n        return 384\n    \n    # initialize the seventeenth centered hexagonal number\n    elif n == 17:\n        return 441\n    \n    # initialize the eighteenth centered hexagonal number\n    elif n == 18:\n        return 502\n    \n    # initialize the nineteenth centered hexagonal number\n    elif n == 19:\n        return 567\n    \n    # initialize the twentieth centered hexagonal number\n    elif n == 20:\n        return 636\n    \n    # initialize the twenty-first centered hexagonal number\n    elif n == 21:\n        return 709\n    \n    # initialize the twenty-second centered hexagonal number\n    elif n == 22:\n        return 786\n    \n    # initialize the twenty-third centered hexagonal number\n    elif n == 23:\n        return 867\n    \n    # initialize the twenty-fourth centered hexagonal number\n    elif n == 24:\n        return 952\n    \n    # initialize the twenty-fifth centered hexagonal number\n    elif n == 25:\n        return 1041\n    \n    # initialize the twenty-sixth centered hexagonal number\n    elif n == 26:\n        return 1134\n    \n    # initialize the twenty-seventh centered hexagonal number\n    elif n == 27:\n        return 1231\n    \n    # initialize the twenty-eighth centered hexagonal number\n    elif n == 28:\n        return 1332\n    \n    # initialize the twenty-ninth centered hexagonal number\n    elif n == 29:\n        return 1437\n    \n    # initialize the thirtieth centered hexagonal number\n    elif n == 30:\n        return 1546\n    \n    # initialize the thirty-first centered hexagonal number\n    elif n == 31:\n        return 1659\n    \n    # initialize the thirty-second centered hexagonal number\n    elif n == 32:\n        return 1776\n    \n    # initialize the thirty-third centered hexagonal number\n    elif n == 33:\n        return 1897\n    \n    # initialize the thirty-fourth centered hexagonal number\n    elif n == 34:\n        return 2022\n    \n    # initialize the thirty-fifth centered hexagonal number\n    elif n == 35:\n        return 2151\n    \n    # initialize the thirty-sixth centered hexagonal number\n    elif n == 36:\n        return 2284\n    \n    # initialize the thirty-seventh centered hexagonal number\n    elif n == 37:\n        return 2421\n    \n    # initialize the th"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**2 + 3*(n-1)**2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n\n    # Define the base of the centered hexagonal number sequence\n    base = 16\n\n    # Calculate the power of the base\n    power = n // base\n\n    # Calculate the remainder of the division and add 1 to get the centered hexagonal number\n    centered_hex = (n % base) + 1\n\n    # Calculate the final centered hexagonal number by multiplying the base raised to the power\n    centered_hex_final = centered_hex * (base ** power)\n\n    # Return the final centered hexagonal number\n    return centered_hex_final"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n * (n + 1)) + (1 + 8 * n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: first and last centered hexagonal numbers are 0 and 5\n    if n == 0:\n        return 0\n    elif n == 5:\n        return 5\n\n    # Calculate number of rows and columns\n    rows = int(n**0.5)\n    cols = rows * 2 + 1\n\n    # Initialize the matrix of centered hexagonal numbers\n    matrix = [[0] * cols for _ in range(rows)]\n\n    # Fill the matrix in a centered way\n    for i in range(rows):\n        row_start = i * 2\n        row_end = row_start + 2\n        for j in range(cols):\n            if j >= row_start and j <= row_end:\n                matrix[i][j] = i * 6 - 1 + (j - row_start) // 2 + 1\n            else:\n                matrix[i][j] = 0\n\n    # Find the nth centered hexagonal number\n    return matrix[n-1][cols//2]"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the two dictionaries\n    merged_dict = dict1.copy()\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    # Merge the two dictionaries and the third dictionary\n    for key in dict3:\n        if key in merged_dict:\n            merged_dict[key] = merged_dict[key] + dict3[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key in merged_dict:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n        else:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key in merged_dict:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n        else:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine all the key-value pairs from the three dictionaries\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    set_list = set(list1)\n\n    # Initialize an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Loop through the elements in the set and update the frequency dictionary accordingly\n    for element in set_list:\n        freq_dict[element] = set_list.count(element)\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns the frequency of all the elements in the list,\n    returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def freq_count(lst):\n    '''\n    Return a dictionary of the frequency of all elements in the input list.\n    '''\n    freq = collections.defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list of elements and returns a dictionary where the keys are the elements and the values are their frequency in the list.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    closest = float('inf')\n    num = N\n    while num > 0:\n        num -= 1\n        closest = min(closest, num)\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    count = 0\n    while count < 10000:\n        if (n-1) % 2 == 0:\n            n -= 2\n        else:\n            n += 2\n        count += 1\n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize the list with all numbers from 1 to N\n    numbers = list(range(1, N+1))\n\n    # sort the list in ascending order\n    numbers.sort()\n\n    # calculate the difference between the first and last elements of the list\n    diff = abs(numbers[-1] - numbers[0])\n\n    # return the first element if the difference is less than or equal to 1\n    if diff <= 1:\n        return numbers[0]\n    # otherwise, return the second to last element\n    else:\n        return numbers[-2]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    closest = N\n    smaller = N\n\n    # Iterate through all numbers from 1 to N\n    for num in range(1, N+1):\n        # Check if the current number is smaller than the closest number\n        if num < closest:\n            # Update the closest number if the current number is smaller\n            closest = num\n        # Check if the current number is smaller than the smallest number found so far\n        elif num < smaller:\n            # Update the smallest number found so far if the current number is smaller\n            smaller = num\n\n    # Return the smallest number found so far\n    return smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = []\n    for i in range(1, N+1):\n        nums.append(i)\n    nums.sort()\n    if nums[0] == 1:\n        return nums[1]\n    else:\n        return nums[0]-1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n    for i in range(1, N+1):\n        # Check if i is smaller than smallest\n        if i < smallest:\n            # Update smallest\n            smallest = i\n            # Update closest\n            closest = i\n        elif i < closest:\n            # Update closest\n            closest = i\n    \n    # Return the closest number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = float('inf')\n    for num in range(N, 0, -1):\n        if abs(num - N) < diff:\n            diff = abs(num - N)\n    return N - diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables for the smallest and largest numbers\n    smallest = float('inf')\n    largest = float('-inf')\n    \n    # Iterate through the range of numbers from 1 to N-1\n    for i in range(1, N):\n        # Check if the current number is smaller than the smallest number\n        if i < smallest:\n            # Update the smallest number\n            smallest = i\n        \n        # Check if the current number is larger than the largest number\n        elif i > largest:\n            # Update the largest number\n            largest = i\n    \n    # Check which number is closer to N\n    if abs(N-smallest) < abs(N-largest):\n        # Return the smallest number\n        return smallest\n    else:\n        # Return the largest number\n        return largest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Find the minimum and maximum values in the given list\n    min_val = min(N)\n    max_val = max(N)\n\n    # Find the distance between the minimum and maximum values\n    distance = max_val - min_val\n\n    # Find the closest smaller number than n\n    if distance == 0:\n        closest_num = min_val\n    elif N.count(min_val) < N.count(max_val):\n        closest_num = min_val\n    else:\n        closest_num = max_val\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    if N == 1:\n        return N\n\n    min_diff = float('inf')\n    closest = float('inf')\n\n    for num in range(1, N):\n        diff = abs(N - num)\n        if diff < min_diff:\n            min_diff = diff\n            closest = num\n\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word = \"\"\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n            word = item\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n\n    Args:\n        list1: A list of strings, each representing a word.\n\n    Returns:\n        An integer representing the length of the longest word in the list.\n\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for i in str1:\n            if sub_str in i:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in {str1}\")\n    else:\n        print(f\"{sub_str} is not present in {str1}\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for item in str1:\n            if sub_str in item:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        raise TypeError(\"The first argument must be a list of string values.\")\n    \n    if type(sub_str)!= str:\n        raise TypeError(\"The second argument must be a string.\")\n    \n    for string in str1:\n        if sub_str in string:\n            return True\n    \n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes in two parameters:\n    str1: a string value to search for in a list of strings\n    sub_str: a string value to search for in str1\n\n    The function returns True if sub_str is present as a substring of str1,\n    and False otherwise.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list of string values to a set to remove duplicates\n    str_set = set(str1)\n\n    # Check if the sub_str is present in the set of str1\n    if sub_str in str_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the given number is even\n    if n % 2 == 0:\n        return False\n    else:\n        # Calculate the square of the given number\n        square = n ** 2\n        # Check if the square is divisible by 3\n        if square % 3 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n//2+1):\n        if n-i == i:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        if n % 4 == 0:\n            return is_undulating(n//4)\n        else:\n            return is_undulating((n*3)+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # check if n is even or odd\n    if n % 2 == 0:\n        return False\n    else:\n        # check if n is divisible by 7\n        if n % 7 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    sum_digits = sum(digits)\n    return sum_digits % 10 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # define the prime factors of n\n    prime_factors = [2]\n    for i in range(3, n+1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    # check if n is a multiple of any of the prime factors\n    for factor in prime_factors:\n        if n % factor == 0:\n            return False\n    # n is not a multiple of any prime factor, so it's undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        max_less_than_n = max(range(1, n+1))\n        return n == max_less_than_n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Get the sign of the number\n    sign = -1 if n < 0 else 1\n\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        # If even, check if the number is an odd or even multiple of 3\n        if (n % 3 == 0) and (n % 2!= 0):\n            return False\n        else:\n            return True\n    else:\n        # If odd, check if the number is an even or odd multiple of 3\n        if (n % 3 == 0) and (n % 2 == 0):\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    # Return the index of the first value with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # sort the list based on the second value of each tuple in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # get the index of the first tuple in the sorted list\n    index = sorted_list.index(sorted_list[0])\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = len(lst[0]) # initialize minimum length to the length of the first list\n\n    for i in range(1, len(lst)): # iterate through the list of lists\n        if len(lst[i]) < min_length: # if the current list has a shorter length\n            min_length = len(lst[i]) # update minimum length to the current list's length\n\n    return min_length # return the minimum length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 99999999\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize variables\n    min_length = float('inf')\n\n    # iterate through the list of lists\n    for sublist in lst:\n        # if the length of the sublist is less than the minimum length, update the minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length as positive infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    smallest_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < smallest_len:\n            smallest_len = len(sublist)\n    return smallest_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = 1000000\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as an input and returns the number of divisors of that integer.\n    \"\"\"\n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    This function finds the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    This function returns the number of divisors of a given integer n.\n    \"\"\"\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through numbers from 1 to n-1\n    for i in range(1, n+1):\n\n        # Check if n is divisible by i\n        if n % i == 0:\n\n            # Increment count variable by 1\n            count += 1\n\n    # Return count variable as the number of divisors of n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 2\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Define an empty dictionary\n    freq_dict = {}\n    # Loop through each element in the list1\n    for i in list1:\n        # Check if the element is a list\n        if isinstance(i, list):\n            # If it is a list, flatten it and loop through it again\n            for j in i:\n                if j not in freq_dict:\n                    freq_dict[j] = 1\n                else:\n                    freq_dict[j] += 1\n        # If it is not a list, add it to the frequency dictionary with a value of 1\n        else:\n            if i not in freq_dict:\n                freq_dict[i] = 1\n            else:\n                freq_dict[i] += 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store frequency counts\n    freq_dict = {}\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Iterate through the flattened list and update frequency counts in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the flattened list of lists\n    freq_dict = {}\n\n    # Loop through each element in the flattened list of lists\n    for element in list1:\n        # If the element is a list, recursively call the function on the element and add the frequency to the frequency dictionary\n        if isinstance(element, list):\n            sub_freq_dict = frequency_lists(element)\n            for sub_element, sub_freq in sub_freq_dict.items():\n                if sub_element in freq_dict:\n                    freq_dict[sub_element] += sub_freq\n                else:\n                    freq_dict[sub_element] = sub_freq\n        # If the element is not a list, add its frequency to the frequency dictionary\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is already a key in the dictionary, increment its value by 1\n        if element in freq:\n            freq[element] += 1\n        # if the element is not a key in the dictionary, add it with a value of 1\n        else:\n            freq[element] = 1\n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Use a dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Loop through the flattened list and update frequency dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n        list1 (list): A flattened list of lists containing elements to be counted.\n\n    Returns:\n        dict: A dictionary with keys as elements from the first input list, and values as their frequency in the input list.\n    \"\"\"\n    # initialize an empty dictionary to store frequency of elements\n    freq_dict = {}\n\n    # loop through each element in the list\n    for elem in list1:\n        # if the element is not in the dictionary, add it with a frequency of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # otherwise, increment its frequency by 1\n        else:\n            freq_dict[elem] += 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through each element in the flattened list\n    for element in list1:\n\n        # if the element is not in the dictionary yet, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[element] += 1\n\n    # return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # loop through the flattened list of lists and update the frequency of each element\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n\n    # return the dictionary of frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create an empty dictionary\n    freq_dict = {}\n    # iterate over each element in the list\n    for element in list1:\n        # if the element is a list, recursively call the function on that list\n        if isinstance(element, list):\n            sub_freq_dict = frequency_lists(element)\n            # add the sub-dictionary to the main dictionary with the same key\n            freq_dict.update(sub_freq_dict)\n        # if the element is already a dictionary, add its contents to the main dictionary\n        elif isinstance(element, dict):\n            freq_dict.update(element)\n        # if the element is not a list or a dictionary, increment its frequency in the main dictionary\n        else:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    # return the final dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = sum(numbers) / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    product /= len(numbers)\n    return product"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n    # Divide the result by the length of the list\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    binary_num = \"\"\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary equivalent\n    binary_string = \"\"\n    # initialize a variable to store the remainder of the division by 2\n    remainder = 0\n    # loop through each digit of the number from right to left\n    while n > 0:\n        # divide the number by 2 and store the remainder\n        remainder = n % 2\n        # add the remainder to the binary string\n        binary_string = str(remainder) + binary_string\n        # divide the number by 2 and discard the remainder\n        n = n // 2\n    # remove any leading zeros from the binary string\n    binary_string = binary_string.lstrip('0')\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0: \n        remainder = n % 2 \n        n //= 2 \n        binary_str = str(remainder) + binary_str \n    return binary_str "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    # Initialize a variable to store the binary equivalent of n \n    binary = \"\" \n    # Loop through each bit of n (right-to-left) \n    while n > 0: \n        # Append the remainder when n is divided by 2 to binary \n        binary = str(n % 2) + binary \n        # Divide n by 2 \n        n = n // 2 \n    # Return the binary string \n    return binary "
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_palindromes():\n        palindromes = []\n        for i in range(10**num, 10**num + 10**num - 1):\n            if is_prime(i) and is_palindrome(i):\n                palindromes.append(i)\n        return palindromes\n\n    def find_next_smallest_palindrome(palindromes):\n        for i in range(len(palindromes)):\n            if palindromes[i] < num:\n                return palindromes[i]\n        return None\n\n    palindromes = generate_palindromes()\n    if palindromes:\n        next_num = find_next_smallest_palindrome(palindromes)\n        if next_num:\n            return next_num\n        else:\n            return None\n    else:\n        return None\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python3 next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    try:\n        num = int(sys.argv[1])\n    except ValueError:\n        print(\"Error: Invalid integer input\")\n        sys.exit(1)\n\n    result = next_smallest_palindrome(num)\n    if result:\n        print(result)\n    else:\n        print(\"No next smallest palindrome found\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    min_num_str = str(2 * num - 1)\n    min_num_int = int(min_num_str)\n    if min_num_int > num:\n        min_num_int -= 1\n    else:\n        min_num_int += 1\n    for i in range(len(num_str)):\n        if int(num_str[i:]) > min_num_int:\n            return int(num_str[0:i] + str(int(num_str[i:]) - 1))\n    return int(min_num_str)\n\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number: \"))\n    print(\"Next smallest palindrome:\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        Function to check if a number is a palindrome.\n        '''\n        if str(num) == str(num)[::-1]:\n            return True\n        else:\n            return False\n\n    def reverse_int(num):\n        '''\n        Function to reverse a number.\n        '''\n        reversed_num = 0\n        while num > 0:\n            remainder = num % 10\n            reversed_num = reversed_num * 10 + remainder\n            num //= 10\n        return reversed_num\n\n    def is_even(num):\n        '''\n        Function to check if a number is even or odd.\n        '''\n        if num % 2 == 0:\n            return True\n        else:\n            return False\n\n    def is_greater(num1, num2):\n        '''\n        Function to check if a number is greater than another number.\n        '''\n        if num1 > num2:\n            return True\n        else:\n            return False\n\n    if is_palindrome(num):\n        return num + 1\n\n    if is_even(num):\n        return reverse_int(num + 1)\n\n    if is_greater(num, 1000):\n        return 1000\n\n    return next_smallest_palindrome(num + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize variables\n    min_palindrome = None\n    min_palindrome_len = None\n    is_palindrome = True\n    \n    # Check if the number is a palindrome\n    temp = num\n    while temp > 0:\n        remainder = temp % 10\n        temp //= 10\n        if remainder!= temp % 10:\n            is_palindrome = False\n            break\n    \n    # If the number is not a palindrome, then set the next smallest palindrome as the next integer greater than the number\n    if not is_palindrome:\n        return num + 1\n    \n    # Find the smallest palindrome of the specified number\n    temp = num\n    while temp > 0:\n        remainder = temp % 10\n        temp //= 10\n        if remainder!= temp % 10:\n            palindrome = temp * 10 + remainder\n            break\n    \n    # Check if the smallest palindrome is the next smallest palindrome\n    while True:\n        palindrome += 1\n        if palindrome % 10 == 0:\n            palindrome += 1\n        temp = palindrome\n        while temp > 0:\n            remainder = temp % 10\n            temp //= 10\n            if remainder!= temp % 10:\n                palindrome = temp * 10 + remainder\n                break\n    \n    # Check if the next smallest palindrome is greater than the maximum integer value\n    if palindrome > sys.maxsize:\n        palindrome = sys.maxsize\n    \n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_valid_palindrome(n):\n        return is_palindrome(n) and is_prime(abs(n))\n\n    def get_next_palindrome(num):\n        if num < 0:\n            return -get_next_palindrome(-num)\n        if is_valid_palindrome(num):\n            return num + 1\n\n        def get_next_prime(num):\n            n = num + 1\n            while not is_prime(n):\n                n += 1\n            return n\n\n        def is_palindrome_within_range(start, end):\n            for i in range(start, end + 1):\n                if is_palindrome(i):\n                    return True\n            return False\n\n        n = num\n        while True:\n            n = get_next_prime(n)\n            if is_palindrome_within_range(-n, n):\n                return -n\n\n    next_palindrome = get_next_palindrome(num)\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # check if the number is even\n    if num % 2 == 0:\n        # take the next odd number greater than the number\n        return next_smallest_palindrome(num + 1)\n    else:\n        # take the largest number that is smaller than the square root of the number\n        sqrt = int(num ** 0.5)\n        return (sqrt + 1) ** 2"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n\n    # Convert the number to a string\n    str_num = str(num)\n    # Find the length of the string\n    length = len(str_num)\n\n    # Initialize the next smallest palindrome\n    next_palindrome = None\n\n    # Iterate over the digits of the number\n    for i in range(length):\n        # Remove the current digit\n        str_num = str_num[:i] + str_num[i+1:]\n        # Check if the remaining number is a palindrome\n        if str_num == str_num[::-1]:\n            # If so, update the next smallest palindrome\n            if next_palindrome is None or int(str_num) < next_palindrome:\n                next_palindrome = int(str_num)\n\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # get the maximum integer that can be formed by concatenating the digits of num\n    max_int = 10**(num-1) - 1\n\n    # check if the maximum integer is a palindrome\n    max_str = str(max_int)\n    if max_str == max_str[::-1]:\n        return int(max_str)\n\n    # iterate through all possible integers starting from the maximum integer and find the smallest palindrome\n    min_palindrome = max_int\n    for i in range(max_int, 0, -1):\n        current_str = str(i)\n        if current_str[::-1] < min_palindrome:\n            min_palindrome = current_str\n\n    # return the integer corresponding to the smallest palindrome\n    return int(min_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(num):\n    '''\n    Function to check if a number is a palindrome\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if input is an integer\n    if not isinstance(num, int):\n        print(\"Input must be an integer\")\n        sys.exit(1)\n\n    # initialize variables\n    palindrome = num\n    smallest_palindrome = palindrome\n    \n    # check if palindrome is already a palindrome\n    if num == int(str(num)[::-1]):\n        return smallest_palindrome\n    \n    # loop through odd digits of number\n    for i in range(len(str(num))-1, 0, -2):\n        # check if palindrome is greater than current number\n        if int(str(num)[i:i+2]) > num:\n            # check if palindrome is a palindrome\n            if int(str(num)[i:i+2]) == int(str(num)[i:i+2][::-1]):\n                return int(str(num)[i:i+2])\n            # update smallest palindrome\n            if int(str(num)[i:i+2]) < smallest_palindrome:\n                smallest_palindrome = int(str(num)[i:i+2])\n            # update palindrome\n            palindrome = int(str(num)[i:i+2])\n    \n    # check if smallest palindrome is still a palindrome\n    if int(str(smallest_palindrome)[::-1]) == smallest_palindrome:\n        return smallest_palindrome\n    else:\n        print(\"No palindrome found\")\n        sys.exit(1)\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid index\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        raise ValueError(\"k must be between 1 and the length of the array\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    \n    start = 1\n    end = n\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Invalid input. k is greater than the length of the array.\"\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        return arr[k-2]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if array is empty or has only one element\n    if len(arr) == 1:\n        return arr[0]\n\n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively find the kth element in each half\n    if k < mid + 1:\n        return kth_element(left, k)\n    else:\n        return kth_element(right, k - mid - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # If the length of the array is less than or equal to k, return the kth element\n    if len(arr) <= k:\n        return arr[k-1]\n    # If the length of the array is greater than k, divide it into two parts and recursively find the kth element in each part\n    else:\n        mid = len(arr) // 2\n        left_part = kth_element(arr[:mid], k)\n        right_part = kth_element(arr[mid:], k - mid)\n        # If the kth element is in the left part, return it\n        if k % 2 == 1:\n            return left_part\n        # If the kth element is in the right part, return it\n        else:\n            return right_part"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    prev_was_upper = False\n    for i, char in enumerate(word):\n        if i > 0 and prev_was_upper and char.isupper():\n            camel_case += '_' + char.lower()\n            prev_was_upper = False\n        elif char.isupper():\n            camel_case += char.lower()\n            prev_was_upper = True\n        else:\n            camel_case += char\n            prev_was_upper = False\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i > 0 and word[i-1].isupper():\n            camel_case += \"_\"\n        camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words using the '_' separator\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words into a camel case string\n    camel_case_string = ''.join(words)\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    word_list = word.split('_')\n    # Convert the first word to lowercase and append it to the list\n    camel_word = word_list[0].lower()\n    word_list.insert(0, camel_word)\n    # Join the list of words back into a string with camel case\n    camel_word = ''.join(word_list)\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # Join the words back together with camel case\n    camel_case_word = ''.join(words)\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except the first word\n    for i in range(len(words)):\n        if i > 0:\n            words[i] = words[i][0].upper() + words[i][1:]\n    \n    # Join the words with camel case\n    camel_case_word = ''.join(words)\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert all characters to lowercase\n    word = word.lower()\n    # remove leading and trailing underscores\n    word = word.lstrip('_')\n    word = word.rstrip('_')\n    # split the word into words and capitalize the first letter of each word\n    words = word.split('_')\n    words = [word.capitalize() for word in words]\n    # join the words into a single string\n    result = ''.join(words)\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0]\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    \n    # Convert the first letter to lowercase\n    words[0] = words[0].lower()\n    \n    # Convert the rest of the words to camel case\n    for i in range(1, len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n    \n    # Join the words into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and column as 1\n    row = [1]*n\n    col = [1]*m\n    # Create a 2D list to store the paths\n    paths = [[0]*m for _ in range(n)]\n    # Find the paths and store them in paths\n    for i in range(1, n):\n        for j in range(1, m):\n            paths[i][j] = paths[i-1][j] + paths[i][j-1] - paths[i-1][j-1]\n    # Return the path with the maximum value\n    return max(paths[n-1][m-1], paths[n-1][m-2], paths[n-2][m-1])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            elif i == j:\n                a *= 2\n            elif i > j:\n                a *= i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    if n == 1:\n        return m\n    if n == 2:\n        return m * m\n    else:\n        return eulerian_num(n-1, m) + (n-1) * m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the matrix and list for storing the prime factors\n    matrix = [[0]*(n+1) for _ in range(n+1)]\n    prime_factors = []\n\n    # Fill the matrix with the prime factors of n\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                if j not in prime_factors:\n                    prime_factors.append(j)\n                    matrix[i][j] = 1\n                break\n\n    # Iterate through the rows and columns of the matrix and multiply the prime factors\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            matrix[i][j] *= sum(matrix[k][j] for k in range(1, i+1) if k!= i)\n\n    # Initialize the result list\n    result = []\n\n    # Find the maximum prime factor of the diagonal of the matrix\n    max_prime_factor = max(max(matrix[i][j] for j in range(1, m+1)) for i in range(1, n+1))\n\n    # Iterate through the diagonal elements of the matrix and multiply them with the prime factors\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if matrix[i][j] == max_prime_factor:\n                for prime_factor in prime_factors:\n                    result.append(matrix[i][j] * prime_factor)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Returns:\n    The Eulerian number a(n, m).\n\n    \"\"\"\n    return n * m // (n - 1) + n - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1 or m < 1:\n        return \"Error: n and m should be positive integers.\"\n\n    a = 0\n    b = 1\n\n    for i in range(1, n + 1):\n        a, b = b, a + b\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    a = 0\n    b = 1\n\n    # Loop to calculate the Eulerian number a(n, m)\n    for i in range(n):\n        a, b = b, a + b\n\n    # Return the final value of a(n, m)\n    return a % m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return 1\n    elif n == 2 and m == 1:\n        return 1\n    else:\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if i <= j:\n                    return eulerian_num(i-1, j-1) + eulerian_num(i-1, j)\n        return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(n):\n        for j in range(m):\n            if i+j == 2*n-1:\n                a += 1\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function finds the Eulerian number a(n, m) by using the formula:\n    a(n, m) = ((n+m-2) * (n+m-4) * (n+m-6) *... * 1) // (1 - (1/n) - (1/m) -... - (1/(n+m-2)))\n    \n    where n is the number of nodes and m is the number of edges.\n    '''\n    # Initialize the Eulerian number to 1\n    a = 1\n    \n    # Calculate the sum of the series using a loop\n    for i in range(1, n + m - 2):\n        a = ((n + m - 2) * (n + m - 4) * (n + m - 6) *... * a) // (1 - (1/n) - (1/m) -... - (1/(n+m-2)))\n    \n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        # convert the sublist to a list of strings\n        sublist = [str(elem) for elem in sublist]\n        # sort the list of strings using the sorted() function\n        sublist.sort()\n        # convert the sorted list back to a list of tuples (strings)\n        sublist = [(str(elem), sublist.index(elem)) for elem in sublist]\n        # assign the sorted list back to the original sublist\n        input_list[input_list.index(sublist)] = sublist"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if type(element) == bool:\n            if element:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_list = list(test_list)\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # Append the list to the tuple\n    test_tup = test_tup + (test_list,)\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + tuple(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    print(test_list)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuple into a list\n    test_list = list(test_tup)\n    # Append the list to the tuple\n    test_tup = test_list + test_tup\n    # Convert the tuple back into a tuple\n    test_tup = tuple(test_tup)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists to modify them\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    \n    # Append the list to the tuples\n    test_list.extend(test_tup)\n    \n    # Convert the modified lists back to tuples\n    return tuple(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge first two lists into a single sorted list\n    merged_list = merge(num1, num2)\n\n    # Merge sorted list with third list\n    sorted_list = merge(merged_list, num3)\n\n    return sorted_list\n\ndef merge(list1, list2):\n    '''\n    Merge two sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = 0\n\n    # Compare the elements of the lists\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    # Append any remaining elements of either list\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            result.append(heapq.heappop(num1))\n        elif heapq.heappop(num1) > heapq.heappop(num2):\n            result.append(heapq.heappop(num2))\n        else:\n            result.append(heapq.heappop(num1))\n            result.append(heapq.heappop(num2))\n    while num1:\n        result.append(heapq.heappop(num1))\n    while num2:\n        result.append(heapq.heappop(num2))\n    while num3:\n        result.append(heapq.heappop(num3))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # create a min heap to store the first three lists\n    min_heap = [heapq.merge(num1, num2), num3]\n    \n    # create an empty list to store the merged list\n    merged_list = []\n    \n    # pop the smallest element from the min heap and append it to the merged list\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Create a min heap of the merged list\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Extract the sorted elements from the min heap and add them to a new list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Define a function to merge two lists\n    def merge_lists(lst1, lst2):\n        merged = []\n        i = j = 0\n        while i < len(lst1) and j < len(lst2):\n            if lst1[i] <= lst2[j]:\n                merged.append(lst1[i])\n                i += 1\n            else:\n                merged.append(lst2[j])\n                j += 1\n        merged += lst1[i:]\n        merged += lst2[j:]\n        return merged\n\n    # Define a function to heapify a list\n    def heapify_list(lst):\n        for i in range(len(lst) // 2, -1, -1):\n            heapify_helper(lst, i, len(lst))\n\n    # Define a helper function to heapify a list\n    def heapify_helper(lst, i, n):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and lst[left] > lst[largest]:\n            largest = left\n        if right < n and lst[right] > lst[largest]:\n            largest = right\n        if largest!= i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify_helper(lst, largest, n)\n\n    # Merge the three lists into a single sorted list\n    merged_list = merge_lists(num1, num2)\n    merged_list = merge_lists(merged_list, num3)\n\n    # Heapify the merged list\n    heapify_list(merged_list)\n\n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list to hold the merged sorted list\n    merged_list = []\n    \n    # Create a min-heap to store the three input lists\n    heap1 = []\n    heapq.heapify(heap1, num1)\n    heap2 = []\n    heapq.heapify(heap2, num2)\n    heap3 = []\n    heapq.heapify(heap3, num3)\n    \n    # Merge the three input lists into a single sorted list\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) <= heapq.heappop(heap2):\n            merged_list.append(heapq.heappop(heap1))\n        else:\n            merged_list.append(heapq.heappop(heap2))\n    \n    # If there are still elements in the first heap, append them to the merged list\n    while heap1:\n        merged_list.append(heapq.heappop(heap1))\n    \n    # If there are still elements in the second heap, append them to the merged list\n    while heap2:\n        merged_list.append(heapq.heappop(heap2))\n    \n    # If there are still elements in the third heap, append them to the merged list\n    while heap3:\n        merged_list.append(heapq.heappop(heap3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge num1, num2 and num3 into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    sorted_list = heapq.nlargest(len(merged_list), merged_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # create a list of lists containing all three input lists\n    all_lists = [num1, num2, num3]\n    \n    # create a list to hold the merged and sorted list\n    merged_list = []\n    \n    # use heapq to merge the lists and add them to the merged_list\n    for lst in all_lists:\n        heapq.heapify(lst)\n        while lst:\n            merged_list.append(heapq.heappop(lst))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Combine the three lists into a single list\n    lst = num1 + num2 + num3\n    \n    # Use a min heap to sort the list in ascending order\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n    \n    # Extract the sorted list from the heap\n    sorted_lst = []\n    while heap:\n        sorted_lst.append(heapq.heappop(heap))\n    \n    # Return the sorted list\n    return sorted_lst"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        new_s = \"\"\n        for j in range(len(s)):\n            if s[j] == \"0\":\n                new_s += \"1\"\n            elif s[j] == \"1\":\n                new_s += \"0\"\n        s = new_s\n    for i in range(len(s)):\n        if s[i] == \"1\":\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Split the string into a list of digits\n    digits = [int(digit) for digit in s]\n    # Initialize the result to 0\n    result = 0\n    # Loop through the rotation count\n    for i in range(n):\n        # Reverse the list of digits\n        digits.reverse()\n        # Loop through the list of digits\n        for digit in digits:\n            # If the digit is odd, add 1 to the result\n            if digit % 2!= 0:\n                result += 1\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize variables\n    even_count = 0\n    odd_count = 0\n    len_s = len(s)\n\n    # Initialize the binary string\n    bin_str = format(int(s, 2), '08b')\n\n    # Check if the length of the binary string is odd\n    if len_s % 2!= 0:\n        len_s += 1\n\n    # Loop n times and rotate the binary string\n    for i in range(n):\n        if i % 2 == 0:\n            temp = bin_str[1:] + bin_str[0]\n            bin_str = temp\n        else:\n            temp = bin_str[-1] + bin_str[:-1]\n            bin_str = temp\n\n    # Loop through the binary string and check if each number is odd\n    for i in range(len_s):\n        if int(bin_str[i]) % 2!= 0:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Return the sum of the even and odd counts\n    return even_count + odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of digits\n    binary_list = [int(digit) for digit in s]\n    # Initialize the count to 0\n    count = 0\n    # Initialize the current position to 0\n    current_position = 0\n    # Loop through the given number of times\n    for i in range(n):\n        # Calculate the new position based on the current position and the length of the binary list\n        new_position = (current_position + len(binary_list)) % len(binary_list)\n        # Check if the value at the current position is odd\n        if binary_list[current_position]:\n            # Increment the count if the value at the current position is odd\n            count += 1\n        # Swap the values at the current position and the new position in the binary list\n        binary_list[current_position], binary_list[new_position] = binary_list[new_position], binary_list[current_position]\n        # Update the current position to the new position\n        current_position = new_position\n    # Return the count of odd numbers after rotating the binary string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    # convert binary string to a list of digits\n    digits = list(s)\n    # create a list of the length of the binary string\n    length = len(digits)\n    # find the parity of the binary string\n    parity = length % 2\n    # if the length of the binary string is odd, set the parity to 1\n    if parity == 1:\n        parity = 1\n    else:\n        parity = 0\n    # rotate the binary string the given number of times\n    for i in range(n):\n        digits = digits[parity:] + digits[:parity]\n    # convert the list of digits back to a binary string\n    result = ''.join(str(digit) for digit in digits)\n    # count the number of odd digits in the binary string\n    count = result.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if int(s[-i-1], 2) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    if n % 2 == 0:\n        n = n // 2\n        s = s[::-1]\n    else:\n        n = (n - 1) // 2\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        if i == n:\n            n = i - 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    rot_count = 0\n    s_binary = \"\"\n\n    # Convert string to binary\n    for char in s:\n        if char == '0':\n            s_binary += '0'\n        elif char == '1':\n            s_binary += '1'\n\n    # Find the number of rotations required\n    while rot_count < n:\n        rot_count += 1\n        temp = \"\"\n        for bit in s_binary:\n            temp += bit\n        s_binary = temp\n\n    # Count the number of odd numbers\n    for bit in s_binary:\n        if bit == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # count the number of even digits in the binary string\n    count = 0\n    for i in s:\n        if int(i) % 2 == 0:\n            count += 1\n    # rotate the binary string n times\n    for i in range(n):\n        # convert the binary string to a number\n        binary_number = int(s, 2)\n        # create a new binary string of n digits with the even digits of the original binary string\n        new_binary = \"\"\n        for j in range(len(s)):\n            if int(s[j]) % 2 == 0:\n                new_binary += s[j]\n        # convert the new binary string back to a number\n        new_number = int(new_binary, 2)\n        # add the new number to the count of even digits in the original binary string\n        count += new_number\n    # return the count of odd digits in the rotated binary string\n    return count - (count // 2)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Initialize variables\n    result = 0\n    count = 0\n    i = 0\n\n    # Check if the input string is a binary string\n    if not s.replace(' ', '').isdigit():\n        return \"Error: Input string should contain only digits and spaces\"\n\n    # Convert the binary string to an integer\n    binary = int(s, 2)\n\n    # Find the value of the first bit\n    bit_value = binary % 2\n\n    # Count the number of odd values\n    while count < n:\n        if i >= len(s):\n            i = 0\n        if bit_value!= 0:\n            result += 1\n        bit_value = binary % 2\n        binary = binary >> 1\n        count += 1\n        i += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set()\n    set2 = set()\n    for i in nestedlist:\n        if isinstance(i, list):\n            for j in i:\n                set1.add(j)\n        else:\n            set1.add(i)\n\n    for i in nestedlist:\n        if isinstance(i, list):\n            for j in i:\n                set2.add(j)\n        else:\n            set2.add(i)\n\n    return list(set1.intersection(set2))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_list = []\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common_list:\n                    continue\n                else:\n                    common_list.append(nestedlist[i][j][k])\n\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Iterate through the first list and create a set to store unique elements\n    unique_elements = set()\n    for item in nestedlist[0]:\n        unique_elements.add(item)\n\n    # Iterate through the second list and check if each element is in the unique set\n    for item in nestedlist[1]:\n        if item in unique_elements:\n            print(item)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lst in nestedlist:\n        for item in lst:\n            if item not in common:\n                common.append(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # check if the input is empty\n    if not nestedlist:\n        return []\n\n    # create a set to store the common elements\n    common_elements = set()\n\n    # loop through the nested lists\n    for sublist in nestedlist:\n        # check if the sublist is not empty\n        if not sublist:\n            continue\n\n        # loop through the elements of the sublist\n        for elem in sublist:\n            # add the element to the set if it is common\n            if elem in common_elements:\n                continue\n            common_elements.add(elem)\n\n    # convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Use a set to keep track of common elements\n    common_set = set()\n\n    # Loop through each list in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the current sublist\n        for element in sublist:\n            # Add the element to the set if it's not already there\n            common_set.add(element)\n\n    # Convert the set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Set of all the elements in the nested list\n    elements = set()\n    for sublist in nestedlist:\n        # Add all the elements in the sublist to the set\n        elements.update(sublist)\n    # Convert the set to a list and return it\n    return list(elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Check if the given list is empty or None\n    if not nestedlist:\n        return []\n    \n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    \n    # Loop through each nested list\n    for sublist in nestedlist:\n        # Check if the sublist is empty or None\n        if not sublist:\n            continue\n        \n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the set if it is not already present\n            if element not in common_elements:\n                common_elements.add(element)\n    \n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Remove any leading or trailing spaces\n    text = text.strip()\n\n    # Check if the string is empty or consists only of spaces\n    if not text:\n        return False\n\n    # Check if the string consists of only digits\n    if text.isdigit():\n        return True\n\n    return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # check if the string starts with a minus sign '-'\n    if text[0] == '-':\n        return False\n    # check if the string contains only digits and '.'\n    for char in text:\n        if not char.isdigit() and char!= '.':\n            return False\n    # if all conditions are satisfied, the string is an integer\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if len(i)!= 0:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    all_empty = True\n    for i in list1:\n        if not i:\n            all_empty = False\n            break\n    return all_empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n        else:\n            pass\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list so we can modify it\n    nums = list(nums)\n    # Reverse the list\n    nums.reverse()\n    # Convert the list back to a single integer\n    result = int(''.join(map(str, nums)))\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # initialize an empty list to store the integers\n    result = []\n    # loop through each integer in the tuple\n    for num in nums:\n        # if the integer is a positive integer, append it to the result list\n        if num > 0:\n            result.append(num)\n        # if the integer is not a positive integer, raise a ValueError with an error message\n        else:\n            raise ValueError(\"All integers in the tuple must be positive.\")\n    # convert the result list into a single integer and return it\n    return int(\"\".join(str(num) for num in result))"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to store the final integer\n    result = ''\n    # Iterate over each digit of the input tuple\n    for num in nums:\n        # Append the current digit to the result string\n        result += str(num)\n    # Convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty integer variable to store the result\n    result = 0\n    \n    # Loop through each number in the tuple\n    for num in nums:\n        # Add each number to the result variable\n        result += num\n    \n    # Return the result variable as the final integer\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float_list.append(float(item))\n            except ValueError:\n                continue\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                pass\n            else:\n                row[row.index(item)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            new_list.extend(list_to_float(item))\n        elif isinstance(item, str):\n            try:\n                new_list.append(float(item))\n            except ValueError:\n                new_list.append(item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                pass\n            else:\n                row[row.index(item)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, str)):\n                test_list[i][j] = float(test_list[i][j])\n\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Loop through each element in the list\n    for element in test_list:\n\n        # Check if the element is convertible to a float\n        try:\n            float(element)\n        except ValueError:\n            # If the element is not convertible, convert it to a string\n            test_list[test_list.index(element)] = str(element)\n\n    # Loop through each element in the list again to convert all possible convertible elements to floats\n    for i, element in enumerate(test_list):\n        try:\n            test_list[i] = float(element)\n        except ValueError:\n            pass\n\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    # Find the middle element of the array\n    mid = len(arr) // 2\n\n    # Check if the middle element is the only element that appears only once\n    if arr[mid] == arr[0] or arr[mid] == arr[-1]:\n        return arr[mid]\n\n    # Recursively search the left and right halves of the array\n    left_result = search(arr[:mid])\n    right_result = search(arr[mid:])\n\n    # If the left and right results are different, return the middle element\n    if left_result!= right_result:\n        return mid\n\n    # If the left and right results are the same, return the middle element\n    return left_result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a hash table to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            # If the element appears more than once, increment its frequency\n            freq[arr[i]] += 1\n        else:\n            # Otherwise, add it to the hash table with a frequency of 1\n            freq[arr[i]] = 1\n    \n    # Find the element that appears only once in the array\n    for i in range(len(arr)):\n        if freq[arr[i]] == 1:\n            return arr[i]\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    # Initialize two pointers, one at the start and the other at the end of the array\n    start = 0\n    end = len(arr) - 1\n    \n    # Traverse the array until the two pointers meet\n    while start < end:\n        # If the element at the start pointer is the same as the element at the end pointer, it means that we have found a repeating element\n        if arr[start] == arr[end]:\n            # Increment the start pointer by 1 to move to the next element in the array\n            start += 1\n        else:\n            # Decrement the end pointer by 1 to move to the previous element in the array\n            end -= 1\n    \n    # Return the element at the start pointer, since it is the only element that appears only once in the array\n    return arr[start]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n\n    # Loop through each element in the array\n    for num in arr:\n        # If the element is already in the dictionary, increment its count\n        if num in count:\n            count[num] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count[num] = 1\n\n    # Initialize a set to store the unique elements\n    unique = set()\n\n    # Loop through each element in the count dictionary\n    for num, count in count.items():\n        # If the count is 1, add the element to the set\n        if count == 1:\n            unique.add(num)\n\n    # Check if there is only one element in the set\n    if len(unique) == 1:\n        return list(unique)[0]\n\n    # If there are multiple elements, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    unique_element = None\n\n    # Traverse through the array\n    for num in arr:\n        # If the current number is the same as the previous element, increment the count\n        if unique_element == num:\n            count += 1\n        else:\n            # If the current number is not the same as the previous element, update the count and the unique_element\n            count = 1\n            unique_element = num\n\n    # If the unique element is not found, return None\n    if unique_element is None:\n        return None\n\n    # If the count is 1, return the unique element\n    if count == 1:\n        return unique_element\n\n    # If the count is greater than 1, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i!= arr.index(arr[i]):\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate over the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the dictionary and find the first element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n\n    # If no such element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count = 1\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    count += 1\n                else:\n                    break\n            if count == 1:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the maximum product and the current product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the list of tuples\n    for tup in list1:\n        # Calculate the absolute product of the current tuple and the previous maximum product\n        new_product = abs(tup[0] * tup[1])\n\n        # Update the maximum product and the current product\n        if new_product > max_product:\n            max_product = new_product\n        current_product *= new_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0] * list1[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    pair_product = float('-inf')\n    temp_product = float('-inf')\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current pair\n            pair_product = abs(list1[i][0] * list1[j][1])\n            # Update the max_product if the new pair product is greater than the current max_product\n            if pair_product > max_product:\n                max_product = pair_product\n            # Update the temp_product if the product of the next two numbers is greater than the current temp_product\n            temp_product = abs(list1[i][1] * list1[j][0])\n            # Update the max_product if the new temp_product is greater than the current max_product\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Parameters:\n        lst (list): A list of tuples where each tuple contains two numbers.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples within the given list.\n    \"\"\"\n\n    max_product = float('-inf')\n    pair_product = float('-inf')\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            pair_product = abs(lst[i][0] * lst[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = 0\n    max_product = 0\n    min_product = 0\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_diff = abs(list1[i][0] - list1[j][0]) + abs(list1[i][1] - list1[j][1])\n            max_abs_product = max(max_abs_product, abs_diff)\n            max_product = max(max_product, max(list1[i][0], list1[i][1]) * max(list1[j][0], list1[j][1]))\n            min_product = min(min_product, min(list1[i][0], list1[i][1]) * min(list1[j][0], list1[j][1]))\n\n    return max_abs_product, max_product, min_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = list1[i]*list1[j]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i < 10000:\n            if i == sum(set(range(1, i)) & set(range(i, limit + 1))):\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\nresult = amicable_numbers_sum(10000)\nprint(result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Create a dictionary to store all the prime numbers and their factors\n    prime_factors = {}\n\n    # Check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Find all prime factors of a given number\n    def prime_factors_of(n):\n        factors = []\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if i!= n//i:\n                    factors.append(i)\n                    if is_prime(n//i):\n                        factors.append(n//i)\n        return factors\n\n    # Get all the prime numbers up to a specified limit\n    primes = [x for x in range(2, limit+1) if is_prime(x)]\n\n    # Find all the amicable numbers from 1 to the limit\n    amicable = []\n    for p in primes:\n        if p!= 1:\n            prime_factors_list = prime_factors_of(p)\n            if p in prime_factors_list:\n                if is_prime(p+prime_factors_list.pop(prime_factors_list.index(p)+1)):\n                    amicable.append(p+prime_factors_list.pop(prime_factors_list.index(p)+1))\n\n    # Sum all the amicable numbers\n    amicable_sum = sum(amicable)\n\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n\n    for i in range(1, limit):\n        for j in range(i, limit):\n            if i!= j and i + j == limit:\n                amicable_numbers.append(i + j)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i < 10:\n            if i == 1:\n                amicable_numbers.append(i)\n            elif i == 2:\n                amicable_numbers.append(i)\n            else:\n                if i in amicable_numbers:\n                    continue\n                num = i\n                j = 2\n                while j < num:\n                    if num % j == 0:\n                        break\n                    j += 1\n                if j == num - 1:\n                    amicable_numbers.append(i)\n        else:\n            num = i\n            j = 2\n            while j < num:\n                if num % j == 0:\n                    break\n                j += 1\n            if j == num - 1:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        num = i\n        amicable = False\n        for j in range(2, num):\n            if num % j == 0:\n                amicable = True\n                break\n        if amicable:\n            amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables\n    sum = 0\n    numbers = []\n    \n    # loop through all numbers from 1 to limit\n    for num in range(1, limit+1):\n        \n        # check if the number is amicable to any other number\n        for i in range(1, num):\n            if num % i == 0 and i!= num:\n                break\n        else:\n            # if the number is not amicable, add it to the sum and add to the list of numbers\n            sum += num\n            numbers.append(num)\n    \n    return sum, numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    amicable_sum = 0\n    for i in range(1, limit):\n        if is_prime(i) and is_prime(limit - i):\n            amicable_sum += i + limit - i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if is_prime(num) and is_prime(num + 1):\n            if num + 1 == num ** 2 + num:\n                amicable_sum += num + num + 1\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to store the sum and the sum of squared numbers\n    total = 0\n    sum_of_squared_numbers = 0\n    \n    # Loop through all numbers up to the specified limit\n    for i in range(1, limit + 1):\n        # Check if the current number is amicable\n        if i == amicable(i):\n            # Add the current number to the total sum and its square to the sum of squared numbers\n            total += i\n            sum_of_squared_numbers += i**2\n    \n    # Return the total sum of amicable numbers\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Returns True if the given number is amicable, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to the given limit.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle in radians.\n    \"\"\"\n    # Calculate the modulus and phase of the complex number\n    modulus = cmath.sqrt(a.real**2 + a.imag**2)\n    phase = cmath.phase(a)\n\n    # Convert the phase to radians\n    radians = phase * (cmath.pi / 180)\n\n    # Return the angle in radians\n    return radians"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        return 0\n\n    angle = cmath.phase(complex(a, b))\n    return angle * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the modulus and argument of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    argument = cmath.phase(a + b*1j)\n\n    # Convert the modulus and argument to degrees and return the result\n    return round(argument * 180/cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    angle = cmath.phase(complex(a, b))\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes in two complex numbers a + bi and returns the angle (in radians) of the complex number.\n    \"\"\"\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return round(angle, 2)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    max_diff = 0\n    for i in range(len(string)):\n        count_0s = 0\n        count_1s = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0s += 1\n            else:\n                count_1s += 1\n            diff = abs(count_0s - count_1s)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    max_diff = 0\n\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if i == j:\n                continue\n            if string[i] == '0' and string[j] == '1':\n                diff = 0\n                while string[i+diff] == '0' and string[j+diff] == '1':\n                    diff += 1\n                max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    length = len(string)\n    max_diff = 0\n    for i in range(length - 1):\n        diff = string.count('0') - string.count('1')\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    length = len(string)\n    max_length = 0\n    \n    # Traverse through all substrings of the string\n    for i in range(length):\n        for j in range(i+1, length+1):\n            # Check if the substring has at least one 0 and one 1\n            if (string[i] == '0' and string[j] == '1') or (string[i] == '1' and string[j] == '0'):\n                sub_length = j - i\n                if sub_length > max_length:\n                    max_length = sub_length\n    \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    # initialize counters\n    zero_count = 0\n    one_count = 0\n\n    # iterate through the string\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        # calculate the maximum difference\n        max_diff = max(zero_count - one_count, zero_count, one_count)\n        zero_count = max(zero_count, one_count)\n        one_count = 0\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        count0 = string.count('0', i, i+1)\n        count1 = string.count('1', i, i+1)\n        diff = abs(count0 - count1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize two variables to store the number of 0s and 1s in the given string \n    zero_count = 0 \n    one_count = 0 \n    # Initialize a variable to store the maximum difference \n    max_diff = 0 \n\n    # Iterate through each character in the string \n    for char in string: \n        # If the character is a 0, increment the zero_count \n        if char == '0': \n            zero_count += 1 \n        # If the character is a 1, increment the one_count \n        elif char == '1': \n            one_count += 1 \n        # Calculate the difference between the number of 0s and 1s \n        diff = abs(zero_count - one_count) \n        # Update the maximum difference if the current difference is greater than the maximum difference \n        if diff > max_diff: \n            max_diff = diff \n\n    # Return the maximum difference \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    n = len(string)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            zeros = string[i:j].count('0')\n            ones = string[i:j].count('1')\n            diff = ones - zeros\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of common divisors\n    sum_common_divisors = 0\n    \n    # Find the common divisors of a and b\n    common_divisors = [x for x in range(1, b+1) if b % x == 0 and a % x == 0]\n    \n    # Iterate over the common divisors and add them to the sum\n    for divisor in common_divisors:\n        sum_common_divisors += divisor\n    \n    # Return the sum of common divisors\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the smallest number\n    if a < b:\n        min_num = a\n        max_num = b\n    else:\n        min_num = b\n        max_num = a\n\n    # check if the numbers are prime or not\n    if min_num <= 1:\n        return \"Please enter two prime numbers.\"\n    if max_num <= 1:\n        return \"Please enter two prime numbers.\"\n\n    # find the common divisors\n    divisors = []\n    for i in range(2, min_num + 1):\n        if min_num % i == 0 and max_num % i == 0:\n            divisors.append(i)\n\n    # calculate the sum of common divisors\n    total = 0\n    for i in divisors:\n        total += i\n\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = set()\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n        i += 1\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the sum of common divisors of two given numbers\n    def gcd(a, b):\n        \"\"\"\n        Calculate the greatest common divisor of two numbers.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    common_divisor = gcd(a, b)\n    return a * common_divisor // gcd(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Loop through all possible divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # If it is, add it to the sum\n            result += i\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    def gcd(a, b):\n        '''\n        Write a python function to find the greatest common divisor of two given numbers.\n        '''\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    def common_divisors(n):\n        '''\n        Write a python function to find all the common divisors of a given number n.\n        '''\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_of_common_divisors(a, b):\n        '''\n        Write a python function to find the sum of common divisors of two given numbers a and b.\n        '''\n        common_divisors_a = common_divisors(a)\n        common_divisors_b = common_divisors(b)\n        sum_of_divisors = 0\n        for i in range(min(len(common_divisors_a), len(common_divisors_b))):\n            if common_divisors_a[i] == common_divisors_b[i]:\n                sum_of_divisors += common_divisors_a[i]\n        return sum_of_divisors\n\n    return sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Finding all the common divisors of the two numbers\n    divisors_set_a = set(range(1, a+1))\n    divisors_set_b = set(range(1, b+1))\n\n    # Finding the intersection of the two sets\n    divisors_intersection = divisors_set_a.intersection(divisors_set_b)\n\n    # Finding the sum of the common divisors\n    sum_common_divisors = sum(divisors_intersection)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    This function returns a list of common divisors of two given numbers.\n    \"\"\"\n    # set of unique divisors of a and b\n    divisors = set(range(1, max(a, b)+1))\n    # create a set of common divisors of a and b\n    common = set()\n    # iterate over the set of divisors\n    for d in divisors:\n        # check if a and b have any common divisors\n        if d in [a%d, b%d]:\n            common.add(d)\n    return list(common)\n\ndef sum(a, b):\n    \"\"\"\n    This function returns the sum of common divisors of two given numbers.\n    \"\"\"\n    # get the common divisors of a and b\n    divisors = common_divisors(a, b)\n    # add up all the divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Check if the numbers are positive\n    if a <= 0 or b <= 0:\n        return \"Error: Please provide positive numbers.\"\n\n    # Find the largest number and divide it by 2 to find the smallest number that is also divisible by both numbers\n    largest = max(a, b)\n    smallest = min(a, b)\n    smallest_divisible_by_both = smallest\n\n    while smallest_divisible_by_both % largest!= 0:\n        smallest_divisible_by_both += 1\n\n    # Find the sum of all numbers between the smallest divisible by both numbers and the largest divisible by both numbers\n    sum_of_common_divisors = 0\n    for i in range(smallest_divisible_by_both, largest + 1):\n        if i % smallest == 0 and i % largest == 0:\n            sum_of_common_divisors += i\n\n    # Return the sum of common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n\n    # Initialize an empty list to store the words that are longer than n characters\n    long_words_list = []\n\n    # Loop through each word in the list of words\n    for word in words:\n        # Check if the length of the word is greater than n characters\n        if len(word) > n:\n            # Add the word to the list of long words if it meets the criteria\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n    \n    # Initialize an empty list to store the long words\n    long_words = []\n    \n    # Iterate through the words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Add the long word to the list\n            long_words.append(word)\n    \n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    def is_magic_square(matrix):\n        '''\n        Helper function to check if a given matrix is a magic square.\n        '''\n        row_sums = [sum(row) for row in matrix]\n        col_sums = [sum(col) for col in zip(*matrix)]\n        diag_sum1 = matrix[0][0] + matrix[1][1] + matrix[2][2]\n        diag_sum2 = matrix[2][0] + matrix[1][1] + matrix[0][2]\n        return row_sums == col_sums == diag_sum1 == diag_sum2 == sorted(row_sums)\n\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"Not a square matrix.\"\n    elif not all(len(row) == len(my_matrix[0]) for row in my_matrix):\n        return \"Not all rows have the same length.\"\n    elif not all(all(isinstance(elem, int) for elem in row) for row in my_matrix):\n        return \"Not all elements are integers.\"\n    else:\n        return is_magic_square(my_matrix)"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize the sum of the diagonal elements\n    sum_diagonal = 0\n    \n    # Check if each element in the matrix is the same\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n            \n            # Check if the diagonal element is the same\n            sum_diagonal += my_matrix[i][j]\n    \n    # Check if the sum of the diagonal elements is equal to the sum of the matrix elements\n    if sum_diagonal!= sum([sum(row) for row in my_matrix]):\n        return False\n    \n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check the dimensions of the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check each element of the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= sum(my_matrix[k][j] for k in range(len(my_matrix))):\n                return False\n\n    # If no errors are found, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    rows = [set(row) for row in my_matrix]\n\n    for i in range(n):\n        for j in range(n):\n            # check if the sum of elements in the row and column is equal to the diagonal element\n            if sum(rows[i]) == n * (i + j) or sum(rows[j]) == n * (i + j):\n                return True\n\n    # check if the sum of elements in the diagonal is equal to the sum of elements in the first row and first column\n    if sum(rows[0]) == n * n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is rectangular\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for elem in row:\n            if type(elem)!= int:\n                return False\n    \n    # Initialize the sum of the diagonal elements\n    diag_sum = 0\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i == j:\n                # Check if the element is in the correct row and column\n                if my_matrix[i][j]!= i+1:\n                    return False\n                # Update the sum of the diagonal elements\n                diag_sum += my_matrix[i][j]\n            else:\n                # Check if the element is in the correct diagonal\n                if my_matrix[i][j]!= diag_sum - j - 1:\n                    return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)-1, -1, -1):\n        for j in range(len(my_matrix)-1, -1, -1):\n            if i == j:\n                # Check if the element is in the correct row and column\n                if my_matrix[i][j]!= i+1:\n                    return False\n                # Update the sum of the diagonal elements\n                diag_sum += my_matrix[i][j]\n            else:\n                # Check if the element is in the correct diagonal\n                if my_matrix[i][j]!= diag_sum - j - 1:\n                    return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        # Check rows for magic squares\n        for j in range(n):\n            if my_matrix[i][j]!= (i+j+1):\n                return False\n        # Check columns for magic squares\n        for j in range(n):\n            if my_matrix[j][i]!= (i+j+1):\n                return False\n    # Check diagonals for magic squares\n    for i in range(n):\n        if my_matrix[i][i]!= (i+1):\n            return False\n        if my_matrix[i][n-i-1]!= (i+1):\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check that the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check that all the rows have the same length\n    row_lengths = [len(row) for row in my_matrix]\n    if len(set(row_lengths))!= 1:\n        return False\n    \n    # Check that all the columns have the same length\n    col_lengths = [len(row) for row in zip(*my_matrix)]\n    if len(set(col_lengths))!= 1:\n        return False\n    \n    # Check that each element is unique\n    for row in my_matrix:\n        for col in row:\n            if col < 1 or col > len(my_matrix) or row.count(col)!= 1:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # initialize sum and difference variables\n    row_sum = 0\n    col_sum = 0\n    row_diff = 0\n    col_diff = 0\n\n    # calculate row sum and difference\n    for row in my_matrix:\n        row_sum += sum(row)\n        row_diff += max(row) - min(row)\n\n    # calculate column sum and difference\n    for col in zip(*my_matrix):\n        col_sum += sum(col)\n        col_diff += max(col) - min(col)\n\n    # check if row sum and difference are equal to 0\n    if row_sum == 0 or row_diff == 0:\n        return True\n\n    # check if column sum and difference are equal to 0\n    elif col_sum == 0 or col_diff == 0:\n        return True\n\n    # if all conditions are not met, return False\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum([sum(x) for x in my_matrix])\n\n    # Calculate the sum of the off-diagonal elements\n    off_diagonal_sum = sum([sum([y[i] for y in my_matrix]) for i in range(len(my_matrix))])\n\n    # Check if the diagonal sum is equal to the sum of the matrix\n    if diagonal_sum == off_diagonal_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum([sum(row) for row in my_matrix])\n\n    # Calculate the sum of the elements in each row\n    row_sums = [sum(row) for row in my_matrix]\n\n    # Calculate the sum of the elements in each column\n    col_sums = [sum(row) for row in zip(*my_matrix)]\n\n    # Check if the diagonal and row and column sums are equal\n    if diagonal_sum == row_sums[0] == col_sums[0]:\n        return True\n    elif diagonal_sum == row_sums[1] == col_sums[1]:\n        return True\n    elif diagonal_sum == row_sums[2] == col_sums[2]:\n        return True\n    elif diagonal_sum == col_sums[0] == row_sums[0] == col_sums[1] == row_sums[1] == col_sums[2] == row_sums[2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_item = None\n\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_item = None\n    max_count = 0\n    \n    for num in nums:\n        count[num] += 1\n        \n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_dict = defaultdict(int)\n    for num in nums:\n        frequency_dict[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    \n    for item, freq in frequency_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency and return its value\n    max_num = None\n    max_freq = 0\n    for num, freq_count in freq.items():\n        if freq_count > max_freq:\n            max_num = num\n            max_freq = freq_count\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    \n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        count[num] += 1\n\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = []\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    result = str1[:vowel_indices[0]]\n    for i in range(len(vowel_indices)-1):\n        result += str1[vowel_indices[i]+1:vowel_indices[i+1]]\n    result += str1[vowel_indices[-1]+1:]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in string:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n            new_str = char + new_str\n    return new_str[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = []\n    result = ''\n\n    # Finding the index of each vowel in the string\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowel_index.append(i)\n\n    # Reversing the vowels in the string\n    for i in range(len(vowel_index)-1, -1, -1):\n        result += str1[vowel_index[i]]\n\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char not in vowels:\n            new_str = char + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 = str1[i] + str2\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    if not vowel_indices:\n        return str1\n    vowel_indices.sort(reverse=True)\n    new_str = []\n    for i in vowel_indices:\n        new_str.append(str1[i])\n    return ''.join(new_str)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            if char.lower() in vowels:\n                reversed_str += char.lower()\n            else:\n                reversed_str += char.upper()\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i) +''\n    return str1[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \" \"\n    return str1[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string = str(tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return \",\".join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    string = ', '.join(str(i) for i in tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string using the join() method\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join([str(i) for i in tup1])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n\n    # initialize the sum variable to 0\n    negative_sum = 0\n\n    # loop through the list of numbers\n    for num in nums:\n\n        # if the number is negative, add it to the negative sum\n        if num < 0:\n            negative_sum += num\n\n    # return the negative sum\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2*n-1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    c = 10\n    d = 15\n    e = 20\n    for i in range(1, n+1):\n        hex = a + b + c + d + e\n        print(hex)\n        a = d\n        b = c\n        c = b + a\n        d = a + e\n        e = b + a + c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    def hex_formula(n):\n        \"\"\"\n        Helper function to calculate nth hexagonal number.\n        \"\"\"\n        if n <= 0:\n            return 0\n        else:\n            return 2 * hex_formula(n-1) + n\n\n    return hex_formula(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num = hexagonal_num(n-1) + 1\n        return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the sum of the hexagonal numbers\n    sum_hex = 0\n    # Initialize the previous hexagonals\n    prev_hex = 0\n    # Iterate through the hexagons\n    for i in range(n):\n        # Compute the next hexagonal number\n        next_hex = (i + prev_hex) / 2\n        # Add the hexagonal number to the sum\n        sum_hex += next_hex\n        # Set the previous hexagonal number to the current one\n        prev_hex = next_hex\n    # Return the sum of the hexagonal numbers\n    return sum_hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n numbers of the hexagonal sequence\n    for i in range(1, n+1):\n        # Add the i-th term to the sum\n        sum += i * (i+1) // 2\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n+1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2*(n*(n+1))"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = sum(1 for num in nums if num == 0)\n    non_zeros = len(nums) - zeros\n    return float(zeros) / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0])\n    non_zero_count = array('i', [0])\n\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            non_zero_count.append(1)\n\n    zero_count_sum = sum(zero_count)\n    non_zero_count_sum = sum(non_zero_count)\n\n    if non_zero_count_sum == 0:\n        return 0\n    else:\n        return float(zero_count_sum) / non_zero_count_sum"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n\n    # create an array to store the binary representation of the numbers\n    binary_nums = array('i', [bin(num)[2:] for num in nums])\n\n    # calculate the sum of all binary values\n    binary_sum = sum(binary_nums)\n\n    # calculate the sum of all binary values that are non-zero\n    non_zero_sum = sum([int(digit) for digit in binary_sum if digit!= '0'])\n\n    # calculate the ratio of non-zero values to total values\n    non_zero_ratio = non_zero_sum / binary_sum\n\n    return non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the array to an array of characters to simplify counting\n    char_array = array('c', [str(x) for x in nums])\n\n    # Count the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    for char in char_array:\n        if char == '0':\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = zero_count / non_zero_count\n\n    # Return the ratio\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Convert the array to a list\n    nums_list = list(nums)\n\n    # Create two empty arrays to store the counts of zeroes and non-zeroes\n    zero_counts = array('I', [0] * len(nums))\n    non_zero_counts = array('I', [0] * len(nums))\n\n    # Iterate through the list and count the number of zeroes and non-zeroes\n    for num in nums_list:\n        if num == 0:\n            zero_counts[nums_list.index(num)] += 1\n        else:\n            non_zero_counts[nums_list.index(num)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_non_zero_ratio = sum(zero_counts) / sum(non_zero_counts)\n\n    # Return the ratio\n    return zero_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    nonzero_count = 0\n    for num in nums:\n        if num!= 0:\n            nonzero_count += 1\n    \n    zero_count = len(nums) - nonzero_count\n    \n    return (zero_count / len(nums), nonzero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    nonzeros = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(0) + 1] += 1\n        else:\n            nonzeros[nonzeros.index(0) + 1] += 1\n\n    ratio = zeros[0] / nonzeros[0] if nonzeros[0]!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list\n    nums_list = list(nums)\n    # Initialize the count of non-zeroes and zeroes\n    non_zeroes = 0\n    zeros = 0\n    # Iterate through the list\n    for num in nums_list:\n        # If the number is non-zero, increment the count of non-zeroes\n        if num!= 0:\n            non_zeroes += 1\n        # If the number is zero, increment the count of zeroes\n        else:\n            zeros += 1\n    # Calculate the ratio of non-zeroes to zeroes\n    ratio = non_zeroes / zeros\n    # Return the ratio as a float rounded to 2 decimal places\n    return round(ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0 for _ in range(len(nums))])\n    ones = array('i', [0 for _ in range(len(nums))])\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num) + 1] += 1\n        else:\n            ones[ones.index(num) + 1] += 1\n    ratio = zeros[1:] / ones[1:]\n    return round(sum(ratio), 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    \n    ratio = 0\n    for count in zero_count:\n        if count > 0:\n            ratio += 1\n    \n    return ratio/len(nums)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return True\n    count = 0\n    power_of_two = 1\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            count += 1\n            n //= power_of_two\n        else:\n            power_of_two <<= 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Function to check whether the number is a power of 2 or not\n    def is_power_of_two(num):\n        if num == 0:\n            return False\n        else:\n            return (num & (num - 1)) == 0\n    \n    # Function to find the power of 2 that makes the given number\n    def find_power_of_two(num):\n        power = 0\n        while num > 1:\n            num >>= 1\n            power += 1\n        return power\n    \n    # Find the power of 2 that makes the given number\n    power = find_power_of_two(n)\n    \n    # Check whether the given number can be represented as sum of non-zero powers of 2 or not\n    if power > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if the given number is a power of 2\n    if n == 1 or n == 2:\n        return True\n    \n    # Check if the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the given number is divisible by any power of 2 \n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    # Check if the given number can be represented as sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")\n\n    # Check if the number can be represented as a sum of powers of 2\n    for i in range(1, 32):\n        if n % (2 ** i) == 0:\n            print(\"The number can be represented as a sum of powers of 2.\")\n            break\n    else:\n        print(\"The number can not be represented as a sum of powers of 2.\")\n\n    return\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def sum_of_powers_of_two(n, current_sum=0, count=0):\n        if current_sum > n:\n            return count\n        if n == 1:\n            return current_sum\n        if n % 2 == 0:\n            count += sum_of_powers_of_two(n//2, current_sum+2, count)\n        else:\n            count += sum_of_powers_of_two(n//2+1, current_sum+2, count)\n        return count\n    \n    return sum_of_powers_of_two(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Args:\n    n: an integer\n\n    Returns:\n    True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n\n    \"\"\"\n\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # Check if n is a sum of non-zero powers of 2\n    power_of_2 = 1\n    while power_of_2 <= n:\n        if n - power_of_2 == 0:\n            return True\n        power_of_2 <<= 1\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check for negative numbers\n    if n < 0:\n        return False\n    \n    # Check for sum of powers of 2 greater than 32 bits\n    if 2**32 < n:\n        return False\n    \n    # Check if the number can be expressed as sum of powers of 2\n    i = 0\n    while 2**i < n:\n        if n % (2**i) == 0:\n            n -= 2**i\n        else:\n            return False\n        i += 1\n        \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Define a helper function to check whether a number is a power of 2 or not\n    def is_power_of_two(num):\n        return (num > 0) and (num & (num - 1)) == 0\n\n    # Helper function to check whether the given number is a sum of powers of 2\n    def is_sum_of_powers_of_two(num):\n        # Check whether the given number is equal to 0\n        if num == 0:\n            return False\n\n        # Initialize a variable to store the sum of powers of 2\n        sum_of_powers = 0\n\n        # Iterate through all the digits of the given number\n        while num > 0:\n            # Check whether the current digit is a power of 2\n            if is_power_of_two(num % 10):\n                # Add the power of 2 to the sum of powers of 2\n                sum_of_powers += 1\n\n            # Shift the number to the right by 1 digit\n            num //= 10\n\n        # Check whether the sum of powers of 2 is equal to the given number\n        return num == sum_of_powers\n\n    # Check whether the given number is a sum of powers of 2 or not\n    if is_sum_of_powers_of_two(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    for i in range(1, int(n**0.5)+1):\n        if n % 2 == 0:\n            return False\n        if n == (1 << i):\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is zero\n    if n == 0:\n        return False\n\n    # Check if the number is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Check for non-zero powers of 2\n    while n:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n    \n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    print(f\"The circumference of a circle with radius {r} is {circumference:.2f}\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    print(\"The circumference of the circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n\nprint(circle_circumference(5)) # Output: 31.4159"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r  # approximated circumference using pi"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return round(circumference, 2)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for num in sublist:\n            result.add(num)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    flattened_set = set(flattened_list)\n    return flattened_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            result.add(item)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    return set(flat_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # get the length of the list\n    n = len(nums)\n    \n    # loop through each element of the list\n    for i in range(n):\n        \n        # find the index of the largest element in the unsorted part of the list\n        max_index = i\n        \n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the largest element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # reverse the part of the list from index i+1 to the end\n        nums[i+1:][::-1].sort()"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    n = len(nums)\n\n    # Initialize a list to store the pancakes\n    pancakes = []\n\n    # Loop through the list backwards\n    for i in range(n-1, -1, -1):\n        # Find the next smallest element in the unsorted list\n        min_idx = i\n        for j in range(i+1, n):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n\n        # If the next smallest element is not already in its sorted position\n        if min_idx!= i:\n            # Swap the elements\n            nums[i], nums[min_idx] = nums[min_idx], nums[i]\n\n            # Add the pancake to the list\n            pancakes.append(i)\n            pancakes.append(min_idx)\n\n        # If the list is sorted\n        else:\n            break\n\n    # Print the sorted list\n    print(nums)\n\n    # Print the pancakes that were generated\n    print(\"Pancakes:\", pancakes)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    def reverse_pancake_sort(nums, k):\n        # Reverse the first k elements of the array\n        nums = nums[::-1]\n        # Sort the remaining elements using traditional bubble sort\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n        # Reverse the first k elements again to restore the original array\n        nums = nums[::-1]\n        # Return the sorted array\n        return nums\n\n    def merge_sort(nums):\n        if len(nums) <= 1:\n            return nums\n\n        mid = len(nums) // 2\n        left = nums[:mid]\n        right = nums[mid:]\n\n        left = merge_sort(left)\n        right = merge_sort(right)\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    # Implement pancake sort using merge sort\n    k = len(nums)\n    for i in range(1, k+1):\n        nums = reverse_pancake_sort(nums, i)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize variables\n    n = len(nums)\n    swaps = 0\n\n    # Sort the list using the Bubble Sort algorithm\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swaps += 1\n\n    print(\"Swaps:\", swaps)\n    print(\"Sorted list:\", nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Use the bubble sort algorithm to sort the list.\n    for i in range(n):\n        # Bubble sort step.\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the unsorted part of the list from index i+1 to the end\n        nums[i+1:n:1] = nums[i:n:1][::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    for i in range(n-1, 0, -1):\n        # Find the largest number in the remaining unsorted part of the list\n        largest = nums[i]\n        largest_index = i\n\n        # Find the index of the smallest number in the remaining unsorted part of the list\n        for j in range(i):\n            if nums[j] > largest:\n                largest = nums[j]\n                largest_index = j\n\n        # Swap the numbers if they are not already in the correct order\n        if largest_index!= i:\n            nums[i], nums[largest_index] = nums[largest_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the first i elements.\n        max_index = i\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the first element.\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def pancake_sort_helper(nums, k):\n        if k == 1:\n            return nums\n        else:\n            sorted_nums = pancake_sort_helper(nums, k - 1)\n            for i in range(len(sorted_nums)):\n                for j in range(i + 1, len(sorted_nums)):\n                    if sorted_nums[i] < sorted_nums[j]:\n                        sorted_nums[i], sorted_nums[j] = sorted_nums[j], sorted_nums[i]\n            return sorted_nums[:k] + sorted_nums[k:]\n\n\n    return pancake_sort_helper(nums, len(nums))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Step 1: Initialize the'stack'\n    stack = []\n    # Step 2: Iterate through the list backwards\n    for i in range(len(nums)-1, -1, -1):\n        # Step 3: Add the number to the'stack'\n        stack.append(nums[i])\n        # Step 4: Check if the'stack' contains a number greater than the current number\n        while stack and stack[-1] > nums[i]:\n            # Step 5: Remove the number from the'stack'\n            stack.pop()\n            # Step 6: Swap the numbers at the current index and the one popped from the'stack'\n            nums[i], stack[-1] = stack[-1], nums[i]\n    # Step 7: Return the sorted list\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1 \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in an array of integers and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    if len(arr) < 2:\n        return \"The array must have at least two elements.\"\n\n    max_diff = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = float('-inf')\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    x = int((-b + (n // b)) / a)\n    y = int((-b - (n // b)) / a)\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # use linear equation solver to find x and y\n    if a!= 0:\n        x = -b // a\n        y = n // a\n    else:\n        x = 0\n        y = n // b\n    # check if solution exists\n    if x >= 0 and y >= 0 and x <= a and y <= b:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables\n    x1, x2 = 0, 0\n    y1, y2 = 0, 0\n    x, y = 0, 0\n    y_diff = 1\n    y_sum = 0\n    \n    # loop until we find a solution\n    while y_diff!= 0:\n        y_sum = a*x + b*y\n        y_diff = y - y_sum\n        x += 1\n        y = y_sum\n        \n        # check if we've found a solution\n        if y == n:\n            return (x1, y1), (x2, y2)\n    \n    # no solution found\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    x1 = -b / (a + b)\n    x2 = -x1\n    y1 = -a / (a + b)\n    y2 = -y1\n    if a * x1**2 + b * x1 + n == 0:\n        return (x1, y1)\n    elif a * x2**2 + b * x2 + n == 0:\n        return (x2, y2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are invertible\n    if a*b == 0:\n        return None\n\n    # calculate the equation of the line through the origin (0, 0)\n    x0 = 0\n    y0 = 0\n\n    # calculate the slope of the line\n    m = -b / a\n\n    # calculate the intersection points of the line with the y-axis\n    x1 = x0 + (n - y0) / m\n    y1 = y0 + m * (x1 - x0)\n\n    # check if the solution lies on the line\n    if x1 == x0 and y1 == y0:\n        return (x1, y1)\n\n    # check if the solution lies outside the line\n    if x1 < x0 or y1 < y0:\n        return None\n\n    # check if the solution lies within the line\n    if x1 >= x0 and y1 >= y0:\n        return (x1, y1)\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    for i in range(n+1):\n        for j in range(n+1):\n            if a*i + b*j == n:\n                return (i, j)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Initialize variables for x and y\n    x = 0\n    y = 0\n\n    # Initialize the current value of x and y\n    current_x = 1\n    current_y = 0\n\n    # Loop until the value of x^2 + y^2 = n\n    while current_x**2 + current_y**2 <= n:\n        # If the value of x^2 + y^2 is equal to n, return (x, y)\n        if current_x**2 + current_y**2 == n:\n            return (x, y)\n\n        # If the value of x^2 + y^2 is greater than n, update the value of y by subtracting the square root of the difference from n\n        elif current_x**2 + current_y**2 > n:\n            y -= (n - current_x**2)**0.5\n\n        # If the value of x^2 + y^2 is less than n, update the value of x by adding the square root of the difference from n to the current value of x\n        else:\n            x += (n - current_y**2)**0.5\n\n        # Update the current value of x and y\n        current_x = x\n        current_y = y\n\n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Define a list to store all solutions\n    solutions = []\n    \n    # Check for a solution where a = 1 and b = 0\n    if a == 1 and b == 0:\n        if n == 0:\n            solutions.append((0, 0))\n        elif n == 1:\n            solutions.append((1, 0))\n        elif n == -1:\n            solutions.append((-1, 0))\n    \n    # Check for a solution where a = -1 and b = 0\n    elif a == -1 and b == 0:\n        if n == 0:\n            solutions.append((0, 0))\n        elif n == 1:\n            solutions.append((-1, 0))\n        elif n == -1:\n            solutions.append((1, 0))\n    \n    # Check for a solution where a = 0 and b = 1\n    elif a == 0 and b == 1:\n        if n == 0:\n            solutions.append((0, 0))\n        elif n == 1:\n            solutions.append((0, 1))\n        elif n == -1:\n            solutions.append((0, -1))\n    \n    # Check for a solution where a = 0 and b = -1\n    elif a == 0 and b == -1:\n        if n == 0:\n            solutions.append((0, 0))\n        elif n == 1:\n            solutions.append((0, -1))\n        elif n == -1:\n            solutions.append((0, 1))\n    \n    # Check for all other possible combinations of a and b\n    else:\n        # Calculate the discriminant\n        disc = b**2 - 4*a*n\n        \n        # Check if the discriminant is positive\n        if disc > 0:\n            # Calculate the first and second solutions\n            x1 = (-b + disc**0.5)/(2*a)\n            x2 = (-b - disc**0.5)/(2*a)\n            \n            # Check if x1 and x2 are in the range of x and y\n            if x1 >= 0 and x2 >= 0 and x1 <= 1 and x2 <= 1:\n                solutions.append((x1, x2))\n        elif disc == 0:\n            # Calculate the only solution\n            x = (-b)/(2*a)\n            if x >= 0 and x <= 1:\n                solutions.append((x, x))\n    \n    # Check if there are any solutions\n    if len(solutions) == 0:\n        return None\n    else:\n        # Sort the solutions in ascending order of x\n        solutions.sort(key=lambda x: x[0])\n        \n        # Return the first solution\n        return solutions[0]"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # If the denominator is 0, the equation cannot have a solution\n    if b == 0:\n        return None\n\n    # Calculate the values of x and y that satisfy ax + by = n\n    x = -n / b\n    y = a * x + n\n\n    # Check if the solution is valid (i.e., not outside the range of x)\n    if x < 0 or x > 100:\n        return None\n\n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if both solutions exist\n    if x1 and x2:\n        return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # loop through list1 and remove all elements in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from `list1` present in `list2`.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # remove all elements present in list2 from list1\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Convert the input lists into sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the common elements in both sets\n    common = set1.intersection(set2)\n    # Convert the common elements back into a list and return it\n    return list(common)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for elem in list1:\n        if elem not in list2:\n            new_list.append(elem)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return \"n cannot be less than 0\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(n//2):\n            sum += (n - 2*i)\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        i = 0\n    else:\n        i = n // 2\n    \n    total = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n        \n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        print(\"Please enter an odd value for n\")\n        return\n    sum_val = 0\n    for i in range(n // 2):\n        sum_val += n - 2 * i\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    i = 0\n    while i <= n//2:\n        s += n - 2*i\n        i += 1\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    for i in range(n // 2):\n        sum_ += (n - 2*i)\n    return sum_"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2 * tan(pi/l)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the sides of the polygon\n    side = s * math.sin(2*math.pi/l)\n\n    # Calculate the area of the polygon\n    area = (l * side) / 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/(2*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) * tan(2*pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the side and perimeter of the polygon\n    perimeter = s * l\n    # calculate the area of the polygon using Heron's formula\n    area = 0.5 * s * l * tan(pi/l)\n    # return the area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 360 / l\n        area += s * tan(angle * pi / 180)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(tan(pi/l)))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        angle = (i*2*pi)/l\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the side of the polygon\n    side = s / l\n\n    # Calculate the area of the polygon\n    area = 0.5 * s * l * tan(pi / l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (s - tan(pi/l))\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1: \n        return \"Invalid input. Please enter a positive integer.\"\n    \n    # Calculate the sum of divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if i!= n/i:\n                div_sum += n/i\n    \n    # Check if the sum of divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors\n    def sum_divisors(num):\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n    \n    # determine if the sum of the divisors is the same\n    def check_sum(num1, num2):\n        return sum_divisors(num1) == sum_divisors(num2)\n    \n    # test the function with some inputs\n    print(check_sum(20, 30))  # True\n    print(check_sum(28, 32))  # False\n    print(check_sum(5, 5))    # True\n    print(check_sum(36, 42))  # True\n    print(check_sum(15, 10))  # False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate the sum of the divisors of n\n    sum_div = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_div += i\n            if i!= n//i:\n                sum_div += n//i\n    \n    # check if the sum of the divisors is equal to n\n    if sum_div == n:\n        print(\"The sum of the divisors of\", n, \"is equal to\", sum_div)\n    else:\n        print(\"The sum of the divisors of\", n, \"is not equal to\", sum_div)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    def sum_divisors(n):\n        divs = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divs.append(i)\n                if i*i!= n:\n                    divs.append(n//i)\n        return sum(divs)\n    # Check if the sum of the divisors is equal to n\n    return sum_divisors(n) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of divisors of n using a loop \n    div_sum = 0\n    for i in range(1, int(n**0.5)+1): \n        if n % i == 0: \n            div_sum += i \n    if n > 1 and div_sum == n: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        print(\"Input must be a non-negative integer.\")\n        return\n    \n    # calculate the sum of the divisors of n\n    sum_of_divisors = sum(divisor for divisor in range(1, int(math.sqrt(n))+1) if n % divisor == 0)\n    \n    # check if the sum of the divisors is the same as n\n    if sum_of_divisors == n:\n        print(\"The sum of the divisors of\", n, \"is the same as\", n)\n    else:\n        print(\"The sum of the divisors of\", n, \"is not the same as\", n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def find_divisor_sum(num): \n        '''\n        Helper function to find the sum of the divisors of a given integer.\n        '''\n        div_sum = 0 \n        for i in range(1, int(math.sqrt(num))+1): \n            if num % i == 0: \n                div_sum += i \n                if i!= num // i: \n                    div_sum += num // i \n        return div_sum \n\n    # find the sum of the divisors of two integers \n    div1 = find_divisor_sum(n) \n    div2 = find_divisor_sum(n+1) \n\n    # check if the sum of the divisors of two integers are the same \n    if div1 == div2: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def sum_of_divisors(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if i == num // i:\n                    divisors.append(i)\n                else:\n                    divisors.append(i)\n                    divisors.append(num // i)\n        return divisors\n\n    sum_of_div = sum_of_divisors(n)\n    sum_of_div2 = sum_of_divisors(2 * n)\n\n    if sum_of_div == sum_of_div2:\n        print(\"The sum of the divisors of\", n, \"and 2\", n, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and 2\", n, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                return True\n    return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a dictionary to store the frequency of each character in the English alphabet (case insensitive)\n    freq_dict = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n\n    # Loop through the string and count the frequency of each character in the English alphabet (case insensitive)\n    for char in str1:\n        if char.lower() in freq_dict:\n            freq_dict[char.lower()] += 1\n\n    # Return the total count of characters that occur at the same position in the string as in the English alphabet (case insensitive)\n    return sum(freq_dict.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    char_dict = {}\n\n    for char in english_alphabet:\n        char_dict[char.lower()] = str1.lower().count(char.lower())\n\n    return char_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to store the frequency of characters\n    freq = {}\n    # Loop through the characters in the string\n    for char in str1:\n        # Check if the character is in the dictionary\n        if char in freq:\n            # Increment the frequency of the character\n            freq[char] += 1\n        else:\n            # If the character is not in the dictionary, add it with a frequency of 1\n            freq[char] = 1\n    # Loop through the characters in the English alphabet\n    for i in range(97, 123):\n        # Check if the character at position i is in the dictionary\n        if chr(i) in freq:\n            # Increment the frequency of the character at position i\n            freq[chr(i)] += 1\n        else:\n            # If the character is not in the dictionary, add it with a frequency of 1\n            freq[chr(i)] = 1\n    # Initialize the count to 0\n    count = 0\n    # Loop through the characters in the string\n    for char in str1:\n        # Check if the character is in the dictionary\n        if char in freq:\n            # Check if the character is in the English alphabet\n            if chr(ord(char) - 96) in freq:\n                # Increment the count\n                count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1[i].isalpha():\n            count += str1.lower().count(str1[i].lower())\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in str1:\n        if char.lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(i+ord('a')))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(alphabet)):\n            if str1[i].lower() == alphabet[j].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of each character at each position in the string\n    char_count = {}\n\n    # Iterate through the string and count the number of characters at each position in the English alphabet\n    for i in range(len(str1)):\n        # Get the character at the current position in the string\n        char = str1[i]\n\n        # If the character is in the English alphabet, add 1 to its count in the dictionary\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Print the result\n    print(\"Character count at each position in the string:\")\n    for key, value in char_count.items():\n        print(key + \": \" + str(value))\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(65+i))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to store the character frequencies\n    char_freq = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, increment its frequency in the dictionary\n        if char.isalpha():\n            char_freq[char] = char_freq.get(char, 0) + 1\n    # Initialize the counter variable\n    count = 0\n    # Loop through each letter in the English alphabet (case insensitive)\n    for i in range(ord('a'), ord('z') + 1):\n        # If the letter occurs at the same position in the string as in the English alphabet, increment the counter variable\n        if chr(i) in char_freq:\n            count += char_freq[chr(i)]\n    # Return the final count\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[j] ^ A[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the variable to keep track of the power of 2\n    power = 1\n\n    # Check if the current number is already a power of 2\n    while power < n:\n        power <<= 1\n\n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n-1)!= 0:\n        n = n | (n-1)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n\n    # initialize variable to hold the power of 2\n    power = 1\n\n    # loop until power is equal to or greater than n\n    while power < n:\n        power <<= 1\n    \n    # return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n < 2:\n        n = n + 1\n    power = 1\n    while power < n:\n        power = power * 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to binary representation\n    n_binary = bin(n)[2:]\n    # Convert binary representation to decimal\n    n_decimal = int(n_binary, 2)\n    # Find the smallest power of 2 greater than or equal to n\n    power_of_2 = 1\n    while power_of_2 < n_decimal:\n        power_of_2 <<= 1\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the result to n itself\n    result = n\n\n    # Check if n is already a power of 2\n    if result == 2**x for x in range(0, 32):\n        return result\n\n    # Check if the next power of 2 is larger than or equal to n\n    while result < n:\n        result <<= 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    i = 1\n    while i <= n:\n        if 2 ** i >= n:\n            return 2 ** i\n        i += 1\n    return None"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**int(n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the power of 2\n    power_of_2 = 1\n    \n    # Keep iterating until we find a power of 2 greater than or equal to n\n    while power_of_2 < n: \n        power_of_2 *= 2\n    \n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1)!= 0: \n        n = n | (n & -n) \n    return n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(lst, x):\n    '''\n    This function takes a list and a number as input and returns the frequency of the number in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, num):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of occurrences of that number in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(lst, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in two arguments - a list and a number to be searched for.\n    It returns the number of occurrences of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list `a` and a number `x` as input and returns the number of occurrences of `x` in `a`.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if m is less than n\n    if m > n:\n        return \"Error: m should be less than or equal to n.\"\n    # Initialize the sum variable to 0\n    total = 0\n    # Loop through each element in the list1\n    for i in range(len(list1)):\n        # Check if i is within the range specified by m and n\n        if i >= m and i <= n:\n            # Add the element to the total\n            total += list1[i]\n    # Return the total sum\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        if i >= 0 and i < len(list1):\n            sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i-1]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        temp = m\n        m = n\n        n = temp\n    if m < 0 or n > len(list1) - 1:\n        return \"Invalid range\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = [a, a, a, a, a]\n    perimeter = sum(sides)\n    area = math.pi * (sides[0]**2 + sides[1]**2)\n    return perimeter, area"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi/5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of the pentagon using Heron's formula\n    s = (a+b+c)/2\n    area = math.sqrt(5)*s**2\n    perimeter = 5*a + 5*b + 5*c\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of the diagonal of the pentagon\n    diagonal = 5*a*math.sqrt(3)\n    \n    # Return the perimeter of the pentagon\n    return 5*a + diagonal"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while True:\n        index = s.find('std', index)\n        if index == -1:\n            break\n        count += 1\n        index += 3\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i:].startswith('td'):\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = []\n    for elem in test_tuple:\n        types.append(type(elem))\n    if len(set(types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Using set() to get unique data types of elements in the tuple\n    unique_data_types = set([type(x) for x in test_tuple])\n    \n    # Checking if all unique data types are same\n    if len(unique_data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    else:\n        for element in test_tuple:\n            if type(element)!= type(test_tuple[0]):\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(set([type(i) for i in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # check if the first element has the same data type as all the elements after it\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple has at least 2 elements\n    if len(test_tuple) < 2:\n        return False\n    \n    # get the first element of the tuple\n    first_element = test_tuple[0]\n    \n    # check if all the elements in the tuple have the same data type as the first element\n    for element in test_tuple:\n        if type(element)!= type(first_element):\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n    return all(elem == data_types[0] for elem in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # create an empty list to store the data types of all elements in the tuple\n    data_types = []\n\n    # loop through all elements in the tuple\n    for element in test_tuple:\n\n        # check the data type of the element\n        data_type = type(element).__name__\n\n        # add the data type to the data_types list\n        data_types.append(data_type)\n\n    # check if all elements have the same data type\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the first element of the tuple\n    first_elem = test_tuple[0]\n    # Get all the data types of the elements in the tuple\n    data_types = [type(elem) for elem in test_tuple]\n    # Check if all the data types are the same or not\n    if all(elem == data_types[0] for elem in data_types):\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize the count of x in the array to 0\n    count = 0\n\n    # Initialize the left and right indices of the array\n    left = 0\n    right = n-1\n\n    # Loop until the left index is greater than or equal to the right index\n    while left <= right:\n\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, increment the count\n        if arr[mid] == x:\n            count += 1\n\n        # If the count is greater than n/2, return True\n        if count > n//2:\n            return True\n\n        # If the middle element is greater than x, increase the left index\n        if arr[mid] < x:\n            left = mid + 1\n\n        # If the middle element is less than x, decrease the right index\n        else:\n            right = mid - 1\n\n    # If the loop completes without finding the majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        elif count > 0:\n            count -= 1\n\n    return count > 0\n"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Initialize count and candidate variables\n    count = 0\n    candidate = None\n\n    # Traverse the array\n    for num in arr:\n        # If the current number is equal to the candidate number, increment the count\n        if num == candidate:\n            count += 1\n\n        # If the count becomes equal to n/2, return True\n        if count == n//2:\n            return True\n\n        # If the candidate is not found yet, set it to the current number\n        if candidate is None:\n            candidate = num\n\n    # If the loop completes without finding the candidate, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count and candidate\n    count = 0\n    candidate = arr[0]\n\n    # Traverse the array\n    for i in range(1, n):\n        if arr[i] == candidate:\n            count += 1\n        else:\n            count -= 1\n\n        # If count becomes zero, we found the candidate\n        if count == 0:\n            return True\n\n        # If count becomes greater than zero, update the candidate\n        if count > 0:\n            candidate = arr[i]\n\n    # If the loop completes without finding the candidate, return False\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n > 0):\n        if(n & 1):\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer n as input and returns the count of the number of set bits in n.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes in a string and removes the characters which have odd index values.\n\n    :param string: The string to process.\n    :return: A string with the odd index characters removed.\n    \"\"\"\n    result = ''\n    for i in range(len(string)):\n        if i % 2!= 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indices = [i for i in range(len(str)) if i % 2!= 0]\n    return ''.join([str[i] for i in odd_indices])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove characters from a given string which have odd index values.\n\n    Args:\n        str: The string to remove characters from.\n\n    Returns:\n        The modified string with characters removed which have odd index values.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string\n    result = \"\"\n    \n    # iterate through each character in the given string\n    for char in str:\n        # check if the index of the current character is odd\n        if (str.index(char) % 2)!= 0:\n            # if it is, add the character to the result string\n            result += char\n            \n    # return the final result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create an empty string to store the final string\n    final_str = \"\"\n    \n    # loop through each character in the input string\n    for i in range(len(str)):\n        # if the index of the character is even, add it to the final string\n        if i % 2 == 0:\n            final_str += str[i]\n            \n    # return the final string\n    return final_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([string[i] if i % 2 == 0 else '' for i in range(len(string))])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum of three numbers.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Finding minimum of first two numbers\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments n, l and r which represent the given number, lower limit and upper limit of the range.\n    The function returns True if all the bits are unset in the given range and False otherwise.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Iterate from lower limit to upper limit and check whether the bit is set or not\n    for i in range(l, r+1):\n        # Get the nth bit of the given number\n        bit = (n >> i) & 1\n        \n        # If the bit is set then increment the count\n        if bit == 1:\n            count += 1\n        \n        # If the count becomes greater than the number of bits set, then there is a set bit in the range\n        if count > n:\n            return False\n    \n    # If the loop completes without returning False, then all the bits are unset in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Returns True if all the bits between l and r are set, False otherwise.\n    \"\"\"\n    # First, check that l < r\n    if l > r:\n        return False\n\n    # Then, check that n is a power of 2\n    while n & (n-1)!= 0:\n        n &= (n-1)\n    if n!= 1:\n        return False\n\n    # Finally, check that all the bits between l and r are set\n    for i in range(l, r+1):\n        if not (n & 1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # get the position of the first set bit in n\n    i = 0\n    while i < 32 and (n & (1 << i)) == 0:\n        i += 1\n\n    # if there is no set bit in the range, return True\n    if i == 32:\n        return True\n\n    # get the position of the last set bit in n\n    j = 0\n    while j < 32 and (n & (1 << j)) == (1 << j):\n        j += 1\n\n    # if the last set bit is greater than the length of the range, return False\n    if j > r:\n        return False\n\n    # check whether all bits in the range are set\n    for k in range(l, r + 1):\n        if (1 << k) & n == 0:\n            return False\n\n    # if all bits are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while l <= r:\n        count = 0\n        while l <= r:\n            count += n & 1\n            n = n >> 1\n            l += 1\n        if count == 0:\n            return True\n        n = n ^ (1 << (r-l+1))\n        l = r\n        r = l + 1\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments: n (the integer), l (the starting index), and r (the ending index).\n    The function checks whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a variable to keep track of the number of unset bits\n    unset_bits = 0\n\n    # Iterate over all bits from l to r (inclusive)\n    for i in range(l, r+1):\n        # Check whether the i-th bit is set or not\n        if n & (1 << i)!= 0:\n            # If it's set, increment the unset_bits count\n            unset_bits += 1\n\n    # If all the bits are unset, return True, else return False\n    return unset_bits == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initializing the count of unset bits\n    count = 0\n    \n    # Looping through the range of bits\n    for i in range(l, r+1):\n        # Extracting the i-th bit of the integer n\n        bit = (n & (1 << i)) >> i\n        \n        # If the bit is set, increment the count\n        if bit == 1:\n            count += 1\n    \n    # If all the bits are unset, return True\n    if count == 0:\n        return True\n    \n    # Otherwise, return False\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Iterate over each bit in the range\n    for i in range(l, r + 1):\n        # Check if the bit is set or not\n        if n & (1 << i):\n            # If the bit is set, then the function will return False\n            return False\n\n    # If all the bits are unset, then the function will return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three integer arguments - n (the number), l (the left bound of the range) and r (the right bound of the range).\n    It returns True if all the bits are unset in the given range, else it returns False.\n    '''\n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # if any of the bits is set, return False\n        if (n & (1 << i)):\n            return False\n    # if no bit is set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments n, l and r.\n    n is the given integer.\n    l and r are the integers representing the lower and upper bound of the range.\n    The function returns True if all the bits in the given range are set and False otherwise.\n    \"\"\"\n    # Initialize the result variable to True\n    result = True\n    # Loop through all the bits in the range\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if not n & (1<<i):\n            # If it's not set, set the result to False and break out of the loop\n            result = False\n            break\n    # Return the result\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to keep track of the unset bits in the range\n    unset_bits = 0\n    # Loop through all the bits from the least significant bit to the most significant bit\n    for i in range(l, r+1):\n        # Get the current bit value\n        bit_value = n & (1 << i)\n        # If the bit value is not 0, then the bit is set, so unset the bit in the unset_bits variable\n        if bit_value!= 0:\n            unset_bits += 1\n            # Once all the bits are set, break out of the loop\n            if unset_bits == r-l+1:\n                break\n    # Check if all the bits are set in the given range\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n    Args:\n        arr (list): The input array.\n        n (int): The number of elements to be re-arranged.\n\n    Returns:\n        list: The re-arranged array.\n\n    \"\"\"\n    positive_elements = []\n    negative_elements = []\n    for elem in arr:\n        if elem >= 0:\n            positive_elements.append(elem)\n        else:\n            negative_elements.append(elem)\n\n    positive_elements.extend(negative_elements[:n])\n    return positive_elements"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers: one at the beginning of the array and one at the end\n    i, j = 0, n-1\n    \n    # Move the negative elements to the beginning of the array and the positive elements to the end\n    while i < j:\n        while i < n and arr[i] >= 0:\n            i += 1\n        while j >= 0 and arr[j] >= 0:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n    \n    # Print the final array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize variables\n    negative_elements = []\n    positive_elements = []\n    temp = []\n\n    # Separate the elements into negative and positive groups\n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            positive_elements.append(arr[i])\n\n    # Combine the negative and positive elements\n    combined_elements = negative_elements + positive_elements\n\n    # Re-arrange the combined elements\n    for i in range(n):\n        temp.append(combined_elements.pop(0))\n        temp.append(combined_elements.pop(0))\n\n    # Combine the negative and positive elements back into the original array\n    for i in range(n):\n        arr[i] = temp.pop(0)\n        arr[i] = combined_elements.pop(0)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # First, sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers to track the index of the positive and negative elements\n    pos_idx = 0\n    neg_idx = n - 1\n\n    # Iterate through the array and swap elements as needed\n    for i in range(n):\n        if arr[i] >= 0:\n            # If the current element is positive, move the pointer to the next index\n            pos_idx += 1\n            arr[pos_idx], arr[i] = arr[i], arr[pos_idx]\n        else:\n            # If the current element is negative, move the pointer to the previous index\n            neg_idx -= 1\n            arr[neg_idx], arr[i] = arr[i], arr[neg_idx]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Loop through the first n elements of the array\n    for i in range(n):\n        # Find the maximum element in the array (starting from index i)\n        max_element = arr[i]\n        for j in range(i+1, n):\n            if arr[j] > max_element:\n                max_element = arr[j]\n        \n        # Swap the maximum element with the first element (starting from index i)\n        arr[i], arr[arr.index(max_element)] = arr[arr.index(max_element)], arr[i]\n        \n        # Find the maximum element in the array (starting from index i+1)\n        max_element = arr[i+1]\n        for j in range(i+2, n):\n            if arr[j] > max_element:\n                max_element = arr[j]\n        \n        # Swap the maximum element with the second element (starting from index i+1)\n        arr[i+1], arr[arr.index(max_element)] = arr[arr.index(max_element)], arr[i+1]\n        \n        # Find the minimum element in the array (starting from index i+1)\n        min_element = arr[i+1]\n        for j in range(i+2, n):\n            if arr[j] < min_element:\n                min_element = arr[j]\n        \n        # Swap the minimum element with the first element (starting from index i+1)\n        arr[i+1], arr[arr.index(min_element)] = arr[arr.index(min_element)], arr[i+1]\n        \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one at the beginning and the other at the end of the array\n    left = 0\n    right = n - 1\n    \n    # Move the first n elements from the beginning to the end of the array\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    \n    # Initialize three pointers, one at the beginning, one at the end, and one at the middle of the array\n    left = 0\n    right = n - 1\n    middle = n // 2\n    \n    # Move the positive elements to the left of the middle pointer, and the negative elements to the right of the middle pointer\n    while left < middle:\n        if arr[left] < 0:\n            arr[left], arr[middle] = arr[middle], arr[left]\n            left += 1\n            middle += 1\n        else:\n            arr[middle], arr[right] = arr[right], arr[middle]\n            right -= 1\n    \n    # Move the positive elements to the right of the middle pointer, and the negative elements to the left of the middle pointer\n    while left < right:\n        if arr[left] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        else:\n            arr[middle], arr[right] = arr[right], arr[middle]\n            right -= 1\n            middle += 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize two pointers, one at the beginning and one at the end\n    start = 0\n    end = n-1\n    \n    # while the two pointers are not equal\n    while start < end:\n        \n        # find the index of the first positive element\n        pos_index = -1\n        for i in range(n):\n            if arr[i] > 0:\n                pos_index = i\n                break\n        \n        # if there are no positive elements, move the end pointer to the right\n        if pos_index == -1:\n            end += 1\n        \n        # if there are positive elements, move the start pointer to the right\n        else:\n            # swap the elements at the start and end positions\n            arr[start], arr[end] = arr[end], arr[start]\n            \n            # increment the start pointer and decrement the end pointer\n            start += 1\n            end -= 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers, one for positive elements and one for negative elements\n    positive_index = 0\n    negative_index = 0\n\n    # loop through the array and swap elements as needed\n    while positive_index < n and negative_index < len(arr):\n        if arr[positive_index] < 0:\n            arr[positive_index], arr[negative_index] = arr[negative_index], arr[positive_index]\n            positive_index += 1\n        negative_index += 1\n\n    # loop through the rest of the array, copying positive elements to the end of the array and negative elements to the beginning\n    while positive_index < len(arr):\n        arr[positive_index] = arr[positive_index] * -1\n        positive_index += 1\n\n    # return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize variables\n    neg_count = 0\n    pos_count = 0\n    neg_index = 0\n    pos_index = 0\n\n    # Loop through the array\n    while neg_count < n:\n        # If the current element is negative\n        if arr[neg_index] < 0:\n            # Add the element to the negative count\n            neg_count += 1\n            # Move the negative element to its new index\n            arr[neg_index], arr[pos_index] = arr[pos_index], arr[neg_index]\n            # Increment the position of the next negative element\n            neg_index += 1\n        # If the current element is positive\n        else:\n            # Add the element to the positive count\n            pos_count += 1\n            # Move the positive element to its new index\n            arr[neg_index], arr[pos_index] = arr[pos_index], arr[neg_index]\n            # Increment the position of the next positive element\n            pos_index += 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers: one for negative and one for positive elements\n    neg_ptr = 0\n    pos_ptr = 0\n    \n    # Loop through the array\n    while pos_ptr < n:\n        # If the current element is negative, swap it with the first negative element and increment the negative pointer\n        if arr[pos_ptr] < 0:\n            arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n            neg_ptr += 1\n        # If the current element is positive, increment the positive pointer\n        else:\n            pos_ptr += 1\n    \n    # After the loop, the negative elements should be in the first n positions, and the positive elements should be in the remaining positions\n    # Now, sort the negative elements in descending order\n    arr[neg_ptr:n] = sorted(arr[neg_ptr:n], reverse=True)\n    \n    # Finally, return the sorted array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Replace blank spaces with the character\n    str1 = str1.replace(\" \",char)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list into a min heap\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    # Extract the top n items and return them as a list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapify to convert the list to a min heap\n    heap = list1[:n]\n    heapq.heapify(heap)\n    # Remove the smallest element and add the next smallest element to the heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a min heap to keep track of the n largest numbers\n    heap = []\n    \n    # Iterate over the list and add each element to the heap\n    for num in list1:\n        heapq.heappush(heap, num)\n        \n        # If the heap size exceeds n, remove the smallest element\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Return the elements in the heap in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    \n    # Iterate through the list and push each element into the max heap\n    for i in range(n, len(list1)):\n        if -list1[i] > heapq.heappop(max_heap):\n            heapq.heappush(max_heap, -list1[i])\n    \n    # Extract the n largest elements from the max heap and return them as a list\n    result = []\n    for i in range(n):\n        result.append(-heapq.heappop(max_heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min heap of size n and fill it with the smallest n items from the list\n    max_heap = [heapq.nsmallest(n, list1)]\n    # Iterate over the remaining items in the list, adding each one to the max heap\n    for item in list1[n:]:\n        heapq.heappush(max_heap, item)\n    # Return the n largest items from the max heap\n    return [max_heap[0]] + max_heap[1:]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return list(max_heap)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = math.pi*r**2*h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*math.pi*(r**2+h**2)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n\n    # calculate the lateral surface area using the formula:\n    # lateral surface area = 1/2 * pi * r^2 * h\n    lateral_surface_area = 0.5 * 3.14 * r**2 * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Calculate the lateral surface area of the cylinder\n    lateral_area = 2*r*h\n    \n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*math.pi*r**2*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder.\n    \"\"\"\n\n    # Calculate the surface area of the base of the cylinder\n    base_area = 2 * r * r * h\n\n    # Calculate the surface area of the top of the cylinder\n    top_area = 2 * (r * r + r * h * h)\n\n    # Calculate the total surface area of the cylinder\n    cylinder_area = base_area + top_area\n\n    # Return the total surface area of the cylinder\n    return cylinder_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #calculate the surface area of the base\n    base_area = 2 * r * h\n    \n    #calculate the surface area of the lateral surface\n    lateral_area = 2 * r * r * h\n    \n    #return the total surface area\n    return base_area + lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # calculate the volume of the cylinder\n    V = math.pi * r**2 * h\n    \n    # calculate the lateral surface area of the cylinder\n    lateral_sa = 2 * V\n    \n    return lateral_sa"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n\n    # calculate the volume of the cube\n    volume = l**3\n\n    # return the volume of the cube\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l * l * l\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for i in range(32):\n        if n & (1 << i):\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0x55555555  # binary representation of all 1s\n    set_bits = n ^ even_bits  # set bits are set bits of n XOR even bits\n    return set_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Loop through the bits of the number and set the even bits to 1\n    for i in range(len(bin(n)[2:])):\n        if (int(bin(n)[2:][i]) & 1) == 0:\n            n |= (1 << i)\n            \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the bits of the number\n    bits = []\n    # Convert the input number to binary and split it into a list of bits\n    for i in range(len(bin(n)[2:])):\n        bits.append(int(bin(n)[2:][i]))\n    # Iterate over the list of bits and set the even bits to 1\n    for i in range(len(bits)):\n        if bits[i] == 0:\n            bits[i] = 1\n        else:\n            bits[i] = 0\n    # Convert the list of bits back to an integer and return it\n    return int(''.join(str(bit) for bit in bits))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the modified number\n    modified_num = 0\n    \n    # Iterate through each bit of the input number\n    for bit in bin(n)[2:]: \n        # If the bit is even, set it to 1, otherwise set it to 0\n        if int(bit) % 2 == 0:\n            modified_num += int(bit)\n    \n    # Return the modified number\n    return modified_num"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the number of set bits\n    count = 0\n    # Iterate through all bits of the number\n    for i in range(8):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # If it is, set it to 1\n            n |= (1 << i)\n            # Increment the count\n            count += 1\n    # Return the new number with all even bits set\n    return n, count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the input number to binary string\n    binary_str = bin(n)[2:]\n    # initialize a variable to keep track of the number of set bits\n    count = 0\n    # loop through the binary string and set the corresponding bit to 1\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            binary_str[i] = '0'\n        else:\n            binary_str[i] = '1'\n            count += 1\n    # convert the binary string back to an integer and return it\n    return int(binary_str, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize the result variable\n    result = 0\n\n    # Loop through all bits in the input number\n    for bit in bin(n)[2:]:\n\n        # Check if the current bit is even\n        if bit == '0':\n            result |= 1 << int(bit)\n\n        # If the current bit is even, set it in the result variable\n        else:\n            result |= 1 << int(bit) - 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n & ~(1 << count)\n        else:\n            n = n & ~(1 << count)\n            n = n | (1 << count)\n        count += 1\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of n\n    even_bits = 0\n    \n    # Loop through all bits in n and check if each is even\n    for bit in bin(n)[2:]:\n        if int(bit) % 2 == 0:\n            even_bits += int(bit)\n            \n    # Return the modified number by setting all even bits to 1\n    return n ^ even_bits"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of occurrences of each unique tuple\n    counts = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in counts:\n            counts[tup] = 1\n        # Otherwise, increment the count of the existing tuple by 1\n        else:\n            counts[tup] += 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return dict(count_dict)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(tuple(sorted(i)) for i in test_list)\n    count_dict = {}\n    for i in unique_tuples:\n        count_dict[i] = sum(1 for x in test_list if tuple(sorted(x)) == i)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the occurrence count of each tuple in the list\n    occurrence_dict = {}\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in occurrence_dict:\n            occurrence_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            occurrence_dict[tup] = 1\n\n    # Return the dictionary containing the occurrence count of each tuple\n    return occurrence_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to store the count of each unique tuple\n    counter = Counter(test_list)\n    # Convert the counter object to a dictionary\n    result_dict = dict(counter)\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # iterate through the test_list and count the occurrences of each unique tuple\n    for item in test_list:\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n\n        # Check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment the count for the tuple\n            count_dict[tup] += 1\n        else:\n            # If the tuple is not in the dictionary, add it and set its count to 1\n            count_dict[tup] = 1\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    unique_tuples_count = {}\n    \n    for tup in unique_tuples:\n        count = test_list.count(tup)\n        unique_tuples_count[tup] = count\n        \n    return unique_tuples_count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if j-i+1 > 1:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1 \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n\n    :param string: The string to count the number of non-empty substrings for.\n    :return: The number of non-empty substrings of the string.\n    \"\"\"\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i]!= string[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(2, m + 1):\n            if i >= m * 2:\n                break\n            if m % i == 0:\n                count += get_total_number_of_sequences(m // i, n - 1)\n        return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # initialize the number of possible sequences to 0\n    total_sequences = 0\n    \n    # loop through all possible sequences of length n\n    for i in range(m, n+1):\n        \n        # loop through all possible combinations of i elements\n        for j in range(n, 0, -1):\n            \n            # check if each element is within the specified range\n            if i - j >= 2*j <= m:\n                total_sequences += 1\n    \n    # return the total number of possible sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count to 0\n    count = 0\n\n    # Initialize the first element of the sequence to be m\n    sequence = [m]\n\n    # Iterate through the sequence\n    for i in range(1, n):\n        # If the current element is less than or equal to twice the previous element, add it to the sequence and increment the count\n        while sequence[i-1] + sequence[i] <= 2 * m:\n            sequence.append(sequence[i-1] + sequence[i])\n            count += 1\n\n    # Return the count of the sequences found\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a dictionary to store the number of possible sequences\n    sequence_count = {}\n\n    # Iterate through all possible elements that can be in the sequence\n    for i in range(m, n+1):\n        # Check if the element is greater than or equal to twice the previous element\n        if i >= 2*m:\n            # If it is, increment the count of the sequence in the dictionary\n            sequence_count[i] = sequence_count.get(i, 0) + 1\n\n    # Return the total number of sequences found\n    return sum(sequence_count.values())"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # initialize the counter for the total number of sequences\n    total_sequences = 0\n    \n    # initialize the list to store the previous element\n    previous_element = 1\n    \n    # loop through the range from 1 to n\n    for i in range(1,n+1):\n        \n        # if the current element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2*previous_element and i <= m:\n            \n            # add the current element to the list and increment the counter for the total number of sequences\n            sequence = [i]\n            total_sequences += 1\n            \n            # loop through the range from i-2 to i-1\n            for j in range(i-2,i-1,-1):\n                \n                # if the current element is greater than or equal to twice the previous element and less than or equal to m\n                if j >= 2*previous_element and j <= m:\n                    \n                    # add the current element to the sequence and increment the counter for the total number of sequences\n                    sequence.append(j)\n                    total_sequences += 1\n                    \n            # add the current sequence to the list of sequences\n            sequences.append(sequence)\n            \n            # update the previous element to the current element\n            previous_element = i\n            \n    # return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    total_sequences = 0\n    for i in range(n):\n        current_sequence = [0] * (m - i)\n        for j in range(i+1):\n            if j >= 2:\n                if j % 2 == 0:\n                    current_sequence[j-1] = max(current_sequence[j-2], 2*current_sequence[j-1])\n                else:\n                    current_sequence[j-1] = min(current_sequence[j-2], 2*current_sequence[j-1])\n            else:\n                current_sequence[j] = 0\n        total_sequences += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    sequences = 0\n    prev_num = 0\n    for i in range(2, m+1):\n        if i <= prev_num + 2*n and i <= m:\n            sequences += 1\n        prev_num = i\n    return sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(seq, m):\n        for i in range(1, len(seq)):\n            if seq[i] - seq[i - 1] < 0 or seq[i] - seq[i - 1] > m - seq[i]:\n                return False\n        return True\n\n    def backtrack(seq, current_length, total_count):\n        if current_length == n:\n            if is_valid(seq, m):\n                total_count += 1\n        else:\n            for i in range(2, m + 1):\n                if seq[-1] < i * 2:\n                    seq.append(i * 2)\n                    backtrack(seq, current_length + 1, total_count)\n                    seq.pop()\n\n    total_count = 0\n    backtrack([], 0, total_count)\n    return total_count\n\nm = 10\nn = 3\nresult = get_total_number_of_sequences(m, n)\nprint(\"Number of possible sequences of length\", n, \"such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to\", m, \"is\", result)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m):\n        if i % 2 == 0:\n            if i >= 2 * n:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    sequence = [0] * (n + 1)\n    sequence[0] = 1\n    sequence[1] = 1\n    for i in range(2, n + 1):\n        sequence[i] = 0\n        for j in range(i):\n            if j >= 2 and j <= m and sequence[j - 1] + sequence[j] <= sequence[j]:\n                sequence[i] += sequence[j]\n    return sequence[n]\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for i in range(len(list2)-1, -1, -1):\n        list1.append(list2[i])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Set the last element of the first list to None\n    list1[length-1] = None\n    # Concatenate the two lists and assign the result back to the first list\n    list1 = list1 + list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Reverse the second list\n    list2_reversed = list2[::-1]\n    # Remove the last element of the first list\n    list1.pop()\n    # Concatenate the two lists\n    new_list = list1 + list2_reversed\n    return new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2[:]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # check if the length of the first list is greater than 1\n    if len(list1) > 1:\n        list1[-1] = list2\n    else:\n        list1.append(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[:]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for char in str1:\n        total += 1\n    return total"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    N = int(N)\n    i = N // 2\n    while i * i <= N:\n        j = int(math.sqrt(i * i))\n        if i + j + 1 <= N:\n            return i + j + 1\n        else:\n            i = i - 1\n    return -1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Initialize variables\n    sqrt_N = math.sqrt(N)\n    num = sqrt_N + 1\n\n    while num**2 <= N:\n        num += 1\n\n    if num**2 == N:\n        return num\n\n    return next_Perfect_Square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n\n    Args:\n    N: a positive integer\n\n    Returns:\n    the next perfect square greater than N\n\n    \"\"\"\n\n    # Helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return int(math.sqrt(num))**2 == num\n\n    # Helper function to get the next perfect square\n    def next_square(N):\n        \"\"\"\n        Return the next perfect square greater than N.\n        \"\"\"\n        # if N is a perfect square, return N+2\n        if is_perfect_square(N):\n            return N+2\n        # if N is not a perfect square, return the next perfect square after N\n        else:\n            return next_square(N+1)\n\n    # Call the helper function to get the next perfect square\n    next_N = next_square(N)\n\n    # Check if the next perfect square is greater than N\n    if next_N > N:\n        # if it is, return the next perfect square\n        return next_N\n    # if it's not, return N\n    else:\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N += 1\n    while True:\n        square = sqrt_N * sqrt_N\n        if square > N:\n            return square\n        else:\n            sqrt_N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # find the next perfect square less than or equal to N\n    sqrtN = int(math.sqrt(N))\n    next_sqrtN = sqrtN + 1\n\n    # if the next perfect square is greater than sqrt(N), we need to find the next odd number\n    if next_sqrtN * next_sqrtN > N:\n        next_sqrtN += 1\n\n    # return the next perfect square\n    return next_sqrtN * next_sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    def is_perfect_square(n): \n        '''\n        A function to check if a given number is a perfect square or not.\n        '''\n        root = int(math.sqrt(n))\n        return root*root == n\n\n    def find_next_square(n): \n        '''\n        A function to find the next perfect square greater than a given number.\n        '''\n        i = n + 1\n        while not is_perfect_square(i): \n            i += 1\n        return i\n\n    i = N\n    while not is_perfect_square(i): \n        i += 1\n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if the input is a positive integer\n    if type(N)!= int or N <= 0:\n        return None\n    # Initialize the result\n    result = N\n    \n    # Find the square root of the input number\n    root = int(math.sqrt(N))\n    \n    # Check if the root is a perfect square\n    if math.isqrt(root)**2 == root:\n        return root\n    \n    # Check if the square root is odd\n    if root % 2 == 1:\n        result += 1\n    \n    # Check if the square root is a perfect square\n    if math.isqrt(result)**2 == result:\n        return result\n    \n    # Check if the square root is even\n    else:\n        result -= 1\n        while result**2!= root:\n            result -= 1\n            \n        return result"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # initialize a variable to keep track of the current square\n    current_square = N\n    # initialize a variable to keep track of the previous square\n    prev_square = 1\n    # iterate until we find a square greater than the given number\n    while True:\n        current_square += 1\n        # check if the current square is greater than the given number\n        if current_square > N:\n            # if it is, we can exit the loop\n            break\n        # check if the current square is a perfect square\n        if int(math.sqrt(current_square))**2 == current_square:\n            # if it is, we can exit the loop\n            break\n        # if the current square is not a perfect square, update the previous square and continue iterating\n        prev_square = current_square\n    # if we exit the loop, we can return the next perfect square greater than the given number\n    return prev_square + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number N.\n\n    Parameters:\n    N (int): The number for which we want to find the next perfect square\n\n    Returns:\n    int: The next perfect square greater than N.\n    \"\"\"\n\n    # initialize variables\n    square = int(math.sqrt(N)) + 1\n    root = math.sqrt(square)\n\n    # check if the square is even\n    if square % 2 == 0:\n        square += 1\n\n    # compute the next perfect square\n    next_square = int(math.ceil(root**2))\n\n    # if the next perfect square is less than N, return it\n    if next_square < N:\n        return next_square\n\n    # otherwise, find the next perfect square greater than N\n    while next_square >= N:\n        next_square -= 1\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculate the square root of the given number\n    sqrt_N = math.sqrt(N)\n    # Find the integer part of the square root\n    sqrt_int_part = math.floor(sqrt_N)\n    # Calculate the difference between the given number and the square root\n    diff = N - (sqrt_int_part ** 2)\n    # Check if the difference is greater than 0\n    if diff > 0:\n        # Calculate the next perfect square by incrementing the square root integer part\n        next_sqrt = (sqrt_int_part + 1) ** 2\n        # Check if the next perfect square is greater than the given number\n        if next_sqrt > N:\n            return next_Perfect_Square(N)\n        else:\n            return next_sqrt\n    else:\n        # Calculate the next perfect square by decrementing the square root integer part\n        next_sqrt = (sqrt_int_part - 1) ** 2\n        # Check if the next perfect square is greater than the given number\n        if next_sqrt > N:\n            return next_Perfect_Square(N)\n        else:\n            return next_sqrt"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return max(arr)\n    \n    left_sum = [0] * len(arr)\n    right_sum = [0] * len(arr)\n    \n    left_sum[0] = arr[0]\n    right_sum[len(arr)-1] = arr[len(arr)-1]\n    \n    for i in range(1, len(arr)):\n        left_sum[i] = max(arr[i], left_sum[i-1] + arr[i])\n        \n    for j in range(len(arr)-2, -1, -1):\n        right_sum[j] = max(arr[j], right_sum[j+1] + arr[j])\n        \n    return max(left_sum[-1], right_sum[0])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return 0\n    \n    # Initialize variables\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    max_ending_here_prev = 0\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # Update max_ending_here if the element is increasing\n        if arr[i] > arr[i-1]:\n            max_ending_here = max(max_ending_here, arr[i], max_ending_here_prev + arr[i])\n        # Update max_ending_here_prev if the element is decreasing\n        else:\n            max_ending_here_prev = max(max_ending_here_prev, max_ending_here, arr[i])\n            \n        # Update max_so_far if max_ending_here becomes larger\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr[0] if n == 1 else 0\n    \n    # Find the sum of the first and last elements\n    first_sum = arr[0]\n    last_sum = arr[-1]\n    \n    # Initialize the maximum sum\n    max_sum = first_sum + last_sum\n    \n    # Initialize the current sum\n    current_sum = first_sum + last_sum\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, n-1):\n        # Check if the current element is increasing or decreasing\n        if arr[i] < arr[i-1]:\n            # If increasing, update the current sum\n            current_sum = current_sum + arr[i]\n        else:\n            # If decreasing, update the maximum sum if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            \n            # Reset the current sum\n            current_sum = arr[i]\n    \n    # Check if the last element is increasing or decreasing\n    if arr[-1] < arr[-2]:\n        # If increasing, update the current sum\n        current_sum = current_sum + arr[-1]\n    else:\n        # If decreasing, update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Initialize variables for the three pointers\n    left, right, mid = 0, n-1, n//2\n\n    # Initialize variables for the maximum sum of the three pointers\n    max_left = max_right = max_mid = 0\n\n    # Traverse the array from left to mid\n    while left < mid:\n        if arr[left] < arr[right]:\n            max_left = max(max_left, arr[left] + arr[mid])\n        else:\n            max_left = max(max_left, arr[left])\n        max_right = max(max_right, arr[right])\n        left += 1\n        right -= 1\n\n    # Traverse the array from mid to right\n    while mid < right:\n        if arr[mid] > arr[right]:\n            max_mid = max(max_mid, arr[mid] + arr[right])\n        else:\n            max_mid = max(max_mid, arr[right])\n        max_left = max(max_left, arr[left])\n        max_right = max(max_right, arr[right])\n        left += 1\n        right -= 1\n\n    # Return the maximum sum of the three pointers\n    return max(max_left, max_mid, max_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    max_sum = arr[0]\n    prev_max_sum = arr[0]\n    current_max_sum = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Check if the current element is increasing or decreasing\n        if arr[i] < arr[i-1]:\n            # If increasing, add the current element to the max sum\n            current_max_sum += arr[i]\n        else:\n            # If decreasing, subtract the current element from the max sum\n            current_max_sum -= arr[i]\n\n        # Update the max sum if necessary\n        if current_max_sum > max_sum:\n            max_sum = current_max_sum\n\n        # Update the previous max sum if necessary\n        prev_max_sum = max(prev_max_sum, current_max_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array as input and returns the maximum sum of a bitonic subsequence in the array.\n    A sequence is considered to be bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n\n    max_sum_even = arr[0]\n    max_sum_odd = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            max_sum_even = max(max_sum_even, arr[i], max_sum_odd + arr[i])\n        else:\n            max_sum_odd = max(max_sum_odd, arr[i], max_sum_even + arr[i])\n\n    return max(max_sum_even, max_sum_odd)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    # Initialize the variables\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n        else:\n            max_ending_here = arr[i]\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n\n    # calculate dp for decreasing subsequence\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], arr[i])\n\n    # calculate dp for increasing subsequence\n    inc_sum = dp[0]\n    for i in range(1, n):\n        inc_sum = max(inc_sum + dp[i], dp[i])\n\n    # calculate max sum\n    max_sum = max(inc_sum, dp[n - 1])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif arr[0] < arr[1]:\n        return max(arr[0] + max_sum(arr[1:]), arr[0] + max_sum(arr[2:]))\n    else:\n        return max(arr[0] + max_sum(arr[1:]), arr[0] + max_sum(arr[2:]))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] < arr[1]:\n        if arr[0] < arr[2]:\n            return max(arr[0], arr[1], arr[2]) + max_sum(arr[3:])\n        elif arr[1] < arr[2]:\n            return max(arr[1], arr[2]) + max_sum(arr[3:])\n        else:\n            return max(arr[0], arr[1], arr[2]) + max_sum(arr[3:])\n    elif arr[0] > arr[1]:\n        if arr[0] > arr[2]:\n            return max(arr[0], arr[1], arr[2]) + max_sum(arr[3:])\n        elif arr[1] > arr[2]:\n            return max(arr[1], arr[2]) + max_sum(arr[3:])\n        else:\n            return max(arr[0], arr[1], arr[2]) + max_sum(arr[3:])\n    else:\n        if arr[1] < arr[2]:\n            return max(arr[1], arr[2]) + max_sum(arr[3:])\n        else:\n            return max(arr[0], arr[1], arr[2]) + max_sum(arr[3:])"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x_0 = 1.0\n    x_1 = number / x_0\n    x_n = (x_0 + x_1) / 2.0\n    i = 1\n\n    while abs(x_n - x_0) > 0.0001:\n        x_n = (x_0 + x_1) / 2.0\n        i += 1\n        x_0 = x_1\n        x_1 = x_n\n\n    return x_n, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while abs(guess*guess - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #initialize variables\n    i = 0\n    x = 1\n    error = 0.00000001\n    tolerance = 0.00000001\n    \n    #compute square root using babylonian method\n    while (error > tolerance):\n        x = x - ((number/x) - (number/x**2))/(2*x)\n        i = i + 1\n        error = abs(number/x - (number/x**2))\n        \n    #return square root and number of iterations\n    return (x, i)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize two variables for the initial approximation\n    x = number/2\n    y = (number + x**2/number)/2\n\n    # loop until the difference between x and y is less than 0.0001\n    while abs(x - y) > 0.0001:\n        # calculate the next approximation\n        x = y\n        y = (number + x**2/number)/2\n\n    # return the final approximation\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number / 2\n    epsilon = 0.00001\n    n = 0\n    \n    # iterate until the guess is within epsilon of the actual square root\n    while abs(guess**2 - number) >= epsilon:\n        # update guess\n        guess = (number / guess) + guess / 2\n        n += 1\n        \n    # return the value of guess\n    return guess, n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0:\n        return 0\n    else:\n        low = 0.1\n        high = number\n        while abs(high - low) > 0.00001:\n            guess = (low + high) / 2\n            new_guess = (guess + number / guess) / 2\n            if new_guess < guess:\n                high = guess\n            else:\n                low = guess\n        return high"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Set an initial guess for the square root\n    guess = number / 2\n\n    # Loop until the difference between the guess and the square root is less than or equal to a small number\n    while abs(guess*guess - number) > 0.0001:\n        guess = (guess + number/guess) / 2\n\n    # Return the estimated square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.0001 # set the desired level of accuracy\n    guess = number/2 # initialize the guess to the midpoint of the range\n    \n    while abs(guess*guess - number) >= epsilon: # loop until the desired level of accuracy is reached\n        guess = (guess + number/guess)/2 # update the guess\n        \n    return guess # return the final guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x_n = 1\n    x_n_minus_1 = 1.0 / 2.0\n    x_n_minus_2 = 1.0 / 3.0\n    x_n_minus_3 = 1.0 / 4.0\n    \n    while abs(x_n - x_n_minus_1) > 0.00001:\n        x_n = (x_n + x_n_minus_1) / 2.0\n        x_n_minus_1 = x_n\n        x_n_minus_2 = (x_n_minus_1 + x_n_minus_2) / 2.0\n        x_n_minus_3 = (x_n_minus_2 + x_n_minus_3) / 2.0\n        \n    return x_n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1\n    x1 = number\n    x2 = (x1 + number/x1) / 2\n    x3 = (x2 + number/x2) / 2\n    x4 = (x3 + number/x3) / 2\n    x5 = (x4 + number/x4) / 2\n    x6 = (x5 + number/x5) / 2\n    x7 = (x6 + number/x6) / 2\n    x8 = (x7 + number/x7) / 2\n    x9 = (x8 + number/x8) / 2\n    x10 = (x9 + number/x9) / 2\n    x11 = (x10 + number/x10) / 2\n    x12 = (x11 + number/x11) / 2\n    x13 = (x12 + number/x12) / 2\n    x14 = (x13 + number/x13) / 2\n    x15 = (x14 + number/x14) / 2\n    x16 = (x15 + number/x15) / 2\n    x17 = (x16 + number/x16) / 2\n    x18 = (x17 + number/x17) / 2\n    x19 = (x18 + number/x18) / 2\n    x20 = (x19 + number/x19) / 2\n    x21 = (x20 + number/x20) / 2\n    x22 = (x21 + number/x21) / 2\n    x23 = (x22 + number/x22) / 2\n    x24 = (x23 + number/x23) / 2\n    x25 = (x24 + number/x24) / 2\n    x26 = (x25 + number/x25) / 2\n    x27 = (x26 + number/x26) / 2\n    x28 = (x27 + number/x27) / 2\n    x29 = (x28 + number/x28) / 2\n    x30 = (x29 + number/x29) / 2\n    x31 = (x30 + number/x30) / 2\n    x32 = (x31 + number/x31) / 2\n    x33 = (x32 + number/x32) / 2\n    x34 = (x33 + number/x33) / 2\n    x35 = (x34 + number/x34) / 2\n    x36 = (x35 + number/x35) / 2\n    x37 = (x36 + number/x36) / 2\n    x38 = (x37 + number/x37) / 2\n    x39 = (x38 + number/x38) / 2\n    x40 = (x39 + number/x39) / 2\n    x41 = (x40 + number/x40) / 2\n    x42 = (x41 + number/x41) / 2\n    x43 = (x42 + number/x42) / 2\n    x44 = (x43 + number/x43) / 2\n    x45 = (x44 + number/x44) / 2\n    x46 = (x45 + number/x45) / 2\n    x47 = (x46 + number/x46) / 2\n    x48 = (x47 + number/x47) / 2\n    x49 = (x48 + number/x48) / 2\n    x50 = (x49 + number/x49) / 2\n    x51 = (x50 + number/x50) / 2\n    x52 = (x51 + number/x51) / 2\n    x53 = (x52 + number/x52"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each index of the given string\n    table = [[0] * n for i in range(n)]\n\n    # Initialize the first column and the first row of the table to 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the rest of the table using dynamic programming\n    for length in range(3, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start + 1][end - 1] + 2\n            else:\n                table[start][end] = max(table[start + 1][end], table[start][end - 1])\n\n    # Return the length of the longest palindromic subsequence ending at the last index of the given string\n    return table[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string `s`.\n\n    This function uses the dynamic programming approach to solve the problem. The idea is to define\n    two variables `palindromes` and `palindromes_len` that represent the longest palindromic subsequences\n    found so far and their length, respectively. We initialize both variables to 0.\n\n    Then, for each character in the string, we check if it is the same as the last character of the current\n    subsequence. If it is, we can extend the subsequence by adding one character to the right and updating\n    both `palindromes` and `palindromes_len`. If it is not, we can move to the next character in the string.\n    We update both `palindromes` and `palindromes_len` accordingly.\n\n    Finally, we return the length of the longest palindromic subsequence found.\n    \"\"\"\n    n = len(s)\n    palindromes = [0] * n\n    palindromes_len = [0] * n\n\n    # Find the longest palindromic subsequence of odd length\n    for i in range(1, n-1):\n        if s[i] == s[i-1]:\n            palindromes[i] = palindromes[i-1] + 2\n            palindromes_len[i] = palindromes_len[i-1] + 2\n        else:\n            palindromes[i] = max(palindromes[i-1], palindromes[i])\n            palindromes_len[i] = max(palindromes_len[i-1], palindromes_len[i])\n\n    # Find the longest palindromic subsequence of even length\n    for i in range(2, n):\n        if s[i] == s[i-2]:\n            palindromes[i] = palindromes[i-2] + 2\n            palindromes_len[i] = palindromes_len[i-2] + 2\n        else:\n            palindromes[i] = max(palindromes[i-1], palindromes[i-2])\n            palindromes_len[i] = max(palindromes_len[i-1], palindromes_len[i-2])\n\n    return max(palindromes_len)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # Create a 2D table to store length of longest palindromic subsequence for all prefixes of the string\n    table = [[0]*n for i in range(n)]\n\n    # Initialize the first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start+1][end-1] + 2\n            else:\n                table[start][end] = max(table[start][end-1], table[start+1][end])\n\n    # Return the length of the longest palindromic subsequence in the string\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Creating a 2D array to store the length of LPS for all substrings of length i\n    lps_table = [[0] * n for _ in range(n)]\n    # The length of LPS for the empty string is 0\n    lps_table[0][0] = 0\n    # The length of LPS for a single character string is 1\n    lps_table[0][1] = 1\n    # Finding LPS for all substrings of length i\n    for i in range(2, n):\n        if str[i] == str[i-1]:\n            lps_table[i][i] = lps_table[i-1][i-1] + 1\n        else:\n            lps_table[i][i] = max(lps_table[i-1][i], lps_table[i][i-1])\n    # Returning the length of LPS for the whole string\n    return lps_table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    # create a table to store lengths of longest palindromic subsequences of odd length\n    table = [[0] * n for _ in range(n)]\n    # base cases: if the length of the string is 1, then it is a palindrome\n    if n == 1:\n        return 1\n    # base case: if the length of the string is 2, then it is a palindrome\n    elif n == 2:\n        return 2\n    # fill the table recursively\n    for i in range(n):\n        for j in range(n):\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j+1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j+1])\n    # return the length of the longest palindromic subsequence of odd length\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize variables\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # Create a table for LPS lengths\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for length in range(3, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    n = len(str)\n\n    # Create a 2D table to store lengths of longest palindromic subsequences of all substrings\n    lps_table = [[0] * n for _ in range(n)]\n\n    # Initialize all cells of first row and first column to 1\n    lps_table[0][0] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i-1][j-1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i-1][j], lps_table[i][j-1])\n\n    return lps_table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(string):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Get the length of the string\n    n = len(string)\n\n    # Initialize a matrix to store the lengths of palindromic subsequences\n    # up to each index in the string\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and column as 1, since the length of a\n    # subsequence of length 1 is itself\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill in the rest of the matrix using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == string[j]:\n                dp[i][j] = 2 + dp[j + 1][i - 1]\n            else:\n                dp[i][j] = max(dp[i][j + 1], dp[j][i])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[n - 1][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a table to store lengths of longest palindromic subsequence ending at each index\n    dp = [[0] * n for _ in range(n)]\n\n    # Fill the table in bottom up manner\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 1\n            elif str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (1/n + 1/n-1 +... + 1/2 +... + 1/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize a variable to store the harmonic sum\n    harmonic_sum = 0\n    # Loop through n-1 integers and add their harmonic sum to the variable\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_n = 1.0\n    for i in range(1, n):\n        sum_n += 1.0 / i\n    return sum_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n - harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the sum of harmonic series to zero\n    sum_harmonic = 0\n    \n    # Iterate through the series and add the harmonic series to the sum\n    for i in range(1, n):\n        sum_harmonic += 1 / i\n        \n    # Return the sum of harmonic series\n    return sum_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 / (n-1)) * (2*n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the arrays to sets to remove duplicates\n    array_nums1 = set(array_nums1)\n    array_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = array_nums1.intersection(array_nums2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in array_nums2\n    freq_dict = {}\n    for num in array_nums2:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # create a set to store the intersection of the two arrays\n    intersection = set()\n\n    # loop through each element in array_nums1\n    for num in array_nums1:\n        # if the frequency of the element in array_nums2 is greater than 0, add it to the intersection set\n        if freq_dict[num] > 0:\n            intersection.add(num)\n            # decrement the frequency of the element in array_nums2\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty set to store the common elements\n    common_set = set()\n    \n    # Loop through each element of the first array\n    for num1 in array_nums1:\n        # Check if the element is present in the second array\n        if num1 in array_nums2:\n            # If it is, add it to the set of common elements\n            common_set.add(num1)\n    \n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    array_nums1_set = set(array_nums1)\n    array_nums2_set = set(array_nums2)\n    intersection_set = array_nums1_set.intersection(array_nums2_set)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two dictionaries to store the unique values of both arrays\n    dict1 = {}\n    dict2 = {}\n    # loop through each element in the first array\n    for num in array_nums1:\n        # check if the element exists in the dictionary\n        if num not in dict1:\n            # if it doesn't, add it to the dictionary\n            dict1[num] = True\n    # loop through each element in the second array\n    for num in array_nums2:\n        # check if the element exists in the dictionary\n        if num not in dict2:\n            # if it doesn't, add it to the dictionary\n            dict2[num] = True\n    # create an empty list to store the intersection of the two arrays\n    intersection = []\n    # loop through each element in the first array and check if it exists in the second dictionary\n    for num in array_nums1:\n        if num in dict2:\n            # if it does, add the element to the intersection list\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    hash_map = {}\n    for num in array_nums1:\n        if num in hash_map:\n            hash_map[num] += 1\n        else:\n            hash_map[num] = 1\n    \n    for num in array_nums2:\n        if num in hash_map and hash_map[num] > 0:\n            intersection.append(num)\n            hash_map[num] -= 1\n            \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from array_nums1\n    set1 = set(array_nums1)\n    # create an empty list to store the intersection\n    intersection = []\n    # iterate through array_nums2\n    for num in array_nums2:\n        # if the number is in set1, append it to intersection list\n        if num in set1:\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize the set of unique elements in array_nums1\n    unique_nums1 = set(array_nums1)\n    # Initialize an empty list to store the intersection\n    intersection = []\n    # Loop through each element in array_nums2\n    for num in array_nums2:\n        # If the element is in unique_nums1, add it to the intersection list\n        if num in unique_nums1:\n            intersection.append(num)\n            # Remove the element from unique_nums1 so it can be used again\n            unique_nums1.remove(num)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Iterate over each element in the list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        r = abs(number)\n        phi = cmath.phase(number)\n        print('({}, {})'.format(r, phi))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_list = []\n    \n    for num in numbers:\n        complex_list.append(complex(num))\n        \n    polar_list = []\n    \n    for c in complex_list:\n        r = cmath.sqrt(c.real**2 + c.imag**2)\n        theta = cmath.phase(c)\n        polar_list.append((r, theta))\n        \n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # iterate over each number in the input list\n    for num in numbers:\n        # check if the number is complex\n        if isinstance(num, complex):\n            # convert the complex number to polar coordinates\n            r = abs(num)\n            theta = cmath.phase(num)\n            \n            # print the polar coordinates\n            print(f\"r = {r:.3f}, theta = {theta:.3f}\")\n        else:\n            # print the original number\n            print(num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print(f\"{num} in polar coordinates: r = {real}, theta = {imag}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        phi = cmath.phase(num)\n\n        # Print the polar coordinates\n        print(f\"({r.real:.2f}, {r.imag:.2f}) with phase {phi*180/cmath.pi:.2f} degrees\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        polar_number = f\"Magnitude: {magnitude}, Angle: {angle}\"\n        print(polar_number)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r, theta = cmath.polar(num)\n        print(\"{:.2f} + {:.2fi}\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n\n        if imag == 0:\n            polar_coordinate = str(real) +'rad'\n        else:\n            if real > 0:\n                angle = cmath.phase(number)\n                polar_coordinate = str(real) +'+'+ str(imag) + 'i rad (' + str(angle) +'deg)'\n            else:\n                angle = cmath.phase(number)\n                polar_coordinate = str(real) +'-'+ str(imag) + 'i rad (' + str(angle) +'deg)'\n\n        print(polar_coordinate)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        polar_num = cmath.polar(num)\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # extract real and imaginary parts\n        real = number.real\n        imag = number.imag\n        \n        # calculate polar angle using complex conjugate\n        angle = cmath.phase(complex(real, imag))\n        \n        # calculate polar magnitude\n        magnitude = cmath.abs(complex(real, imag))\n        \n        # create a tuple with the polar components\n        polar_tuple = (magnitude, angle)\n        \n        # add the polar tuple to the result list\n        result.append(polar_tuple)\n    \n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)-n+1):\n        comb = tuple(l[i:i+n])\n        combs.append(comb)\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, len(l) + 1):\n        for combo in combinations_with_replacement(l, i):\n            result.append(tuple(combo))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        color_combinations.append(combination)\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n    Args:\n        lst (list): A list of colors.\n        n (int): The length of each combination.\n\n    Returns:\n        list: A list of tuples representing the combinations.\n    \"\"\"\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[:i], n-1):\n            combinations.append((l[i],) + tuple(j))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l[i:], n):\n            combs.append(tuple(comb))\n    return combs"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    i = 2\n    while i < n:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a variable to keep track of the number of primes found\n    count = 0\n    # Initialize a boolean array of size n+1 to store whether a number is prime or not\n    isPrime = [True] * (n+1)\n    # Initialize a variable to keep track of the next unprocessed number\n    i = 2\n    while i * i <= n:\n        # If the number is not marked as prime, check if it is a prime number\n        if isPrime[i]:\n            # Mark all multiples of the current prime number as not prime\n            for j in range(i*i, n+1, i):\n                isPrime[j] = False\n        # Increment the counter and check for the next unprocessed number\n        count += 1\n        i += 1\n    # Count the number of prime numbers found\n    prime_count = 0\n    for i in range(2, n+1):\n        if isPrime[i]:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n+1):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    def isPrime(num):\n        \"\"\"\n        This function takes a positive integer and returns True if it is a prime number and False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\nn = int(input(\"Enter a non-negative number: \"))\nprint(\"The number of prime numbers less than\", n, \"is:\", count_Primes_nums(n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Returns a tuple containing the second number and the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    max_val = max(test_tup1[0], test_tup2[0])\n    max_index = test_tup1[0] >= test_tup2[0]\n    \n    for index, value in enumerate(test_tup1):\n        if value >= max_val and index!= max_index:\n            max_val = value\n            max_index = index\n    \n    for index, value in enumerate(test_tup2):\n        if value >= max_val and index!= max_index:\n            max_val = value\n            max_index = index\n    \n    return max_val, max_index"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = max(test_tup1[1], test_tup2[1])\n    return (max_value, test_tup1[0] if max_value == test_tup1[1] else test_tup2[0])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n    max_tup = (max_num1, max_num2)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    max_value = float('-inf')\n    for element in test_tup1:\n        if element > max_value:\n            max_value = element\n            max_tuple = (element,)\n    for element in test_tup2:\n        if element > max_value:\n            max_value = element\n            max_tuple = (element,)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of both tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n\n    # Compare the length of the two tuples\n    if tup1_len > tup2_len:\n        # If tup1 is longer, return it\n        return test_tup1\n    else:\n        # If tup2 is longer, return it\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Extract the values from the tuples\n    val1, val2 = test_tup1\n    val3, val4 = test_tup2\n    \n    # Compare the values and return the maximum value\n    if val1 > val2:\n        if val3 > val4:\n            return (val1, val3)\n        else:\n            return (val1, val4)\n    elif val1 < val2:\n        if val3 > val4:\n            return (val2, val3)\n        else:\n            return (val2, val4)\n    else:\n        if val3 > val4:\n            return (val1, val3)\n        else:\n            return (val1, val4)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1[0], test_tup2[0])\n    for i in range(1, len(test_tup1)):\n        max_val = max(max_val, test_tup1[i])\n    for i in range(1, len(test_tup2)):\n        max_val = max(max_val, test_tup2[i])\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Get the length of the two input tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    \n    # Initialize the maximum values\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n    \n    # Check if the first tuple is the maximum value\n    if length1 > length2:\n        max1 = test_tup1[-1]\n    else:\n        max2 = test_tup2[-1]\n        \n    # Check if the second tuple is the maximum value\n    if max1 == max2:\n        return test_tup1\n    elif max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1[0], test_tup1[1])\n    max2 = max(test_tup2[0], test_tup2[1])\n\n    if max1 > max2:\n        return test_tup1\n    elif max2 > max1:\n        return test_tup2\n    else:\n        return \"Error: Tuples have equal maximum values.\""
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables for tracking factors of the prime\n    i = 2\n    factors = []\n\n    # Loop while there are still factors to be found\n    while len(factors) < n:\n        # Check if the current number is prime\n        if is_prime(i):\n            # If it is, add it to the factors list\n            factors.append(i)\n        # Increment the number by 1\n        i += 1\n\n    # Return the nth prime number\n    return factors[n - 1]\n\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    # Check if the number is divisible by any number between 2 and n-1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    # If no factors were found, the number is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define the sequence of primes\n    prime_seq = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    \n    # Define the number of primes in the sequence\n    n_primes = len(prime_seq)\n    \n    # Define the number of iterations to check for a new prime number\n    k = 5\n    \n    # Initialize the count of primes found to 0\n    count = 0\n    \n    # Initialize the current number being checked\n    current = prime_seq[0]\n    \n    # Check each prime number in the sequence\n    while count < n:\n        # Check if the current number is a prime number\n        for prime in prime_seq:\n            if current % prime == 0:\n                break\n        else:\n            # If the current number is not a prime number, it must be a new prime number\n            count += 1\n            \n            # Check if the new prime number is within the specified range\n            if count == n:\n                break\n            \n            # Check for additional new prime numbers in the sequence\n            current += 1\n            if current >= n_primes:\n                current = prime_seq[0]\n        \n        # Check for additional new prime numbers in the sequence\n        current += 1\n        if current >= n_primes:\n            current = prime_seq[0]\n    \n    return current"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    num = 2\n    prime_count = 0\n    \n    # Loop until count reaches n\n    while count < n:\n        # Check if num is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        # If num is prime, increment count and check for new prime\n        if is_prime:\n            count += 1\n            prime_count += 1\n            \n            # If count reaches n, exit loop\n            if count == n:\n                break\n            \n            # Find next new prime number\n            num += 1\n    \n    # Return nth newman\u2013shanks\u2013williams prime number\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Initialize a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Find the nth prime number\n    for i in range(n):\n        # Generate a list of prime numbers up to the nth prime number\n        for j in range(len(primes), n + 1):\n            primes.append(i * primes[j - 1])\n        \n        # Find the largest prime number in the list\n        max_prime = max(primes)\n        \n        # Remove all multiples of the largest prime number from the list\n        for j in range(len(primes)):\n            while primes[j] % max_prime == 0:\n                primes.pop(j)\n        \n        # Append the largest prime number to the list of primes\n        primes.append(max_prime)\n    \n    # Return the nth prime number\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            return i\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    newman_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return newman_primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # start with 2, the smallest prime number\n    prime = 2\n\n    # loop through numbers from 3 to n\n    for i in range(3, n+1):\n        # check if the number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if the number is prime, update prime\n        if is_prime:\n            prime = i\n            break\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman-shanks-williams prime number.\n    '''\n\n    def is_prime(num):\n        '''\n        Checks if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(n):\n        '''\n        Calculates the nth newman-shanks-williams prime number.\n        '''\n        i = 2\n        while True:\n            if is_prime(i):\n                count = 0\n                for j in range(1, n+1):\n                    if is_prime(i*j):\n                        count += 1\n                    if count == j:\n                        return i*j\n            i += 1\n\n    return newman_shanks_williams(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the numbers from 2 to n (excluding n)\n    for i in range(2, n):\n\n        # Check if the current number is prime using the is_prime() function\n        if is_prime(i):\n\n            # If it's prime, check if it's a newman\u2013shanks\u2013williams prime\n            if is_newman_shanks_williams(i):\n\n                # If it is, increment the count variable\n                count += 1\n\n        # If the current number is composite, we can break out of the loop early\n        else:\n            break\n\n    # Return the count variable\n    return count\n\n\ndef is_prime(n): \n    '''\n    Write a function to check if a number is prime.\n    '''\n\n    # If n is 1 or 0, return False\n    if n <= 1:\n        return False\n\n    # Loop through the numbers from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n\n        # If n is divisible by i, return False\n        if n % i == 0:\n            return False\n\n    # If we make it through the loop without finding a divisor, n is prime\n    return True\n\n\ndef is_newman_shanks_williams(n): \n    '''\n    Write a function to check if a number is a newman\u2013shanks\u2013williams prime.\n    '''\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the numbers from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n\n        # If n is divisible by i, increment the count variable\n        if n % i == 0:\n            count += 1\n\n        # If the count variable reaches 2, n is a newman\u2013shanks\u2013williams prime\n        if count == 2:\n            return True\n\n    # If we make it through the loop without finding a divisor, n is prime\n    return False"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return None\n    # perform element-wise division\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x / y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            raise ValueError('Tuples cannot contain zeros.')\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the number of elements in the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The number of elements in both tuples must be equal.\")\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Perform element-wise division between the two tuples\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    \n    # Return the result\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        # perform element-wise division\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the number of elements in both tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"The number of elements in both tuples are not equal.\"\n    else:\n        # Iterate over each element in both tuples and perform element-wise division\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of the two tuples must be equal.')\n\n    # Perform element-wise division\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    # Initialize the result tuple\n    result_tup = ()\n    # Perform element-wise division\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    It returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if the length of the list is greater than or equal to L\n    if len(lst) < L:\n        return None\n    \n    # Split the list into two parts where the first part has length L\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    # Return the two parts in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n    \"\"\"\n    half_way = len(lst) // 2\n    first_part = lst[:half_way]\n    second_part = lst[half_way:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # first, check if the length of the first part is equal to L\n    if len(list1) == L:\n        # if yes, return the first and last elements of the list\n        return (list1[:L], list1[-L:])\n    # otherwise, split the list in two halves and recursively call the function for each half\n    else:\n        half_L = len(list1) // 2\n        return (split_two_parts(list1[:half_L], L), split_two_parts(list1[half_L:], L))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        print(\"Error: The length of the input list must be a multiple of L.\")\n        return\n    \n    half_length = len(list1) // 2\n    part1 = list1[:half_length]\n    part2 = list1[half_length:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    num_elements = len(list1)\n    if L > num_elements:\n        raise ValueError(\"Length of L should be less than or equal to the length of the list\")\n    if L <= 0:\n        raise ValueError(\"Length of L should be greater than 0\")\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(lst)\n    m = L\n    # Split the list into two parts\n    part1 = lst[:m]\n    part2 = lst[m:]\n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts by finding the index of the first element that is greater than or equal to L\n    first_part_start = next(i for i, x in enumerate(lst) if x >= L)\n    # Create two empty lists to store the first and second parts of the list, respectively\n    first_part = []\n    second_part = []\n    # Loop through the elements of the original list starting from the index of the first element that is greater than or equal to L\n    for i, x in enumerate(lst[first_part_start:]):\n        # If the current element is greater than or equal to L, add it to the first part list, otherwise add it to the second part list\n        if x >= L:\n            first_part.append(x)\n        else:\n            second_part.append(x)\n    # Return the two parts of the list in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Slice the list to get the first L elements of the list\n    first_part = list1[:L]\n    # Slice the remaining list to get the second L elements of the list\n    second_part = list1[L:]\n    # Return the two parts of the list in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        print(\"The given list is too small to split!\")\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    dog_years = 7 * (h_age/12)\n\n    if dog_years > 7:\n        return dog_years\n    else:\n        return 0"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate dog's age in dog's years based on height and weight\n    dog_age = 7 * (h_age - 100) + 20\n\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Convert human age to dog's years\n    dog_years = h_age * 7\n\n    # Return the dog's age in years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return 7 - h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_age_years = h_age * 7\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 + h_age * 2"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Converting human age to dog years\n    dog_years = 12 * h_age\n    \n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S) # Convert the input list to a mutable list\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        raise ValueError(\"step must be a positive integer\")\n    if len(S) % step!= 0:\n        raise ValueError(\"the length of the list must be a multiple of step\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    return [S[i:i+n] for i in range(0, n*step, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    if step >= n:\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        raise ValueError('Step should be greater than 0')\n    if step == 1:\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    S = S.copy()\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step * len(S)\n    S = S * n\n    S = S[::step]\n    return S"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = (l * l * l) / 6\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l**2) + (6*l**2) + (6*l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*3"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube using the formula\n    # lateral surface area = 2 * (length * height + length * depth + length * width)\n    lateral_surface_area = 2 * (l * l + l * l + l * l)\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the surface area of the cube using Heron's formula\n    area = 0.5 * l * l * l\n\n    # Return the surface area\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l ** 2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize a counter and a sum variable\n    count = 0\n    sum = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(2, 2*n, 2):\n        # Add the square of i to the sum\n        sum += i*i\n        # Increment the counter\n        count += 1\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize the sum variable\n    sum_of_squares = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current number to the sum variable\n        sum_of_squares += i**2\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # calculate square of odd number and add to sum variable\n        sum += i*i\n\n    # return sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_squares = 0\n    for i in range(1, n+1, 2):\n        odd_squares += i**2\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    current_number = 1\n    \n    for i in range(n):\n        sum_of_squares += current_number**2\n        current_number += 2\n    \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the square of the current odd number\n        square = i**2\n        # add the square to the sum\n        sum += square\n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        print(\"Invalid input: n must be greater than 0.\")\n    elif n == 1:\n        print(\"The 1st star number is 2\")\n    else:\n        print(\"The\", n, \"th star number is\", 4*n**2 - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a variable to store the current number of stars\n    current_num_stars = 0\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # If the number is a multiple of 3, add two to the number of stars\n        if i % 3 == 0:\n            current_num_stars += 2\n        \n        # Otherwise, add one to the number of stars\n        else:\n            current_num_stars += 1\n    \n    # Return the current number of stars\n    return current_num_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return str(n) + '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"The number must be positive\"\n    else:\n        # initialize a variable to store the result\n        result = \"\"\n        # loop through each number from 1 to n\n        for i in range(1, n+1):\n            # if i is even, append a star to the result\n            if i % 2 == 0:\n                result += \"*\"\n            # if i is odd, append a space to the result\n            else:\n                result += \" \"\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    return (n * (n+1) // 2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a counter variable to keep track of the number of stars\n    num_stars = 0\n\n    # Loop through each digit in the input number and add 1 to the num_stars variable for each digit greater than 0\n    for digit in str(n):\n        if int(digit) > 0:\n            num_stars += 1\n\n    # Return the total number of stars\n    return num_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the star number to 0\n    star_num = 0\n    \n    # Loop through each digit of n\n    for i in range(len(str(n))):\n        # Add 1 to the star number for each digit in n\n        if int(str(n)[i]) % 2 == 0:\n            star_num += 1\n        \n        # If the star number has reached the desired position, return it\n        if star_num == n-1:\n            return str(n)\n    \n    # If the desired position is not reached, return an error message\n    return \"Error: The desired position is not reached.\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the star number\n    star_num = \"\"\n\n    # loop n times to generate then'th star number\n    for i in range(1, n+1):\n        # add a space to the beginning of each line except for the first one\n        if i > 1:\n            star_num += \" \"\n        # add an asterisk to the end of each line except for the last one\n        if i < n:\n            star_num += \"*\"\n\n    # return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n        if i % 2 == 0:\n            if count % 2 == 0:\n                print(f\"The sum of even numbers at even positions is {sum_even}\")"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and index % 2 == 0:\n            sum_even += arr[i]\n        index += 1\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0: # if the number is even\n            even_sum += arr[i]\n            \n            # if the number is at an even index\n            if i % 2 == 0:\n                even_index_sum += arr[i]\n    \n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n            even_index += 1\n            if even_index % 2 == 0:\n                break\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n\n    # Initialize the sum of even numbers to zero\n    even_sum = 0\n\n    # Loop through the list and add up the even numbers at even positions\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n\n    # Return the sum of even numbers at even positions of the list\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:  # checks if the index is even\n            if arr[i] % 2 == 0:  # checks if the number at the index is even\n                sum += arr[i]  # adds the even number to the sum\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(n): \n\n        # calculate the power of the current number to the fifth power\n        power = i ** 5\n\n        # check if the current power is even\n        if power % 2 == 0:\n\n            # add the current power to the sum\n            sum += power\n\n    # return the sum of the even powers raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 5\n    return total\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**(5)\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through even natural numbers up to n\n    for i in range(2, n+1, 2):\n        # Calculate the power of the number raised to the fifth power\n        power = i ** 5\n\n        # Add the result to the sum variable\n        sum += power\n\n    # Return the sum of all even natural numbers raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum = 0\n    \n    for i in range(n): \n        sum += i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i*i"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple_[-1] for tuple_ in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize an empty list to store the rear elements of the tuples in the original list\n    rear_list = []\n\n    # Iterate over each tuple in the original list\n    for tup in test_list:\n        # Add the rear element of each tuple to the rear_list\n        rear_list.append(tup[-1])\n\n    # Return the list of rear elements\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] in test_tup1:\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n        else:\n            break\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(test_tup1[i] - test_tup2[i])\n        elif test_tup1[i] < test_tup2[i]:\n            print(test_tup2[i] - test_tup1[i])\n        else:\n            print(0)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return [(x1-x2) for x1, x2 in zip(test_tup1, test_tup2)]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_of_even_binomial_coeffs = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum_of_even_binomial_coeffs += math.comb(n, i-2)\n    return sum_of_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(n+1):\n        # Calculate the even index binomial coefficient of n\n        coeff = math.comb(n,i) * 2**i\n        # Check if the index is even\n        if i%2 == 0:\n            # Add the even index binomial coefficient to the sum\n            even_sum += coeff\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    sum_even_binomial_coeff = 0\n\n    # Loop through odd indices to calculate even index binomial coefficients\n    for i in range(1, n+1, 2):\n        # Calculate the even index binomial coefficient\n        even_binomial_coeff = math.comb(n, i)\n\n        # Add the even index binomial coefficient to the sum\n        sum_even_binomial_coeff += even_binomial_coeff\n\n    return sum_even_binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(2, n+1):\n        total += math.comb(n, i) * math.comb(n, 2*i-2)\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize a variable to store the sum of even index binomial coefficients\n    sum = 0\n\n    # Iterate through all values of k from 0 to n/2\n    for k in range(n//2+1):\n        # Calculate the value of the even index binomial coefficient\n        coeff = math.comb(n, k) * math.comb(n-2*k, 2*k)\n\n        # Check if the value is even and add it to the sum if it is\n        if coeff % 2 == 0:\n            sum += coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return 'Error: Please enter a positive integer'\n    elif n == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(2, n+1):\n            result += math.comb(n, i-1)\n        return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through all possible values of i\n    for i in range(0, n+1):\n        # If i is even, add the corresponding binomial coefficient to the sum\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n            \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_sum = 0\n\n    for i in range(1, n+1):\n        for j in range(1, 2*i+1, 2):\n            if j <= i:\n                even_binomial_sum += math.comb(i, j)\n\n    return even_binomial_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += math.comb(n, i)\n    return total"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r * r * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14/4)*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 1/3 * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14 * r * r\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (3.14159 * r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * (r**2 + h**2)\n    volume = area * (1/3)\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] < test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i+1]!= test_tup[i]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            return count\n        elif test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count = count + 1\n        elif test_tup[i-1]!= test_tup[i]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            return count\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # First row of decagonal numbers\n    row1 = [1]\n\n    # Taking the second row of decagonal numbers\n    for i in range(2, n+1):\n        row2 = []\n        for j in range(1, i+1):\n            # Adding the current value of row1 and j\n            row2.append(row1[j-1] + j)\n        # Updating row1 with the new row\n        row1 = row2\n\n    # Returning the nth decagonal number\n    return row1[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += (i * (i + 1)) // 2\n    return decagonal\n\nn = int(input(\"Enter a number: \"))\nprint(\"The nth decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = []\n    for i in range(1, n+1):\n        decagonal_numbers.append(5*i**2)\n    return decagonal_numbers[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # calculate the base 10 decagonal number\n    decagonal = ((n * (3 * n - 1)) // 2)\n    # check if the number is a decimal\n    if decagonal % 1!= 0:\n        return False\n    # return the decimal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_helper(n, current_num):\n        if n == 1:\n            return current_num\n        else:\n            return decagonal_helper(n - 1, current_num + 2 * current_num - 1)\n\n    return decagonal_helper(n, 1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_number = 0\n    row = 1\n    column = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            dec_number += row\n            row += 1\n        else:\n            dec_number += column\n            column += 1\n    return dec_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    else:\n        return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    b = 1\n    while a < 2 * n:\n        a += b\n        b += 2\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_num = 1\n    num_decimal_digits = 0\n\n    # Convert n to decimal and calculate its decimal places\n    while n > 0:\n        n -= 1\n        decagonal_num += n\n        num_decimal_digits += 1\n\n    # Convert the decimal to binary and add 1 to it to get the nth decimal\n    binary_num = bin(decagonal_num)[2:]\n    nth_decimal = int(binary_num, 2) + 1\n\n    # Calculate the nth decagonal number\n    nth_decagonal = nth_decimal * 10**(num_decimal_digits-1)\n\n    return nth_decagonal"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    return len(test_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # check if the list is empty\n    if not test_list:\n        return True\n\n    # check if the list has only one element\n    if len(test_list) == 1:\n        return True\n\n    # initialize a set to store the unique elements\n    unique_set = set()\n\n    # iterate through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # check if the length of the unique set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # iterate over the list and add unique elements to the set\n    for item in test_list:\n        if item not in unique_set:\n            unique_set.add(item)\n    # if the length of the set is equal to the length of the list, then all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, else returns False.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Check if the list is empty\n    if len(test_list) == 0:\n        return True\n    \n    # Set a set to store unique elements\n    unique_set = set()\n    \n    # Iterate over the list\n    for element in test_list:\n        # If the element is already in the set, the list is not unique\n        if element in unique_set:\n            return False\n        \n        # Add the element to the set\n        unique_set.add(element)\n    \n    # If the loop completes without returning False, the list is unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have same length.')\n    \n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    \n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return []\n\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists should have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    count = [0]*10 # initialize count array of size 10\n    \n    # count the frequency of each digit in n\n    while n > 0:\n        digit = n % 10\n        count[digit] += 1\n        n //= 10\n    \n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if count[i] > 0 and count[i] > i:\n            return False\n    \n    # if the loop completes, all digits have a frequency greater than or equal to themselves\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10\n\n    # Count the frequency of each digit in the integer\n    while n > 0:\n        digit = n % 10\n        freq[digit] += 1\n        n //= 10\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # initialize a dictionary to store digit frequency\n    freq = {}\n    \n    # loop through each digit in the integer and update the frequency in the dictionary\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # loop through each digit in the integer and check if the frequency of the digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    digits = [int(digit) for digit in str(n)]\n    for digit in digits:\n        if digit > 9:\n            return False\n        if digits.count(digit) > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    frequency = [0]*10\n    for d in digits:\n        frequency[d] += 1\n    for i in range(10):\n        if frequency[i] > 0:\n            if frequency[i] > i:\n                return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Initialize a dictionary to store the count of each digit\n    digit_count = {}\n\n    # Loop through each character in the string\n    for char in num_str:\n        # If the character is a digit, increment its count in the dictionary\n        if char.isdigit():\n            digit_count[int(char)] = digit_count.get(int(char), 0) + 1\n\n    # Loop through each digit in the dictionary\n    for digit, count in digit_count.items():\n        # Check if the frequency of that digit is less than or equal to the digit itself\n        if count > digit:\n            return False\n\n    # If all digits pass the check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    \n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n            \n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = []\n    for digit in str(n):\n        digits.append(int(digit))\n\n    freq_dict = {}\n    for digit in digits:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    for digit in digits:\n        if freq_dict[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string\n    str_n = str(n)\n    \n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq_dict = {}\n    \n    # Loop through each character in the string\n    for char in str_n:\n        # If the character is a digit, add it to the dictionary\n        if char.isdigit():\n            freq_dict[char] = freq_dict.get(char, 0) + 1\n    \n    # Loop through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for key, value in freq_dict.items():\n        if value > key:\n            return False\n    \n    # If the loop completes without finding any unequal frequencies, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # Create a list of digits\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    \n    # Count the frequency of each digit\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n        \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n        \n    # If all digits are valid, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[0] == element for i in list):\n        print(f\"All items in the list are equal to {element}\")\n    else:\n        print(\"The list contains items that are not equal to the given element\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Initialize a variable to keep track of whether all elements are equal to the given element\n    all_equal = True\n    \n    # Iterate through the list and check if each element is equal to the given element\n    for item in list:\n        if item!= element:\n            all_equal = False\n            break\n            \n    return all_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Check whether all elements in a list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element\")\n    else:\n        print(\"Not all items in the list are equal to the given element\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b[bB]{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    \n    if match:\n        print(\"The string contains 'a' followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain 'a' followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?:b{2}){0,2}c')\n    return bool(pattern.match(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'\\ab{2,3}a')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r\"a(b{2,3})\")\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB][bB]?|[aA][bB][bB]?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the sum of the first k elements\n    max_sum = sum(a[:k])\n    sum_k = sum(a[:k])\n    \n    # Initialize the maximum sum of the modified array\n    max_modified_sum = max_sum\n    \n    # Iterate through the remaining elements of the array\n    for i in range(k, n):\n        # Update the sum of the first k elements\n        sum_k += a[i] - a[i-k]\n        \n        # Update the maximum sum of the modified array\n        if sum_k > max_modified_sum:\n            max_modified_sum = sum_k\n            \n    return max_modified_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array by repeating the original array k times\n    modified_array = [0] * (n * k)\n    for i in range(n):\n        modified_array[i] = a[i]\n    for i in range(n, n * k):\n        modified_array[i] = modified_array[i - n]\n    # find the maximum sum of a contiguous array\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n * k):\n        current_sum += modified_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= n and modified_array[i]!= modified_array[i - n]:\n            current_sum -= modified_array[i - n]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Initialize a list to store the maximum subarray sum seen so far \n    max_sum_seen = float('-inf') \n  \n    # Initialize two variables to store the index of the maximum subarray sum seen so far and its corresponding sum \n    max_index = -1 \n    max_sum = float('-inf') \n  \n    # Initialize the length of the modified array as k times the length of the original array \n    modified_length = n * k \n  \n    # Initialize the modified array to the original array \n    modified_array = a * k \n  \n    # Initialize a variable to store the current subarray sum \n    current_sum = 0 \n  \n    # Iterate over the modified array \n    for i in range(modified_length): \n  \n        # Subtract the element at the current index from the current sum \n        current_sum -= a[i % n] \n  \n        # Add the element at the current index to the current sum \n        current_sum += modified_array[i % modified_length] \n  \n        # Update the maximum subarray sum seen so far \n        if current_sum > max_sum: \n            max_sum = current_sum \n            max_index = i \n  \n    # Return the maximum subarray sum seen so far \n    return max_sum, max_index "
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # create a new array of size n*k with repeated elements of the original array\n    new_array = []\n    for i in range(k):\n        for j in range(n):\n            new_array.append(a[j])\n    # sort the new array in descending order\n    new_array.sort(reverse=True)\n    # calculate the sum of the first k elements\n    first_k_sum = sum(new_array[:k])\n    # initialize the maximum sum to the first k elements sum\n    max_sum = first_k_sum\n    # calculate the sum of the last (n-k) elements\n    last_n_k_sum = sum(new_array[k:])\n    # calculate the maximum sum as the sum of the first k elements and the sum of the last (n-k) elements\n    max_sum = max(max_sum, last_n_k_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum to the first element of the array\n    max_sum = a[0]\n    # Initialize the sum of the first element to 0\n    sum_first = 0\n    # Initialize the sum of the last element to 0\n    sum_last = 0\n    # Initialize the sum of the repeating element to 0\n    sum_repeating = 0\n    # Loop through the array k times\n    for i in range(k):\n        # Add the first element to the sum of the repeating element\n        sum_repeating += a[0]\n        # Add the second element to the sum of the repeating element\n        sum_repeating += a[1]\n        # Update the maximum sum if the sum of the repeating element is greater than the current maximum sum\n        if sum_repeating > max_sum:\n            max_sum = sum_repeating\n        # Shift the first and last elements of the array\n        a = a[2:] + a[:1]\n    # Return the maximum sum of the original array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # loop through the array n times to form the modified array\n    for i in range(n): \n        # loop through the array k times to repeat the given array\n        for j in range(k): \n            # add the current element to the current sum and check if it's greater than max_sum\n            current_sum += a[i]\n            if current_sum > max_sum: \n                max_sum = current_sum\n                \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Get the sum of the original array\n    original_sum = sum(a)\n    # Create a new array by repeating the original array k times\n    repeated_array = a*k\n    # Get the sum of the repeated array\n    repeated_sum = sum(repeated_array)\n    # Find the difference between the original sum and the repeated sum\n    difference = original_sum - repeated_sum\n    # Find the largest sum of a contiguous array in the modified array\n    largest_sum = 0\n    for i in range(n):\n        current_sum = difference\n        for j in range(i+1, n):\n            current_sum += a[j] - repeated_array[j-i-1]\n        if current_sum > largest_sum:\n            largest_sum = current_sum\n    return largest_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a_modified = []\n    for i in range(n):\n        a_modified.extend([a[i]] * k)\n    a_modified.append(a[n-1])\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(a_modified)):\n        if i == 0:\n            current_sum = a_modified[i]\n        else:\n            current_sum = current_sum - a_modified[i-1] + a_modified[i]\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # initialize variables\n    max_sum = float('-inf')\n    sum_array = [0] * (n + k)\n    sum_array[n] = float('-inf')\n\n    # fill the sum_array with the given array and repeat it k times\n    for i in range(n):\n        sum_array[i] = a[i]\n\n    for j in range(k):\n        for i in range(n):\n            sum_array[i + j + 1] = sum_array[i] + a[i]\n\n    # find the maximum sub-array sum\n    for i in range(n, n + k):\n        if sum_array[i] > max_sum:\n            max_sum = sum_array[i]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    modified_array = [x for x in a]\n    \n    # Modify the array by repeating it k times\n    for i in range(k):\n        modified_array = modified_array + a\n    \n    # Find the maximum sum of the modified array\n    for i in range(n):\n        current_sum = max(modified_array[i], current_sum + modified_array[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0  \n    for i in range(2, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initializing sum of squares to zero\n    sum_of_squares = 0\n\n    # iterating from 1 to n\n    for i in range(1, n+1):\n\n        # checking if i is even\n        if i % 2 == 0:\n\n            # adding the square of i to sum_of_squares\n            sum_of_squares += i**2\n\n    # returning the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        num = 2 * count + 1\n        sum_of_squares += num ** 2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize variables\n    sum_of_squares = 0\n    current_number = 2\n    \n    # loop through first n even natural numbers\n    for i in range(n):\n        # calculate square of current number and add to sum_of_squares\n        sum_of_squares += current_number ** 2\n        # move on to the next number\n        current_number += 2\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate square of i\n        square = i**2\n        \n        # add square to sum and increment count\n        sum += square\n        count += 1\n        \n    # return sum of squares\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for item in list1:\n        lengths.append(len(item))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for item in list1:\n        if len(item) > max_length_list:\n            max_length_list = item\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list containing the maximum length of all the lists in the input list.\n    '''\n\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Find the length of each sublist\n        sublist_length = len(sublist)\n        # Add the length to the list of maximum lengths\n        max_lengths.append(sublist_length)\n\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of the maximum length of the sublists.\n    '''\n    max_sublist = []\n    for sublist in list1:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list of maximum lengths in the list.\n    \"\"\"\n    max_lengths = []\n    for i in range(len(list1)):\n        lengths = [len(lst) for lst in list1[i]]\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Find the maximum length of the list\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    # Create a new list to store the maximum length in each list of the original list\n    result = []\n    for i in range(len(list1)):\n        result.append(max_length)\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # create a boolean array to store whether a post has a certain color\n    colors = [False] * k\n\n    # iterate over the fence\n    for i in range(n):\n        # if the post is not adjacent to the previous post, paint it with a different color\n        if not colors[i % k]:\n            colors[i % k] = True\n\n        # if the post is adjacent to the previous post and has the same color as the previous post, remove the previous painting\n        elif colors[(i - 1) % k]:\n            colors[i % k] = True\n\n    # count the number of ways to paint the fence\n    count = 1\n    for i in range(k):\n        count *= (i + 1)\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def backtrack(i, j, fence, color, ways):\n        if i == n:\n            return ways\n        if j == 0 or fence[i-1]!= fence[i-2]:\n            if color == 0:\n                if fence[i-1] == fence[j-1]:\n                    return backtrack(i, j+1, fence, 1, ways+1)\n                else:\n                    return backtrack(i, j+1, fence, 0, ways)\n        else:\n            if color == 0:\n                return backtrack(i, j+1, fence, 1, ways)\n            else:\n                return backtrack(i, j+1, fence, 0, ways+1)\n        return ways\n    \n    fence = [0] * n\n    for i in range(n):\n        fence[i] = i % k\n    \n    return backtrack(n, 0, fence, 0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # initialize the count variable to 0\n    count = 0\n\n    # create a dictionary to store the number of ways of painting the fence\n    ways = {}\n\n    # loop through all possible colors\n    for color in range(1, k+1):\n        # loop through all possible numbers of adjacent posts\n        for i in range(1, n+1):\n            # check if the number of adjacent posts is less than or equal to 2 and the color of the adjacent post is not the same as the current color\n            if i <= 2 and color!= ways.get(i, -1):\n                # increment the count by the number of ways of painting the fence with the given conditions\n                count += ways.get(i-1, 0)\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a 2D array to store the number of ways to paint the fence for different combinations of colors and the number of posts\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Fill in the first row and column with 1 (since we can paint either a single post with any color or all the posts with any color)\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = 1\n    \n    # Fill in the remaining values in the array using dynamic programming\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            for c in range(1, j+1):\n                # If the current color is the same as the previous color or if there are less than 2 adjacent posts with the same color, then we cannot paint the fence with the current color and we can move on to the next color\n                if dp[i-1][c] == 1 or (c == 1 and dp[i-1][j-1] == 1):\n                    dp[i][j] += dp[i-1][j]\n                else:\n                    dp[i][j] += dp[i-1][c]\n    \n    # Return the value in the bottom right corner of the array, which is the number of ways to paint the fence with at most 2 adjacent posts with the same color\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case: if the fence has 0 or 1 post, there is only one way to paint the fence\n    if n <= 1:\n        return n\n    \n    # Initialize a table to store the number of ways for each pair of adjacent posts to have the same color\n    table = [[0 for i in range(k+1)] for j in range(n)]\n    \n    # Fill the table in a bottom-up manner\n    for i in range(1, n):\n        for j in range(1, k+1):\n            if i == 1:\n                # If the fence has only 1 post, there is only one way to paint the fence\n                if j == 1:\n                    table[i][j] = 1\n                else:\n                    table[i][j] = table[i-1][j-1]\n            elif j == 1:\n                # If the fence has only 2 posts, there are two ways to paint the fence\n                if i == 2:\n                    table[i][j] = 2\n                else:\n                    table[i][j] = table[i-1][j] + table[i-1][j-1]\n            else:\n                # If the fence has at least 3 posts, there are four ways to paint the fence\n                table[i][j] = table[i-1][j] + table[i-1][j-1] + table[i][j-1] + table[i-1][j-2]\n                \n    return table[n-1][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if n <= 0 or k <= 0:\n        return 0\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            dp[i] += dp[i - 1] * dp[j]\n            dp[i] %= (10 ** 9 + 7)\n            \n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # initialize the 2D array with 0s\n    dp = [[0]*(k+1) for _ in range(n+1)]\n\n    # fill the first row and column with 0s\n    for i in range(1, n+1):\n        dp[i][0] = 1\n\n    for j in range(1, k+1):\n        dp[0][j] = 1\n\n    # fill the rest of the array using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + dp[i-1][j]\n\n    # sum up the numbers in the diagonal\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways to paint the fence with ith post\n    # and jth color where j < i\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base cases:\n    # If there are no posts or colors, there is only one way to paint the fence\n    if n == 0 or k == 0:\n        ways[0][0] = 1\n\n    # If there is only one post or color, there is only one way to paint the fence\n    if n == 1 or k == 1:\n        ways[1][1] = 1\n\n    # Fill in the remaining values using recurrence relation\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            ways[i][j] = ways[i - 1][j] + ways[i][j - 1]\n\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a list to store the ways of painting the fence\n    ways = [0] * (n+1)\n    # Initialize the first two ways\n    ways[0] = ways[1] = 1\n    # Iterate through the remaining elements\n    for i in range(2, n+1):\n        # Iterate through the previous ways and check if the current element can be painted with a different color\n        for j in range(1, k+1):\n            if i-1 >= j and ways[i-j] > ways[i]:\n                ways[i] = ways[i-j]\n    \n    return ways[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a list of lists to store the number of ways of painting the fence for each pair of colors\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    # Fill the dp list with the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = 1\n            elif i == 2 and j == 1:\n                dp[i][j] = 1\n            elif i == 2:\n                dp[i][j] = dp[i-1][j]\n            elif j == 2:\n                dp[i][j] = dp[i][j-1]\n            elif i > 2:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    # Return the number of ways of painting the fence\n    return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n/m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Calculate the quotient\n    quotient = n // m\n\n    # If the remainder is greater than or equal to 0.5, increment the quotient by 1\n    if n % m >= 0.5:\n        quotient += 1\n\n    # Return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # first, check if the denominator is zero, and return zero if it is\n    if m == 0:\n        return 0\n\n    # next, check if the numerator is greater than the denominator, and return zero if it is\n    if n > m:\n        return 0\n\n    # finally, perform the division and return the result\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient of n and m\n    quotient = n // m\n    \n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the right angled triangle\n    s = (w ** 2 + h ** 2) ** 0.5\n    \n    # calculate the area of the triangle\n    area = 0.5 * w * h\n    \n    # calculate the square root of the area\n    area_sqrt = math.sqrt(area)\n    \n    # calculate the third side of the right angled triangle\n    third_side = s * area_sqrt\n    \n    # return the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the hypotenuse\n    c = math.sqrt((w**2) + (h**2))\n    # calculate the opposite side of the right angle\n    s = math.sqrt((w**2) + (c**2))\n    # calculate the adjacent side of the right angle\n    a = math.sqrt((h**2) + (c**2))\n    # return the third side of the right angle\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5 # calculate the semi-perimeter\n    c = math.sqrt((w**2 + h**2)**2 - (w**2)**2) # calculate the circumcircle radius\n    return s - c # return the third side of the right angled triangle"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula to find the third side of the triangle\n    s = (w**2 + h**2 + math.sqrt(w**2*h**2)) / (2*w)\n    \n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w**2)+h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the lengths of the two sides of a right angled triangle and returns the length of the third side of the same triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # calculate the third side of the triangle\n    third_side = math.sqrt(s*(s-w)*(s-h))\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return 2*w*h"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = float('-inf')\n    for val in listval:\n        if isinstance(val, (int, float)):\n            max_value = max(max_value, val)\n        elif isinstance(val, str):\n            max_value = max(max_value, len(val))\n        elif isinstance(val, list):\n            max_value = max(max_value, max_val(val))\n        elif isinstance(val, tuple):\n            max_value = max(max_value, max_val(list(val)))\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if isinstance(listval[i], (int, float, complex)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize variables\n    max_val = None\n\n    # Loop through the list\n    for item in listval:\n        # If the current value is greater than the maximum value so far, update the max_val variable\n        if max_val is None or item > max_val:\n            max_val = item\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max_val to the first element of the list\n    max_val = listval[0]\n    # iterate over the rest of the list\n    for i in range(1, len(listval)):\n        # if the element is greater than the current max_val, update max_val\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(lst):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return \"Input must be a list\"\n\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_value = None\n    for value in listval:\n        if max_value is None or value > max_value:\n            max_value = value\n    return max_value"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            div.append(i)\n    return sum(div)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n\n    # initialize variables\n    n = len(arr)\n    inv_count = 0\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # count inversions using two pointers\n    left = 0\n    right = n - 1\n    while left < right:\n        if arr[left] > arr[right]:\n            inv_count += right - left\n            left += 1\n        else:\n            right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        left = merge_sort(left)\n        right = merge_sort(right)\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    inv_count = 0\n    sorted_arr = merge_sort(arr)\n\n    for i in range(len(sorted_arr)):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += len(sorted_arr) - i - 1\n                i = len(sorted_arr)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively count inversions in each half\n    inv_count_left = get_Inv_Count(left)\n    inv_count_right = get_Inv_Count(right)\n\n    # Count inversions between the two halves\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            inv_count += len(left) - i\n            i += 1\n        else:\n            inv_count += len(right) - j\n            j += 1\n\n    # Combine the inversions counts from both halves\n    inv_count += inv_count_left + inv_count_right\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n\n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively count inversions in the left and right halves\n    inv_count_left = get_Inv_Count(left)\n    inv_count_right = get_Inv_Count(right)\n\n    # Count inversions in the entire array\n    inv_count_arr = merge_sort(arr)\n\n    # Return the sum of the inversion counts of the left and right halves\n    return inv_count_left + inv_count_right + inv_count_arr\n\ndef merge_sort(arr): \n    '''\n    Write a python function to merge sort an array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n\n    # Base case: if the array has only one element, it's sorted\n    if n <= 1:\n        return 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Merge the sorted left and right halves\n    inv_count_left = merge_sort(left)\n    inv_count_right = merge_sort(right)\n\n    # Count inversions in the merged array\n    inv_count_merged = merge(left, right, arr)\n\n    # Return the sum of the inversion counts of the left and right halves\n    return inv_count_left + inv_count_right + inv_count_merged\n\ndef merge(left, right, arr): \n    '''\n    Write a python function to merge two sorted arrays into a single sorted array.\n    '''\n    # Find the length of the merged array\n    n1 = len(left)\n    n2 = len(right)\n    n = n1 + n2\n\n    # Initialize the index of the merged array\n    i = j = k = 0\n\n    # Iterate through the merged array\n    while i < n1 and j < n2:\n        if left[i] < right[j]:\n            if arr[k]!= left[i]:\n                k += 1\n                arr[k] = left[i]\n                i += 1\n            else:\n                i += 1\n        else:\n            if arr[k]!= right[j]:\n                k += 1\n                arr[k] = right[j]\n                j += 1\n            else:\n                j += 1\n\n    # Copy the remaining elements of the left array\n    while i < n1:\n        if arr[k]!= left[i]:\n            k += 1\n            arr[k] = left[i]\n            i += 1\n\n    # Copy the remaining elements of the right array\n    while j < n2:\n        if arr[k]!= right[j]:\n            k += 1\n            arr[k] = right[j]\n            j += 1\n\n    # Return the sum of the inversion counts of the left and right halves\n    return k"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            pivot_index = left + (right - left) // 2\n            if arr[pivot_index] > arr[i]:\n                right = pivot_index\n            else:\n                left = pivot_index + 1\n\n        if left > i:\n            inv_count += left - i - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # counting inversions using merge sort algorithm\n    def merge(arr, l, m, r):\n        i = l\n        j = m + 1\n        k = 0\n        inv_count = 0\n        inv_count_left = 0\n        inv_count_right = 0\n        while i <= m and j <= r:\n            if arr[i] < arr[j]:\n                inv_count += m - i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count_left += j - m\n                k = i + 1\n            else:\n                i += 1\n            j += 1\n        while k <= r:\n            arr[k], arr[r] = arr[r], arr[k]\n            inv_count_right += r - k + 1\n            k += 1\n        return inv_count, inv_count_left, inv_count_right\n\n    def merge_sort(arr, l, r):\n        if l < r:\n            m = l + (r - l) // 2\n            inv_count_left, inv_count_left_left, inv_count_left_right = merge_sort(arr, l, m)\n            inv_count_right, inv_count_right_left, inv_count_right_right = merge_sort(arr, m + 1, r)\n            inv_count, inv_count_left, inv_count_right = merge(arr, l, m, r)\n            inv_count_left += inv_count_left_left\n            inv_count_right += inv_count_right_right\n            inv_count += inv_count_left\n            inv_count += inv_count_right\n        return inv_count, inv_count_left, inv_count_right\n\n    inv_count, inv_count_left, inv_count_right = merge_sort(arr, 0, n - 1)\n    return inv_count_left + inv_count_right"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the count variable\n    count = 0\n    # Traverse the array from the first two elements\n    for i in range(1, len(arr)):\n        # If the current element is greater than the next element\n        if arr[i] < arr[i - 1]:\n            # Increment the count variable\n            count += len(arr) - i\n    # Return the count variable\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Helper function to perform counting sort on the array\n    def counting_sort(arr):\n        max_val = max(arr)\n        count = [0] * (max_val + 1)\n\n        # Count the number of occurrences of each element in the array\n        for num in arr:\n            count[num] += 1\n\n        # Calculate the cumulative sum of the count array to get the starting index of each element\n        sum_count = [0] * (max_val + 1)\n        for i in range(1, max_val + 1):\n            sum_count[i] = sum_count[i-1] + count[i]\n\n        # Perform the counting sort\n        result = [0] * len(arr)\n        for num in arr:\n            temp = count[num]\n            count[num] = result[sum_count[num] - 1]\n            result[sum_count[num] - 1] = num\n            sum_count[num] -= temp\n\n        return result\n\n    # Sort the array in ascending order\n    arr = sorted(arr)\n\n    # Perform the counting sort to count the number of inversions\n    inv_count = 0\n    i, j = 0, 1\n    while i < len(arr) and j < len(arr):\n        if arr[i] > arr[j]:\n            inv_count += (len(arr) - i - 1)\n            i += 1\n        else:\n            j += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    count = 0 \n    inv_count = 0 \n    # Traverse through all pairs of elements \n    for i in range(n): \n        # Find the smallest element in remaining unsorted part of the array \n        j = i+1 \n        while j < n and arr[j] < arr[i]: \n            count += j - i \n            j += 1 \n        # Swap the found smallest element with the first element \n        arr[i], arr[j-1] = arr[j-1], arr[i] \n        # Now, the first i+1 elements are in sorted order. \n        # Traverse the remaining unsorted part of the array to find inversions \n        for k in range(i+1, n): \n            if arr[k] < arr[i]: \n                inv_count += k - i - 1 \n                k = n \n    # Return the count of inversions \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and returns a flattened list.\n    \"\"\"\n    flattened_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_lst.extend(flatten_list(item))\n        else:\n            flattened_lst.append(item)\n    return flattened_lst\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list and returns a flattened version of the list.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list += flatten_list(element)\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # create an empty list to store the flattened list\n    flattened_list = []\n\n    # traverse the nested list\n    for element in list1:\n        # if the element is a list, recursively call the function on it\n        if isinstance(element, list):\n            flattened_list += flatten_list(element)\n        # if the element is not a list, add it to the flattened list\n        else:\n            flattened_list.append(element)\n\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_dict = defaultdict(int)\n    for item in stdata:\n        for i, j in enumerate(item[1:]):\n            max_aggregate_dict[i] += j\n    max_aggregate_list = [max(max_aggregate_dict.values())] * len(stdata[0])\n    return max_aggregate_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for i in item:\n            max_dict[i] += item[1]\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each category\n    max_dict = defaultdict(int)\n\n    # iterate over the list of tuples and update the max_dict\n    for item in stdata:\n        cat = item[0]\n        price = item[1]\n        if price > max_dict[cat]:\n            max_dict[cat] = price\n\n    # find the maximum aggregate from the max_dict\n    max_agg = max(max_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # iterate through the list of tuples and update the frequency of each item\n    for item, freq in stdata:\n        freq += 1\n\n    # iterate through the dictionary to find the maximum frequency\n    max_freq = max(freq.values())\n\n    # create a list of tuples containing the items and their frequencies\n    agg_data = [(item, freq) for item, freq in freq.items() if freq == max_freq]\n\n    # return the maximum aggregate value\n    return agg_data[0][1]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each month\n    max_aggs = defaultdict(int)\n\n    # loop through the list of tuples\n    for month, value in stdata:\n        # if the value is greater than the current maximum aggregate, update the maximum\n        if value > max_aggs[month]:\n            max_aggs[month] = value\n\n    # find the maximum aggregate for each month and return the result\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples and returns the maximum aggregate value.\n    '''\n    max_agg = 0\n    agg_dict = defaultdict(int)  # defaultdict to keep track of the aggregate\n\n    for item in stdata:\n        agg_dict[item[0]] += item[1]\n\n    for val in agg_dict.values():\n        max_agg = max(max_agg, val)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    max_aggr = defaultdict(int) # default dictionary to store maximum aggregate for each student\n    \n    for student, marks in stdata: # iterate over all student-marks tuples\n        for mark in marks: # iterate over all marks for each student\n            max_aggr[student] = max(max_aggr[student], mark) # update maximum aggregate for the student\n    \n    return max(max_aggr.values()) # return the maximum aggregate for all students"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples representing the sales data for different products and \n    calculates the maximum aggregate.\n    '''\n    max_agg = defaultdict(int)\n    for sale in stdata:\n        max_agg[sale[0]] += sale[1]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the number of transactions for each item\n    item_count = defaultdict(int)\n    # Iterate through the list of tuples\n    for item, quantity in stdata:\n        # Increase the count of the item in the defaultdict\n        item_count[item] += quantity\n    # Initialize the maximum aggregate to 0\n    max_agg = 0\n    # Iterate through the item_count dictionary\n    for item, count in item_count.items():\n        # Add the count of the item to the maximum aggregate\n        max_agg += count\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each day\n    max_aggr = defaultdict(int)\n\n    for date, amount in stdata:\n        # check if the maximum aggregate for the current date is already set\n        if max_aggr[date] < amount:\n            max_aggr[date] = amount\n\n    # return the maximum aggregate\n    return max(max_aggr.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    first_n_bits = 0\n    last_n_bits = 0\n    \n    for i in range(2**n):\n        first_n_bits = i\n        last_n_bits = i >> n\n        if first_n_bits == (first_n_bits >> 1) + last_n_bits:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Create a list of all possible binary sequences of length 2n\n    binary_sequences = []\n    for i in range(2**n):\n        binary_sequences.append('{0:b}'.format(i))\n\n    # Initialize a counter variable to keep track of the number of binary sequences\n    count = 0\n\n    # Iterate through all possible binary sequences and check if their sum is same as sum of last n bits\n    for binary_sequence in binary_sequences:\n        sum_first_n_bits = int(binary_sequence[:n], 2)\n        sum_last_n_bits = int(binary_sequence[n:], 2)\n        if sum_first_n_bits == sum_last_n_bits:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    def is_valid(s):\n        return s == sum(int(b) for b in s[-n:])\n\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if is_valid(bin(i)[2:].zfill(n) + bin(j)[2:].zfill(n)):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_half = i // 2**(n-1)\n        last_half = i % 2**(n-1)\n        sum_first = sum(first_half * 2**(n-1), first_half + 1)\n        sum_last = sum(last_half * 2**(n-1), last_half + 1)\n        if sum_first == sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        sum_left = 0\n        sum_right = 0\n        for j in range(n):\n            if i & (1 << j):\n                sum_left += j\n        for k in range(n):\n            if i & (1 << (n - k - 1)):\n                sum_right += k\n        if sum_left == sum_right:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        sum_first_n = sum(int(x) for x in binary[:n])\n        sum_last_n = sum(int(x) for x in binary[-n:])\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    total = 0\n    for i in range(2**n):\n        first_half = i // 2\n        last_half = i % 2\n        if first_half + last_half == 1:\n            total += 1\n    return total"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    # initialize the count variable\n    count = 0\n    \n    # loop through all possible binary sequences of length 2n\n    for i in range(2**n, 2**n+2**n):\n        # extract the sum of first n bits\n        first_n_bits = i // 2**n\n        # extract the sum of last n bits\n        last_n_bits = i % 2**n\n        \n        # check if the sum of first n bits is equal to the sum of last n bits\n        if first_n_bits == last_n_bits:\n            # increment the count variable\n            count += 1\n            \n    # return the count of all such sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    # Helper function to calculate the sum of first n bits\n    def get_sum(num, n):\n        return sum([int(digit) for digit in bin(num)[2:].zfill(n)])\n\n    # Helper function to check if the given binary sequence is valid\n    def is_valid(seq, n):\n        sum1 = get_sum(seq[0], n)\n        sum2 = get_sum(seq[-1], n)\n        return sum1 == sum2\n\n    # Helper function to generate binary sequences of length 2n\n    def generate_binary_seq(n):\n        for i in range(2**n):\n            yield format(i, f'0{n}b')\n\n    # Iterate through all possible binary sequences of length 2n\n    count = 0\n    for seq in generate_binary_seq(2*n):\n        # Check if the sequence is valid\n        if is_valid(seq, n):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:].zfill(n)\n        if int(seq[:n]) == int(seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for _ in d.values():\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case: If the dictionary is empty, return 0\n    if not d:\n        return 0\n    \n    # Recursive case: If the dictionary has at least one key-value pair,\n    # add 1 to the depth of each key and value in the dictionary and\n    # recursively call the function on each of those values.\n    depth = 1\n    for key, value in d.items():\n        if isinstance(value, dict):\n            # Recursively call the function on the value\n            value_depth = dict_depth(value)\n            depth += 1 + value_depth\n    \n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n        elif isinstance(value, list):\n            depth = 1 + max([dict_depth(x) for x in value])\n        else:\n            depth = 1\n        max_depth = max(max_depth, depth)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 0\n        for key in d:\n            if isinstance(d[key], dict):\n                depth = 1 + dict_depth(d[key])\n                if depth > max_depth:\n                    max_depth = depth\n        return max_depth\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth = max(depth, dict_depth(value))\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1\n                    depth = max(depth, dict_depth(item))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, (list, tuple)):\n        return max(dict_depth(v) for v in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Function to check if a number is in a given range\n    def is_in_range(num, min_range, max_range):\n        return min_range <= num <= max_range\n\n    # Get the element at the given index\n    element = arr[index]\n\n    # Get the range of possible values for the element\n    element_range = (min(arr), max(arr))\n\n    # Calculate the number of rotations required to find the element\n    rotation_count = 0\n    for i in range(len(ranges)):\n        if is_in_range(element, ranges[i][0], ranges[i][1]):\n            rotation_count += 1\n            if rotation_count >= rotations:\n                break\n\n    # Find the element after the number of rotations\n    for i in range(len(arr)):\n        if i == index:\n            continue\n        if is_in_range(arr[i], element_range[0], element_range[1]):\n            new_element = arr[i]\n            break\n    return new_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the current element and its index\n    current_element = arr[index]\n    current_index = index\n\n    # Perform rotations to find the next element\n    for _ in range(rotations):\n        next_index = (current_index + ranges[current_index]) % len(arr)\n        next_element = arr[next_index]\n\n        # Update the current element and its index\n        arr[current_index], arr[next_index] = arr[next_index], arr[current_index]\n        current_index = next_index\n        current_element = next_element\n\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # calculate the number of rotations required\n    num_rotations = (len(arr) // rotations) * rotations\n\n    # calculate the final index after rotations\n    final_index = (index % rotations) + (final_index % rotations)\n\n    # find the element at the final index\n    element = arr[final_index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the element at the given index\n    element = arr[index]\n    # Calculate the new index of the element after rotations\n    new_index = (index + rotations) % len(arr)\n    # Find the new element at the new index\n    new_element = arr[new_index]\n    # Find the difference between the new and old elements\n    diff = new_element - element\n    # Find the minimum range that includes the new element\n    min_range = diff % ranges\n    # Find the index of the minimum range\n    min_range_index = min_range * rotations\n    # Find the element at the minimum range index\n    min_element = arr[min_range_index]\n    # Calculate the new index of the element after rotations\n    new_index = new_index + min_range_index - min_range\n    # Find the new element at the new index\n    new_element = arr[new_index]\n    # Return the new element\n    return new_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    if index >= len(arr):\n        return None\n    \n    # find the element to be rotated at the given index\n    element = arr[index]\n    \n    # rotate the given element\n    rotated_element = element\n    \n    for i in range(rotations):\n        # find the next rotation of the element\n        next_rotation = (i + 1) % len(ranges)\n        next_rotation_range = ranges[next_rotation]\n        \n        # find the corresponding element in the next range\n        next_index = next_rotation_range.index(element)\n        next_element = next_rotation_range[next_index]\n        \n        # update the element to be rotated\n        rotated_element = next_element\n    \n    # find the final index of the element in the rotated range\n    final_index = rotated_element.index(element)\n    \n    # find the final element in the rotated range\n    final_element = rotated_element[final_index]\n    \n    # find the final index of the element in the original range\n    final_final_index = final_element.index(rotated_element)\n    \n    # find the element at the given index after rotations\n    final_index = final_index + index - final_final_index\n    \n    # check if the final index is within the original range\n    if final_index < 0:\n        final_index = 0\n    elif final_index >= len(arr):\n        final_index = len(arr) - 1\n    \n    return final_element[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the final index after the rotations\n    final_index = (index + rotations) % len(arr)\n    \n    # Check if the final index is within the range of the array\n    if ranges[final_index][0] <= arr[final_index] <= ranges[final_index][1]:\n        return arr[final_index]\n    \n    # If the final index is out of range, recursively call the function with the updated values of the array and index\n    return find_Element(arr,ranges,rotations,final_index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n\n    # Extracting the number of elements in the array\n    n = len(arr)\n\n    # Initializing the element that will be returned\n    result = None\n\n    # Performing the rotations and checks for the element at the given index\n    for i in range(rotations):\n        # Extracting the first element of the rotated array\n        first_element = arr[0]\n\n        # Extracting the last element of the rotated array\n        last_element = arr[-1]\n\n        # Extracting the second last element of the rotated array\n        second_last_element = arr[-2]\n\n        # Initializing the sum of elements in the rotated array\n        sum_of_elements = last_element + second_last_element\n\n        # Setting the first element of the rotated array to the first element of the original array\n        arr[0] = first_element\n\n        # Reversing the order of the elements in the rotated array\n        arr.reverse()\n\n        # Updating the sum of elements in the rotated array\n        sum_of_elements += arr[0]\n\n        # Checking if the sum of elements is within the range of the elements in the array\n        if sum_of_elements in ranges[index]:\n            # If the sum of elements is within the range, then the element at the given index will be returned\n            result = arr[index]\n            break\n\n    # Returning the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == 0:\n        return arr[0]\n    elif index == len(arr) - 1:\n        return arr[-1]\n    else:\n        element = arr[index]\n        for i in range(len(ranges)):\n            if ranges[i][0] <= index <= ranges[i][1]:\n                for j in range(rotations[i]):\n                    element = arr[(index - ranges[i][0] + rotations[i]) % (len(arr) - 1) + ranges[i][0]]\n        return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): A list of elements.\n    ranges (list): A list of ranges.\n    rotations (int): Number of rotations to perform.\n    index (int): Index at which the element is to be found.\n\n    Returns:\n    int: The element at the given index after number of rotations.\n\n    '''\n\n    # Calculate the new index after rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Find the element in the new index\n    new_element = arr[new_index]\n\n    # Calculate the new range after rotations\n    new_range = ranges[new_index]\n\n    # Check if the element is within the new range\n    if (new_element >= ranges[index]) and (new_element <= ranges[new_index]):\n        return new_element\n\n    # Check if the new element is in the next range\n    else:\n        return find_Element(arr,ranges,rotations,new_index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, number of rotations and an index as input and returns the element at the given index after number of rotations.\n    '''\n    # Check if the index is within the array range\n    if index < 0 or index >= len(arr):\n        return None\n\n    # Calculate the final index after rotations\n    final_index = (index + rotations) % len(arr)\n\n    # If the element is in the first range, return it\n    if arr[final_index] in ranges[0]:\n        return arr[final_index]\n\n    # If the element is in the second range, return it\n    if arr[final_index] in ranges[1]:\n        return arr[final_index]\n\n    # If the element is not in any of the ranges, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.search(pattern, word):\n            return word.split()[0:2]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # using regular expressions to find words starting with 'p'\n    pattern = r'\\bp\\w+\\b'\n    matches = re.findall(pattern,''.join(words))\n    if len(matches) == 0:\n        return None, None\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match(r'^p', word):\n            return word, words[words.index(word) + 1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)-1):\n        if words[i].startswith('p'):\n            return words[i], words[i+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    \n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    \n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'\\b[Pp]ut\\b'\n    words_starting_with_p = re.findall(pattern, words)\n    if len(words_starting_with_p) == 2:\n        return words_starting_with_p[0], words_starting_with_p[1]\n    else:\n        return \"No two words starting with 'p' found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern to find words starting with letter 'p'\n    pattern = r'^p\\w+'\n    # Iterate over the list of words and find the words that start with letter 'p'\n    for word in words:\n        if re.match(pattern, word):\n            # Return the two words that start with letter 'p'\n            return [word, word.replace('p', 'P')]\n    # If no words start with letter 'p', return an empty list\n    return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes a list of integers a, its length n, the index of the current element being considered, and the value of k as input.\n    The function returns the maximum sum of increasing subsequence from the prefix until the ith index and also including the kth element which is after i.\n    \"\"\"\n\n    # Initialize variables\n    max_sum = 0\n    max_sum_ending_at_i = 0\n    max_sum_ending_at_j = 0\n    for i in range(index, n):\n        # If the ith element is greater than the kth element, then the current element is not part of the increasing subsequence\n        if a[i] > k:\n            max_sum_ending_at_i = max(max_sum_ending_at_i, max_sum_ending_at_j)\n            max_sum_ending_at_j = max_sum_ending_at_i + a[i]\n        else:\n            max_sum_ending_at_j = max(max_sum_ending_at_i + a[i], max_sum_ending_at_j)\n\n        # Update maximum sum\n        max_sum = max(max_sum, max_sum_ending_at_j)\n\n    # Add k to maximum sum if it is part of the increasing subsequence\n    if a[index] <= k:\n        max_sum += a[index]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    max_sum = float('-inf')\n    for i in range(index, n):\n        if i == k-1:\n            max_sum = max(max_sum, a[i])\n        else:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i+1, k))\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Initialize the current subsequence with the first element\n    current_seq = [a[0]]\n\n    # Loop through the rest of the elements\n    for i in range(1, n):\n\n        # If the current element is greater than or equal to the kth element, append it to the current subsequence\n        if a[i] >= k:\n            current_seq.append(a[i])\n\n        # If the current subsequence is larger than the maximum sum, update the maximum sum and the current sum\n        elif len(current_seq) > max_sum:\n            max_sum = len(current_seq)\n            current_sum = sum(current_seq)\n\n        # Otherwise, update the current sum\n        else:\n            current_sum += a[i]\n\n        # If the current sum is larger than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the length of the current subsequence is equal to the ith index, return the maximum sum and the current subsequence\n        if len(current_seq) == index:\n            return max_sum, current_seq\n\n    # If the loop completes without finding the ith index, return the maximum sum and the current subsequence\n    return max_sum, current_seq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from\n    prefix until ith index and also including a given kth element which is\n    after i, i.e., k > i.\n\n    The function returns the maximum sum and the corresponding sequence of\n    increasing subsequence.\n\n    Args:\n    a: list of integers\n    n: size of array a\n    index: index of the last element in the increasing subsequence\n    k: index of the kth element\n\n    Returns:\n    int: maximum sum of increasing subsequence\n    list: list of integers: sequence of increasing subsequence\n    \"\"\"\n\n    # Base case: if k is not greater than index, then there is no increasing\n    # subsequence from prefix until index and kth element is not in the\n    # subsequence.\n    if k <= index:\n        return 0, []\n\n    # Base case: if the kth element is the last element of the array, then\n    # there is no increasing subsequence from prefix until index and kth\n    # element is the last element of the increasing subsequence.\n    if k == n - 1:\n        return a[n - 1], [a[n - 1]]\n\n    # Recursive case: If the kth element is not the last element of the array,\n    # then we can either include the kth element in the increasing subsequence\n    # from prefix until index or exclude it.\n\n    # Include the kth element in the increasing subsequence from prefix until\n    # index.\n    max_sum1, seq1 = max_sum_increasing_subseq(a, n, index, k + 1)\n\n    # Exclude the kth element in the increasing subsequence from prefix until\n    # index.\n    max_sum2, seq2 = max_sum_increasing_subseq(a, n, index, k)\n\n    # Update the maximum sum and sequence if the first maximum sum is greater\n    # than the second maximum sum.\n    if max_sum1 > max_sum2:\n        max_sum = max_sum1\n        seq = seq1\n    else:\n        max_sum = max_sum2\n        seq = seq2\n\n    # Add the kth element to the sequence.\n    seq.append(a[k])\n\n    return max_sum, seq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function takes a list 'a' of size 'n', 'index' at which we need to find the maximum sum of increasing subsequence, and 'k' which is the index of a given element after 'index'\n    '''\n    \n    # create a list to store the prefix sum of increasing subsequence\n    prefix_sum = [0] * n\n    \n    # initialize the first element of prefix sum as 1\n    prefix_sum[0] = 1\n    \n    # loop through all the elements of the array\n    for i in range(1, n):\n        \n        # if the element is greater than the kth element, then update the sum of the current increasing subsequence to be the sum of the current element and the maximum sum of the previous increasing subsequence\n        if i == k:\n            prefix_sum[i] = a[i]\n        elif a[i] > a[index] and a[i] > a[k]:\n            prefix_sum[i] = a[i] + max(prefix_sum[i-1], prefix_sum[i-k])\n            \n    # return the maximum sum of increasing subsequence from prefix until ith index and also including the given kth element\n    return max(prefix_sum[i] for i in range(min(index, k), n))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    dp = [[0] * (n+1) for i in range(n+1)]\n    max_sum = float('-inf')\n    for i in range(n+1):\n        dp[i][0] = 0\n    \n    # Fill the dp table\n    for i in range(1, n+1):\n        for j in range(1, index+1):\n            if a[i-1] <= a[j-1]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + a[i-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    # Return the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i\n    return max_sum if max_sum!= float('-inf') else 0"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        if i < index:\n            dp[i] = max(dp[i-1], a[i])\n        elif i == index:\n            dp[i] = max(dp[i-1], a[i])\n        elif i == k:\n            dp[i] = max(dp[i-1], a[i])\n        else:\n            dp[i] = max(dp[i-1], a[i]) + a[i] - a[i-k]\n    return max(dp)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if a[index] > a[k-1] and index > k-1:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index]+max_sum_increasing_subseq(a, n, index+1, index))\n    return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return a[0], a[0]\n    if index == 1:\n        return max(a[0], a[1]), max(a[0], a[1])\n\n    max_so_far = max_so_far_no_k = float('-inf')\n    for i in range(index):\n        max_so_far, max_so_far_no_k = max(max_so_far_no_k + a[i], a[i]), max(max_so_far_no_k, max_so_far)\n\n    return max_so_far_no_k + a[index] - a[k-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize max_sum and subseq\n    max_sum = float('-inf')\n    subseq = []\n\n    # loop through the array from 0 to index - 1\n    for i in range(index):\n        # if the current element is greater than the kth element\n        if a[i] > a[k]:\n            # update max_sum and subseq\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k))\n            subseq.append(a[i])\n\n    # return the maximum sum of increasing subsequence from prefix until ith index and also including the kth element\n    return max_sum + a[k]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    if len(colon) < m:\n        for i in range(m-len(colon)):\n            colon.append(None)\n    if len(colon) > n:\n        for i in range(len(colon)-n):\n            colon.pop()\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return deepcopy(tuplex[:m]), deepcopy(tuplex[m:])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == n:\n        return [tuplex[m]]\n    else:\n        return [tuplex[m]] + colon_tuplex(deepcopy(tuplex),m+1,n)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    result = []\n    for i in range(m):\n        new_tup = tuple(tuplex[i][j] for j in range(n))\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1:\n        return deepcopy(tuplex[0])\n    elif m == n:\n        return deepcopy(tuplex[-1])\n    else:\n        colon = []\n        for i in range(m):\n            colon.append(deepcopy(tuplex[i]))\n        return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n        tuplex (tuple): The tuple to get a colon of.\n        m (int): The number of rows to get.\n        n (int): The number of columns to get.\n\n    Returns:\n        list: A list of lists containing the colon of the given tuple.\n    '''\n    if m == 0 or n == 0:\n        return []\n    elif m == 1 and n == 1:\n        return [[tuplex]]\n    else:\n        # Create a list of copies of the tuple to be used\n        new_tuplex = deepcopy(tuplex)\n\n        # Fill the colon with new copies of the tuple\n        for i in range(m):\n            for j in range(n):\n                new_tuplex[i][j] = deepcopy(tuplex[i%len(tuplex)][j%len(tuplex[i%len(tuplex)])])\n\n        return [new_tuplex]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple with dimensions m x n.\n    '''\n    col = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(tuplex[i*n+j])\n        col.append(tuple(row))\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new tuple with the same length as the original tuple\n    colon = ()\n    # Loop through each index of the new tuple\n    for i in range(m):\n        # Add the i-th element of the original tuple to the colon tuple\n        colon = (tuplex[i],) + colon\n    # Transpose the colon tuple to get a colon of the original tuple\n    colon = tuple(zip(*colon))\n    # Return the colon of the original tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Convert tuple to list\n    tuplex = list(tuplex)\n    # Initialize a list to store the colon\n    colon = []\n    # Loop through the tuple\n    for i in range(len(tuplex)):\n        # If the current index is a multiple of n, add a colon\n        if i % n == 0:\n            colon.append(':')\n        # If the current index is a multiple of m, add a comma\n        if i % m == 0:\n            colon.append(',')\n        # Append the current element to the colon list\n        colon.append(str(tuplex[i]))\n    # Convert the colon list to a colon string\n    colon_str = ''.join(colon)\n    # Return the colon string\n    return colon_str"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == m:\n        return (tuplex[:m], tuplex[m:])\n    else:\n        return colon_tuplex(tuplex[1:],m,n)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Find the largest N products of the two lists\n    largest_products = []\n    for i in range(N):\n        # Find the product of the two largest numbers in each list\n        product = nums1[i] * nums2[i]\n        largest_products.append(product)\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Find the first N largest products\n    largest_products = []\n    for i in range(N):\n        largest_product = nums1[i] * nums2[i]\n        largest_products.append(largest_product)\n    \n    # Return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n\n    # Initialize the two maximum values\n    max1 = nums1[-1]\n    max2 = nums2[-1]\n\n    # Initialize the count of largest products to be returned\n    count = 0\n\n    # Iterate over the first N elements of each list\n    for i in range(N):\n        # Calculate the current product of the largest values\n        prod = max1 * max2\n\n        # If the current product is greater than the largest product seen so far, update the maximum values and increment the count\n        if prod > max1 * max2:\n            max1 = nums1[i]\n            max2 = nums2[i]\n            count += 1\n\n        # If the count is equal to the desired number of largest products, break out of the loop\n        if count == N:\n            break\n\n    # Return the count of largest products\n    return count"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the products\n    products = []\n    # Create a list to store the indices of the largest products in each list\n    indices = []\n    \n    # Iterate over the indices of the two lists\n    for i in range(len(nums1)):\n        # Iterate over the indices of the remaining indices list (excluding the current index)\n        for j in range(i+1, len(nums1)):\n            # Find the product of the two lists at the current indices\n            product = nums1[i] * nums1[j]\n            # If the product is greater than the largest product found so far, add the indices to the lists\n            if product > products[-1] or (product == products[-1] and nums2[j] > nums2[indices[-1]]):\n                products.append(product)\n                indices.append(j)\n            # If the number of largest products found so far is equal to the specified number, stop iterating\n            if len(products) == N:\n                break\n    \n    # Return the list of indices and products\n    return indices, products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables to keep track of largest products\n    largest_product1 = 1\n    largest_product2 = 1\n    \n    # loop through the given lists and find the largest product for each combination of factors\n    for i in range(N):\n        for j in range(i, N):\n            current_product1 = nums1[i] * nums1[j]\n            current_product2 = nums2[i] * nums2[j]\n            \n            if current_product1 > largest_product1:\n                largest_product1 = current_product1\n            if current_product2 > largest_product2:\n                largest_product2 = current_product2\n                \n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Calculate the product of the first N elements of nums1 and nums2\n    product = nums1[0] * nums2[0]\n    \n    # Initialize the maximum product to be the same as the first product\n    max_product = product\n    \n    # Initialize the index of the first product in nums1\n    first_index = 0\n    \n    # Initialize the index of the second product in nums2\n    second_index = 0\n    \n    # Loop N times\n    for i in range(N):\n        # Calculate the product of the two products\n        product = nums1[first_index] * nums2[second_index]\n        \n        # Update the maximum product if the new product is larger\n        if product > max_product:\n            max_product = product\n        \n        # Increment the indices of the two products\n        first_index += 1\n        second_index += 1\n    \n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_products = []\n    for i in range(N):\n        max_products.append(float('-inf'))\n        \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            for k in range(i, len(nums1)):\n                for l in range(j, len(nums2)):\n                    if k!= i and l!= j:\n                        for m in range(k, len(nums1)):\n                            for n in range(l, len(nums2)):\n                                if n!= l and m!= k:\n                                    product = nums1[i] * nums2[j] * nums1[k] * nums2[l] * nums1[m] * nums2[n]\n                                    max_product = max(max_products[i], max_products[j], max_products[k], max_products[l], max_products[m], max_products[n], max_product)\n                                    if max_products[i] < max_product:\n                                        max_products[i] = max_product\n                                    if max_products[j] < max_product:\n                                        max_products[j] = max_product\n                                    if max_products[k] < max_product:\n                                        max_products[k] = max_product\n                                    if max_products[l] < max_product:\n                                        max_products[l] = max_product\n                                    if max_products[m] < max_product:\n                                        max_products[m] = max_product\n                                    if max_products[n] < max_product:\n                                        max_products[n] = max_product\n                                    if max_products[i] < max_products[j]:\n                                        max_products[i] = max_products[j]\n                                    if max_products[i] < max_products[k]:\n                                        max_products[i] = max_products[k]\n                                    if max_products[i] < max_products[l]:\n                                        max_products[i] = max_products[l]\n                                    if max_products[i] < max_products[m]:\n                                        max_products[i] = max_products[m]\n                                    if max_products[i] < max_products[n]:\n                                        max_products[i] = max_products[n]\n                                    if max_products[j] < max_products[k]:\n                                        max_products[j] = max_products[k]\n                                    if max_products[j] < max_products[l]:\n                                        max_products[j] = max_products[l]\n                                    if max_products[j] < max_products[m]:\n                                        max_products[j] = max_products[m]\n                                    if max_products[j] < max_products[n]:\n                                        max_products[j] = max_products[n]\n                                    if max_products[k] < max_products[l]:\n                                        max_products[k] = max_products[l]\n                                    if max_products[k] < max_products[m]:\n                                        max_products[k] = max_products[m]\n                                    if max_products[k] < max_products[n]:\n                                        max_products[k] = max_products[n]\n                                    if max_products[l] < max_products[m]:\n                                        max_products[l] = max_products[m]\n                                    if max_products[l] < max_products[n]:\n                                        max_products[l] = max_products[n]\n                                    if max_products[m] < max_products[n]:\n                                        max_products[m] = max_products[n]\n                                    if N == 2:\n                                        if max_products[i] > max_products[j]:\n                                            max_products[i], max_products[j] = max_products[j], max_products[i]\n                                        if max_products[i] > max_products[k]:\n                                            max_products[i], max_products[k] = max_products[k], max_products[i]\n                                        if max_products[i] > max_products[l]:\n                                            max_products[i], max_products[l] = max_products[l], max_products[i]\n                                        if max_products[i] > max_products[m]:\n                                            max_products[i], max_products[m] = max_products[m], max_products[i]\n                                        if max_products[i] > max_"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return \"Invalid input: N must be less than or equal to the length of the two input lists.\"\n    \n    largest_products = []\n    for i in range(N):\n        largest_product = max(nums1[i] * nums2[i], nums1[i] * nums2[-(i+1)], nums1[-(i+1)] * nums2[i])\n        largest_products.append(largest_product)\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize variables to store the largest products\n    largest1 = float('-inf')\n    largest2 = float('-inf')\n    \n    # Iterate through the input lists\n    for i in range(len(nums1)):\n        \n        # Calculate the product of the current factor with the second list\n        product1 = nums1[i] * nums2[0]\n        \n        # Check if the product is larger than the current largest product for the first list\n        if product1 > largest1:\n            largest1 = product1\n        \n        # Calculate the product of the current factor with the second list\n        product2 = nums1[i] * nums2[1]\n        \n        # Check if the product is larger than the current largest product for the second list\n        if product2 > largest2:\n            largest2 = product2\n            \n    # Return the largest N products\n    return [largest1, largest2]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        max_product = max(max_product, nums1[i] * nums2[i])\n    return max_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of those numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    # Return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \n    Parameters:\n    str1 (str): the input string\n    \n    Returns:\n    tuple: the tuple of characters in the string\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = 1\n    while (n & set_bit) == 0:\n        set_bit <<= 1\n    \n    return set_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given integer n.\n    '''\n    # Initialize a variable to store the unset bits\n    unset_bits = 0\n    \n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # If the i-th bit is 1, then it is unset\n        if (n >> i) & 1 == 1:\n            break\n    \n    # Set the i-th bit to 1, which sets the left most unset bit\n    n |= (1 << i)\n    \n    # Return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer as an input and returns the integer with the left most unset bit set to 1.\n    \"\"\"\n    i = 1\n    while ((n & i) == 0) and (i <= n):\n        i = i << 1\n    return n | i"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the rightmost bit as 1 \n    bit = 1 << 31 \n    while bit!= 1: \n        # Check if the rightmost bit is set in n \n        if (n & bit) == bit: \n            break \n        bit >>= 1 \n    # Set the leftmost bit as unset in n \n    n |= bit \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the variable to store the unset bit\n    unset_bit = 0\n    # Loop through each bit in the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the bit is unset\n        if (n & (1 << i)) == 0:\n            # Set the unset bit to the current bit index\n            unset_bit = i\n            # Break out of the loop\n            break\n    # Set the bit to 1\n    n |= (1 << unset_bit)\n    # Return the updated value of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit in a given integer.\n    '''\n\n    # Iterate through the bits of the integer\n    for i in range(32):\n        # Check if the current bit is 0\n        if (n & (1 << i)) == 0:\n            # Set the current bit to 1\n            n |= (1 << i)\n            # Break out of the loop\n            break\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # initialize the index of the leftmost unset bit \n    left_most_unset_bit = -1\n\n    # loop through all bits in the binary representation of n \n    for i in range(31, -1, -1): \n        if (n >> i) & 1: \n            # bit is set, increment the index of the leftmost unset bit \n            if left_most_unset_bit == -1: \n                left_most_unset_bit = i\n            else: \n                break\n\n    # set the leftmost unset bit in n \n    if left_most_unset_bit!= -1: \n        n |= (1 << left_most_unset_bit)\n\n    # return the modified value of n \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through the bits in the binary representation of n\n    for i in range(32):\n        # Check if the current bit is set\n        if n & (1 << i):\n            # If the current bit is set, check if the next bit is set\n            if (n & (1 << (i + 1))) == 0:\n                # If the next bit is not set, set the current bit\n                result |= (1 << i)\n                break\n\n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the count of unset bits to 0\n    count = 0\n\n    # Iterate through each bit of the number\n    for i in range(32):\n        # Calculate the mask for the current bit position\n        mask = (1 << i)\n\n        # If the current bit is unset, increment the count\n        if (n & mask) == 0:\n            count += 1\n\n    # If the number contains an unset bit, set the left most bit\n    if count > 0:\n        mask = (1 << (count - 1))\n        n = n | mask\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit in a given integer.\n    \"\"\"\n    # Convert the given integer to a binary string\n    binary_str = bin(n)[2:]\n    # Count the number of 1's in the binary string\n    count = binary_str.count('1')\n    # Set the left most unset bit to 1's\n    left_most_unset_bit = 1 << count\n    return left_most_unset_bit"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments: radius and height of the cone.\n    The function returns the volume of the cone.\n    '''\n    V = math.pi * r * r * h / 3  # Formula for volume of a cone\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the height of the base of the cone\n    base_height = h - r\n\n    # Calculate the volume of the base\n    volume_base = math.pi * r * r * base_height\n\n    # Calculate the volume of the cone\n    volume_cone = math.pi * r * r * r\n\n    return volume_cone - volume_base"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r * r * h # formula for volume of a cone\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    \"\"\"\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula to find the volume of a cone\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculating the volume of the cone using the formula: V = 1/3 * \u03c0 * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    \n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Volume of a cone is pi * r^2 * h\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize variables\n    highest_power = 1\n    while highest_power <= n:\n        highest_power *= 2\n        \n    # return the highest power of 2 that is less than or equal to n\n    return highest_power-1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        if power == 1:\n            return power\n        power <<= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Find the floor of log2(n) and then multiply it by 2\n    highest_power_of_2 = 2**int(n.bit_length()/log2(2))\n    \n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Check if n is 0 or 1\n    if n == 0 or n == 1:\n        return n\n    \n    # Initialize the highest power of 2 as 1\n    highest = 1\n    \n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if the current number is a power of 2\n        if i == 2**highest:\n            highest += 1\n    \n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize the highest power of 2 as 0\n    highest_power = 0\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the current number is a power of 2\n        if i & (i - 1) == 0:\n            # If it is, check if it is greater than the current highest power\n            if i > highest_power:\n                # If it is, update the highest power\n                highest_power = i\n\n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes a number n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 to be 1\n    highest = 1\n    \n    # loop through all numbers from 1 to n\n    for i in range(2, n+1):\n        # if the current number is a power of 2\n        if i == 2**highest:\n            # if the current power of 2 is greater than the current highest power of 2\n            if 2**highest > highest:\n                # update the highest power of 2 to be the current number\n                highest = i\n    \n    # return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 << highest_Power_of_2(n >> 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n\n    highest_power_of_2 = 1\n\n    while n > 1:\n        highest_power_of_2 <<= 1\n        n >>= 1\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i >= 2**i:\n            return i\n        i += 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop through numbers from 1 to n and check if they are powers of 2\n    for i in range(1, n+1):\n        if 2**i <= n:\n            return 2**i\n    \n    # if no power of 2 is found, return n itself\n    return n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        lucas = find_lucas(n-1) + find_lucas(n-2) \n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    # Initialize first two Lucas numbers\n    a = 2\n    b = 1\n    \n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Find the next Lucas number\n        lucas = (a**2 + b**2) ** 0.5\n        \n        # Update the values of a and b\n        a = b\n        b = lucas\n    \n    # Return the last Lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the nth lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Base case\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n\n    # Recursive case\n    lucas = find_lucas(n-1) + find_lucas(n-2)\n    return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) "
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_element = string.format(element)\n        formatted_list.append(formatted_element)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through each element in the list and apply the format string to it\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_ (list): A list of elements.\n    string (str): A format string to apply to each element in the list.\n\n    Returns:\n    list: A list of formatted elements.\n    \"\"\"\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # Loop through each list\n    for i in range(len(l1)):\n        # Create a new dictionary for the current element in the list\n        current_dict = {}\n        # Loop through each element in the inner list\n        for j in range(len(l2[i])):\n            # Add the current element to the current dictionary\n            current_dict[l2[i][j]] = l3[i][j]\n        # Add the current dictionary to the nested dictionary\n        nested_dict[l1[i]] = current_dict\n    # Return the final nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    \n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        sub_dict = {}\n        for j in range(len(l3)):\n            sub_key = l3[j]\n            sub_value = l3[j+1]\n            sub_dict[sub_key] = sub_value\n        result[key] = sub_dict\n        \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function converts more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(args):\n        if i == 0:\n            result = {lst[0]: lst[1]}\n        else:\n            result[lst[0]] = lst[1]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # initialize empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # loop through the lists and add them to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n\n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    \n    # loop through each list and convert it to a dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {'list2': l2[i], 'list3': l3[i]}\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        inner_dict = {}\n        for j in range(len(l2)):\n            inner_dict[l2[j]] = l3[i][j]\n        result.append(inner_dict)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, l in enumerate(lists):\n        for j, item in enumerate(l):\n            if isinstance(item, list):\n                if not item:\n                    result[i] = {}\n                else:\n                    sub_dict = {}\n                    for k, sub_item in enumerate(item):\n                        sub_dict[k] = sub_item\n                    result[i][j] = sub_dict\n            else:\n                result[i][j] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # convert the first list to a dictionary\n    d1 = {k: v for k, v in enumerate(l1)}\n    # convert the second list to a nested dictionary\n    d2 = {k: {f'{j}-{l2[j]}': v for j, v in enumerate(l2)} for k in range(len(l2))}\n    # convert the third list to a nested dictionary\n    d3 = {k: {f'{j}-{l3[j]}': {f'{l3[j][j]}': v for j, v in enumerate(l3)} for j, v in enumerate(l3)} for k in range(len(l3))}\n    # combine all dictionaries into a single dictionary\n    result = {**d1, **d2, **d3}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary with empty values\n    nested_dict = {}\n    # iterate through each list and add its values to the dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n <= 1:\n        return n\n    \n    # base case: n = 1\n    if n == 1:\n        return n\n    \n    # recursive case: f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 25\n    elif n == 5:\n        return 81\n    \n    # If n is greater than 5, we need to calculate the maximum sum using the given equation\n    # (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n    left_sum = get_max_sum(n/2)\n    mid_sum = get_max_sum(n/3)\n    right_sum = get_max_sum(n/4)\n    final_sum = max(left_sum + mid_sum + right_sum, n)\n    \n    return final_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    \n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n, a, b, c, d):\n        if n == 1:\n            return a + b + c + d\n        else:\n            mid = (n+1)//2\n            left_sum = helper(mid, a, b, c, d)\n            right_sum = helper(n-mid, a, b, c, d)\n            return max(left_sum, right_sum)\n\n    return helper(n, 0, 1, 2, 3)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n <= 1:\n        return n\n\n    # Recursive case\n    return max((get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    \n    elif n % 2 == 0:\n        return max(get_max_sum(n/2) + n, get_max_sum(n/2) + n/2)\n    \n    else:\n        return max(get_max_sum(n/2) + n, get_max_sum(n/2) + n/2) + n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = element\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize max_length and current_length variables\n    max_length = 0\n    current_length = 0\n\n    # Iterate through the list\n    for element in input_list:\n        # Increase current_length by 1 for each element in the list\n        current_length += 1\n        # If current_length becomes greater than max_length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return max_length\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list of numbers as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    # Loop through each element in the input list\n    for num in input_list:\n        # If the length of the current number is greater than the maximum length, update the max_length and max_list\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n            max_list = [num]\n        # If the length of the current number is equal to the maximum length, add the number to the max_list\n        elif len(str(num)) == max_length:\n            max_list.append(num)\n    \n    # Return the max_list with the maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    longest_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            longest_list = [item]\n        elif len(item) == max_length:\n            longest_list.append(item)\n\n    return longest_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple into a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns True if the tuple contains no duplicates,\n    otherwise it returns False.\n    \"\"\"\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = set(test_tup)\n    return len(test_tup) == len(unique_elements)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store the unique elements in the tuple\n    unique_set = set(test_tup)\n    # check if the set is empty, which means all the elements are unique\n    if not unique_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    \n    for char in str1:\n        if char in char_dict:\n            char_dict[char] = char_dict[char] + 1\n        else:\n            char_dict[char] = 1\n    \n    for char in char_dict:\n        if char_dict[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in it.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character.\n    \"\"\"\n    count = {}  # create an empty dictionary to store the count of each character in the string\n    for char in str1:\n        if char in count:\n            count[char] += 1  # if the character is already in the dictionary, increment its count by 1\n        else:\n            count[char] = 1  # if the character is not in the dictionary, add it with a count of 1\n    for char in str1:\n        if count[char] == 1:  # check if the count of the character is 1, which means it is the first non-repeating character\n            return char\n    return \"No non-repeating characters found.\"  # if no non-repeating characters are found, return a message\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the characters and their frequency\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Find the first non-repeated character\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Convert the string to a dictionary to count the occurrences of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeating character by iterating through the dictionary and returning the first key\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    # iterate through the string and update the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # find the first character with a frequency of 1 in the dictionary\n    for char, count in freq.items():\n        if count == 1:\n            return char\n    # if no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeating character in a given string.\n\n    Args:\n    str1 (str): The string to search in.\n\n    Returns:\n    int: The index of the first non-repeating character in str1, or -1 if no such character is found.\n    \"\"\"\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for i, char in enumerate(str1):\n        if char_count[char] == 1:\n            return i\n\n    return -1"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # check if the string matches the regular expression pattern\n    if re.match(regex, string):\n        # split the string into two parts based on the first character\n        first, second = string.split(string[0])\n        # if the first part is empty, the string starts with an uppercase character\n        if not first:\n            return second.isupper()\n        # if the second part is empty, the string ends with an uppercase character\n        elif not second:\n            return first.isupper()\n        # if the first and second parts are not empty, the string starts with the same character\n        else:\n            return first == second\n    # if the string does not match the regular expression pattern, return None\n    else:\n        return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Calculate the length of the sorted list\n    n = len(sorted_list)\n    \n    # If the length is odd, the median is the middle element\n    if n % 2 == 1:\n        median = sorted_list[n//2]\n    \n    # If the length is even, the median is the average of the two middle elements\n    else:\n        median = (sorted_list[n//2-1] + sorted_list[n//2]) / 2\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the given numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the median\n    if len(nums) % 2 == 0:\n        # If the length of the sorted list is even, take the average of the two middle numbers\n        median = (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        # If the length of the sorted list is odd, take the middle number\n        median = nums[len(nums) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the three numbers in ascending order\n    a = sorted([a,b,c])\n    # Finding the middle number\n    if len(a) % 2 == 0:\n        middle = (a[len(a)//2] + a[len(a)//2 - 1])/2\n    else:\n        middle = a[len(a)//2]\n    # Returning the median\n    return middle"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n\n    # Calculate the median\n    median = sorted_numbers[len(sorted_numbers)//2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers using the median_numbers() function.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(nums)\n    if n % 2 == 0:\n        median = (nums[n//2-1] + nums[n//2]) / 2\n    else:\n        median = nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # sorting the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # finding the middle index\n    middle = len(numbers)//2\n\n    # finding the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[middle-1] + numbers[middle]) / 2\n    else:\n        median = numbers[middle]\n\n    # printing the result\n    print(\"The median of the three numbers is:\", median)"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # First, sort the three numbers\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n\n    # Now, calculate the median\n    if (a + b) == c or (b + c) == a or (c + a) == b:\n        return (a + b + c) / 3\n    else:\n        return a + (b - a) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the sorted list\n    length = len(sorted_numbers)\n\n    # Check if the length of the list is odd or even\n    if length % 2 == 0:\n        # Find the average of the two middle numbers\n        middle_index = length // 2\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        # Find the middle number\n        middle_index = length // 2\n        median = sorted_numbers[middle_index]\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        if isinstance(num, int):\n            total += sum(int(digit) for digit in str(num))\n        else:\n            print(f\"{num} is not an integer.\")\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total_sum += sum(digits)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        # convert the number to a string and split it into digits\n        digit_list = [int(digit) for digit in str(num)]\n        # sum the digits and add it to the running total\n        digit_sum += sum(digit_list)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits\n    sum_digits = []\n\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into a list of characters\n        num_str = str(num)\n        # initialize a variable to store the sum of digits\n        digit_sum = 0\n        # loop through each character in the string\n        for char in num_str:\n            # convert the character to an integer and add it to the sum of digits\n            digit_sum += int(char)\n        # add the sum of digits to the total sum of digits\n        sum_digits.append(digit_sum)\n\n    # return the total sum of digits\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        digit_sum = sum(digits)\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum_digits = 0\n    for num in nums:\n        # convert the number to a string and then sum its digits\n        num_str = str(num)\n        sum_digits += sum(int(digit) for digit in num_str)\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        total_sum += digits_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = 0\n    for num in nums:\n        # Convert the number to a string and convert each character to its integer value\n        num_str = str(num)\n        num_list = list(map(int, num_str))\n        # Add up the digits of the number\n        num_sum = sum(num_list)\n        digits_sum += num_sum\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        digits = list(str(num))\n        total += sum(int(d) for d in digits)\n    return total"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert each tuple to a list\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # Loop through each element in the lists\n    for i in range(len(tup1_list)):\n        # Perform the bitwise xor operation on the elements\n        tup1_list[i] ^= tup2_list[i]\n\n    # Convert the resulting list back to a tuple and return it\n    return tuple(tup1_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Perform bitwise xor of the i-th element of the first tuple with the i-th element of the second tuple\n        result.append(test_tup1[i] ^ test_tup2[i])\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    return tuple(int(a) ^ int(b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must be equal to perform bitwise XOR.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Create a set of tuples to store the XOR of each element in the two input tuples\n    xor_set = set()\n    for tup1_elem in test_tup1:\n        for tup2_elem in test_tup2:\n            # Perform the bitwise XOR operation on the elements of the two input tuples\n            xor_elem = tup1_elem ^ tup2_elem\n            # Add the XOR of the elements to a set to remove duplicates\n            xor_set.add(xor_elem)\n    # Convert the set to a tuple to return the result\n    xor_tup = tuple(xor_set)\n    return xor_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    \n    # iterate over each element in both tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation on the two elements\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        # append the result to the result list\n        result.append(xor_result)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    \n    # iterate through the tuples and perform the bitwise xor operation\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # XOR each element of the two tuples together using bitwise AND operator\n    xor_result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert both tuples to lists so that they can be indexed\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Perform the bitwise xor operation for each pair of elements in the lists\n    for i in range(len(list1)):\n        list1[i] ^= list2[i]\n\n    # Convert the resulting list back to a tuple and return it\n    return tuple(list1)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store the unique tuples in the list\n    unique_tuples = set(test_list)\n    # return the length of the set as the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    unique_tuples = set(test_list)\n    num_unique_tuples = len(unique_tuples)\n\n    return num_unique_tuples\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty dictionary to store the frequency of unique tuples\n    freq_dict = {}\n    \n    # loop through each tuple in the list\n    for i in test_list:\n        # check if the tuple is already in the dictionary\n        if i not in freq_dict:\n            # if not, add it and set its frequency to 1\n            freq_dict[i] = 1\n        # if the tuple is already in the dictionary, increment its frequency\n        else:\n            freq_dict[i] += 1\n    \n    # return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # create a set to store unique tuples\n    unique_tuples = set()\n    \n    # iterate through the list of tuples\n    for tup in test_list:\n        # add the tuple to the set\n        unique_tuples.add(tup)\n    \n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as an input and returns the number of unique tuples in the list.\n    '''\n    # Creating a set to store unique tuples\n    unique_tuples = set()\n\n    # Looping through the list and appending each tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n\n    # Returning the size of the set\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if (item[0], item[1]) in freq_dict:\n            freq_dict[(item[0], item[1])] += 1\n        else:\n            freq_dict[(item[0], item[1])] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in freq_dict:\n            # Increment the frequency of the tuple by 1\n            freq_dict[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a frequency of 1\n            freq_dict[tup] = 1\n    # Return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if (item,) in freq_dict:\n            freq_dict[(item,)] += 1\n        else:\n            freq_dict[(item,)] = 1\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    unique_freq = len(freq_dict.keys())\n    return unique_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_set = set()\n\n    # Iterate through the list and add each tuple to the set\n    for tup in test_list:\n        unique_set.add(tup)\n\n    # Return the length of the set as the frequency of unique tuples\n    return len(unique_set)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the two input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same number of elements\")\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element is a tuple\n        if isinstance(test_tup1[i], tuple):\n            # If it is, check if it is a nested tuple\n            if isinstance(test_tup1[i], tuple):\n                # If it is, recursively call the function to perform index-wise addition of the nested tuples\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                # If it is not a nested tuple, raise an error\n                raise ValueError(\"All elements of the first tuple should be tuples or other nested tuples\")\n        else:\n            # If it is not a tuple, add it to the result list\n            result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp_list = []\n        for j in range(len(test_tup1[i])):\n            temp_list.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp_list))\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(row)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize the result tuple\n    result_tup = ()\n    # loop through each element in the two input tuples\n    for i in range(len(test_tup1)):\n        # append the elementwise addition of the corresponding elements of the input tuples to the result tuple\n        result_tup += (test_tup1[i] + test_tup2[i], )\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of both tuples should be the same.\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] + test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the resultant tuple\n    result_tup = ()\n\n    # Traverse through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Append the element at the current index to the resultant tuple\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as inputs and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as inputs and returns the minimum of those two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element exists\")\n    else:\n        print(\"Element does not exist\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for i in tuplex:\n        if i in tuple1:\n            print(i,\"exists in tuple1\")\n        else:\n            print(i,\"does not exist in tuple1\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f'{tuplex} is found in {tuple1}')\n    else:\n        print(f'{tuplex} is not found in {tuple1}')"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    # Check if the length of the two tuples is equal\n    if len(tuplex) == len(tuple1):\n\n        # Iterate through each element in the first tuple\n        for elem1 in tuple1:\n\n            # Check if the element exists in the second tuple\n            if elem1 in tuplex:\n                return True\n\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    for element in tuple1:\n        if element == tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer as input and returns \"Odd\" if the parity of the number is odd and \"Even\" if it is even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        print(\"The parity of the number is even.\") \n    else: \n        print(\"The parity of the number is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    # Check if the input is a positive integer\n    if type(x)!= int or x < 0:\n        print(\"Invalid input\")\n    else:\n        # Calculate the parity of the input number\n        parity = (x % 2)\n\n        # Output the result\n        if parity == 0:\n            print(x, \"is even.\")\n        else:\n            print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # checking whether the given number is even or odd\n    if x % 2 == 0:\n        # if the number is even, the parity is even\n        return \"Even number, parity is even\"\n    else:\n        # if the number is odd, the parity is odd\n        return \"Odd number, parity is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Initialize the parity variable to False\n    parity = False\n    \n    # Check if the number is even or odd\n    if x % 2 == 0: \n        # If the number is even, set parity to True\n        parity = True\n    \n    # Return the parity value\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2\n    if parity == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # checks if x is even\n        return True\n    else: # if x is odd\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f'{x} is even')\n    else:\n        print(f'{x} is odd')"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Reverse the list of digits\n    digits.reverse()\n    # Find the first non-zero digit\n    i = 0\n    while digits[i] == 0:\n        i += 1\n    # Check if the first non-zero digit is already the largest digit\n    if digits[i] > digits[0]:\n        return None\n    # Find the index of the first non-zero digit\n    j = 0\n    while j < i and digits[j] == 0:\n        j += 1\n    # Swap the digits at the index of the first non-zero digit and the first digit\n    digits[i], digits[j] = digits[j], digits[i]\n    # Convert the list of digits back to a string and return it\n    return ''.join(map(str, digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # convert the given number to a string\n    num = str(n)\n\n    # reverse the string\n    reversed_num = num[::-1]\n\n    # create a dictionary to store the position of each digit in the reversed string\n    digit_positions = {}\n    for i, digit in enumerate(reversed_num):\n        if digit not in digit_positions:\n            digit_positions[digit] = []\n        digit_positions[digit].append(i)\n\n    # create a list of possible next bigers\n    next_bigers = []\n\n    # loop through each digit position\n    for digit_num, positions in digit_positions.items():\n        # check if the digit has a greater position than the previous digits\n        if positions and positions[0] > positions[1]:\n            # find the next bigger number by shifting the positions of the digits\n            next_num = reversed_num[0:positions[0]] + reversed_num[positions[1]+1:]\n            next_bigers.append(int(next_num))\n\n    # sort the list of next bigers in ascending order\n    next_bigers.sort()\n\n    # return the first next bigger number\n    return next_bigers[0]"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Get the digits of the number\n    digits = [int(d) for d in str(n)]\n    \n    # Find the digits that are greater than 9\n    greater_than_9 = [d for d in digits if d > 9]\n    \n    # Find the digits that are smaller than or equal to 9\n    smaller_than_or_equal_to_9 = [d for d in digits if d <= 9]\n    \n    # Find the digits that are greater than or equal to 10\n    greater_than_or_equal_to_10 = [d for d in digits if d >= 10]\n    \n    # Concatenate the three lists\n    concatenated_digits = greater_than_or_equal_to_10 + smaller_than_or_equal_to_9 + greater_than_9\n    \n    # Convert the list of digits back to a string\n    next_bigger_number = ''.join(str(d) for d in concatenated_digits)\n    \n    # Convert the next bigger number to an integer\n    next_bigger_number = int(next_bigger_number)\n    \n    # Return the next bigger number\n    return next_bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Reverse the string\n    num_str = num_str[::-1]\n\n    # Calculate the length of the string\n    length = len(num_str)\n\n    # Initialize the result number\n    result = 0\n\n    # Iterate over each digit of the reversed string\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Calculate the number of digits that are smaller than the current digit\n        count = 0\n        for i in range(length):\n            if num_str[i] < digit:\n                count += 1\n                if count == digit_int:\n                    break\n\n        # Calculate the new number by adding the current digit to the count of digits that are smaller than the current digit\n        new_digit = int(digit) + count\n\n        # Add the new digit to the result number\n        result = result * 10 + new_digit\n\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # convert the input number to a string\n    s = str(n)\n\n    # initialize the result string\n    result = \"\"\n\n    # iterate over the digits of the input number\n    for i in range(len(s)):\n        # calculate the next bigger digit\n        next_bigger = int(s[i]) + 1\n        # check if the next bigger digit is less than 10\n        if next_bigger < 10:\n            # add the next bigger digit to the result string\n            result += str(next_bigger)\n        # if the next bigger digit is 10 or greater, we need to increase the next one\n        else:\n            # calculate the next digit to the left of the current digit\n            prev_digit = int(s[i-1])\n            # check if the next digit to the left of the current digit is 0\n            if prev_digit == 0:\n                # add 10 to the next digit to the left of the current digit\n                next_digit = 10\n            # if the next digit to the left of the current digit is not 0, we need to subtract 1 from it\n            else:\n                next_digit = prev_digit - 1\n            # add the next digit to the result string\n            result += str(next_digit)\n\n    # convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize the list of digits in the input number\n    digits = [int(d) for d in str(n)]\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Create a new list of digits where the digits of the original number are in the same order\n    new_digits = digits\n\n    # Iterate through the digits of the original number and append the next digit to the new list\n    for i in range(len(digits)):\n        if i == len(digits) - 1:\n            new_digits.append(digits[i])\n            break\n        new_digits.append(digits[i] + 1)\n\n    # Convert the new list of digits to a string and return it as the next bigger number\n    return int(''.join(map(str, new_digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # reverse the string\n    reversed_num_str = num_str[::-1]\n    # convert the reversed string back to a number\n    reversed_num = int(reversed_num_str)\n    # find the maximum digit in the number\n    max_digit = max(reversed_num_str)\n    # create a new number with the maximum digit moved to the end\n    new_num = reversed_num // 10**max_digit * (10**max_digit + 1) + reversed_num % 10**max_digit\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize an empty string to store the rearranged digits\n    rearranged_digits = ''\n    \n    # Convert the given number to a string\n    n_str = str(n)\n    \n    # Iterate over the digits of the number in reverse order\n    for i in range(len(n_str)-1, -1, -1):\n        # Add the current digit to the rearranged digits string\n        rearranged_digits += n_str[i]\n        \n        # Check if the current digit is 9\n        if int(n_str[i]) == 9:\n            # Add the next digit (0 or 1) to the rearranged digits string\n            rearranged_digits += str(int(n_str[i])+1)\n    \n    # Convert the rearranged digits string to an integer\n    next_bigger = int(rearranged_digits)\n    \n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    def swap(num, i, j):\n        num[i], num[j] = num[j], num[i]\n\n    def rearrange(num):\n        i, j = 0, len(num) - 1\n        while i < j:\n            while i < j and num[i] < num[i + 1]:\n                i += 1\n            while i < j and num[j] > num[i]:\n                j -= 1\n            if i < j:\n                swap(num, i, j)\n        return num\n\n    num_str = str(n)\n    num = [int(c) for c in num_str]\n    rearranged = rearrange(num)\n    result = int(''.join(str(c) for c in rearranged))\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num = str(n)\n    reversed_num = num[::-1]\n    next_bigger_num = ''\n    for digit in reversed_num:\n        if digit == '9':\n            next_bigger_num = next_bigger_num + '1'\n        elif digit == '8':\n            next_bigger_num = next_bigger_num + '6'\n        elif digit == '7':\n            next_bigger_num = next_bigger_num + '0'\n        elif digit == '6':\n            next_bigger_num = next_bigger_num + '9'\n        elif digit == '5':\n            next_bigger_num = next_bigger_num + '5'\n        elif digit == '4':\n            next_bigger_num = next_bigger_num + '2'\n        elif digit == '3':\n            next_bigger_num = next_bigger_num + '4'\n        elif digit == '2':\n            next_bigger_num = next_bigger_num + '8'\n        elif digit == '1':\n            next_bigger_num = next_bigger_num + '3'\n        else:\n            next_bigger_num = next_bigger_num + '7'\n    return int(next_bigger_num)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert lists to sets to get unique elements\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n\n    # Initialize two heaps - one for nums1 and one for nums2\n    min_heap1 = []\n    max_heap2 = []\n\n    # Iterate through the sets and add elements to heaps\n    for num1 in nums1_set:\n        heapq.heappush(min_heap1, num1)\n\n    for num2 in nums2_set:\n        if not min_heap1 or num2 >= min_heap1[0]:\n            heapq.heappush(max_heap2, num2)\n            if len(max_heap2) == k:\n                heapq.heappop(min_heap1)\n\n    # Create a result list and add the k smallest pairs\n    result = []\n    while max_heap2 and k > 0:\n        num1, num2 = heapq.heappop(max_heap2), heapq.heappop(min_heap1)\n        result.append((num1, num2))\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    min_heap = []\n\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (-nums1[i], i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n\n    for j in range(len(nums2)):\n        while len(min_heap) < k and heap[0][1] < j:\n            heapq.heappush(min_heap, -heapq.heappop(heap)[0])\n\n        if len(min_heap) > 0 and -heapq.heappop(min_heap) > nums2[j]:\n            heapq.heappush(min_heap, -heapq.heappop(heap)[0])\n\n        if len(min_heap) == k:\n            if -heap[0][0] > nums1[heap[0][1]]:\n                return []\n\n            if -heap[0][0] < nums1[heap[0][1]]:\n                return [-nums1[heap[0][1]], nums2[j]]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap of size k to store the smallest k pairs\n    min_heap = []\n\n    # Iterate over the first array\n    for num1 in nums1:\n        # Calculate the minimum value in the second array that can be added to the current element of the first array\n        min_val = float('inf')\n        for num2 in nums2:\n            if num1 + num2 < min_val:\n                min_val = num1 + num2\n        \n        # If the size of the min heap is less than k, add the pair to the min heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (-num1, num1, min_val))\n        \n        # If the size of the min heap is equal to k, compare the smallest value in the heap with the current value of min_val\n        elif len(min_heap) == k:\n            if (-min_heap[0][0], min_heap[0][1], -min_heap[0][2]) > (-num1, num1, min_val):\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (-num1, num1, min_val))\n        \n        # If the size of the min heap is greater than k, compare the smallest value in the heap with the current value of min_val\n        else:\n            if (-min_heap[0][0], min_heap[0][1], -min_heap[0][2]) > (-num1, num1, min_val):\n                heapq.heappop(min_heap)\n    \n    # Extract the k pairs from the min heap and return them\n    pairs = []\n    for i in range(k):\n        pair = (-heapq.heappop(min_heap), nums1[heapq.heappop(min_heap)[1]])\n        pairs.append(pair)\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # sort the two arrays\n    nums1.sort()\n    nums2.sort()\n    # initialize the min heap of size k\n    min_heap = []\n    # initialize two pointers for the two arrays\n    i, j = 0, 0\n    # initialize the count of pairs\n    count = 0\n    # loop while count is less than k\n    while count < k:\n        # if the current element of nums1 is less than the current element of nums2\n        if i < len(nums1) and (j == 0 or nums1[i] > nums2[j-1]):\n            # add the pair (nums1[i], nums2[j]) to the min heap\n            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            # increment the count of pairs\n            count += 1\n            # increment i\n            i += 1\n        # if the current element of nums2 is less than the current element of nums1\n        elif j < len(nums2) and (i == 0 or nums2[j] > nums1[i-1]):\n            # add the pair (nums2[j], nums1[i]) to the min heap\n            heapq.heappush(min_heap, (nums2[j], nums1[i]))\n            # increment the count of pairs\n            count += 1\n            # increment j\n            j += 1\n        # if the current element of nums1 is greater than the current element of nums2\n        elif i < len(nums1) and j < len(nums2) and nums1[i] < nums2[j]:\n            # decrement i\n            i += 1\n        # if the current element of nums2 is greater than the current element of nums1\n        else:\n            # decrement j\n            j += 1\n    # initialize the result list\n    result = []\n    # loop while there are elements in the min heap\n    while min_heap:\n        # extract the smallest pair from the min heap\n        pair = heapq.heappop(min_heap)\n        # add the pair to the result list\n        result.append(pair)\n    # return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap to store the smallest k elements\n    min_heap = []\n\n    # Loop through the first array\n    for num1 in nums1:\n        # Create a list to store pairs of the current number in the first array\n        pairs = []\n        # Loop through the second array\n        for num2 in nums2:\n            # Calculate the pair and add it to the list of pairs if it's smaller than or equal to the smallest element in the heap\n            pair = (num1, num2)\n            if len(pairs) < k or pair[0] <= min_heap[0][0]:\n                heapq.heappush(min_heap, pair)\n                # If the size of the heap is greater than k, remove the smallest element from the heap\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n            # If the heap size is equal to k, add the pair to the result list\n            else:\n                pairs.append(pair)\n        # Add the list of pairs to the result list\n        result.append(pairs)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k, which will be used to store the pairs\n    min_heap = []\n    \n    # Loop through the first array and find the minimum element for each pair\n    for i in range(len(nums1)):\n        min_heapq = []\n        for j in range(len(nums2)):\n            # Calculate the sum of the current elements and add it to the min heap\n            current_sum = nums1[i] + nums2[j]\n            heapq.heappush(min_heapq, current_sum)\n            \n            # If the size of the min heap is greater than k, remove the smallest element from the heap\n            if len(min_heapq) > k:\n                heapq.heappop(min_heapq)\n            \n            # If the size of the min heap is equal to k, add the pair to the result list\n            if len(min_heapq) == k:\n                pair = (nums1[i], nums2[j])\n                result.append(pair)\n                \n    # Return the list of pairs\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    # create a heap of size k with the smallest element at the top\n    for num in nums1:\n        heapq.heappush(min_heap, (num, float('-inf')))\n    # iterate through the second array and update the heap\n    for num in nums2:\n        # if the heap is not empty and the smallest element is greater than the current number\n        if min_heap and min_heap[0][0] > num:\n            # remove the smallest element from the heap\n            heapq.heappop(min_heap)\n        # if the heap is not full, add the current number to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num, float('inf')))\n        # if the heap is full, but the smallest element is greater than the current number\n        elif len(min_heap) == k and min_heap[0][0] > num:\n            # replace the smallest element with the current number in the heap\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (num, float('inf')))\n    # create a list to store the result\n    result = []\n    # iterate through the heap and add the smallest k pairs to the result\n    while min_heap and len(result) < k:\n        pair = min_heap[0]\n        heapq.heappop(min_heap)\n        # if the pair is not the same as the last pair, add it to the result\n        if result or pair!= result[-1] or result[-1]!= min_heap[0]:\n            result.append(pair)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap to store the indices of the elements in the first array\n    heap = [(0, nums1[0])]\n    \n    # initialize a dictionary to store the distances between elements of the first array\n    distances = {0: 0}\n    \n    # loop through the second array\n    for i in range(1, len(nums2)):\n        # check if the element at index i is smaller than the smallest element in the heap\n        if nums2[i] < heap[0][1]:\n            # if it is, update the heap to include this element and update the distances dictionary\n            heapq.heappushpop(heap, (i, nums2[i]))\n            distances[i] = 0\n        else:\n            # if it's not, check if we can combine the two smallest elements in the heap to form a new pair\n            smallest = heapq.heappop(heap)\n            heapq.heappush(heap, (smallest[0], smallest[1] + nums2[i]))\n            distances[i] = smallest[1] + 1\n            \n        # if we have found k pairs, break out of the loop\n        if len(heap) == k:\n            break\n        \n    # extract the k smallest pairs from the distances dictionary\n    result = []\n    for i in range(k):\n        result.append((nums1[0], nums2[i], distances[i]))\n        \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, (-num, None))\n\n    result = []\n    while k > 0 and heap:\n        num1, index1 = heapq.heappop(heap)\n        k -= 1\n        if index1 is not None:\n            for num2 in nums2[index1+1:]:\n                heapq.heappush(heap, (-num1-num2, index1+1))\n                result.append((num1, num2))\n                k -= 1\n                if k == 0:\n                    break\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    # Use a dictionary to store the indices of the elements in nums1\n    idx_dict = {}\n    for i in range(len(nums1)):\n        # If the heap is full, pop the smallest element from the heap\n        if len(min_heap) == k:\n            heapq.heappop(min_heap)\n        # If the current element is smaller than the smallest element in the heap, push it and update the indices in the dictionary\n        if nums1[i] < min_heap[0]:\n            heapq.heappush(min_heap, nums1[i])\n            idx_dict[nums1[i]] = i\n        # If the current element is equal to the smallest element in the heap, push it and update the indices in the dictionary\n        elif nums1[i] == min_heap[0]:\n            heapq.heappush(min_heap, nums1[i])\n            idx_dict[nums1[i]] = i\n    \n    # Initialize the result list\n    result = []\n    # Use the indices in the dictionary to find the k smallest pairs\n    for j in range(len(nums2)):\n        # If the heap is full, pop the smallest element from the heap\n        if len(min_heap) == k:\n            heapq.heappop(min_heap)\n        # If the current element is smaller than the smallest element in the heap, push it and update the indices in the dictionary\n        if nums2[j] < min_heap[0]:\n            heapq.heappush(min_heap, nums2[j])\n            idx_dict[nums2[j]] = j\n        # If the current element is equal to the smallest element in the heap, push it and update the indices in the dictionary\n        elif nums2[j] == min_heap[0]:\n            heapq.heappush(min_heap, nums2[j])\n            idx_dict[nums2[j]] = j\n    \n    # Initialize the result list\n    pairs = []\n    # Iterate through the k smallest pairs in the dictionary\n    for i in range(len(min_heap)):\n        # Check if the current element is in the dictionary\n        if min_heap[i] in idx_dict:\n            # Check if the current element has already been added to the result list\n            if min_heap[i] not in pairs:\n                # If the current element is already in the result list, find the corresponding elements in nums1 and nums2\n                if idx_dict[min_heap[i]] > j:\n                    # If the index of the current element in nums1 is greater than the index of the element in nums2, the current element is a pair\n                    pairs.append([min_heap[i], nums1[idx_dict[min_heap[i]]], nums2[j]])\n                else:\n                    # If the index of the current element in nums1 is less than or equal to the index of the element in nums2, the current element is a pair\n                    pairs.append([nums1[i], nums2[j], min_heap[i]])\n    \n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize min_product to a large number\n    min_product = float('inf')\n    \n    # loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # update min_product if the product is smaller than the current minimum\n            if product < min_product:\n                min_product = product\n    \n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the tuples.\n    The minimum product of the tuples is calculated by finding the product of the two smallest tuples in the list.\n    '''\n    min_product = float('inf')\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            prod = 1\n            for k in range(n):\n                if k == i or k == j:\n                    continue\n                prod *= list1[k][k]\n            if prod < min_product:\n                min_product = prod\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product from the pairs of tuples within the list.\n    \"\"\"\n    # initialize the minimum product as infinity\n    min_product = float('inf')\n    # iterate over each tuple in the list\n    for i in range(len(list1)):\n        # iterate over the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # if the product is less than the current minimum product, update the minimum product\n            if product < min_product:\n                min_product = product\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Define a function to calculate the product of two numbers\n    def multiply(a, b):\n        return a * b\n\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Loop through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuple elements\n            product = multiply(list1[i][0], list1[j][1])\n\n            # Update the minimum product if the new product is less than the current minimum\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            for k in range(len(list1[i][j])):\n                if list1[i][j][k] < min_product:\n                    min_product = list1[i][j][k]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and finds the minimum product of all pairs of tuples in the list.\n    '''\n    minimum = float('inf')\n    result = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] < list1[j][0] and list1[i][1] < list1[j][1]:\n                prod = list1[i][0] * list1[j][1]\n            else:\n                prod = list1[j][0] * list1[i][1]\n            if prod < minimum:\n                minimum = prod\n                result = (list1[i], list1[j])\n\n    return result, minimum"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes in a list of heterogeneous values and returns the minimum value in the list.\n    \"\"\"\n    if not listval:\n        return None\n    \n    min_val = listval[0]\n    for val in listval:\n        if type(val)!= type(min_val):\n            return None\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if isinstance(listval, list):\n        min_val = float('inf')\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val\n    else:\n        return None"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # check if the list is empty\n    if not listval:\n        return \"Error: List is empty\"\n    \n    # find the minimum value in the list\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"The given list is empty.\")\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Parameters\n    ----------\n    listval : list\n        A list of values. Each value can have a different data type.\n\n    Returns\n    -------\n    min_val : object\n        The minimum value in the list.\n\n    Examples\n    --------\n    >>> min_val([1, \"2\", 3.0, True, \"four\"])\n    True\n    >>> min_val([\"apple\", \"banana\", \"cherry\"])\n    'apple'\n    \"\"\"\n    # Initialize a variable to hold the minimum value found so far\n    min_val = listval[0]\n    # Loop over each element in the list\n    for elem in listval[1:]:\n        # If the current element is less than the current minimum, update the minimum\n        if elem < min_val:\n            min_val = elem\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize minimum value variable\n    min_val = listval[0]\n    # Iterate through the list and update the minimum value if a smaller value is found\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for value in listval:\n        if value < min_val:\n            min_val = value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize minimum value to the first value in the list\n    min_val = listval[0]\n\n    # Iterate through the list and compare each value with the minimum value found so far\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Splitting the word by snake case\n    snake_case_words = re.findall(r'[a-z]+', word.lower())\n\n    # Converting the snake case words to camel case\n    camel_case_words = [word.capitalize() for word in snake_case_words]\n\n    # Joining the camel case words with a space\n    camel_case_word =''.join(camel_case_words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # split the word into individual words using regex\n    words = re.findall(r'\\w+', word)\n    # convert each word to camel case and join them back together\n    result = ''.join([w.capitalize() for w in words])\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('(_[a-z])')\n    camel_case_word = pattern.sub(lambda match: match.group(1).upper(), word)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first_char = word[0]\n    return first_char.lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for char in word:\n        if char.isupper():\n            camel_case += char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = re.sub('([A-Z])', r'_\\1', word)\n    return camel_word.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([word[:i]+word[i].upper()+(i!=len(word)-1 and '_' or '') for i in range(len(word)) if word[i]!='_'])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].lower()\n        elif word[i].isupper():\n            result += '_' + word[i].lower()\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(\\w)')\n    result = pattern.sub(lambda match: match.group(1).upper(), word)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # initialize an empty list to hold the odd numbers\n    odd_numbers = []\n    # loop through the list\n    for num in l:\n        # if the number is odd, append it to the odd_numbers list\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    # return the odd_numbers list\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element of the list.\n    '''\n    if n > len(list1):\n        raise ValueError(\"The given index is greater than the length of the list.\")\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Extract the nth element from the list\n    nth_element = list1[n-1]\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize an empty list to store the nth element of the list\n    nth_element = []\n    \n    # Loop through each tuple in the list\n    for item in list1:\n        # Check if the length of the tuple is greater than or equal to n\n        if len(item) >= n:\n            # If it is, add the nth element of the tuple to the empty list\n            nth_element.append(item[n-1])\n    \n    # Return the list of nth elements\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if the given list is a list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise ValueError(\"Input must be a list of tuples\")\n    \n    # Check if the nth element exists in the list\n    if n > len(list1):\n        raise ValueError(\"The nth element does not exist in the list\")\n    \n    # Extract the nth element and return it\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # convert the list of tuples to a list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # extract the nth element of the flattened list\n    result = flat_list[n-1]\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        print(\"Invalid input: n should be less than or equal to the length of the list.\")\n        return None\n    else:\n        return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1][0]\n    except IndexError:\n        print(\"Index out of range\")\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n\n    Args:\n        list1 (list of tuples): a list of tuples to extract from\n        n (int): the index of the element to extract\n\n    Returns:\n        the nth element from the list of tuples\n\n    Raises:\n        ValueError: if n is not a valid index for the list of tuples\n    '''\n    if n < 0 or n >= len(list1):\n        raise ValueError(\"Invalid index for list of tuples\")\n    return list1[n]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns a boolean value indicating whether there is any value in the first list that exists in the second list or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Initialize a set to store the values in list1\n    set1 = set(list1)\n    # Loop through list2 and check if any value exists in set1\n    for item in list2:\n        if item in set1:\n            return True\n    # If no values exist in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # convert the input sequences to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if there is any value in set1 that is also in set2\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    # checking if any value in list1 exists in list2\n    for item in list1:\n        if item in list2:\n            return True\n    # if no overlapping value is found, return False\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    # Check if list1 is a subset of list2\n    for element in list1:\n        if element not in list2:\n            return False\n\n    # If no elements in list1 are in list2, then list1 must be a superset of list2\n    for element in list2:\n        if element not in list1:\n            return False\n\n    return True"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    product1 = max1 * min1\n    product2 = max2 * min2\n        \n    if product1 > product2:\n        return (max1, min1)\n    else:\n        return (max2, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num!= max1:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    if not arr: # base case: empty array\n        return None\n\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for num in arr[1:]:\n        current_product *= num\n        if current_product < 0:\n            current_product = num\n        if max_product < current_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize variables to store the maximum product and its indices\n    max_product = arr[0]\n    max_product_indices = [0]\n\n    # Iterate through the array and find the maximum product\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_product_indices = [i]\n        elif arr[i] * max_product > max_product:\n            max_product *= arr[i]\n            max_product_indices = [i]\n        else:\n            max_product_indices.append(i)\n\n    # Return the indices of the maximum product pair\n    return max_product_indices"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n\n    for i in range(2, len(arr)):\n        temp = max1\n        max1 = max(max1*arr[i], min1*arr[i])\n        min1 = min(temp*arr[i], min1*arr[i])\n\n        temp = max2\n        max2 = max(max2*arr[i], min2*arr[i])\n        min2 = min(temp*arr[i], min2*arr[i])\n\n    return max(max1, max2), min(min1, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # sorting the array\n    arr.sort()\n\n    # finding the product of the first two elements\n    product = arr[0] * arr[1]\n\n    # finding the maximum and minimum values\n    max_val = arr[-1]\n    min_val = arr[0]\n\n    # iterating through the array\n    for i in range(1, len(arr)-1):\n        # finding the product of the current element and the maximum element\n        curr_product = arr[i] * max_val\n        # updating the maximum value if the current product is greater\n        if curr_product > max_val:\n            max_val = curr_product\n\n        # finding the product of the current element and the minimum element\n        curr_product = arr[i] * min_val\n        # updating the minimum value if the current product is less\n        if curr_product < min_val:\n            min_val = curr_product\n\n    # returning the pair with the maximum product\n    return product, max_val"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max1:\n                max2 = max1\n                max1 = arr[i] * arr[j]\n            elif arr[i] * arr[j] > max2:\n                max2 = arr[i] * arr[j]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max1 = arr[-1] * arr[-2]\n    max2 = arr[0] * arr[1]\n    if max1 > max2:\n        return max1, max2\n    else:\n        return max2, max1"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    # Initialize two variables to store the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Iterate through the array and update the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            # Update the minimum value if the current value is negative\n            min_val = max_val\n            # Update the maximum value if the current value is positive\n            max_val = arr[i]\n        elif arr[i] > 0:\n            # Update the maximum value if the current value is positive\n            max_val = max(max_val * arr[i], arr[i])\n            # Update the minimum value if the current value is negative\n            min_val = min(min_val * arr[i], arr[i])\n        else:\n            # Update the minimum value if the current value is zero\n            min_val = max_val * arr[i]\n            # Update the maximum value if the current value is zero\n            max_val = min_val * arr[i]\n\n    # Return the pair with the highest product\n    return (max_val, min_val)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples where all tuples have the same first element.\n    '''\n    first_elements = set([x[0] for x in Input]) # get the first element of each tuple in the list\n    result = []\n    for first in first_elements: # loop through all the unique first elements\n        matched_tuples = [x for x in Input if x[0] == first] # get all the tuples with the same first element\n        result.append(tuple(sorted(x) for x in matched_tuples)) # sort the tuples and append them to the result list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    common_count = 0\n\n    for tuple_obj in Input:\n        if common_element is None:\n            common_element = tuple_obj[0]\n            common_count = 1\n        else:\n            if tuple_obj[0] == common_element:\n                common_count += 1\n            else:\n                common_element = None\n                common_count = 0\n\n    return common_element, common_count"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group = {}\n    for item in Input:\n        if item[0] in group:\n            group[item[0]].append(item)\n        else:\n            group[item[0]] = [item]\n    return group"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_list = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if Input[i][0] not in common_list:\n                    common_list.append(Input[i][0])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    first_set = set()\n    for tup in Input:\n        first_set.add(tup[0])\n    return first_set"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples \n    where each tuple contains the common first element of the input list.\n    '''\n    Common_Elements = []\n    for tuple1 in Input:\n        for tuple2 in Input:\n            if tuple1[0] == tuple2[0] and tuple1 not in Common_Elements and tuple2 not in Common_Elements:\n                Common_Elements.append((tuple1[0], tuple1[1], tuple1[2]))\n    return Common_Elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store common first element and its count\n    common_first_dict = {}\n\n    # Loop through each tuple in the list\n    for tup in Input:\n\n        # Get the first element of the tuple\n        first_element = tup[0]\n\n        # If the first element is already in the dictionary, increment its count by 1\n        if first_element in common_first_dict:\n            common_first_dict[first_element] += 1\n\n        # If the first element is not in the dictionary, add it with a count of 1\n        else:\n            common_first_dict[first_element] = 1\n\n    # Find the common first element with the highest count and its count\n    max_element = max(common_first_dict, key=common_first_dict.get)\n    max_count = common_first_dict[max_element]\n\n    # Return the common first element and its count\n    return (max_element, max_count)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = []\n    for item in Input:\n        if item[0] not in first_element:\n            first_element.append(item[0])\n    return first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0] and i!= j:\n                if common_element is None:\n                    common_element = i[0]\n                elif i[0] < common_element:\n                    common_element = i[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a set to store common elements\n    common_elements = set()\n\n    # iterate over each tuple in the list\n    for t in Input:\n        # get the first element of the tuple\n        element = t[0]\n        # add the element to the set if it is not already present\n        if element not in common_elements:\n            common_elements.add(element)\n\n    # convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(x) for x in lst)\n    return max(x for x in lst if len(x) == max_len)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list which has the maximum length.\n    '''\n\n    # Initialize variables\n    max_len = 0\n    max_elem = None\n\n    # Loop through the list and find the maximum length\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    # Return the maximum element\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = \"\" \n\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n\n    Parameters:\n    lst: list\n        A list of elements.\n\n    Returns:\n    The element of the list with the maximum length.\n\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Define the empty variable to store the maximum length\n    max_len = 0\n\n    # Define the empty variable to store the maximum element\n    max_elem = None\n\n    # Loop through the list\n    for i in lst:\n\n        # Calculate the length of the current element\n        len_i = len(str(i))\n\n        # If the length of the current element is greater than the maximum length, update both the maximum length and element\n        if len_i > max_len:\n            max_len = len_i\n            max_elem = i\n\n    # Return the maximum element\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round all the numbers in the list\n    list1 = [round(num) for num in list1]\n\n    # Calculate the total sum\n    total_sum = sum(list1)\n\n    # Multiply the total sum by the length of the list\n    product = total_sum * len(list1)\n\n    # Print the result\n    print(\"The total sum multiplied by the length of the list is:\", product)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round the numbers of the list\n    rounded_list = [round(num) for num in list1]\n\n    # Calculate the total sum\n    total_sum = sum(rounded_list)\n\n    # Multiply the total sum with the length of the list\n    result = total_sum * len(list1)\n\n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # convert all elements to float and round them to nearest integer\n    rounded_list = [round(num) for num in list1]\n    \n    # calculate the total sum\n    total_sum = sum(rounded_list)\n    \n    # print the result\n    print(total_sum * len(rounded_list))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initializing sum to 0\n    sum = 0\n\n    # iterating through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculating cube of i\n        c = i ** 3\n        # adding cube to sum\n        sum += c\n\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n\n    total = 0 \n    for i in range(2, n+1, 2): \n        total += i ** 3\n\n    return total"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    sum_cubes = 0\n    num = 2\n\n    while count < n:\n        sum_cubes += num ** 3\n        count += 1\n        num += 2\n\n    return sum_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n\n    # Initialize variables to keep track of the sum and the cube sum\n    sum_even = 0\n    cube_sum_even = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the even number\n        cube = i**3\n        \n        # Add the even number to the sum and cube sum\n        sum_even += i\n        cube_sum_even += cube\n    \n    # Return the sum and cube sum of the even natural numbers\n    return sum_even, cube_sum_even"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0: \n        return 0\n    else:\n        return (2*n*n*n + cube_Sum(n-1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = [i for i in range(1, n+1, 2)]\n    cube_sum = sum([i**3 for i in even_numbers])\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    sum_cube = 0\n    for i in range(2, n+1, 2):\n        sum_cube += i**3\n    return sum_cube"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_string = \"\"\n    for i in test_tup:\n        concatenated_string += str(i) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Define the delimiter to use\n    delimiter = \", \"\n    \n    # Join the tuple using the delimiter as the separator\n    concatenated_str = delimiter.join(str(x) for x in test_tup)\n    \n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for elem in test_tup:\n        concatenated_str += str(elem) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \",\".join(str(x) for x in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum_cubes += i**3\n        count += 1\n        \n    return sum_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n\n    return cube_sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**3\n    return total_sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initializing sum and count\n    sum = 0\n    count = 0\n\n    # iterating till n\n    for i in range(1, n+1):\n        # calculating cube of i\n        cube = i*i*i\n        # adding cube to sum\n        sum += cube\n        # incrementing count\n        count += 1\n\n    # finding average of cubes\n    average = sum / count\n\n    # printing average of cubes\n    print(\"Average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    \n    average = sum(cubes)/len(cubes)\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n    avg = sum_of_cubes/count\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n\n    for i in range(n+1):  \n        sum_of_cubes += i*i*i\n\n    average_of_cubes = sum_of_cubes / (n*n*n)\n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    #initialize sum and count to 0\n    sum = 0\n    count = 0\n    \n    #loop n times\n    for i in range(n):\n        #calculate cube of i\n        cube = i*i*i\n        #add cube to sum\n        sum += cube\n        #increment count\n        count += 1\n        \n    #calculate average of cubes and return result\n    return sum/count"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        result.append(element[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_element = string[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for string in test_tuple:\n        rear_indices.append(len(string)-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = ()\n    for string in test_tuple:\n        rear_tuple += (string[-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Iterate through each string in the tuple\n    for i, string in enumerate(test_tuple):\n        # Check if the current index is the last index in the tuple\n        if i == len(test_tuple) - 1:\n            # If it is, return the rear index element\n            return string\n        # If not, continue to the next string\n    # If we make it to this point, there was no rear index element\n    return None"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_strings = []\n    for string in test_tuple:\n        extracted_strings.append(string[-1])\n    return extracted_strings"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of integers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the date format\n    date_format = r'^\\d{4}-\\d{2}-\\d{2}$'\n    \n    # Check if the date format matches\n    if re.match(date_format, dt):\n        # Convert the date from yyyy-mm-dd to dd-mm-yyyy\n        new_date = '-'.join([dt[6:], dt[:4], dt[4:6]])\n        return new_date\n    else:\n        # Return the original date if the format does not match\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Use the pattern to search for all matches in the date string\n    matches = re.findall(pattern, dt)\n    \n    # If no matches are found, return the original date string as is\n    if len(matches) == 0:\n        return dt\n    \n    # Extract the first match and convert it to dd-mm-yyyy format\n    match = matches[0]\n    year = int(match[0:4])\n    month = int(match[5:7])\n    day = int(match[8:10])\n    date_str = '{:02d}-{:02d}-{:4d}'.format(day, month, year)\n    \n    # Return the converted date string\n    return date_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Find all matches of the pattern in the date string\n    matches = re.findall(pattern, dt)\n    # If no matches found, return the original date\n    if not matches:\n        return dt\n    # Convert the first match to dd-mm-yyyy format\n    return matches[0].replace('-', '/')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date = re.sub('-', '/', dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    result = pattern.sub(r'\\3-\\2-\\1', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # define the regex pattern for the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match the regex pattern in the input date string\n    match = re.match(pattern, dt)\n\n    # extract the groups from the matched regex pattern\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n\n    # convert the date from yyyy-mm-dd format to dd-mm-yyyy format\n    new_dt = day + '-' + month + '-' + year\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = int(match.group(1)), int(match.group(2)), int(match.group(3))\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Use the re.sub() function to replace all occurrences of the pattern with the desired format\n    return re.sub(pattern, lambda m: '{:%d-%m-%Y}'.format(m.group()), dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    new_format = r'\\d{2}-\\d{2}-\\d{4}'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Determine the length of the array\n    length = len(my_list)\n\n    # Define a gap sequence based on the length of the array\n    gap = length // 2\n    while gap > 0:\n        gap = gap // 2\n\n    # Do a gapped insertion sort for each gap size\n    for i in range(gap, length):\n        # Save the value being compared and its position\n        temp = my_list[i]\n        j = i\n\n        # Move elements of the array to the right until the correct position is found\n        while j >= gap and my_list[j - gap] > temp:\n            my_list[j] = my_list[j - gap]\n            j -= gap\n\n        # Insert the temp value at the correct position\n        my_list[j] = temp"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # The gap sequence is calculated by:\n    # gap = gap = n // 2 ^ 1\n\n    gap = n // 2\n    while gap > 0:\n        # Move the gap elements to the right\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                # Swap elements until the correct position is found\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Set the gap value to the length of the array divided by 2\n    gap = len(my_list) // 2\n\n    # Loop until the gap is less than or equal to 1\n    while gap > 0:\n        # Loop through the array using the gap value\n        for i in range(gap, len(my_list)):\n            # Set the current element as a temporary variable\n            temp = my_list[i]\n\n            # Move the elements greater than the gap to the right by the gap value\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            # Place the current element at its correct position in the array\n            my_list[j] = temp\n\n        # Decrease the gap value by 1\n        gap = gap // 2\n\n    # Return the sorted array\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap such that gap*10 < n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Insertion sort for this gap size\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Decrease gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns their elementwise and tuple.\n    \"\"\"\n    # Using zip function to iterate over the tuples and create a new tuple with elementwise and values\n    and_tup = tuple(zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must be the same length.')\n\n    # Use list comprehension to extract elementwise and tuples\n    and_tup = [(x1 & x2) for x1, x2 in zip(test_tup1, test_tup2)]\n\n    # Return the and_tup tuple\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Loop through the tuples and extract the elementwise and\n    and_list = []\n    for i in range(len(test_tup1)):\n        and_list.append(test_tup1[i] & test_tup2[i])\n    \n    # Return the and_list as a tuple\n    return tuple(and_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the output tuple with the same number of elements as the input tuples\n    output_tup = (test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1], test_tup1[2] & test_tup2[2], test_tup1[3] & test_tup2[3])\n    return output_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup += (test_tup1[i], test_tup2[i])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the elementwise and tuples\n    and_tups = []\n    \n    # Loop through the tuples and append the elementwise and tuple to the list\n    for i in range(len(test_tup1)):\n        and_tup = (test_tup1[i] & test_tup2[i])\n        and_tups.append(and_tup)\n        \n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(*[map(lambda x: x[0] & x[1], zip(test_tup1, test_tup2))]))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two input tuples have different lengths.\"\n    # create an empty tuple to hold the elementwise and tuples\n    and_tup = ()\n    # loop through the two tuples and extract the elementwise and tuple\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"No directrix exists for a vertical line.\"\n    else:\n        discriminant = b**2 - 4*a*c\n        if discriminant > 0:\n            return \"The directrix of the parabola is x = {-b +/- sqrt(discriminant)}/(2a).\"\n        elif discriminant == 0:\n            return \"The directrix of the parabola is x = {-b +/- sqrt(discriminant)}/(2a).\"\n        else:\n            return \"The directrix of the parabola is complex.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return root1, root2\n    elif discriminant == 0:\n        root = -b / (2*a)\n        return root\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Formula for directrix: x = (-b \u00b1 \u221a(b^2 - 4ac)) / (2a)\n    directrix = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    directrix = (-b + math.sqrt(discriminant)) / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc < 0:\n        return \"There are no real roots.\"\n    elif disc == 0:\n        return \"The directrix is \" + str(round((-b)/2*a, 2))\n    else:\n        return \"The directrix is \" + str(round((-b - disc**0.5)/(2*a), 2)) + \" and \" + str(round((-b + disc**0.5)/(2*a), 2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function finds the directrix of a parabola given its coefficients a, b and c.\n    The directrix is the point where the derivative of the parabola is zero.\n    '''\n    # Define the equation of the parabola as ax^2 + bx + c = 0\n    equation = a*x**2 + b*x + c\n    \n    # Solve the equation for x using the quadratic formula\n    root1 = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    root2 = (-b - math.sqrt(b**2 - 4*a*c)) / (2*a)\n    \n    # Find the point where the derivative of the parabola is zero\n    directrix = root1 if root1**2 < root2**2 else root2\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    root1 = (-b + determinant**0.5)/(2*a)\n    root2 = (-b - determinant**0.5)/(2*a)\n\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n\n    Inputs:\n    a - float\n    b - float\n    c - float\n\n    Outputs:\n    float\n    '''\n\n    # Calculating the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is greater than 0, then the directrix is unique\n    if disc > 0: \n        return (-b + disc**0.5)/(2*a)\n    \n    # If the discriminant is 0, then the directrix is twice the root of the equation\n    elif disc == 0: \n        return (-b)/(2*a)\n    \n    # If the discriminant is less than 0, then the directrix is complex\n    else: \n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n\n        return root1, root2\n    elif discriminant == 0:\n        return (-b) / (2*a)\n    else:\n        return \"No real root\"\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        print(\"The quadratic equation has no real roots.\")\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        print(f\"The directrix is at x = {root}.\")\n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        print(f\"The directrix is at x = {x1} and x = {x2}.\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Set intersection of two lists\n    intersection = [i for i in list1 if i in list2]\n    # Check if the intersection is empty\n    if intersection:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = False\n    for i in list1:\n        if i in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Use set intersection to find common elements\n    set1 = set(list1)\n    set2 = set(list2)\n    common_set = set1.intersection(set2)\n\n    # If common set is not empty, return True\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for i in list1:\n        if i in list2:\n            common = True\n            break\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the common elements between the two sets\n    common_set = set1.intersection(set2)\n\n    # Check if there are any common elements\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set from each list and find the intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1.intersection(set2)\n    # if there's at least one element in the intersection, return True\n    if len(intersection) > 0:\n        return True\n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # calculate the length of the trapezium using the formula:\n    # (base1 + base2)/2 * height\n    length = (base1 + base2) / 2 * height\n    \n    # sort the lengths of the sides of the trapezium in ascending order\n    sides = [base1, base2, length]\n    sides.sort()\n    \n    # find the length of the trapezium's half\n    half_length = sides[1]\n    \n    # find the median length of the trapezium\n    median_length = (sides[0] + sides[2]) / 2\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    return (base1 + base2 + height) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculating the length of the trapezium\n    length = 0.5 * (base1 + base2)\n    \n    # Calculating the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculating the length of the half of the trapezium\n    half_length = 0.5 * length\n    \n    # Sorting the length of the two halves\n    sorted_length = sorted([half_length, length])\n    \n    # Calculating the median length\n    median_length = sorted_length[1]\n    \n    # Calculating the distance between the two halves\n    distance = sorted_length[0] - median_length\n    \n    # Calculating the area of the quarter of the trapezium\n    quarter_area = 0.25 * area\n    \n    # Calculating the distance between the two halves after cutting the quarter\n    cut_distance = quarter_area / area\n    \n    # Calculating the distance between the two halves after cutting the quarter\n    cut_distance = distance / 2\n    \n    # Calculating the length of the new trapezium after cutting the quarter\n    new_length = 0.5 * (half_length + cut_distance)\n    \n    # Returning the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium.\n\n    Args:\n    base1 (float): The length of the first base of the trapezium.\n    base2 (float): The length of the second base of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + height)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height + base1 * base2 * height\n\n    # Calculate the median length\n    median_length = trapezium_length * (area - trapezium_length)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the sum of the bases and the height\n    s = base1 + base2 + height\n    \n    # Calculate the difference between the sums of the two trapeziums\n    d = abs(base1 + height - base2 - height)\n    \n    # Calculate the sum of the two trapeziums\n    sum_trapeziums = base1 + base2 + height\n    \n    # Calculate the area of the trapeziums\n    area_trapeziums = 0.5 * sum_trapeziums\n    \n    # Calculate the median length\n    median = area_trapeziums / d\n    \n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # calculate the length of the trapezium using the given formula\n    trapezium_length = (base1 + base2) / 2\n\n    # calculate the area of the trapezium using the given formula\n    trapezium_area = (base1 * height) + (base2 * height)\n\n    # calculate the median length using the given formula\n    median_length = 0.5 * trapezium_length\n\n    # calculate the difference between the area of the trapezium and the length of the trapezium\n    difference = abs(trapezium_area - trapezium_length)\n\n    # check if the difference is greater than the length of the base1 or base2\n    if difference > abs(trapezium_area - base1):\n        median_length = 0.5 * (base1 + base2)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the trapezium\n    length1 = base1 * 2\n    length2 = base2 * 2\n\n    # Calculate the areas of the trapezium\n    area1 = length1 * height / 2\n    area2 = length2 * height / 2\n\n    # Calculate the sum of the areas\n    total_area = area1 + area2\n\n    # Calculate the difference between the areas\n    difference = total_area - (area1 + area2)\n\n    # Calculate the length of the trapezium perpendicular to the base\n    perpendicular_length = difference / 2\n\n    # Calculate the length of the trapezium\n    trapezium_length = perpendicular_length + base1 + base2\n\n    # Calculate the median length of the trapezium\n    median_length = trapezium_length / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2) * height\n\n    # calculate the length of the left half of the trapezium\n    left_half = 0.5 * perimeter\n\n    # calculate the length of the right half of the trapezium\n    right_half = 0.5 * perimeter\n\n    # find the smaller of the two halves and the area divided by the length of the smaller half\n    median = min(left_half, right_half) / min(left_half, right_half)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the length of the base of the trapezium that is greater than the length of the base of the other trapezium\n    if area > base1:\n        length_base1 = area / base1\n    else:\n        length_base1 = 0\n    \n    # Calculate the length of the base of the other trapezium that is greater than the length of the base of the first trapezium\n    if area > base2:\n        length_base2 = area / base2\n    else:\n        length_base2 = 0\n    \n    # Calculate the length of the trapezium\n    length_trapezium = length_base1 + length_base2\n    \n    # Calculate the middle point of the trapezium\n    middle_point = length_trapezium / 2\n    \n    # Calculate the median length of the trapezium\n    median_length = middle_point\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    semi_perimeter = 0.5 * (base1 + base2)\n\n    if height <= 0.5 * area:\n        return area\n    elif height <= semi_perimeter:\n        return 0.5 * (base1 + base2)\n    else:\n        return (height - 0.5 * area) / 0.5 * (base1 + base2)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b+)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'a b c a b d e a b f g a'\nprint(text_match_one(text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function will match a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.+b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1,}b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    return bool(pattern.match(text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = re.compile(r'\\ba\\b\\w*\\b')\n    result = pattern.search(text)\n\n    if result:\n        print(result.group())\n    else:\n        print('No match found.')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found at index: \", match.start())\n        return match.group()\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the last digit of that number.\n    \"\"\"\n    if isinstance(n, int):\n        return n % 10\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns its last digit as an integer.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an argument and returns a new list containing all the negative numbers in the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # initialize an empty list to store the negative numbers\n    neg_list = []\n\n    # iterate over each number in the input list\n    for num in list1:\n        # check if the number is negative\n        if num < 0:\n            # if the number is negative, add it to the negative list\n            neg_list.append(num)\n\n    # return the negative list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of negative numbers.\n    \"\"\"\n    # Create an empty list to store the negative numbers\n    neg_list = []\n    # Loop through the list of numbers\n    for num in list1:\n        # If the number is negative, append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # Return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if ord(char) % 2 == 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() and int(char)%2==1:\n            continue\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() and int(char)%2==0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(string):\n    # Initialize an empty string to store the odd characters\n    odd_string = \"\"\n    # Loop through each character in the input string\n    for char in string:\n        # Check if the character is odd (i.e., greater than 0)\n        if int(char) % 2!= 0:\n            # Append the odd character to the new string\n            odd_string += char\n    # Return the new string with odd characters removed\n    return odd_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = []\n    for char in str1:\n        if int(char) % 2 == 0:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty list to store the even characters\n    even_chars = []\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is even, append it to the even_chars list\n        if char % 2 == 0:\n            even_chars.append(char)\n        # If the character is odd, ignore it\n    return ''.join(even_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n        elif char.isdigit():\n            new_str += char\n        else:\n            pass\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (i!= j) and (test_list[i] == test_list[j]):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1] or (test_list[j][0], test_list[i][0]) in test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][0]) and (test_list[i][1] == test_list[j][1]):\n                count += 1\n                if (test_list[j][0] == test_list[i][0]) and (test_list[j][1] == test_list[i][1]):\n                    count -= 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i:-1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j] and test_list[j] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_int = 1\n    for num in L:\n        single_int *= num\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        if type(i) == int:\n            total += i\n        elif type(i) == list:\n            for j in i:\n                total += j\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to hold the sum of the integers\n    total = 0\n    \n    # Loop through each integer in the list\n    for num in L:\n        # Add the integer to the total\n        total += num\n        \n    # Return the total as the single integer\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result += i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the converted value\n    result = \"\"\n    \n    # Iterate over each element in the list\n    for num in L:\n        # If the element is not a multiple of 3, append it to the result string\n        if num % 3!= 0:\n            result += str(num)\n    \n    # Convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for num in L:\n        single_integer *= num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    if not L:\n        return 0\n    else:\n        return L[0] * multiple_to_single(L[1:])"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*adverb\\w*\\b', text.lower())\n\n    # find the positions of each adverb in the sentence\n    positions = []\n    for i, word in enumerate(text.split()):\n        if word.lower() in adverbs:\n            positions.append(i)\n\n    # find the positions of the adverbs and their positions in the sentence\n    adverb_positions = []\n    for adverb in adverbs:\n        adverb_positions.append((adverb, positions.index(adverbs.index(adverb))))\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n\n    Args:\n    text: A string representing a sentence.\n\n    Returns:\n    A list of tuples containing the adverb and its position in the sentence.\n    '''\n\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = re.compile(r'\\b([a-z]+)ly\\b')\n\n    # Find all adverbs in the sentence using the regular expression pattern\n    matches = adverb_pattern.findall(text)\n\n    # If there are no adverbs, return an empty list\n    if len(matches) == 0:\n        return []\n\n    # Extract the adverb and its position from the matches list\n    adverb_positions = [(match[0], text.index(match[0])+len(match[0])) for match in matches]\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to match for adverbs\n    pattern = r'\\b([a-z]+|ing|ly|al|ful|full|most|mostly|mostlyly)\\b'\n    \n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If no matches are found, return an empty list\n    if not matches:\n        return []\n    \n    # Extract the first match (i.e. the first adverb) and its position in the sentence\n    adverb = matches[0]\n    position = text.find(adverb)\n    \n    # Return a list of tuples containing the adverb and its position\n    return [(adverb, position)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Split the text into words\n    words = text.split()\n\n    # Define a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b([A-Z]+)([A-Z][a-z]*[A-Z])\\b', re.IGNORECASE)\n\n    # Use the regular expression pattern to find all the matches in the words\n    matches = pattern.findall(text)\n\n    # Loop through the matches and print out the adverbs and their positions\n    for i, match in enumerate(matches, start=1):\n        adverb = match[0].lower()\n        pos =''.join(match[1:])\n        print(f\"{i}. {adverb}: {pos}\")\n\n    # If no adverbs are found, print a message saying so\n    if not matches:\n        print(\"No adverbs found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for finding adverbs\n    pattern = r'\\b(adj|adv)er\\b'\n\n    # Find all the matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the adverb and its position in the sentence\n    adverbs = []\n\n    # Iterate over all the matches and add them to the adverbs list\n    for match in matches:\n        adverb = match.group(0)\n        pos = match.start()\n        adverbs.append((adverb, pos))\n\n    # Return the list of adverbs and their positions in the sentence\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a text as input and returns a list of tuples, where each tuple represents an adverb and its position in the sentence.\n    '''\n    # Define a regular expression pattern for adverbs\n    pattern = re.compile(r'\\b(\\w+)(ed|ing|ly|s|ing|ly|ed|s)([.,;:!?])\\b', re.IGNORECASE)\n    \n    # Find all matches in the text using the pattern\n    matches = pattern.finditer(text)\n    \n    # Convert the matches to a list of tuples\n    adverbs_position = [(match.group(1), match.start(), match.group(3)) for match in matches]\n    \n    # Sort the list of tuples by position in the sentence\n    adverbs_position.sort(key=lambda x: x[1])\n    \n    return adverbs_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define regular expression pattern for adverb\n    pattern = r\"\\b\\w+ing\\b\"\n\n    # Use re.finditer() function to find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize empty dictionary to store adverb and their positions\n    adverb_positions = {}\n\n    # Iterate through all matches and add adverb and its position to the dictionary\n    for match in matches:\n        # Extract the adverb and its position from the match object\n        adverb = match.group()\n        position = match.start()\n\n        # If the adverb is already present in the dictionary, add the position to the existing list\n        if adverb in adverb_positions:\n            adverb_positions[adverb].append(position)\n        # If the adverb is not present in the dictionary, initialize a list with the position\n        else:\n            adverb_positions[adverb] = [position]\n\n    # Sort the dictionary by position and return the first adverb and its position\n    return sorted(adverb_positions.items())[0]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    words = re.findall(r'\\b\\w+\\b', text)\n    for i, word in enumerate(words):\n        if word in ['the', 'a', 'an', 'to']:\n            adverbs.append(i)\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to find adverbs\n    pattern = re.compile(r'\\b(the|a|an|an?\\s+the)\\b')\n\n    # Use the pattern to find all matches in the text\n    matches = re.finditer(pattern, text)\n\n    # Loop through all matches and store the position and adverb in a dictionary\n    adverb_positions = {}\n    for match in matches:\n        # Get the start and end position of the adverb\n        start = match.start()\n        end = match.end()\n\n        # Get the text of the adverb\n        adverb = text[start:end].lower()\n\n        # If the adverb is already in the dictionary, update its position\n        if adverb in adverb_positions:\n            adverb_positions[adverb]['position'] = start\n        # Otherwise, add the adverb to the dictionary with its position set to the start position\n        else:\n            adverb_positions[adverb] = {'position': start}\n\n    # Sort the dictionary by position and return the first adverb and its position\n    sorted_positions = sorted(adverb_positions.items(), key=lambda x: x[1]['position'])\n    return sorted_positions[0]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression to match adverbs\n    pattern = r'\\b([A-Za-z]+)ed\\b'\n\n    # Use re.search to find all adverbs in the sentence\n    matches = re.findall(pattern, text)\n\n    # If there are adverbs, print their positions and their corresponding adverbs\n    if matches:\n        print(\"Adverbs:\")\n        for match in matches:\n            index = text.index(match)\n            print(f\"Adverb: {match} at position {index}\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of a cube using Heron's formula\n    surface_area = 6 * l * l # convert the length to metres\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    This function takes the length of a side of a cube and calculates the surface area of the cube.\n    \"\"\"\n    # Calculate the surface area of the cube\n    surface_area = 6 * l ** 2\n    \n    # Return the surface area of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    This function takes a length l (float) as input and returns the surface area of a cube with side length l.\n    '''\n    return 6 * math.pi * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Cube surface area formula: 6 * l^2\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list\n    nums_list = list(nums)\n\n    # Calculate the total number of integers\n    total_count = len(nums)\n\n    # Calculate the count of positive integers\n    positive_count = 0\n    for num in nums_list:\n        if num > 0:\n            positive_count += 1\n\n    # Calculate the ration of positive integers\n    if total_count!= 0:\n        ration = positive_count / total_count\n    else:\n        ration = 0\n\n    # Return the ration of positive integers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_sum = 0\n    for num in nums:\n        if num > 0:\n            positive_sum += 1\n    if positive_sum == 0:\n        return 0\n    else:\n        return positive_sum / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Initialize two arrays to store the numbers and their positive counts\n    pos_nums = array('i')\n    neg_nums = array('i')\n    \n    # Loop through the array and count the positive and negative numbers\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n        else:\n            neg_nums.append(num)\n    \n    # Calculate the ration of positive numbers\n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    pos_ratio = pos_count / (pos_count + neg_count)\n    \n    # Return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n\n    pos_ratio = 0.0\n    if pos_count > 0:\n        pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of integers to store the positive numbers\n    pos_nums = array('i')\n    \n    # Iterate through the input array and add positive numbers to the array\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n    \n    # Calculate the ration of positive numbers\n    pos_count = len(pos_nums)\n    neg_count = len(nums) - pos_count\n    \n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            count += 1\n    if count == 0:\n        return 0\n    return count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_arr = array('i')\n    negative_arr = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n        else:\n            negative_arr.append(num)\n\n    if positive_arr:\n        positive_count = len(positive_arr) / len(nums)\n        print('Positive numbers:', positive_count)\n    else:\n        print('No positive numbers in the array.')\n\n    if negative_arr:\n        negative_count = len(negative_arr) / len(nums)\n        print('Negative numbers:', negative_count)\n    else:\n        print('No negative numbers in the array.')"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array to store the positive numbers\n    positive_arr = array('i')\n    \n    # Iterate over the input array\n    for num in nums:\n        # If the number is positive, add it to the array\n        if num > 0:\n            positive_arr.append(num)\n            \n    # Calculate the length of the positive array\n    pos_length = len(positive_arr)\n    \n    # Calculate the ration of positive numbers in the array\n    pos_ratio = pos_length / len(nums)\n    \n    # Return the ration of positive numbers in the array\n    return pos_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    \"\"\"\n    largest = -float('inf') # initializing largest with the smallest possible value\n\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as an input and returns the largest negative number in the list.\n    '''\n    largest = float('-inf') # initialize largest to negative infinity\n    for num in lst:\n        if num < 0: # check if number is negative\n            if num > largest: # if number is larger than largest, update largest\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = float('-inf') #initialize the largest variable to negative infinity\n    for num in list1: \n        if num < 0 and num > largest: #if the number is negative and is greater than the current largest\n            largest = num #update the largest variable with the current number\n    return largest #return the largest negative number found in the list"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = float('-inf')\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1  # initializing maximum negative number as -1\n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num  # updating maximum negative number if a new negative number is found\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    # Initialize a variable to store the largest negative number\n    largest = float('-inf')\n    \n    # Loop through each element in the list\n    for num in list1:\n        # If the current element is negative, compare it to the current largest negative number\n        if num < 0 and num > largest:\n            largest = num\n    \n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    '''\n    max_neg
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[i:i+K] for i in range(K))\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tup in enumerate(test_list):\n        test_list[i] = tup[K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tup[:K]\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        new_tup = ()\n        for i, val in enumerate(tup):\n            if val == K:\n                break\n            if i == len(tup)-1:\n                new_tup = tup\n                break\n            if val < K:\n                new_tup += (K,)\n        result_list.append(new_tup)\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])-K):\n            test_list[i] = test_list[i][:j] + test_list[i][j+K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tuple_item in test_list:\n        trimmed_list.append(tuple(tuple_item[:K]) + tuple(tuple_item[K:]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(i) for i in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple([x for x in tup if x == x])\n        if len(trimmed_tup) > K:\n            trimmed_tup = tuple(trimmed_tup[:K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_result = []\n    for i in range(len(test_tup1)):\n        multiplication_result.append(test_tup1[i] * test_tup2[i])\n    return multiplication_result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same number of elements.\")\n        return\n\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(a*b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) \n    for i in tup: \n        if i in count_dict: \n            count_dict[i] += 1 \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for i in lst:\n        if i in counter:\n            counter[i] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    count = 0\n    for i in lst:\n        if i in counter:\n            count += counter[i]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "Here is the implementation:"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of all elements in the list that occur in the tuple.\n    '''\n    #creating a dictionary to store the count of each element in the list\n    count_dict = Counter(lst)\n    \n    #creating a dictionary to store the count of each element in the tuple\n    count_tup = Counter(tup)\n    \n    #checking if the count of each element in the tuple is present in the dictionary\n    for item in count_tup:\n        if item in count_dict:\n            #if it is present, updating the count of the element in the tuple\n            count_dict[item] += count_tup[item]\n    \n    #returning the dictionary containing the count of each element in the list that occur in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input, and returns a dictionary where the keys are the elements of the list and the values are the corresponding count of the list in the tuple.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count = tup.count(elem)\n        if count > 0:\n            count_dict[elem] = count\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary of the count of each element in the list in the tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        count = tup.count(item)\n        count_dict[item] = count\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict = dict(count_dict)\n    \n    for i in tup:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    result = []\n    for i in count_dict:\n        result.append((i, count_dict[i]))\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = Counter(tup)\n\n    # Loop through the list and update the count in the dictionary\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # Create a new tuple with the updated count\n    new_tup = tuple((count, element) for element, count in count_dict.items())\n\n    return new_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    return {k: c[k] for k in c if k in lst}"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of Perrin numbers\n    sum_perrin = 0\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the Perrin number for each number\n        perrin_num = (2*i*i - i)/2\n        # Add the Perrin number to the sum\n        sum_perrin += perrin_num\n    # Return the sum of Perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    for i in range(1, n+1):\n        p = (4*i**2 + 1)/2\n        sum += p\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    \n    while p <= n:\n        sum += p\n        p += 1\n    \n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\n    total = 0\n    for i in perrin:\n        if n >= i:\n            total += i\n            n -= i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    s = 0\n    for i in range(n):\n        s += p[i]\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    p = [0]*(n+1)\n    p[1] = 1\n    p[2] = 1\n    p[3] = 4\n    for i in range(4, n+1):\n        p[i] = (2*i-1) * p[i-1] + p[i-2]\n    return sum(p)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 3, 4, 5, 7, 8, 10]\n    sum = 0\n    for num in perrin_numbers:\n        if num <= n:\n            sum += num\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = 1\n    sum_perrin = 0\n    while perrin <= n:\n        sum_perrin += perrin\n        perrin += 4\n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and an integer representing the size of the strings\n    to extract. The function returns a new list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[0:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts the specified size of strings from the given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in l:\n        new_list.append(i[:l])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size of strings to extract.\n    It returns a list of strings with the specified size of strings extracted from the input list.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    extracted_strings = []\n    for s in str_list:\n        if len(s) == size:\n            extracted_strings.append(s)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        if len(s) >= size:\n            extracted_strings.append(s[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_strings.append(str_list[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        if len(s) == size:\n            extracted_strings.append(s)\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Remove all whitespaces using regular expressions\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2\n\ntext = \"    Hello, World!      \"\nprint(remove_whitespaces(text))"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Remove all whitespaces using regular expression\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces from the given string\n    text1 = re.sub(r'\\s+','', text1)\n    \n    # Return the modified string\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # replace all whitespace characters with empty string\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1) # remove multiple whitespaces\n    text1 = text1.strip() # remove leading and trailing whitespaces\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace all whitespaces with a single space\n    text1 = re.sub('\\s+','', text1)\n    # Remove any leading or trailing spaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = 0.1 # assume 10% loss\n    if sale_amount < actual_cost: # if sale is less than actual cost\n        loss_percentage = 0.05 # assume 5% loss\n    return sale_amount * loss_percentage # calculate loss amount and return it"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = sale_amount - actual_cost\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        loss_percentage = (actual_cost / sale_amount) * 100\n        loss_amount = (loss_percentage / 100) * sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount: \n        loss_amount = sale_amount - actual_cost \n    else: \n        loss_amount = 0 \n\n    return loss_amount "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    # initialize sum of factors to zero\n    sum_factors = 0\n\n    # loop through odd factors of n from 3 to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # check if i is a factor of n\n        if n % i == 0:\n            # if it is, add it to sum_factors\n            sum_factors += i\n\n    # return sum_factors\n    return sum_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Initialize sum to 0\n    sum_even_factors = 0\n    \n    # Loop through odd numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Check if i is a factor of n\n            if n % i == 0:\n                # Add i to sum_even_factors\n                sum_even_factors += i\n    \n    # Return sum_even_factors\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumOfFactors(n): \n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, n+1):\n        if n%i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    return sum(even_factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n%i == 0 and i%2 == 0 : \n            even_factors.append(i)\n\n    if len(even_factors) == 0 : \n        return \"There are no even factors of the given number.\"\n    else : \n        return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even += i\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize the sum of even factors to zero\n    total = 0\n    \n    # loop through all the numbers from 2 to n-1\n    for i in range(2, n+1): \n        # check if the number is even \n        if i % 2 == 0: \n            # add the even factor to the sum \n            total += i\n    \n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    words = re.findall(pattern, text.lower())\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.search(r'\\b[a-z]*z[a-z]*\\b', text)\n    if word:\n        print(f\"The word '{word.group()}' was found in the text.\")\n    else:\n        print(\"The word 'z' was not found in the text.\")\n\ntext = input(\"Enter the text: \")\ntext_match_wordz(text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Define the regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n\n    # Use the re.search() function to search for a match in the text\n    match = re.search(pattern, text)\n\n    # Return the match if found, otherwise return None\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]+z\\b'\n    result = re.findall(pattern, text.lower())\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b', re.IGNORECASE)\n    return pattern.search(text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    month_numbers = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in month_numbers:\n        return True\n    elif monthnum2 % 2 == 0 and monthnum2 % 100!= 0 or monthnum2 % 4 == 0 and monthnum2 % 100 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1,3,5,7,8,10,12]:\n        return 31\n    elif monthnum in [4,6,9,11]:\n        return 30\n    elif monthnum == 2:\n        return 28\n    else:\n        return 31"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2:\n        return days_in_month[monthnum - 1]\n    else:\n        return days_in_month[monthnum - 1] + 1\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days_in_month[1] = 29\n    return days_in_month[monthnum - 1]"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # check if the month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number. Month numbers should be between 1 and 12.\")\n        return\n\n    # check if the month number contains 31 days\n    if monthnum2 % 2 == 0:\n        print(f\"{monthnum2} contains 30 days.\")\n    else:\n        print(f\"{monthnum2} contains 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"Month number contains 31 days\")\n    else:\n        print(\"Month number does not contain 31 days\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 in [2, 4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = [i]\n        elif len(i) == min_len:\n            min_lst.append(i)\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # sort the list in ascending order\n    lst = sorted(lst)\n\n    # find the minimum length sublist\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # check if the length of sublist is smaller than current minimum length\n            if len(lst[i:j+1]) < min_length:\n                min_length = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Find the length of the sublist having minimum length\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    \n    # Find the sublist having minimum length\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) == min_len:\n            if min_sublist is None or len(sublist) < len(min_sublist):\n                min_sublist = sublist\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize the minimum length to infinity\n    min_len = float('inf')\n    min_sublist = []\n\n    # Traverse through each sublist in the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            for k in range(j+1,len(lst)):\n                sublist = lst[i:k+1]\n                if len(sublist) < len(min_sublist):\n                    min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublists = []\n    for i in range(len(lst)):\n        sublists.append(lst[i:i+2])\n    sublists = list(set(sublists))\n    min_len = len(sublists[0])\n    min_sublist = None\n    for sublist in sublists:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if j-i+1 < min_len:\n                min_len = j-i+1\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_sublist = None\n    for sublist in lst:\n        if not min_sublist or len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublists = []\n    for i in range(len(lst)):\n        sublists.append(lst[i:i+1])\n    min_length = len(lst[0])\n    min_sublist = None\n    for sublist in sublists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings from it.\n    \"\"\"\n    # define the pattern for uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # remove all uppercase substrings from the string\n    str1 = pattern.sub('', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # replace all uppercase letters with empty string\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # Find all uppercase substrings in the input string and replace them with empty strings\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression to match uppercase letters\n    pattern = re.compile('[A-Z][a-z]*')\n    \n    # iterate through each substring of the input string\n    substrings = pattern.findall(str1)\n    \n    # loop through each substring and replace it with an empty string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    \n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # remove all uppercase substrings from the string\n    return re.sub(r'\\b[A-Z][a-z]*\\b', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = r'[A-Z]'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    for sublist in lst: \n        yield sublist[0]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # initialize an empty list to store the first elements of the sublists\n    first_elements = []\n    \n    # iterate over each sublist in the input list\n    for sublist in lst:\n        # check if the sublist is not empty, i.e., if there are at least two elements in it\n        if len(sublist) >= 2:\n            # extract the first element of the sublist and append it to the first_elements list\n            first_elements.append(sublist[0])\n    \n    # return the first_elements list\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(Extract(sublist))\n        else:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    \"\"\"\n    Get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in it.\n    \"\"\"\n    upper = 0\n    for char in string:\n        if char.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Define a recursive function to find all combinations of the elements in the list\n    def find_combinations(remaining, current, result):\n        # Base case: If there are no more elements to choose from, add the current combination to the result list\n        if not remaining:\n            result.append(current)\n            return\n        \n        # Recursive case: Try each element from the remaining list and add it to the current combination\n        for i in range(len(remaining)):\n            find_combinations(remaining[:i] + remaining[i+1:], current + [remaining[i]], result)\n    \n    # Find all combinations of the elements in the list\n    result = []\n    find_combinations(list1, [], result)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(tuple(sorted(list1[i:j])))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def helper(current_combination, remaining_elements):\n        if not remaining_elements:\n            result.append(current_combination[:])\n        else:\n            for i in range(len(remaining_elements)):\n                new_combination = current_combination + [remaining_elements[i]]\n                helper(new_combination, remaining_elements[:i] + remaining_elements[i+1:])\n\n    result = []\n    helper([], list1)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            rest_list = list1[:i] + list1[i+1:]\n            combinations = combinations_list(rest_list)\n            for combo in combinations:\n                result.append([list1[i]] + combo)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Create an empty list to store the combinations\n    combinations = []\n\n    # Create a function to generate combinations\n    def combination_helper(start, remaining, combo):\n        \"\"\"\n        Helper function to generate combinations.\n        \"\"\"\n        # Base case: if remaining list is empty, add current combination to result\n        if not remaining:\n            combinations.append(combo)\n            return\n        # Recursive case: add current element to combo and generate remaining combinations\n        for i, element in enumerate(list1):\n            if i!= start:\n                combo.append(element)\n                combination_helper(start + 1, remaining[:i] + remaining[i + 1:], combo)\n                combo.pop()\n\n    # Generate initial combination\n    combination_helper(0, list1, [])\n\n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list of all possible combinations\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize empty list to store combinations\n    combinations = []\n    # loop through each element in the given list\n    for i in range(len(list1)):\n        # initialize empty list to store current combination\n        current_combination = []\n        # loop through each element in the given list again\n        for j in range(i+1, len(list1)+1):\n            # add the current element to the current combination\n            current_combination.append(list1[i])\n            # if the length of the current combination is equal to the length of the given list,\n            # add the combination to the list of combinations\n            if len(current_combination) == len(list1):\n                combinations.append(current_combination)\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    A function to find all possible combinations of the elements of a given list.\n\n    Args:\n        lst (list): A list of elements\n\n    Returns:\n        list: A list of all possible combinations of the elements of the input list\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(lst[i:j+1])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list to store all combinations\n    combinations = []\n    \n    # Create a loop to iterate through all possible combinations of the elements\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Append the combination to the list of combinations\n            combinations.append(list1[i:j])\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n        \n        if current_product < 0:\n            current_product = 1\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    \n    for num in arr:\n        if num < 0:\n            max_ending_here = max(num, max_ending_here)\n            current_product = max_ending_here\n        else:\n            max_ending_here = current_product * num\n            current_product = max(current_product, num)\n            \n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    # Initialize variables to store the maximum product and its starting index\n    max_product = float('-inf')\n    start_index = 0\n    \n    # Iterate over the array to find the maximum product subarray\n    for i in range(len(arr)):\n        # Check if the current subarray has a negative product\n        if arr[i] < 0:\n            # If it does, update the maximum product and starting index\n            max_product = max(max_product, arr[i])\n            start_index = i\n            \n    # Return the maximum product subarray\n    return arr[start_index:i+1]"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): a list of integers\n\n    Returns:\n    int: the maximum product subarray of the given array\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for num in arr[1:]:\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        if max_ending_here < 0:\n            max_ending_here = num\n            min_ending_here = num\n            \n    return max_ending_here"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a list to store all values\n    values = []\n    # Loop through all values in the dictionary\n    for value in dict.values():\n        # Append each value to the list of values\n        values.append(value)\n    # Check if all values in the list are equal\n    return all(value == values[0] for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = []\n    for i in dict.values():\n        all_values.append(i)\n    if all(i == all_values[0] for i in all_values):\n        print(\"All values are same in dictionary\")\n    else:\n        print(\"Some values are different in dictionary\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        return all(dict.values())\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for i in dict.values():\n        values.append(i)\n    if n == len(set(values)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        # check if all values are the same\n        all_same = True\n        for value in dict.values():\n            if value!= dict.values()[0]:\n                all_same = False\n                break\n        return all_same\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the dictionary is empty\n    if len(dict) == 0:\n        return True\n\n    # Initialize the first value of the dictionary\n    first_value = dict[next(iter(dict))]\n\n    # Iterate through the rest of the dictionary\n    for value in dict.values():\n        if value!= first_value:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for i in range(n):\n        if list(dict.values())[i]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if n!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Initialize an empty dictionary\n    new_dict = {}\n    # Loop through each item in the original dictionary\n    for key, value in dict1.items():\n        # Check if the value is empty (if it is not a list)\n        if not isinstance(value, list):\n            # If it is not empty, add it to the new dictionary\n            if value:\n                new_dict[key] = value\n    # Return the new dictionary\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Initialize max_product and max_profit to negative infinity\n    max_product = float('-inf')\n    max_profit = float('-inf')\n\n    # Initialize the left and right pointers of the window\n    left = 0\n    right = 0\n\n    while right < n:\n        # Calculate the window's profit and update max_profit if necessary\n        profit = arr[right] - arr[left]\n        if profit > max_profit:\n            max_profit = profit\n\n        # If the window's profit is negative, move the right pointer to the right\n        if profit < 0:\n            left += 1\n\n        # If the window's profit is positive, move the left pointer to the right\n        if profit > 0:\n            right += 1\n\n        # Update the maximum product if the current window's profit is greater than the current max_product\n        if right - left + 1 > n - right:\n            max_product = max(max_product, profit)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product = float('-inf')\n    max_ending_here = float('-inf')\n    min_ending_here = float('inf')\n    \n    for num in arr:\n        if num > max_ending_here:\n            max_ending_here = num\n        elif num < min_ending_here:\n            min_ending_here = num\n        else:\n            max_ending_here = max(num, max_ending_here*num)\n            min_ending_here = min(num, min_ending_here*num)\n        \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] * arr[1], arr[1] * arr[0])\n    else:\n        max_product = max(arr[0] * arr[1] * arr[2], arr[0] * arr[2] * arr[1], arr[1] * arr[2] * arr[0], arr[2] * arr[0] * arr[1])\n        min_product = min(arr[0] * arr[1] * arr[2], arr[0] * arr[2] * arr[1], arr[1] * arr[2] * arr[0], arr[2] * arr[0] * arr[1])\n        return max(max_product, arr[n-1] * min_product)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize two variables to store the minimum and maximum value in the subsequence\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Initialize a variable to store the maximum product\n    max_product = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n\n        # If the current element is smaller than the minimum value, update the minimum value\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n        # If the current element is greater than the maximum value, update the maximum value\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n        # If the current element is between the minimum and maximum value, calculate the product\n        else:\n            max_product = max(max_product, min_val * max_val)\n\n            # Update the minimum and maximum value for the next iteration\n            min_val = min(min_val, arr[i])\n            max_val = max(max_val, arr[i])\n\n    # Return the maximum product\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function finds the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_product_ending_here = max(max_product_ending_here * arr[i], max_product_ending_here)\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    def get_max_product(arr, i, j):\n        if j == len(arr) - 1:\n            return arr[i]\n        return max(arr[i] * get_max_product(arr, i + 1, j), arr[j] * get_max_product(arr, i, j - 1))\n\n    return get_max_product(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    max_product = float('-inf')\n\n    for i in range(1, n):\n        dp[i] = arr[i] - arr[i-1]\n        max_product = max(max_product, dp[i])\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Initialize an empty list to store the pairwise additions\n    pairwise_sum = []\n\n    # Iterate over the tuple elements and add the neighboring elements pairwise\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Find the pairwise addition of the neighboring elements of a given tuple.\n\n    Args:\n    - test_tup (tuple): A tuple of any length.\n\n    Returns:\n    - int: The pairwise addition of the neighboring elements.\n    \"\"\"\n    # Check if the tuple has an odd length.\n    if len(test_tup) % 2!= 0:\n        # If it doesn't, return the first element of the tuple.\n        return test_tup[0]\n    else:\n        # If it does, add the sum of the first and last elements to get the middle element.\n        middle = sum(test_tup[:2])\n        # Add the middle element to the pairwise sum of the middle two elements.\n        pairwise_sum = middle + sum(test_tup[1:-1])\n        return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = []\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Args:\n        test_tup: a tuple containing integers\n\n    Returns:\n        a tuple containing the sum of the pairwise additions for all the elements of the input tuple\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] + test_tup[i + 1],)\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    \n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # initialize a variable to store the sum of the pairwise addition\n    pairwise_sum = 0\n    \n    # loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # loop through each element after the current element\n        for j in range(i+1, len(test_tup)):\n            # add the current element and the element after the current element\n            pairwise_sum += test_tup[i] + test_tup[j]\n    \n    # return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    add_list = []\n    for i in range(length - 1):\n        add_list.append(test_tup[i] + test_tup[i+1])\n    return add_list"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Given an array `arr` of integers and an integer `n`, return the remainder of the product of the array elements modulo `n`.\n    \"\"\"\n    product = 1\n    for element in arr:\n        product *= element\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    # Calculate the product of all the elements of the array\n    product = 1\n    for element in arr:\n        product = (product * element) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array `arr` and a number `n` as inputs and returns the remainder of the array \n    multiplication modulo `n`.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments, arr and n.\n    arr is an array containing integers.\n    n is an integer.\n\n    The function returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two parameters: the array arr and the integer n.\n    It calculates the product of the array multiplication modulo n by iterating through the array.\n    The remainder at each iteration is added to the product.\n    Finally, the product is returned.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l) \n    for i in range(n-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n <= 1: \n        return False\n    \n    for i in range(n-1): \n        if l[i] + 1 == l[i+1]: \n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i+1] - l[i] == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == len(l)-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # initialize the variables to check for consecutive numbers\n    prev_num = -1\n    is_consecutive = False\n    \n    # iterate through the list\n    for num in l:\n        \n        # if the current number is not consecutive, reset the variables\n        if num - prev_num!= 1:\n            prev_num = -1\n            is_consecutive = False\n        \n        # if the current number is consecutive, check the next number\n        else:\n            if is_consecutive:\n                return False\n            else:\n                is_consecutive = True\n                \n        # update the previous number\n        prev_num = num\n        \n    # if the loop completes without returning False, all the numbers in the list are consecutive\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    # check if the list is empty or not\n    if not l:\n        return \"The list is empty.\"\n\n    # check if the first element of the list is zero\n    if l[0] == 0:\n        return \"The list does not contain consecutive numbers.\"\n\n    # check if the remaining elements are consecutive numbers\n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1:\n            return \"The list does not contain consecutive numbers.\"\n\n    # if all the conditions are satisfied, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1] - 1: \n            print(\"The list contains consecutive numbers.\") \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n    if l[0] == l[1]:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort both the lists based on their first element\n    test_list1.sort(key=lambda x: x[0])\n    test_list2.sort(key=lambda x: x[0])\n\n    # Initialize a new list to store the intersection\n    intersection_list = []\n\n    # Iterate through the first list and check if each element is present in the second list\n    for i in range(len(test_list1)):\n        # If the element is present, append it to the intersection list\n        if test_list1[i] == test_list2[0]:\n            intersection_list.append(test_list1[i])\n            # Remove the element from the second list to avoid duplicates\n            test_list2.pop(0)\n            # Stop iterating through the second list once we find the element\n            break\n\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # converting the list to a set to remove duplicates\n    list1 = set(test_list1)\n    list2 = set(test_list2)\n\n    # creating an empty list to store the intersection\n    intersection = []\n\n    # checking the intersection of each element of the two lists\n    for element in list1:\n        if element in list2:\n            intersection.append(element)\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets using the 'intersection' method\n    intersection = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Initialize an empty set to store the unique elements in both lists\n    unique_elements = set()\n\n    # Loop through each tuple in test_list1 and add each element to the set of unique elements in test_list2\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 in tuple2:\n                unique_elements.add(tuple1)\n\n    # Convert the set of unique elements to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Create a dictionary to store the unique elements in both lists\n    unique_dict = {}\n\n    # Iterate through both lists and add unique elements to the dictionary\n    for tup in test_list1:\n        if tup not in unique_dict:\n            unique_dict[tup] = True\n    for tup in test_list2:\n        if tup not in unique_dict:\n            unique_dict[tup] = True\n\n    # Create a new list to store the intersection of unique elements from both lists\n    intersection_list = []\n\n    # Iterate through the keys in the dictionary and add the elements to the intersection list if they exist in both lists\n    for key in unique_dict:\n        if key in test_list1 and key in test_list2:\n            intersection_list.append(key)\n\n    # Return the intersection list\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_elements = set(test_list1) & set(test_list2)\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists of tuples and returns a new list of tuples containing the common elements of the two lists.\n    '''\n    common_tuples = []\n    for tup in test_list1:\n        if tup in test_list2:\n            common_tuples.append(tup)\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_set1 = set(test_list1)\n    test_set2 = set(test_list2)\n    intersection = test_set1.intersection(test_set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Iterate through the first list of tuples\n    for tup in test_list1:\n        # Iterate through the second list of tuples\n        for other_tup in test_list2:\n            # Check if the current tuple and the other tuple are equal\n            if tup == other_tup:\n                # Add the tuple to the common_elements list\n                common_elements.append(tup)\n                # Exit the inner loop once the current tuple has been found\n                break\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Args:\n        str1 (str): String to be searched and replaced in.\n        ch (str): The character to be replaced.\n        newch (str): The new character to replace the old character with.\n\n    Returns:\n        str: The modified string with the old character replaced with the new character.\n\n    Raises:\n        ValueError: If the input string or character is empty or contains only whitespace.\n    \"\"\"\n    if not str1 or not ch or not newch:\n        raise ValueError(\"Input string or character is empty or contains only whitespace.\")\n\n    for char in str1:\n        if char == ch:\n            return str1.replace(char, newch)\n\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in a string, a character to be replaced, and the character to replace it with.\n    It then replaces all occurrences of the character in the string with the new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a given character in a string with another character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value using Counter class.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return {k: v for k, v in sorted_dict}"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common(None)\n\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and sorts it by value.\n\n    Args:\n        dict1 (dict): A dictionary to be sorted by value.\n\n    Returns:\n        sorted_dict (dict): A dictionary sorted by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = {k: v for k, v in counter.items()}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # calculate the sum of the largest and smallest values\n    sum_val = max_val + min_val\n    # return the sum\n    return sum_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = min(nums)\n    smallest = max(nums)\n    # Calculate the sum of the largest and smallest values\n    sum_largest_smallest = largest + smallest\n    # Return the sum of the largest and smallest values\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Initialize variables to store the largest and smallest value in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    \n    # Loop through the array and update the max_val and min_val if a larger or smaller value is found\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n            \n    # Return the sum of the largest and smallest values in the array\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n\n    smallest = nums[0]\n    largest = nums[0]\n\n    for num in nums[1:]:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables to store the smallest and largest values\n    smallest = nums[0]\n    largest = nums[0]\n    # loop through the array and update the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    # return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether the given string is lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[^a-zA-Z\\s]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings\n    str2 = re.sub(r'[a-z]+', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Replace all lowercase letters with an empty string\n    lowercase = re.findall(r'[a-z]+', string)\n    for i in lowercase:\n        string = string.replace(i, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # use finditer() method of regular expression object to iterate over all substrings in the string\n    matches = pattern.finditer(str1)\n    # create a list to store the non-lowercase substrings\n    result = []\n    # iterate over all matches and append non-lowercase substrings to the result list\n    for match in matches:\n        if not (match.start() == 0 or str1[match.start()-1].isalpha()):\n            result.append(match.group(0))\n    # join the non-lowercase substrings into a single string and return the result\n    return ''.join(result)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Remove all lowercase substrings from the string\n    pattern = r'[a-z]+'\n    str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]\\w+\\b'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    str1 = str1.lower() # convert string to lowercase\n    pattern = re.compile(r'\\b[a-z]+\\b') # define regex pattern to match lowercase substrings\n    return pattern.sub('', str1) # remove matched substrings from string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = re.findall(r'\\b[a-zA-Z]+\\b', str1)\n    # Remove all lowercase words from the list\n    words = [word for word in words if not word.islower()]\n    # Join the remaining words into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'(?i)[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        while n >= 10:\n            n = n // 10\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    # check if the input is a number\n    if not isinstance(n, int):\n        raise TypeError('Input must be a number')\n    # convert the number to a string and extract the first character\n    first_char = str(n)[0]\n    # return the first character as an integer\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer number as input and returns the first digit of the number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return first_Digit(n//10) + n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # Convert the given number to a string\n    num = str(n)\n\n    # Convert the string to a list of characters\n    chars = list(num)\n\n    # Find the first character of the list\n    first_char = chars[0]\n\n    # Return the first character as an integer\n    return ord(first_char) - 48"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the given number into a string\n    num = str(n)\n    # Find the first character of the string\n    first_char = num[0]\n    # Convert the first character into an integer\n    first_int = int(first_char)\n    # Return the first integer as the first digit of the input number\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    first = n % 10\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    n = str(n)\n    # Return the first digit of the string\n    return n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 1000\n    while first_digit >= 10:\n        first_digit //= 10\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n    '''\n\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    Takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Finding the sum of cubes of the first n natural numbers\n    cube_sum = 0\n    for i in range(n+1):\n        cube_sum += i**3\n    \n    # Finding the sum of the first n natural numbers\n    sum_of_numbers = 0\n    for i in range(n+1):\n        sum_of_numbers += i\n    \n    # Returning the difference between the sum of cubes and the sum of the numbers\n    return cube_sum - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    # Initialize the variables\n    sum_cubes = 0\n    sum_numbers = 0\n\n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_numbers += i\n\n    # Find the difference between the two sums\n    difference = abs(sum_cubes - sum_numbers)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize sum_of_cubes to 0 and sum_to to 0\n    sum_of_cubes = 0\n    sum_to = 0\n    \n    # calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    # calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_to += i\n    \n    # calculate the difference between the sum of cubes and the sum of the first n natural numbers\n    result = sum_of_cubes - sum_to\n    \n    # return the difference\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # find the sum of the first n natural numbers\n    sum_of_natural_numbers = n * (n + 1) // 2\n\n    # find the sum of cubes of the first n natural numbers\n    sum_of_cubes = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # calculate the difference between the two sums\n    difference_sum = abs(sum_of_cubes - sum_of_natural_numbers)\n\n    return difference_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_natural = sum(range(1,n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing variables\n    sum_cubes = 0\n    sum_natural = 0\n\n    # calculating the sum of cubes\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculating the sum of natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # finding the difference between the two sums\n    difference = abs(sum_cubes - sum_natural)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate the sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        return sum([i**3 for i in range(1, n+1)])\n    \n    # Function to calculate the sum of first n natural numbers\n    def sum_of_numbers(n):\n        return sum(range(1, n+1))\n    \n    # Call the functions to calculate the sum of cubes and first n natural numbers\n    sum_cubes = sum_of_cubes(n)\n    sum_numbers = sum_of_numbers(n)\n    \n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_numbers\n    \n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        sum_of_natural_numbers += i\n    \n    difference = sum_of_cubes - sum_of_natural_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1,n+1)]\n    sum_cubes = sum(cubes)\n    first_n = list(range(1,n+1))\n    sum_first_n = sum(first_n)\n    diff = abs(sum_cubes - sum_first_n)\n    return diff"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count variable\n    count = 0\n    \n    # Iterate over the array A\n    for i in range(len(A)):\n        # Iterate over the remaining array A[i+1:]\n        for j in range(i+1, len(A)):\n            # Calculate xor value of A[i] and A[j]\n            xor = A[i] ^ A[j]\n            \n            # If xor value is odd, increment count\n            if xor % 2!= 0:\n                count += 1\n    \n    # Return count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N): \n    '''\n    This function takes two lists A and N and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if (A[i] ^ A[j]) % 2 == 1: \n                count += 1 \n    return count "
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    count = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j and (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in a list A of N integers and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i] + A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of integers and an integer N.\n    It returns the number of pairs whose xor value is odd in the array.\n    '''\n    # initialize the count variable to 0\n    count = 0\n    # loop through all pairs of elements in A\n    for i in range(N):\n        for j in range(i+1, N):\n            # calculate the xor of the current pair\n            xor = A[i] ^ A[j]\n            # if the xor is odd, increment the count\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to a list of characters\n    chars = list(string)\n    # loop over each character in the list\n    for i in range(len(chars)):\n        # if the character is a letter, toggle its case\n        if chars[i].isalpha():\n            chars[i] = chr(ord(chars[i].lower()) ^ 32)\n        # otherwise, leave it unchanged\n    # convert the list back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Initialize an empty string to store the result\n    result = ''\n\n    # Iterate over each character in the string\n    for char in string:\n        # Toggle the case of the character\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n\n    # Return the result\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.swapcase() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert the integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n    \n    # loop through the digits and calculate the per-digit difference\n    total_diff = 0\n    for i in range(len(digits1)):\n        diff = digits1[i] - digits2[i]\n        total_diff += abs(diff)\n    \n    # return the sum of the per-digit differences\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize variables to store the sum of differences for each digit\n    sum_diff_1 = 0\n    sum_diff_2 = 0\n    \n    # Loop through each digit of the input integers\n    for i in range(len(n1_str)):\n        diff = abs(ord(n1_str[i]) - ord(n2_str[i]))\n        sum_diff_1 += diff\n        sum_diff_2 += diff\n    \n    # Return the sum of differences for each digit\n    return sum_diff_1, sum_diff_2"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to strings so we can compare them digit by digit\n    num1_str = str(n1)\n    num2_str = str(n2)\n    # Initialize the sum of per-digit differences to zero\n    total_diff = 0\n    # Loop over each digit in each number\n    for i in range(len(num1_str)):\n        # Convert the current digit to integers\n        digit1 = int(num1_str[i])\n        digit2 = int(num2_str[i])\n        # Calculate the absolute difference between the digits\n        diff = abs(digit1 - digit2)\n        # Add the difference to the total difference\n        total_diff += diff\n    # Return the total difference\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Get the digits of the two numbers\n    digit1 = list(map(int, str(n1)))\n    digit2 = list(map(int, str(n2)))\n    \n    # Calculate the difference between each digit\n    difference = []\n    for i in range(len(digit1)):\n        diff = abs(digit1[i] - digit2[i])\n        difference.append(diff)\n    \n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(difference)\n    \n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = n1 - n2\n    sum_of_diff = 0\n    for i in range(10):\n        digit_diff = abs(difference // 10 ** i % 10 - difference // 10 ** (i + 1) % 10)\n        sum_of_diff += digit_diff\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = 0\n    while n1!= 0 or n2!= 0:\n        digit_diff = abs(n1 % 10 - n2 % 10)\n        difference += digit_diff\n        n1 //= 10\n        n2 //= 10\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Initialize variables to store the sum of differences and the count of differences\n    total_diff = 0\n    count_diff = 0\n\n    # Loop through each digit in the lists and calculate the difference between them\n    for i in range(len(digits1)):\n        diff = abs(digits1[i] - digits2[i])\n        total_diff += diff\n        if diff!= 0:\n            count_diff += 1\n\n    # Return the total sum of differences and the count of differences\n    return total_diff, count_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Extract digits from both numbers and sort them\n    n1_sorted = sorted(str(n1))\n    n2_sorted = sorted(str(n2))\n    \n    # Find the length of the longer number\n    n_len = max(len(n1_sorted), len(n2_sorted))\n    \n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through the digits of the longer number and add the per-digit difference to sum\n    for i in range(n_len):\n        diff = n1_sorted[i] - n2_sorted[i]\n        sum += diff*diff\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n\n    Parameters:\n    n1 (int): first integer\n    n2 (int): second integer\n\n    Returns:\n    int: sum of the per-digit difference between the two integers\n    \"\"\"\n    digit_sum = 0\n    while n1 > 0 or n2 > 0:\n        digit_sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(len(str(n1))):\n        diff = abs(n1 // 10 ** i - n2 // 10 ** i)\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return None\n\n    max_sum = float('-inf')\n    current_sum = 0\n    max_sum_start = 0\n    for i in range(len(a)):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_start = i - size + 1\n\n    return max_sum, max_sum_start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        size = len(a)\n\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i - size + 1\n\n    return max_sum, a[current_start:current_start + size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    max_sum_ending_here = 0\n    \n    # Loop through the array\n    for i in range(size):\n        current_sum += a[i]\n        \n        # Update max_sum_ending_here\n        if current_sum > max_sum_ending_here:\n            max_sum_ending_here = current_sum\n        \n        # Update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return max_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n    for i in range(size):\n        current_sum += a[i]\n        while current_sum > max_sum:\n            current_sum -= a[start]\n            start += 1\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        raise ValueError(\"List length should be greater than or equal to the size of the subarray\")\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i < len(a)-size+1:\n            current_sum -= a[i+size]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of the two tuples\n    test_union = test_tup1 + test_tup2\n    # Sort the union in ascending order\n    test_union = sorted(test_union)\n    # Print the union\n    print(test_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Find the unique elements in the combined tuple\n    unique_elements = sorted(list(set(combined_tup)))\n    \n    # Output the unique elements\n    print(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union of two tuples\n    union = test_tup1 + test_tup2\n    # convert the list to set to remove duplicates and then to list\n    unique_union = sorted(list(set(union)))\n    return unique_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using the set() function\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Output the sorted list as a string\n    print(\"Union of the elements of the two tuples:\", \" \".join(str(x) for x in union_list))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of elements of two tuples\n    union = test_tup1 + test_tup2\n    # sort the elements of the union in ascending order\n    union = sorted(set(union))\n    # print the union of elements\n    print(union)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    # find the union of the lists\n    union = list(set(lst1 + lst2))\n    # sort the union in ascending order\n    union.sort()\n    # output the union in sorted order\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # use set() to get unique elements from both tuples\n    union = set(test_tup1) | set(test_tup2)\n    # convert set to list and sort it\n    union_list = sorted(list(union))\n    # return the sorted list of unique elements\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples into one\n    combined_tuple = test_tup1 + test_tup2\n\n    # Remove duplicate elements from the combined tuple\n    unique_tuple = list(set(combined_tuple))\n\n    # Sort the unique tuple in ascending order\n    sorted_tuple = sorted(unique_tuple)\n\n    # Output the sorted tuple\n    print(sorted_tuple)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a new tuple\n    combined_tuple = tuple(set(test_tup1 + test_tup2))\n    # Convert the tuple back to a list and sort it\n    sorted_list = sorted(list(combined_tuple))\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single tuple\n    combined_tuple = test_tup1 + test_tup2\n\n    # Remove duplicates from the combined tuple\n    unique_tuple = tuple(set(combined_tuple))\n\n    # Sort the unique tuple in ascending order\n    sorted_tuple = sorted(unique_tuple)\n\n    # Output the sorted tuple\n    print(\"The union of the elements of the given tuples is:\", sorted_tuple)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    current_length = 0  \n    start = 0  \n    for i in range(1, len(lst)):  \n        if lst[i] == lst[i-1]:  \n            current_length += 1  \n        else:  \n            if current_length > max_length:  \n                max_length = current_length  \n            current_length = 0  \n            start = i  \n    if current_length > max_length:  \n        max_length = current_length  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] == lst[i-1]:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 1\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            current_length = 0\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_len = 1\n        elif lst[i] == lst[i-1]:\n            max_len += 1\n        else:\n            max_len = max(max_len, 1)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists in a list.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n            \n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            max_length = max(max_length, len(lst[i:j+1]))  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    max_len = 0\n    current_len = 0\n    for num in lst:\n        if num == 1:\n            current_len += 1\n        else:\n            max_len = max(max_len, current_len)\n            current_len = 0\n    max_len = max(max_len, current_len)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize max_length to 0\n    max_length = 0\n\n    # Iterate over each sublist in the list\n    for sublist in lst:\n\n        # Initialize length to 0\n        length = 0\n\n        # Iterate over each element in the sublist\n        for element in sublist:\n\n            # Increment length by 1\n            length += 1\n\n            # Update max_length if length is greater than max_length\n            if length > max_length:\n                max_length = length\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"([^\"]*)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(?<!\\\\)\"(\\w+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\\b[A-Za-z]+\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?P<start>\"|\\'|\\{)(?P<value>.+?)(?P=start)'\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.group('value'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"' # find all values between quotes, excluding escaped double quotes\n    matches = re.findall(pattern, text) # find all matches using the regular expression pattern\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the pattern to match the quotation marks\n    pattern = r'\"(\\w+)\"'\n\n    # Use the pattern to match the values in the string\n    match = re.findall(pattern, text)\n\n    # Return the list of values\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*?(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"[^\"]*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\\").*?(?=\\\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    # Initialize variables for counting pairs\n    count = 0\n    prev = -1\n\n    # Iterate through the list of integers\n    for i in range(n):\n\n        # If the current element is not equal to the previous element\n        if arr[i]!= prev:\n\n            # Check if the next element is also not equal to the current element\n            if i+1 < n and arr[i+1]!= arr[i]:\n\n                # Increment the count by 1\n                count += 1\n\n            # Update the previous element to the current element\n            prev = arr[i]\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n    arr: list of integers\n    n: integer, the length of the list\n\n    Returns:\n    int: the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Calculate the number of possible pairs based on the frequency of each element in the list\n    count = 0\n    for num1 in freq:\n        if num1 == 1:\n            count += 1\n        elif num1 > 1:\n            for num2 in freq:\n                if num2 == num1-1 and freq[num2] > 0:\n                    count += 1\n                    freq[num2] -= 1\n    \n    # Return the count of possible pairs\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    # split the string into a list of characters\n    characters = list(word)\n    # return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    This function takes a string as an input and returns a list of characters in the string. \n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the sum to 0\n    total = 0\n    # loop through each digit of the number and add it to the total\n    while n > 0:\n        digit = n % 10\n        total += digit\n        # remove the last digit from the number\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string and then loop through each character and add it to a running total\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        n = 0 # to handle negative numbers as well\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    # convert the string to a list of characters\n    num_list = list(num_str)\n    # initialize a variable to store the sum\n    total = 0\n    # loop through each character in the list and add its value to the total\n    for num in num_list:\n        total += int(num)\n    # return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert integer to a string and split it into a list of characters\n    digits = list(str(n))\n    # Initialize a variable to store the sum of the digits\n    total_sum = 0\n    # Loop through the list of characters and add each integer digit to the total sum\n    for digit in digits:\n        total_sum += int(digit)\n    # Return the total sum of the digits\n    return total_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # Loop through each digit of the number and add it to the total sum\n    while n > 0:\n        digit = n % 10\n        total_sum += digit\n        n = n // 10\n    \n    return total_sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an input and returns True if the list is sorted in ascending order.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[1] < list1[0]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n\n    Args:\n        list1: a list to be checked for sorting\n\n    Returns:\n        True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        list1.remove(sublist)\n        list1.append(sorted_sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    # Iterate through each list in the input list\n    for lst in nums:\n        # Iterate through each element in the list and add it to the set if it's not already in the set\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Remove duplicates from each list in the given list\n    for i in range(len(nums)):\n        nums[i] = list(set(nums[i]))\n\n    # Flatten the list to get a list of unique numbers\n    nums = [num for sublist in nums for num in sublist]\n\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(lists):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in lists:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists and removes duplicate numbers from them.\n    \"\"\"\n    # Create a dictionary to store the unique numbers\n    unique_nums = {}\n    \n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # If the number is not already in the dictionary, add it\n            if num not in unique_nums:\n                unique_nums[num] = 1\n    \n    # Convert the dictionary to a list of unique numbers\n    unique_num_list = list(unique_nums.keys())\n    \n    # Return the list of unique numbers\n    return unique_num_list"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    unique_numbers = set(list_data)  # create a set of unique numbers in the list\n    product = 1  # initialize the product to 1\n\n    for number in unique_numbers:  # loop through each unique number in the set\n        product *= number  # multiply the product by the unique number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for i in list_data:\n        if i not in unique_numbers:\n            unique_numbers.append(i)\n    product = 1\n    for i in unique_numbers:\n        product *= i\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    \n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # convert list to set to remove duplicate values\n    unique_nums = set(list_data)\n\n    # initialize the product variable\n    product = 1\n\n    # calculate the product of the unique numbers\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)  # convert the list to a set to get unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num  # multiply the product by each unique number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n\n    Args:\n        list_data: list of integers\n\n    Returns:\n        The product of the unique numbers in the list.\n    \"\"\"\n\n    # Create a set to store unique numbers from the input list\n    unique_set = set(list_data)\n\n    # Calculate the product of unique numbers\n    unique_product = 1\n    for num in unique_set:\n        unique_product *= num\n\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return 1 if len(unique_nums) == 0 else reduce(lambda x, y: x*y, unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2*3.14159*r*r + 2*3.14159*h*r + 2*3.14159*r*h\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder using the formula:\n    # surface area = 2*pi*r*h\n    area = 2 * 3.14 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h # pi is a mathematical constant in Python"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder using the formula:\n    # 2\u03c0r^2 + 2\u03c0rh\n    surface_area = 2 * 3.14159 * r**2 + 2 * 3.14159 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r**2 + 2 * 3.14159 * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # pi is a mathematical constant approximately equal to 3.14159...\n    pi = 3.14159265359\n    \n    # Calculate the surface area of the cylinder using the formula:\n    # (2*pi*r^2 + pi*r*h)\n    surface_area = (2 * pi * r ** 2 + pi * r * h)\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    print(\"The surface area of the cylinder is: \", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265358979323846\n    area = 2 * pi * r * h\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    This function takes two lists as arguments and checks whether one of the list is a sublist of the other or not.\n    '''\n\n    # Check if the length of the first list is less than or equal to the length of the second list\n    if len(A) > len(B):\n        return False\n\n    # Traverse through each character of the first list and check if it is present in the second list\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    # If we reach this point, then the first list is a sublist of the second list\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) < len(B):\n        return False\n\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B: # if B is an empty list, return True\n        return True\n    if not A: # if A is an empty list, return False\n        return False\n    for i in range(len(A)): # iterate over the elements of A\n        if A[i] == B[0]: # check if A[i] is equal to the first element of B\n            if is_Sub_Array(A[i+1:],B[1:]): # call the function recursively with the rest of the A and B lists\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A)<len(B):\n        return \"False\"\n    elif len(A) == len(B):\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return \"False\"\n        return \"True\"\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return \"True\"\n        return \"False\""
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i = 0\n    j = 0\n    while j < len(A):\n        if A[j] == B[i]:\n            i += 1\n            j += 1\n            if i == len(B):\n                return True\n        else:\n            j += 1\n            i = 0\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A: #base case for empty list\n        return False\n    if B[0] in A: #base case for element in list\n        return True\n    return is_Sub_Array(A[1:],B) #recursive case for elements not in list\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    n=len(A)\n    m=len(B)\n    while i<n and j<m:\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i=i-j\n            j=0\n    if j==m:\n        return True\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = int(str(factorial)[-1])\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    # find factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # find last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize the result variable with 0\n    result = 0\n    # loop through each digit of the input number\n    while n > 0:\n        # extract the last digit of the input number\n        last_digit = n % 10\n        # add the last digit to the result variable\n        result += last_digit\n        # remove the last digit from the input number\n        n = n // 10\n    # return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Check if the given number is positive or not\n    if n < 0:\n        print(\"The given number should be positive.\")\n        return\n\n    # Initialize the result variable\n    result = 0\n\n    # Convert the given number to a string and split it into digits\n    num_str = str(n)\n    digits = [int(d) for d in num_str]\n\n    # Iterate over the digits of the given number\n    for digit in digits:\n        # Calculate the factorial of the digit\n        factorial = 1\n        for i in range(1, digit + 1):\n            factorial *= i\n\n        # Append the last digit of the factorial to the result\n        result = result * 10 + factorial % 10\n\n    # Return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Get the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize variables\n    last_digit = 0\n    factorial = 1\n\n    # Loop through digits in n\n    while n > 0:\n        # Get last digit of n\n        last_digit = n % 10\n\n        # Multiply factorial by last digit and update n\n        factorial *= last_digit\n        n //= 10\n\n    # Return last digit in factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the input number to string\n    n = str(n)\n    # Initialize variables for the factorial and last digit\n    factorial = 1\n    last_digit = 0\n    # Loop through the digits of the factorial and find the last digit\n    for i in range(len(n)):\n        factorial *= int(n[i])\n    # Return the last digit of the factorial\n    return int(factorial % 10)"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Create an empty list to store the final result\n    result = []\n    # Loop through the first list and add each element to the result list\n    for elem in list1:\n        result.append(elem)\n    # Loop through the second list and add each element to the result list\n    for elem in list2:\n        result.append(elem)\n    # Loop through the third list and add each element to the result list\n    for elem in list3:\n        result.append(elem)\n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    i = 0\n    result = []\n    while i < len(list1) + len(list2) + len(list3):\n        if i < len(list1):\n            result.append(list1[i])\n            i += 1\n        elif i < len(list1) + len(list2):\n            result.append(list2[i - len(list1)])\n            i += 1\n        else:\n            result.append(list3[i - len(list1) - len(list2)])\n            i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n    list1 (list): A list of integers\n    list2 (list): A list of integers\n    list3 (list): A list of integers\n\n    Returns:\n    list: A single list that contains all the elements of the three input lists.\n    \"\"\"\n    # Check that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All input lists must have the same length.\")\n    \n    # Initialize an empty list to hold the interleaved elements\n    interleaved_list = []\n    \n    # Iterate over each index of the first list\n    for i in range(len(list1)):\n        # Append the first element of each list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second element of each list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third element of each list to the interleaved list\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): first list of the same length\n        list2 (list): second list of the same length\n        list3 (list): third list of the same length\n\n    Returns:\n        list: a single flat list containing the elements of the input lists interleaved\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to store the interleaved elements\n    interleaved = []\n    # loop through each element in the first list\n    for element in list1:\n        # append the element to the interleaved list\n        interleaved.append(element)\n        # check if the current element is the last element in the list\n        if list1.index(element) == len(list1) - 1:\n            # if it is, append it to the interleaved list\n            interleaved.append(list2[list2.index(element)])\n            # if the next element is the last element in the list, append it to the interleaved list\n            if list2.index(list2[list2.index(element)]) == len(list2) - 1:\n                interleaved.append(list3[list3.index(element)])\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): first list of the same length\n        list2 (list): second list of the same length\n        list3 (list): third list of the same length\n\n    Returns:\n        list: the interleaved list\n    \"\"\"\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # get the lengths of the lists\n    len1 = len(list1)\n    len2 = len(list2)\n    len3 = len(list3)\n    # check if all lists have the same length\n    if len1!= len2 or len1!= len3:\n        raise ValueError(\"All lists must have the same length\")\n    # create a new empty list to hold the interleaved items\n    interleaved_list = []\n    # iterate through each item in each list and append it to the new list\n    for i in range(len1):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the new list of interleaved items\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All input lists must have the same length.\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # If the element is not equal to the corresponding element in the second tuple, append it to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            diff_list.append(test_tup1[i])\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of elements in the first tuple\n    set1 = set(test_tup1)\n    \n    # Create a set of elements in the second tuple\n    set2 = set(test_tup2)\n    \n    # Find the elements in the first set that are not in the second set\n    dissimilar_set = set1.symmetric_difference(set2)\n    \n    # Return the dissimilar elements as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set to store the dissimilar elements\n    dissimilar_set = set()\n    # Loop through the elements of the first tuple\n    for item in test_tup1:\n        # If the item is not in the second tuple, add it to the dissimilar set\n        if item not in test_tup2:\n            dissimilar_set.add(item)\n    # Convert the dissimilar set to a list and return it\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element is equal to the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # If they are not equal, add the current element to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a dictionary to store the count of elements in each tuple\n    counts = {}\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in counts:\n            counts[test_tup1[i]] = 0\n        counts[test_tup1[i]] += 1\n\n        if test_tup2[i] not in counts:\n            counts[test_tup2[i]] = 0\n        counts[test_tup2[i]] += 1\n\n    # Find the dissimilar elements by iterating through the counts dictionary\n    dissimilar = []\n    for key in counts:\n        if counts[key] > 1:\n            dissimilar.append(key)\n\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a list of even elements\n    even_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_list.append(item)\n    # return the even_list\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # Filter out the even elements from the tuple\n    even_tuple = list(filter(even_fnc, test_tuple))\n    \n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a new tuple to store even elements from the original tuple\n    even_tuple = ()\n    for elem in test_tuple:\n        if even_fnc(elem):\n            even_tuple = even_tuple + (elem,)\n    # Return the new tuple containing only even elements\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # loop through the tuple and check if each element is even\n    for i in test_tuple:\n        if even_fnc(i):\n            continue\n        else:\n            # if the element is odd, remove it from the tuple\n            test_tuple.remove(i)\n            break\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            even_elements += even_ele(item, even_fnc)\n        elif isinstance(item, tuple):\n            even_elements += even_fnc(item)\n        elif even_fnc(item):\n            even_elements.append(item)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_list = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            uneven_list.append(elem)\n    return uneven_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = []\n    for tup in test_tuple:\n        if isinstance(tup, list):\n            even_lst.append(even_fnc(tup))\n        else:\n            even_lst.append(tup)\n    return even_lst\n\ndef is_odd(x):\n    return x % 2 == 1"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def nested_list_check(lst): \n        return all(isinstance(i, list) for i in lst)\n\n    if not nested_list_check(test_tuple): \n        raise TypeError(\"Input must be a nested list.\")\n\n    def check_even(elem): \n        return even_fnc(elem)\n\n    def remove_uneven(lst): \n        return [x for x in lst if check_even(x)]\n\n    def check_tuple(tup): \n        return all(isinstance(i, list) for i in tup)\n\n    def remove_nested_uneven(lst): \n        return [remove_uneven(x) for x in lst]\n\n    final_list = remove_nested_uneven(test_tuple)\n    return final_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_tuple.append(item)\n    return even_tuple\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_uneven(elem):\n        if even_fnc(elem):\n            return elem\n        return None\n\n    return [remove_uneven(elem) for elem in test_tuple if isinstance(elem, (list, tuple))]"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the surface area of the square pyramid\n    surface_area = 6*b*s + 6*s*s # Formula for square pyramid surface area\n    print(\"The surface area of the square pyramid is:\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * s) + (s * (s+b)) + (b * (b+s))\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * s + 2 * s * b + 2 * b * b + 6 * b * s * b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function takes in the base edge b and the height s of a square pyramid and returns the surface area of the pyramid.\n    \"\"\"\n    # Formula to calculate the surface area of a square pyramid:\n    # Surface area = 1/2 * base * height\n    return 0.5 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = 2 * base * height + 2 * height * height\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s * 2  #calculating the area of the pyramid using Heron's formula\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the area of each triangle of the pyramid\n    area_1 = 0.5 * b * b\n    area_2 = 0.5 * s * s\n\n    # add up the areas of all triangles\n    surface_area = area_1 + area_2\n\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Calculate the area of the base\n    base_area = b * b\n    \n    # Calculate the area of the sides\n    side_area = (b * b * 3) / 2\n    \n    # Calculate the total area of the pyramid\n    total_area = base_area + side_area + (b * b * 3)\n    \n    # Calculate the perimeter of the pyramid\n    perimeter = (b * 4) + (s * 4)\n    \n    # Calculate the surface area of the pyramid\n    surface_area = 2 * total_area\n    \n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Calculate the length of the base of the pyramid and the length of the side of the pyramid\n    l = b\n    h = s\n\n    #Calculate the area of the base and the area of the side of the pyramid\n    area_base = l*l\n    area_side = l*h\n\n    #Add the areas of the base and side and divide by 2 to get the surface area\n    surface_area = (area_base + area_side)/2\n\n    #Return the surface area\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and checks if it is empty.\n\n    Parameters:\n    dict1 (dict): The dictionary to be checked.\n\n    Returns:\n    bool: True if the dictionary is empty, False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as an argument and checks if it is empty.\n    If it is empty, it returns True, else it returns False.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    # Calculate the first n terms of the sequence recursively\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2) + catalan_number(n-3)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2) + catalan_number(n-3)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (2*num-1) // (num+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n < 0:\n        raise ValueError(\"The input should be a non-negative integer.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (factorial(2*n) // factorial(n) // factorial(n))\n\ndef factorial(n):\n    '''\n    This function returns the factorial of a number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return catalan_number(n-1) + 2 * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using the formula: C(n, r) = (2n+1)!/(n!(n-r)!).\n    \n    Args:\n    n: integer, number of elements in the set\n    r: integer, number of elements in the subset\n    \n    Returns:\n    The nth Catalan number.\n    \"\"\"\n    # If n < 0 or r < 0, return None\n    if n < 0 or r < 0:\n        return None\n    \n    # Calculate the factorials\n    fact_n = 1\n    fact_n_minus_r = 1\n    for i in range(1, n+1):\n        fact_n *= i\n    for i in range(1, r+1):\n        fact_n_minus_r *= i\n        \n    # Calculate the Catalan number using the formula\n    catalan_num = (2*n+1) // fact_n * (2*n+1) // fact_n_minus_r\n    \n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(2, num+1):\n        catalan.append(catalan[i-1]*i)\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return binomial(2 * n, n) / factorial(n)\n\ndef binomial(n, k):\n    \"\"\"\n    Returns the binomial coefficient C(n, k).\n    \"\"\"\n    if k > n:\n        return 0\n    else:\n        numerator = factorial(n)\n        denominator = factorial(k) * factorial(n - k)\n        return numerator // denominator\n\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(1, num + 1):\n        catalan.append(sum(catalan[:i]))\n    return catalan[-1]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        print(f\"Adverb: {match[0]} Position: {text.index(match[0])}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # regular expression pattern to match adverb ending with ly\n    pattern = r'\\b[a-zA-Z]+\\sly\\b'\n    # find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n    # if no matches, return None\n    if not matches:\n        return None\n    # extract the positions of the matches and their corresponding adverbs\n    positions = []\n    adverbs = []\n    for match in matches:\n        positions.append(text.find(match))\n        adverbs.append(match)\n    # sort the positions in ascending order\n    positions.sort()\n    # return a list of tuples, where each tuple contains the position and adverb\n    return [(pos, adv) for pos, adv in zip(positions, adverbs)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function finds all the adverbs ending with ly in a given text and returns a list of tuples containing the adverb and its position in the text.\n    '''\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, text)\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n    \n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the adverbs\n    adverbs = []\n    \n    # Iterate over the matches and add each match to the adverbs list\n    for match in matches:\n        adverbs.append(match)\n    \n    # Return the list of adverbs and their positions in the text\n    return adverbs, [(m.start(), m.end()) for m in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b[a-z]+ly\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n    # Loop through each match and append its position to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return a list of the positions of the matches\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)$'\n    # Use the pattern to find all matches in the text\n    matches = re.findall(pattern, text)\n    # If there are matches, return a list of tuples with the positions of the matches and the adverbs themselves\n    if matches:\n        return [(match.start(), match.group()) for match in matches]\n    # If there are no matches, return an empty list\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b\\w+ly\\b'\n\n    # Find all occurrences of adverbs using the pattern\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n\n    # Iterate over all matches and append their positions to the adverb_positions list\n    for match in matches:\n        adverb_positions.append(text.index(match))\n\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)\\w+'\n\n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Create a dictionary to store the adverb and its position\n    result = {}\n\n    # Iterate over all matches and add them to the dictionary\n    for match in matches:\n        adverb, position = match\n        result[adverb] = position\n\n    # Return the dictionary containing all adverbs and their positions\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'(?<=\\b)ly\\b'\n    # Use the regular expression to find all matches in the text string\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    # Loop through each match and append its position to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return a tuple containing the positions of the adverbs and the list of matches\n    return (positions, matches)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n    for i in range(n):\n        # If the heap is not empty and the current item is less than the smallest item in the heap, remove the smallest item from the heap\n        if heap and heapq.heappop(heap) > items[i]:\n            heapq.heappush(heap, items[i])\n        # If the heap is empty or the current item is greater than or equal to the smallest item in the heap, add the current item to the heap\n        else:\n            heapq.heappush(heap, items[i])\n    # Return the n most expensive items from the heap\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and a positive integer n as input.\n    It returns a list of the n most expensive items in the dataset.\n\n    For example:\n\n    items = [(\"apple\", 10), (\"banana\", 5), (\"cherry\", 2), (\"date\", 8)]\n    n = 2\n    output = [\"banana\", \"cherry\"]\n\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap with a default comparison function\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    # iterate over the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # if the heap size is greater than n, remove the minimum item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # initialize a min-heap of size n\n    min_heap = []\n\n    # iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # if the heap size exceeds n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # return the n most expensive items in the heap\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and the maximum number of items to return as input.\n    The function returns a list of the n most expensive items from the given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    result = []\n    for _ in range(n):\n        result.append(heap[0][1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the dataset by price in descending order\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # Create a min heap to keep track of the top n items\n    min_heap = []\n    \n    # Iterate through the sorted dataset and add the top n items to the min heap\n    for i in range(n):\n        heapq.heappush(min_heap, sorted_items.pop())\n        \n    # Iterate through the sorted dataset again and add the remaining items to the min heap\n    for item in sorted_items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item[1] < min_heap[0][1]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n                \n    # Extract and return the top n items from the min heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n    # Iterate through the items in the dataset\n    for item in items:\n        # If the heap is not full, add the current item to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # If the heap is full and the current item is cheaper than the smallest item in the heap, remove the smallest item from the heap\n        elif item < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n    # Return the n most expensive items from the dataset\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min-heap of n items to store the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items in decreasing order\n    return [-item for item in heap]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0 or n >= len(l):\n        return None\n    if n == 1:\n        return [l[0]]\n    return split_Arr(l[1:], n - 1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list.\")\n        return\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return []\n    else:\n        mid = len(l)//2\n        left = l[:mid]\n        right = l[mid:]\n        first_part = left + [right[n-mid]]\n        second_part = right[:n-mid]\n        return [first_part, second_part]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"The length of the list is less than the nth element\")\n        return None\n    else:\n        mid = len(l)//2\n        first_part = l[:mid]\n        second_part = l[mid:]\n        return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    mid = n // 2\n    first_part = l[:mid]\n    second_part = l[mid:]\n    \n    # add the second part to the end of the first part\n    l = first_part + second_part\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # split the list at the nth element\n    mid = n - 1\n    left = l[:mid]\n    right = l[mid:]\n\n    # add the first part to the end of the right list\n    l = left + right\n\n    # return the modified list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Create a new list to hold the new elements\n    new_list = []\n\n    # Loop through the original list\n    for i in range(len(l)):\n        # If we have reached the nth element, break out of the loop\n        if i == n:\n            break\n\n        # Add the element to the new list\n        new_list.append(l[i])\n\n    # Add the first part of the original list to the end of the new list\n    new_list += l[:n]\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the list length is greater than n\n    if len(l) > n:\n        # split the list at the nth element\n        mid = n//2\n        left = l[:mid]\n        right = l[mid:]\n        # add the left part to the end of the list\n        l.extend(left)\n        # return the modified list\n        return l\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    lst_left, lst_right = l[:n], l[n:]\n    # Concatenate the first part of the list with the second part of the list\n    new_list = lst_right + lst_left\n    # Return the new list\n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 1:\n        return \"Invalid input\"\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between the largest and smallest value in a given list.\n\n    :param nums: A list of integers.\n    :return: A single integer representing the difference between the largest and smallest value in the list.\n    \"\"\"\n    # Find the maximum value in the list\n    max_num = max(nums)\n    \n    # Find the minimum value in the list\n    min_num = min(nums)\n    \n    # Return the difference between the maximum and minimum values\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the smallest and largest values in the list\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"Error: List should have at least 2 elements\"\n    else:\n        return abs(max(nums) - min(nums))"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables\n    max_num = nums[0]\n    min_num = nums[0]\n    \n    # loop through the list and update min and max values\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    \n    # return the difference between max and min values\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        min_num = min(nums)\n        max_num = max(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List must have at least two elements.\"\n    \n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i*i == b:\n            result.append(i)\n        elif i*i > b:\n            break\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a variable to store the result\n    result = []\n    \n    # loop through the numbers from a to b\n    for num in range(a, b+1):\n        # check if the square of the number is a perfect square\n        if num ** 0.5 ** 2 == num:\n            # if it is, add it to the result list\n            result.append(num)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = []\n    \n    # Loop through all integers between the two given numbers\n    for i in range(a, b + 1):\n        # Check if the integer is a perfect square\n        if i ** 0.5 == int(i ** 0.5):\n            # If it is, add it to the result list\n            result.append(i)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        j = i*i\n        if j == i:\n            print(i, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            perfect_squares.append(i)\n    return perfect_squares\n\nprint(perfect_squares(1, 10))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize variables for storing the result\n    result = []\n\n    # loop through each number between a and b\n    for num in range(a, b+1):\n\n        # check if the number is a perfect square\n        if num == int(num**0.5)**2:\n\n            # if it is, add it to the result list\n            result.append(num)\n\n    # return the result list\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # if a is greater than b, swap the values of a and b\n    if a > b:\n        a, b = b, a\n\n    # find the square root of b using binary search\n    low, high = a, b\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == b:\n            return [mid]\n        elif mid * mid < b:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # if b is not a perfect square, return empty list\n    return []"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables to keep track of the number of perfect squares between a and b\n    count_a = 0\n    count_b = 0\n\n    # Check if a is a perfect square\n    if a == int(a ** 0.5 + 0.5):\n        count_a += 1\n    else:\n        # Check if a is greater than the square root of b\n        if a > int(b ** 0.5 + 0.5):\n            count_a += 1\n        else:\n            # Check if a is greater than the square root of a\n            if a > int(a ** 0.5 + 0.5):\n                count_a += 1\n\n    # Check if b is a perfect square\n    if b == int(b ** 0.5 + 0.5):\n        count_b += 1\n    else:\n        # Check if b is greater than the square root of a\n        if b > int(a ** 0.5 + 0.5):\n            count_b += 1\n        else:\n            # Check if b is greater than the square root of b\n            if b > int(b ** 0.5 + 0.5):\n                count_b += 1\n\n    # Print the number of perfect squares between a and b\n    print(\"Number of perfect squares between\", a, \"and\", b, \":\", count_a + count_b)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + cmath.exp(1j*y)*y)\n\n    x_new = r * cmath.cos(theta)\n    y_new = r * cmath.sin(theta)\n\n    return (x_new.real, x_new.imag, y_new.real, y_new.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radius of the point\n    theta (float): The angle in radians\n\n    Returns:\n    tuple: The x and y coordinates of the point in rectangular coordinates\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    \n    Inputs:\n    r (float): radius\n    theta (float): angle in radians\n    \n    Returns:\n    (float,float): rectangular coordinates\n    '''\n    \n    # Convert angle from radians to degrees\n    theta_deg = theta * 180 / cmath.pi\n    \n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return (r*cmath.cos(theta), r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): The radius of the polar coordinate.\n    y (float): The angle of the polar coordinate in radians.\n\n    Returns:\n    tuple: A tuple containing the x and y components of the rectangular coordinate.\n    \"\"\"\n\n    # Convert angle to degrees\n    angle = cmath.phase(y) * 180 / cmath.pi\n\n    # Calculate rectangular components\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n\n    return (rect_x.real, rect_y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert the polar coordinates to complex numbers\n    z = x + y*1j\n    \n    # Convert the complex number to rectangular coordinates\n    r = abs(z)\n    theta = cmath.phase(z)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    \n    # Print the rectangular coordinates\n    print('x =', x_rect)\n    print('y =', y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes a radius r and an angle theta in radians and converts them to rectangular coordinates.\n    '''\n    # Convert angle to degrees\n    theta_deg = theta * 180 / cmath.pi\n    \n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Return the rectangular coordinates\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    '''\n    # Convert angle to radians\n    theta = theta * cmath.pi / 180\n    \n    # Calculate x and y coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return (x,y)\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Find the index of the last element in the list\n    lastIndex = len(newList) - 1\n    # Interchange the first and last elements of the list\n    newList[0], newList[lastIndex] = newList[lastIndex], newList[0]\n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # getting the length of the list\n    n = len(newList)\n\n    # checking if the list is empty or not\n    if n == 0:\n        print(\"List is empty\")\n        return\n\n    # swapping the first and last elements\n    first_last = newList[0], newList[-1]\n    newList[0], newList[-1] = first_last\n\n    # printing the modified list\n    print(\"Modified list:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"The list must have at least 2 elements\")\n        return\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The modified list is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # swap first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list is empty\n    if length == 0: \n        return []\n    \n    # Check if the list has only one element\n    elif length == 1:\n        return [newList[0]]\n    \n    # Swap the first and last elements\n    else:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the length of the list is less than or equal to 1\n    if len(newList) <= 1: \n        return newList \n    else: \n        # get the first and last elements of the list\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        # create a new list with the first element as the last element and the last element as the first element\n        new_list = [last_elem] + newList[:-1] + [first_elem]\n        return new_list\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"List must have at least two elements.\"\n\n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the length is greater than 1\n    if length > 1:\n        # Swap the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    # Check if the list is empty\n    if len(newList) == 0:\n        return newList\n    # Check if the list has only one element\n    elif len(newList) == 1:\n        return [newList[0]]\n    # Check if the list has more than one element\n    else:\n        # Interchange the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0\n    for i in range(n-k+1):\n        total += (n-i)/(i+1)\n    return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return (binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,k+1):\n        sum += ((-1)**(n-i))*binomial_Coeff(n-1,i-1)/(i+1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # To calculate the binomial coefficient, we need to use the formula:\n    # C(n,k) = C(n,n-k) + C(n-1,n-k)\n    # Therefore, we can use recursion to calculate these values.\n    # The base case is when k is 0 or n is 0, so we return 0.\n    if k == 0 or n == 0:\n        return 0\n    # If k is greater than or equal to n, there is only one way to choose all k elements from the n elements.\n    elif k >= n:\n        return n\n    # Otherwise, we calculate the value of C(n,k) using recursion:\n    # C(n,k) = C(n,n-k) + C(n-1,n-k)\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize the result\n    result = 1\n\n    # loop through the consecutive combinations of numbers\n    for i in range(k, n+1):\n        result *= i\n\n    # return the result\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Find the sum of the product of consecutive binomial co-efficients\n    sum_of_prod = 0\n    for i in range(k,n+1):\n        sum_of_prod += (i*(n-i+1))\n    \n    return sum_of_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k: \n        return 0\n    else: \n        result = 1\n        for i in range(k,n+1): \n            result *= i\n        return result\n\ndef sum_product(n): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 1: \n        return 0\n    else: \n        sum = 0\n        for i in range(1,n+1): \n            sum += binomial_Coeff(n,i)\n        return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\",sum_product(n))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two arguments, n and k, representing the number of elements and the number of elements to be included in the sum, respectively.\n    The function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(k,n+1):\n        sum += (i*(n-i+1)) / math.factorial(i)\n    \n    # Return the sum of the product of consecutive binomial coefficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0 or k > n:\n        return -1\n    else:\n        return (n * (n-1) * (n-2) *... * k * (k-1) * (k-2)) // (k*(k-1)*...*2*1)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove any leading zeroes in the ip address\n    ip = re.sub(r'^\\d+(\\.0)+', '', ip)\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet of the IP address\n    ip = re.sub(r'^(?:0+(?::|$))', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\d)(?=\\.)', r'\\1.', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Regular expression pattern to match an IP address\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    # Match the IP address using the regular expression pattern\n    if re.match(pattern, ip):\n        # Remove leading zeroes from each octet in the IP address\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            if ip_list[i] == '0':\n                ip_list[i] = ''\n        # Join the remaining parts of the IP address with dots\n        new_ip = '.'.join(ip_list)\n        return new_ip\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        ip = re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', '', ip)\n        return ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Use regular expression to match any leading zeroes in the ip address\n    ip = re.sub(r'^0+', '', ip)\n    # Remove leading zeroes from the ip address\n    ip = ip.lstrip('0')\n    # Check if the ip address is still valid\n    if '.' in ip and len(ip.split('.')) == 4:\n        # Return the modified ip address\n        return ip\n    else:\n        # If the ip address is not valid, raise an error\n        raise ValueError('Invalid IP address.')"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+(\\.\\d+){3}\\Z', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        ip = match.group(0)\n        ip = re.sub(r'^\\d+(\\.0)+', '', ip)\n        return ip\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[1]\n    diff = first_even - first_odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and (even_num is None or num < even_num):\n            even_num = num\n        elif num % 2!= 0 and (odd_num is None or num < odd_num):\n            odd_num = num\n    \n    if even_num is None:\n        return None\n    else:\n        return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0:\n        first_even = even_num\n    else:\n        first_even = even_num + 1\n    if odd_num % 2!= 0:\n        first_odd = odd_num\n    else:\n        first_odd = odd_num - 1\n    diff = first_even - first_odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    \"\"\"\n    even = lst[0] if lst[0] % 2 == 0 else lst[1]\n    odd = lst[0] if lst[0] % 2!= 0 else lst[1]\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd number.\n    \"\"\"\n    even = lst[0]\n    odd = lst[1]\n    if even % 2 == 0:\n        return even - odd\n    else:\n        return odd - even"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd numbers of a list.\n\n    Args:\n        lst: A list of integers.\n\n    Returns:\n        An integer.\n    \"\"\"\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes in a list of numbers and finds the difference of the first even and first odd number.\n    '''\n    even_num = next(num for num in lst if num % 2 == 0)\n    odd_num = next(num for num in lst if num % 2!= 0)\n    return even_num - odd_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "Let's write the Python script for the given problem.<|im_sep|>"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a variable to keep track of the number of swaps required\n    count = 0\n\n    # Iterate through each bit of the binary strings\n    while num1!= num2:\n        # Calculate the sum of the bits that are different\n        diff = num1 ^ num2\n\n        # Calculate the number of set bits in the sum\n        set_bits = diff & -(diff & 1)\n\n        # Swap the set bits in the strings\n        num1, num2 = num1 ^ set_bits, num2 ^ set_bits\n\n        # Increment the count of swaps\n        count += set_bits\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize an empty dictionary to store the count of 1s in the binary strings\n    count1 = {}\n    count2 = {}\n\n    # Iterate through each character in the first binary string\n    for char in str1:\n        # If the character is a 1, increment the count in the count1 dictionary\n        if char == '1':\n            if char in count1:\n                count1[char] += 1\n            else:\n                count1[char] = 1\n\n        # If the character is a 0, increment the count in the count2 dictionary\n        else:\n            if char in count2:\n                count2[char] += 1\n            else:\n                count2[char] = 1\n\n    # Initialize two variables to store the counts of 1s in the second binary string\n    count1_1 = 0\n    count2_1 = 0\n\n    # Iterate through each character in the second binary string\n    for char in str2:\n        # If the character is a 1, increment the count of 1s in the count1_1 variable\n        if char == '1':\n            count1_1 += 1\n\n        # If the character is a 0, increment the count of 1s in the count2_1 variable\n        else:\n            count2_1 += 1\n\n    # Calculate the minimum number of swaps required to convert the first binary string to the second binary string\n    min_swaps = 0\n    count1_swap = 0\n    count2_swap = 0\n\n    # Iterate through each key in the count1 dictionary\n    for key in count1:\n        # Calculate the count of 1s in the key in the second binary string\n        count2_key = 0\n        for i in range(len(str2)):\n            if str2[i] == key:\n                count2_key += 1\n\n        # If the count of 1s in the key in the second binary string is less than the count of 1s in the key in the first binary string,\n        # calculate the minimum number of swaps required to convert the first binary string to the second binary string\n        if count2_key < count1[key]:\n            # Calculate the minimum number of swaps required to convert the key in the first binary string to the key in the second binary string\n            min_swap_key = abs(count2_key - count1[key])\n\n            # If the minimum number of swaps required to convert the key in the first binary string to the key in the second binary string is less than the current minimum number of swaps,\n            # update the minimum number of swaps\n            if min_swap_key < min_swaps:\n                min_swaps = min_swap_key\n\n                # Calculate the minimum number of swaps required to convert the first binary string to the second binary string by swapping the key in the first binary string\n                # for the key in the second binary string\n                count1_swap = count2[key]\n                count2_swap = count1[key]\n\n    # Calculate the minimum number of swaps required to convert the first binary string to the second binary string by swapping the count1_1 variable and the count2_1 variable\n    if count1_1 < count2_1:\n        min_swaps += abs(count1_1 - count2_1)\n\n    # Return the minimum number of swaps required to convert the first binary string to the second binary string\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert the first binary string to the second binary string.\n    \n    The input binary strings are given as strings and each string consists of characters '0' and '1'.\n    The length of the binary string can be up to 3000 characters long.\n    \n    Time Complexity: O(n)\n    \"\"\"\n    # Convert the binary strings to binary numbers\n    n1 = int(str1, 2)\n    n2 = int(str2, 2)\n    \n    # Initialize variables to keep track of swaps required\n    swaps = 0\n    i, j = n1.bit_length() - 1, n2.bit_length() - 1\n    \n    # Keep swapping digits until there are no more swaps required\n    while i >= 0 and j >= 0:\n        if n1 >> i & 1!= n2 >> j & 1:\n            swaps += 1\n            n1, n2 = n1 ^ (1 << i), n2 ^ (1 << j)\n        i -= 1\n        j -= 1\n    \n    # Return the minimum number of swaps required to convert n1 to n2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * n for _ in range(2)]\n    # base cases\n    dp[0][0] = 0\n    dp[0][1] = 1\n    dp[1][0] = 1\n    dp[1][1] = 0\n    \n    # filling dp table\n    for i in range(2, n + 1):\n        for j in range(2):\n            if str1[i - 1] == '0':\n                dp[j][i] = dp[j][i - 1]\n            elif str1[i - 1] == '1':\n                dp[j][i] = dp[j][i - 1] + dp[1 - j][i - 1]\n                \n    # calculating minimum number of swaps\n    min_swaps = 0\n    for i in range(n):\n        if str2[i] == '1':\n            min_swaps += dp[str1[i] == '0'][i]\n            \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert them.\n\n    Parameters:\n    str1 (str): A binary string representing a number.\n    str2 (str): A binary string representing a number.\n\n    Returns:\n    int: The minimum number of swaps required to convert the two binary strings.\n    \"\"\"\n\n    # Convert the strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a variable to store the minimum number of swaps\n    swaps = 0\n\n    # Perform bitwise XOR operation on the two numbers\n    xor = num1 ^ num2\n\n    # Initialize a flag to keep track of the bit position\n    flag = 0\n\n    # Iterate over all the bits in the binary number\n    while xor!= 0:\n        # Check if the current bit is set in the XOR result\n        if xor & 1 == 1:\n            # Check if the current bit is set in the original number\n            if num1 & 1 == 1 and num2 & 1 == 1:\n                # If both bits are set, then the current bit can be swapped with either of the two original bits.\n                # Update the flag to keep track of the swapped bit\n                flag = not flag\n                # Update the swaps variable by adding 1\n                swaps += 1\n        # Shift the bit position to the right by 1\n        xor >>= 1\n        # Shift the original number to the right by 1\n        num1 >>= 1\n        num2 >>= 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Iterate over all possible swaps\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # Swap the bits at positions i and len(str1)-i-1\n            if str1[i] == '0':\n                num1 = (num1 & (2 ** (len(str1)-i-1)-1)) | ((num2 & (2 ** (len(str1)-i-1)-1)) << i)\n            else:\n                num1 = (num1 & (2 ** i-1)) | ((num2 & (2 ** i-1)) >> (len(str1)-i-1))\n\n            if str2[i] == '0':\n                num2 = (num2 & (2 ** (len(str1)-i-1)-1)) | ((num1 & (2 ** (len(str1)-i-1)-1)) << i)\n            else:\n                num2 = (num2 & (2 ** i-1)) | ((num1 & (2 ** i-1)) >> (len(str1)-i-1))\n\n            # Update the minimum number of swaps\n            min_swaps = min(min_swaps, len(str1)-i-1)\n\n    # Convert the integers back to binary strings\n    str1 = bin(num1)[2:]\n    str2 = bin(num2)[2:]\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert both binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize variables to keep track of swaps\n    count = 0\n    swaps = 0\n\n    # check for common substrings\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            continue\n        else:\n            break\n    else:\n        return swaps\n\n    # swap digits to match common substring\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i]!= str2[i]:\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i+1] + str2[i+1:]\n            count += 1\n            swaps += 1\n\n    # check for common substrings again\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            continue\n        else:\n            break\n    else:\n        return swaps\n\n    # swap digits to match common substring again\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i]!= str2[i]:\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i+1] + str2[i+1:]\n            count += 1\n            swaps += 1\n\n    return swaps - count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2): \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert both binary strings into lists of 0 and 1\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # initialize variables for current swap count and minimum swap count\n    swap_count = 0\n    min_swap_count = 0\n\n    # loop through the lists of 0's and 1's\n    for i in range(len(list1)):\n        # if the current numbers do not match, swap them\n        if list1[i]!= list2[i]:\n            # increment the swap count and check if it is the minimum\n            swap_count += 1\n            if swap_count < min_swap_count:\n                min_swap_count = swap_count\n\n    # return the minimum swap count\n    return min_swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    len1 = len(str1)\n    len2 = len(str2)\n    swaps = 0\n    min_swaps = float('inf')\n    for i in range(len1):\n        if str1[i]!= str2[i]:\n            swaps += 1\n            min_swaps = min(min_swaps, swaps)\n        else:\n            swaps = 0\n    return min_swaps\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setrecursionlimit(10**6) #increase recursion limit to handle large tuples\n\n    def tuple_size_helper(t):\n        size = 0\n        for element in t:\n            size += tuple_size_helper(element)\n        return size\n\n    total_size = 0\n    for t in tuple_list:\n        total_size += tuple_size_helper(t)\n\n    return total_size\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the total size of all the tuples in bytes.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert the tuple to bytes and get the length\n    byte_list = bytearray(tuple_list)\n    size = len(byte_list)\n    # calculate the size in bytes\n    size_bytes = size * sys.getsizeof(byte_list)\n    return size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            size += tuple_size(item)\n        elif isinstance(item, str):\n            size += sys.getsizeof(item)\n        else:\n            size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize variables to keep track of the current index of arr1 and arr2\n    i = j = 0\n    \n    # Loop through the first array until we reach the kth element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n    \n    # If we reach this point, it means we didn't find the kth element\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize two pointers for each array\n    i = j = 0\n\n    # Find the middle of both arrays and compare the elements at the middle\n    # pointers of the two arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n\n    # If the first array has elements left to be considered, return the kth element\n    if i < len(arr1):\n        return arr1[i]\n\n    # If the second array has elements left to be considered, return the kth element\n    if j < len(arr2):\n        return arr2[j]\n\n    # If both arrays have elements left to be considered, return the kth element\n    return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1, n2 = len(arr1), len(arr2)\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    \n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the two arrays\n    n1, n2 = len(arr1), len(arr2)\n\n    # Find the minimum length of the two arrays\n    min_len = min(n1, n2)\n\n    # Initialize two pointers, one from each array\n    i, j = 0, 0\n\n    # Initialize a variable to keep track of the current kth element\n    current_kth = 0\n\n    # Loop through the minimum length of the two arrays\n    while i < min_len and j < min_len:\n        # Compare the current elements of the two arrays\n        if arr1[i] < arr2[j]:\n            # If the current element of arr1 is smaller, increment i\n            i += 1\n        elif arr1[i] > arr2[j]:\n            # If the current element of arr2 is smaller, increment j\n            j += 1\n        else:\n            # If the current elements are equal, increment both pointers\n            i += 1\n            j += 1\n\n        # Increment the current kth element\n        current_kth += 1\n\n        # Check if the current kth element is equal to k\n        if current_kth == k:\n            return arr1[i - 1]\n\n    # If the kth element is not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Initialize the index of the first array\n    i = 0\n    \n    # Initialize the index of the second array\n    j = 0\n    \n    # Initialize the index of the result array\n    result_index = 0\n    \n    # Initialize the result array\n    result = []\n    \n    # Loop through the first array\n    while i < len(arr1) and j < len(arr2):\n        # If the element of the first array is smaller than the element of the second array, append it to the result array\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n            \n        # If the element of the first array is greater than the element of the second array, append it to the result array\n        elif arr1[i] > arr2[j]:\n            result.append(arr2[j])\n            j += 1\n            \n        # If the element of the first array is equal to the element of the second array, append it to the result array and increment both indices\n        else:\n            result.append(arr1[i])\n            i += 1\n            j += 1\n    \n    # If there are still elements in the first array, append them to the result array\n    while i < len(arr1):\n        result.append(arr1[i])\n        i += 1\n    \n    # If there are still elements in the second array, append them to the result array\n    while j < len(arr2):\n        result.append(arr2[j])\n        j += 1\n    \n    # Return the kth element from the result array\n    return result[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three sorted arrays, arr1, arr2, and k,\n    and returns the kth smallest element from the first array, arr1.\n    \"\"\"\n    i = 0\n    j = 0\n    min_index = -1\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if min_index == -1 or k == 1:\n                min_index = i\n                k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if min_index == -1 or k == 1:\n                min_index = i\n                k -= 1\n            i += 1\n            j += 1\n\n    if min_index == -1:\n        return None\n    else:\n        return arr1[min_index]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    i = j = 0\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n\n    if i < len1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, else False.\n    \"\"\"\n    # Initialize the sum of digits to zero\n    sum_digits = 0\n    # Convert the number to a string\n    n_str = str(n)\n    # Iterate through each digit in the string\n    for digit in n_str:\n        # Add the power of the digit to the sum of digits\n        sum_digits += int(digit) ** len(n_str)\n    # Return True if the sum of digits is equal to the original number, else False\n    return sum_digits == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    sum = 0\n    temp_num = number\n    \n    while temp_num > 0:\n        digit = temp_num % 10\n        sum += digit ** 3\n        temp_num //= 10\n    \n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    number_str = str(number)\n    number_sum = 0\n    \n    for digit in number_str:\n        digit_int = int(digit)\n        number_sum += digit_int ** len(number_str)\n    \n    return number_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # convert the number to a string\n    number_str = str(number)\n    # initialize the sum of the digits to zero\n    sum_of_digits = 0\n    # iterate over each digit of the number\n    for digit in number_str:\n        # convert each digit to an integer and add it to the sum of digits\n        sum_of_digits += int(digit) ** 3\n    # check if the sum of digits is equal to the original number\n    if sum_of_digits == number:\n        # if it is, return True\n        return True\n    else:\n        # otherwise, return False\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and remove any non-numeric characters\n    number_string = ''.join(filter(str.isdigit, str(number)))\n    # Create a list of the digits of the number\n    digit_list = [int(d) for d in number_string]\n    # Calculate the sum of the square of each digit\n    square_sum = sum(d**2 for d in digit_list)\n    # Compare the sum of the square of each digit to the original number\n    if square_sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    while number > 0:\n        digit = number % 10\n        total += digit ** 3\n        number //= 10\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a list of digits\n    digits = list(str(number))\n    \n    # Calculate the sum of the square of each digit\n    squared_digits = [int(digit)**2 for digit in digits]\n    \n    # Calculate the sum of the digits\n    total_sum = sum(digits)\n    \n    # Check if the total sum is equal to the original number\n    if total_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong_number(number):\n    if number < 10:\n        return False\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return number == sum\n\ndef armstrong_number(number):\n    if is_armstrong_number(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    A function to check if a number is Armstrong or not.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    sum_of_powers = 0\n    \n    for i in range(num_len):\n        power = num_len - 1 - i\n        digit = int(num_str[i])\n        sum_of_powers += digit ** power\n        \n    if num == sum_of_powers:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    armstrong = True\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        temp //= 10\n        sum += digit ** 3\n    if armstrong:\n        return num_str == str(sum)\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n\nn = int(input(\"Enter the value of n: \"))\nresult = sum_average(n)\nprint(\"Sum of first {} natural numbers is: {}\".format(n, result[0]))\nprint(\"Average of first {} natural numbers is: {}\".format(n, result[1]))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #initialize variables\n    sum = 0\n    count = 0\n    #loop through the first n natural numbers\n    for i in range(1,number+1):\n        #add each number to sum\n        sum += i\n        #increment count\n        count += 1\n    #find the average\n    average = sum/count\n    #print the result\n    print(\"Sum of first\",number,\"natural numbers:\",sum)\n    print(\"Average of first\",number,\"natural numbers:\",average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_ = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_ += i\n        count += 1\n    avg = sum_/count\n    return sum_, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Initialize sum and count to zero\n    sum = 0\n    count = 0\n\n    # Loop through the first n natural numbers and calculate the sum and count\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    # Calculate the average and return as a tuple\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    \n    for i in range(number):\n        total += i\n        count += 1\n        \n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # iterate over the first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n\n    # calculate the average\n    average = sum / count\n\n    # return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables to zero\n    sum_num = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, number+1):\n        # add the current number to the sum\n        sum_num += i\n        # increment the count\n        count += 1\n    \n    # calculate and return the sum and average\n    average = sum_num/count\n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count\n    sum = 0\n    count = 0\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the number to the sum and increment the count\n        sum += i\n        count += 1\n    # calculate the average\n    average = sum / count\n    # print the sum and average\n    print(\"Sum of first\", n, \"natural numbers is\", sum)\n    print(\"Average of first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Returns True if the given number is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The given number is even\")\n    else:\n        print(\"The given number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a positive integer as input and returns True if the number is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each character\n    freq_dict = {}\n    # Iterate through the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    # Iterate through the dictionary and find the first repeated character\n    for char in freq_dict:\n        if freq_dict[char] == 2:\n            return char\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(s):\n    \"\"\"\n    Given a string, return the first character that appears more than once in the string.\n    If there are no repeated characters, return None.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    \n    # Find the first repeated character in the string\n    for c, count in freq.items():\n        if count > 1:\n            return c\n    \n    # If no repeated character was found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert the string to a set to remove duplicates\n    set1 = set(str1)\n    # loop through the set to find the first repeated character\n    for char in set1:\n        if str1.count(char) > 1:\n            return char\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 2:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string. If no repeated character is found, the function will return None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # loop through the string and count the frequency of each character\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # find the first repeated character by looping through the string again\n    for char in str1:\n        if char_freq[char] == 2:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if i*i > n:\n            break\n        if i*i*i == n:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    lucid = []\n    for i in range(3, n + 1):\n        lucid.append(i ** 2 + i + 1)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 2\n    while num <= n:\n        if num == len(str(num)) * 2:\n            lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if i <= n:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\nprint(get_ludic(10)) # Output: [2, 3, 5, 7]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given number is a lucid number or not.\n    '''\n    if n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(2, n+1):\n        lucid = i\n        while lucid*lucid <= n:\n            lucid += 1\n        ludic_numbers.append(lucid-1)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n):\n        for j in range(1, i+1):\n            if i % j == 0:\n                break\n        else:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(2, n+1):\n        if all(int(j**0.5)!= j for j in range(2, i)):\n            ludic_list.append(i)\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        j = 2\n        while j*j <= i:\n            if i % j == 0:\n                is_lucid = False\n                break\n            j += 1\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    # split the string by spaces and reverse each word\n    words = s.split()\n    words = list(reversed(words))\n    # join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)//2):\n        j = len(words)-i-1\n        words[i], words[j] = words[j], words[i]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split() # split the string into words\n    reversed_words = words[::-1] # reverse the words using slicing\n    return''.join(reversed_words) # join the reversed words back into a string with spaces\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into words\n    reversed_words = words[::-1]  # reverse the order of words using slicing\n    reversed_string = \" \".join(reversed_words)  # join the reversed words back into a string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    words = [word[::-1] for word in words]\n    # Join the words back into a string\n    reversed_string =''.join(words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse the order of the words\n    words = words[::-1]\n    # join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_s = \" \".join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n    # Check if the number is equal to 2\n    elif num == 2:\n        return True\n    # Check for divisors less than or equal to the square root of the number\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0 and not is_prime(i):\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is 1 or 0\n    if num == 1 or num == 0:\n        return False\n    # check if the number is greater than 1\n    elif num > 1:\n        # check if the number is divisible by any number between 2 and the square root of the number\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if is_prime(num):\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is 2 or 3\n    if num == 2 or num == 3:\n        return True\n\n    # Check for divisors up to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is greater than 1\n    if num <= 1:\n        return False\n    # check if the number is divisible by any number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    # if none of the above conditions are satisfied, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Search for the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches found, return None\n    if not matches:\n        return None\n\n    # Return the first match\n    return matches[0]"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.findall(pattern, text)\n\n    if not matches:\n        return None, None, None\n\n    start = matches[0].start()\n    end = matches[-1].end()\n    match = matches[0]\n\n    return match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the regex pattern\n    pattern_obj = re.compile(pattern)\n\n    # Find all matches of the pattern in the text\n    matches = pattern_obj.finditer(text)\n\n    # Initialize an empty list to store the matches\n    literals = []\n\n    # Iterate over the matches and add them to the literals list\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[0].end()\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        literal = match.group(0)\n        start = match.start()\n        end = match.end()\n        return literal, start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2]\n    else:\n        return None\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initialize the first term of the series\n    first_term = 0\n\n    # Initialize the next term of the series\n    next_term = 1\n\n    # Find the nth bell number\n    for i in range(1, n+1):\n        # Calculate the nth term of the series\n        nth_term = (2*first_term**2) + (4*next_term**2) - (4*first_term*next_term**2)\n\n        # Update the values of the first and next terms of the series\n        first_term = next_term\n        next_term = nth_term\n\n    return first_term"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth Bell number using the Bell's theorem.\n\n    Args:\n    n (int): The nth Bell number to find.\n\n    Returns:\n    int: The nth Bell number.\n    '''\n\n    # Calculate the (n-1)th Bell number using the Bell's theorem\n    bell_n_minus_1 = (n-1) * (3*n-1) // 2\n\n    # Return the nth Bell number\n    return bell_n_minus_1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        print(\"Invalid input. Please enter a non-negative integer.\")\n        return\n    \n    # Initialize the first bell number to 1\n    bell_number = 1\n    \n    # Iterate over all previous bell numbers up to n-1\n    for i in range(1, n):\n        # Calculate the next bell number by adding the previous bell number and the previous previous bell number\n        next_bell_number = bell_number + bell_number - 1\n        # Update the bell number to the current next bell number\n        bell_number = next_bell_number\n    \n    # Return the nth bell number\n    return bell_number"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    This function takes a positive integer n and returns the nth Bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    This function calculates the nth Bell number.\n    '''\n    return (2 * n * (n + 1)) // 3"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [1, 1]\n    for i in range(2, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2*n-1)*(bell_Number(n-1))"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # check if L is negative or 0\n    if L <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return None\n    \n    # check if k is less than or equal to 0 or greater than the length of the list\n    if L > len(list1) or L <= 0:\n        print(\"Invalid input. Please enter a positive integer less than or equal to the length of the list.\")\n        return None\n    \n    # create a new list without the k'th element\n    list2 = list1[:L-1]\n    \n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) < L:\n        raise ValueError(\"The length of the list is less than L.\")\n    elif L == 1:\n        return []\n    else:\n        for i in range(1, len(list1) - L + 1):\n            j = 0\n            while j < len(list1) - i:\n                list1[j], list1[j + L - 1] = list1[j + L - 1], list1[j]\n                j += 1\n        return list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(list1[L-1])\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    for i in range(L):\n        k -= 1\n        list1.remove(list1[k])\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L\n    #print(\"n =\", n, \"k =\", k)\n    \n    # Remove the k'th element from the list\n    if k <= n:\n        list1.pop(k-1)\n        return list1\n    else:\n        print(\"Error: k is greater than or equal to the length of the list.\")\n        return None\n        \n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and the value of k as input and returns a new list with the k'th element removed.\n\n    Args:\n    list1 (list): list from which kth element needs to be removed\n    L (int): k value\n\n    Returns:\n    list: list with the k'th element removed\n    \"\"\"\n    k = L - 1\n    new_list = list1[:k] + list1[k+1:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_val = max(max_val, test_list[i][N - 1])\n        elif i > N - 1:\n            max_val = max(max_val, test_list[i][N - 1 - i])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, max(test_list[i]))\n        else:\n            max_value = max(max_value, max(test_list[i]))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(matrix, N):\n    max_val = float('-inf')\n    for row in matrix:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    \"\"\"\n    # Get the number of columns in the matrix\n    num_columns = len(test_list[0])\n    \n    # Find the nth column\n    nth_column = []\n    for row in test_list:\n        nth_column.append(row[N-1])\n    \n    # Find the maximum value in the nth column\n    max_value = max(nth_column)\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = 0\n        for j in range(len(test_list[i])):\n            if j == N-1:\n                max_val = max(max_val, test_list[i][j])\n        return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    \n    for i in range(len(test_list)):\n        if i % N == 0:\n            max_num = max(max_num, max(test_list[i]))\n            \n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    This function takes a matrix as input and returns the maximum value of the Nth column.\n    \"\"\"\n    max_val = 0\n    for i in range(len(matrix)):\n        if max_val < matrix[i][N-1]:\n            max_val = matrix[i][N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cumulative_sum = 0\n    # iterate through the list of tuples and add the values to the cumulative sum\n    for i in test_list:\n        cumulative_sum += i[1]\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cumulative_sum_list = []\n\n    # Loop through each tuple in the test_list\n    for i in range(len(test_list)):\n        # Initialize a variable to store the current cumulative sum\n        current_sum = 0\n\n        # Loop through each value in the current tuple\n        for j in range(len(test_list[i])):\n            # Add the current value to the current cumulative sum\n            current_sum += test_list[i][j]\n\n            # Add the current cumulative sum to the cumulative_sum_list\n            cumulative_sum_list.append(current_sum)\n\n    # Return the cumulative_sum_list\n    return cumulative_sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        total += tup[0]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        if isinstance(i, tuple):\n            for j in i:\n                sum += j\n        else:\n            sum += i\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in test_list:\n        cumsum += i\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    # loop through each tuple in the list\n    for tup in test_list:\n        # add each value in the tuple to the cumulative sum\n        cum_sum += tup[0]\n        # add the value of the last element in the tuple to the cumulative sum\n        cum_sum += tup[-1]\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n\n    # Iterate over each element of the given tuple list\n    for i in test_list:\n        # If the element is a tuple, append the sum of its values to the cum_sum list\n        if isinstance(i, tuple):\n            cum_sum.append(sum(i))\n        # If the element is not a tuple, simply append the element to the cum_sum list\n        else:\n            cum_sum.append(i)\n\n    # Return the cum_sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to hold the cumulative sum\n    cum_sum = 0\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages for each tuple\n    avg_list = []\n    # Iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average of each tuple and append it to the avg_list\n        avg_list.append(sum(tup) / len(tup))\n    # Return the avg_list as a list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        sum_of_nums = 0\n        for num in num_tuple:\n            sum_of_nums += num\n        avg = sum_of_nums / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum = 0\n        for num in tup:\n            sum += num\n        result.append(sum / len(tup))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Convert the input tuple into a list of lists\n    list_of_lists = [list(x) for x in nums]\n\n    # Calculate the average value for each tuple\n    averages = []\n    for lst in list_of_lists:\n        total = sum(lst)\n        avg = total / len(lst)\n        averages.append(avg)\n\n    # Convert the list of averages back into a list of tuples\n    result = [tuple(x) for x in averages]\n\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_set in nums:\n        total = sum(num_set)\n        averages.append(total/len(num_set))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        averages.append(sum(num) / len(num))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum_ = 0\n        for x in num:\n            sum_ += x\n        avg = sum_ / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    # Iterate over each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average of the tuple using the sum() and len() functions\n        avg = sum(tup) / len(tup)\n        # Append the average to the list of averages\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths do not match\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element wise modulo operation on them.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    else:\n        result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must match.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < 0 or test_tup2[i] < 0:\n            raise ValueError(\"Tuple elements must be non-negative.\")\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    \n    # perform element-wise modulo\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Both tuples must be of the same length.\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element-wise modulo operation.\n    \"\"\"\n    # Check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n\n    # Create an empty list to store the result\n    result_list = []\n\n    # Perform element-wise modulo operation on the tuples\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] % test_tup2[i])\n\n    # Return the result tuple\n    return tuple(result_list)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    current_x = 0\n    current_y = 0\n    # Check if the last point is at the required position\n    if current_x == d and current_y == 0:\n        return jumps\n    # Check if the last point is at the upper left corner\n    if current_x == 0 and current_y == 0:\n        return jumps\n    # Check if the last point is at the bottom right corner\n    if current_x == steps and current_y == steps:\n        return jumps\n    # Perform the required jumps\n    for i in range(1, steps+1):\n        # Check if the current point is at the required position\n        if current_x == d and current_y == 0:\n            return jumps\n        # Check if the current point is at the upper left corner\n        if current_x == 0 and current_y == 0:\n            return jumps\n        # Check if the current point is at the bottom right corner\n        if current_x == steps and current_y == steps:\n            return jumps\n        # Check if the current point is at a valid position\n        if current_x + i < steps and current_y + i < steps:\n            # Move to the next point\n            current_x += i\n            current_y += i\n            # Increment the number of jumps\n            jumps += 1\n    # If no valid point is found, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    # Check if the given steps are less than or equal to 0\n    if steps <= 0:\n        return 0\n    \n    # Check if the given distance is less than or equal to 0\n    if d <= 0:\n        return 0\n    \n    # Initialize variables\n    jumps = 0\n    i = 0\n    j = d\n    \n    # Check for the number of jumps required\n    while i <= steps:\n        # If the current position is not at (d, 0)\n        if j!= 0:\n            # Check if the next position is at (d, 0)\n            if j == 1:\n                i += 1\n            else:\n                i += (j-1)\n            \n            j -= 1\n        else:\n            # If the current position is at (d, 0)\n            j -= 1\n        \n        # Increment the number of jumps\n        jumps += 1\n        \n        # If the next position is at (d, 0)\n        if j == 0:\n            # If the current position is at (d, 0), decrement the jumps by 1\n            if i == steps:\n                jumps -= 1\n            \n            # Increment the steps\n            i += 1\n    \n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # Store the number of jumps needed for each position\n    jumps = [float('inf')] * (steps+1)\n    \n    # Initialize the first position with 0 jumps\n    jumps[0] = 0\n    \n    # Initialize the last position with 0 jumps\n    jumps[steps] = 0\n    \n    # Fill the jumps array with minimum number of jumps required for each position\n    for i in range(steps):\n        # Check if the next position is reachable from the current position\n        if i+d < steps:\n            # Update the jumps array for the next position\n            jumps[i+d] = min(jumps[i+d], jumps[i] + 1)\n    \n    # Return the minimum number of jumps required to reach (d, 0) from origin\n    return min(jumps[i] for i in range(steps+1))"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    def is_valid(pos):\n        \"\"\"\n        Helper function to check if a position is within the bounds of the matrix.\n        \"\"\"\n        return 0 <= pos[0] < len(matrix) and 0 <= pos[1] < len(matrix[0])\n\n    matrix = [[0]*steps for _ in range(steps)]\n\n    pos = (d, 0)\n    count = 0\n    while is_valid(pos):\n        matrix[pos[0]][pos[1]] = 1\n        count += 1\n        if matrix[pos[0]+1][pos[1]] == 0:\n            pos = (pos[0]+1, pos[1])\n        elif matrix[pos[0]][pos[1]+1] == 0:\n            pos = (pos[0], pos[1]+1)\n        else:\n            break\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    current_level = 0\n    min_jumps = 0\n    curr_position = 0\n    \n    # Check if the starting point is (0, 0)\n    if curr_position == 0 and curr_position // steps == 0:\n        min_jumps += 1\n    \n    # Loop through the list of steps and check if the current position is at the starting point (0, 0)\n    while curr_position < len(steps) - 1:\n        if steps[curr_position] == steps[curr_position + 1]:\n            curr_position += 1\n            continue\n        \n        # Check if the current position can be reached at d distance from the starting point\n        if curr_position + steps[curr_position] >= len(steps) - 1:\n            if curr_position // steps == 0:\n                min_jumps += 1\n                break\n            else:\n                curr_position += steps[curr_position] - 1\n        else:\n            curr_position += steps[curr_position]\n        \n        # Check if the current position is at the starting point (0, 0)\n        if curr_position == 0 and curr_position // steps == 0:\n            min_jumps += 1\n        \n        # Check if the current position is at the destination point (d, 0)\n        if curr_position == len(steps) - 1 and curr_position // steps == d:\n            min_jumps += 1\n    \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Steps: Number of steps required to reach the destination point.\n    d: Distance from origin to destination point.\n\n    Returns: Integer, the number of jumps required.\n    \"\"\"\n\n    jumps = 0\n\n    for i in range(1, steps+1):\n        if d >= i:\n            d -= i\n            jumps += 1\n        else:\n            break\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    current_x = 0\n    current_y = 0\n    count = 0\n    visited = set()\n    \n    # Iterate through steps\n    for i in range(steps):\n        # Move in the direction of the distance\n        if (current_x, current_y) == (d, 0):\n            return count\n        if (current_x, current_y) in visited:\n            return -1\n        visited.add((current_x, current_y))\n        \n        # Move in the direction of the shortest distance\n        if current_x == d:\n            current_x, current_y = 0, current_y + 1\n        elif current_y == 0:\n            current_x, current_y = current_x + 1, 0\n        elif current_x == 0:\n            current_x, current_y = current_x + 1, current_y + 1\n        else:\n            current_x, current_y = current_x + 1, current_y\n    \n    # Reached the destination\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current = 0\n    visited = [False] * steps\n    \n    while current < steps - 1:\n        if visited[current]:\n            return -1\n        if current + d >= steps:\n            return jumps\n        visited[current + d] = True\n        jumps += 1\n        current += d\n        \n    if current == steps - 1:\n        return jumps\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Function to check if (x, y) is a valid destination for the first step\n    def is_valid_dest(x, y):\n        return x >= 0 and y >= 0 and x < steps and y < steps\n    \n    # Function to check if the given distance can be reached in the given number of steps\n    def is_valid_distance(distance):\n        return distance >= 0 and distance <= steps * d\n    \n    # Function to find the minimum number of jumps required to reach (d, 0) from origin in a 2d plane\n    def min_jumps(steps, d):\n        # Initialize variables\n        visited = [[False for _ in range(steps)] for _ in range(steps)]\n        steps_taken = 0\n        \n        # First step\n        current_x, current_y = 0, 0\n        current_distance = 0\n        \n        # Keep track of the minimum number of jumps required\n        min_jumps = 0\n        \n        # Loop through the steps\n        while is_valid_dest(current_x, current_y):\n            # If the current position is valid, mark it as visited and calculate the number of steps taken\n            if not visited[current_x][current_y]:\n                visited[current_x][current_y] = True\n                steps_taken += 1\n                \n                # If the distance is reached, break the loop\n                if current_distance == d:\n                    break\n                \n                # Calculate the minimum number of jumps required to reach the destination\n                min_jumps = min(min_jumps, steps - steps_taken)\n                \n            # If the current position is not valid, move to the next position\n            else:\n                current_x += 1\n                current_y += 1\n                current_distance += d\n                \n        # Return the minimum number of jumps required\n        return min_jumps\n    \n    # Return the minimum number of jumps required\n    return min_jumps(steps, d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables to keep track of the minimum number of jumps required\n    min_jumps = steps\n    # Initialize variables to keep track of the number of jumps taken so far\n    jumps = 0\n    # Loop through each step in the list\n    for i in range(steps):\n        # Check if the next step is at (d, 0)\n        if i + d >= steps:\n            # If it is, calculate the number of jumps required\n            jumps = i + 1\n            # Check if the current number of jumps is less than the minimum\n            if jumps < min_jumps:\n                min_jumps = jumps\n        else:\n            # If it's not, do not take any jumps\n            jumps = 0\n    # Return the minimum number of jumps required\n    return min_jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have equal length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length.\")\n    else:\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i] / nums2[i]\n            print(nums1[i])"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    # Divide the two lists element wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # check if the lengths of the lists are equal\n    if len(nums1)!= len(nums2):\n        return \"Lists are not of equal length.\"\n    else:\n        # create an empty list to store the result\n        result = []\n        # loop through the list\n        for i in range(len(nums1)):\n            # divide the elements of the two lists\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store the numbers\n    num_list = []\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # Otherwise, add the character to the end of the original string\n        else:\n            test_str = test_str + char\n\n    # Concatenate the num_list with the original string and return the result\n    return test_str.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    # initialize a list to store numbers\n    num_list = []\n    # loop through each character in the input string\n    for char in test_str:\n        # if the character is a digit, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n    # reverse the order of the num_list\n    num_list.reverse()\n    # concatenate the num_list with the remaining characters\n    result = ''.join(num_list)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    # initialize an empty list to store numbers\n    num_list = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number\n        if char.isdigit():\n            # add it to the number list\n            num_list.append(char)\n\n    # join the number list into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            new_str += char\n        else:\n            new_str += str(char)\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    new_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            new_str += char\n    return new_str + \"\".join(numbers)\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    move_num_index = 0\n    num_count = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number\n        if char.isdigit():\n            # Move the number to the end of the string\n            test_str = test_str[:move_num_index] + char + test_str[move_num_index:]\n            \n            # Update the move_num_index and num_count\n            move_num_index += 1\n            num_count += 1\n    \n    # Return the string with all the numbers moved to the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # remove all non-numeric characters from the string\n    test_str = \"\".join([char for char in test_str if char.isdigit()])\n\n    # convert the string to a list of characters\n    char_list = list(test_str)\n\n    # create a list to store the numbers\n    num_list = []\n\n    # iterate through each character in the list and append it to the num_list if it is a number\n    for char in char_list:\n        if char.isdigit():\n            num_list.append(char)\n\n    # reverse the order of the characters in the num_list and join them back into a string\n    reversed_str = \"\".join([num_list.pop() for _ in range(len(num_list))])[::-1]\n\n    # return the reversed string with all the numbers moved to the end\n    return reversed_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the non-numeric characters\n    num_str = \"\"\n    # loop through each character in the input string\n    for char in test_str:\n        # if the character is a digit, append it to the num_str string\n        if char.isdigit():\n            num_str += char\n        # if the character is not a digit, append it to the end of the original string\n        else:\n            test_str += char\n    # return the modified string with all digits at the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize a list to store the numbers\n    nums = []\n\n    # Loop through the string and find all the numbers\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n\n    # Reverse the list of numbers\n    nums.reverse()\n\n    # Combine the string with the numbers in reverse order\n    new_str = ''.join(nums)\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    num_str = ''.join(num_list)\n    return test_str + num_str\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Define a helper function to check if a number is divisible by k\n    def is_divisible_by_k(num, k):\n        return num % k == 0\n\n    # Create an empty list to store the size of the largest subset\n    max_size = []\n\n    # Loop through the numbers in the list\n    for num in a:\n        # Loop through the previous sizes of the largest subset\n        for size in max_size:\n            # Check if the current number is divisible by the size of the largest subset\n            if is_divisible_by_k(num, size):\n                # If it is, append the size of the largest subset to the current size list\n                max_size.append(size)\n                # Append the current number to the current size list\n                max_size.append(num)\n                # Stop looping through sizes and numbers\n                break\n        # If the current number is not divisible by any previous size, append the current size to the list\n        else:\n            max_size.append(num)\n\n    # Return the size of the largest subset\n    return len(max_size)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize a list to store the size of the largest subsets\n    sizes = []\n    # Loop through all possible pairs of numbers in the list\n    for i in range(len(a)):\n        for j in range(i+1, len(a)+1):\n            # If the pair is divisible by 2, update the size list\n            if a[i] % 2 == 0 and a[j] % 2 == 0:\n                sizes.append(j-i)\n    # Return the maximum size in the size list\n    return max(sizes)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Create a dictionary to store the sizes of subsets\n    subset_sizes = {}\n\n    # Initialize the maximum size to 0\n    largest_size = 0\n\n    # Iterate through the list\n    for i in range(len(a)):\n\n        # Calculate the size of the current subset\n        current_size = 1\n        j = i + 1\n        while j < len(a):\n            if a[j] % a[i] == 0:\n                current_size += 1\n                j += 1\n            else:\n                break\n\n        # If the current size is larger than the largest seen so far, update the largest size\n        if current_size > largest_size:\n            largest_size = current_size\n\n        # If the current size is not in the dictionary, add it to the dictionary with a value of 1\n        if current_size not in subset_sizes:\n            subset_sizes[current_size] = 1\n        else:\n            subset_sizes[current_size] += 1\n\n    # Return the maximum size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # First, find the largest subset of numbers that sum up to a given target\n    def find_largest_subset(nums, target):\n        n = len(nums)\n        dp = [[0] * (target + 1) for _ in range(n + 1)]\n        max_size = 0\n        \n        # Initialize the first row of the dp table\n        for i in range(n + 1):\n            dp[i][0] = 0\n        \n        # Initialize the first column of the dp table\n        for j in range(1, target + 1):\n            dp[0][j] = 0\n        \n        # Fill in the rest of the dp table\n        for i in range(1, n + 1):\n            for j in range(1, target + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - nums[i - 1]] + 1)\n                max_size = max(max_size, dp[i][j])\n        \n        return max_size\n    \n    # Find the largest subset of numbers that sum up to a given target\n    target = sum(a) // 2\n    largest_subset_size = find_largest_subset(a, target)\n    \n    # If the largest subset is a subset of [1, 2,..., n], return its size\n    if largest_subset_size <= n:\n        return largest_subset_size\n    \n    # Otherwise, return the largest subset of [1, 2,..., n] that is also a subset of the largest subset\n    for i in range(1, n + 1):\n        subset = [1] + [i] * (n - i + 1)\n        largest_subset_size = max(largest_subset_size, find_largest_subset(subset, target))\n    \n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    result = 0\n    i = 0\n    j = 1\n    while j < len(a):\n        if a[j] % a[i] == 0:\n            result += 1\n            j += 1\n        elif a[j] < a[i]:\n            i += 1\n            j = i + 1\n        else:\n            j += 1\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers in ascending order\n    a.sort()\n\n    # Initialize variables to keep track of the largest subset and the length of the largest subset\n    largest_set = [a[0]]\n    subset_size = 1\n\n    # Initialize variables to keep track of the current number and its index in the list\n    current_num = a[0]\n    current_index = 0\n\n    # Loop through the list of numbers\n    for i in range(1, len(a)):\n        # If the current number is divisible by the previous number, add it to the current subset and increment the subset size\n        if current_num % a[i] == 0:\n            current_num = current_num * a[i]\n            subset_size += 1\n            largest_set.append(a[i])\n        # If the current number is not divisible by the previous number, update the current subset size and remove the previous number from the current subset\n        else:\n            subset_size = 1\n            largest_set = [a[i]]\n\n    # Return the size of the largest subset\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list of numbers in ascending order\n    a = sorted(a)\n\n    # create a dictionary to store the sizes of subsets\n    sizes = {}\n\n    # initialize the maximum subset size to zero\n    max_size = 0\n\n    # loop through all pairs of numbers\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # calculate the size of the subset\n            size = abs(a[i] - a[j])\n\n            # check if the size of the subset is already in the dictionary\n            if size in sizes:\n                # if it is, add the current size to the existing size and update the maximum size\n                sizes[size] += 1\n                max_size = max(max_size, sizes[size])\n            else:\n                # if it's not, add the size to the dictionary and update the maximum size\n                sizes[size] = 1\n                max_size = max(max_size, sizes[size])\n\n    # return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize a dictionary to store the count of each number in the list\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Initialize a list to store the current subset\n    current_subset = []\n    \n    # Initialize variables to keep track of the largest and smallest numbers in the current subset\n    largest_num = -1\n    smallest_num = 1000\n    \n    # Loop through the list of numbers\n    for num in a:\n        # If the current number is the smallest number in the current subset\n        if num == smallest_num:\n            # Add the current number to the current subset\n            current_subset.append(num)\n            \n            # If the count of the current number is 1, update the largest and smallest numbers in the current subset\n            if count_dict[num] == 1:\n                largest_num = num\n                smallest_num = num\n            \n            # If the count of the current number is greater than 1, update the largest and smallest numbers in the current subset\n            elif count_dict[num] > 1:\n                largest_num = max(largest_num, num)\n                smallest_num = min(smallest_num, num)\n            \n            # Remove the current number from the dictionary and decrement its count\n            count_dict[num] -= 1\n            \n            # If the count of the current number is 0, move on to the next number in the list\n            if count_dict[num] == 0:\n                del count_dict[num]\n        \n        # If the current number is not the smallest number in the current subset\n        else:\n            # If the count of the current number is 1, update the largest and smallest numbers in the current subset\n            if count_dict[num] == 1:\n                largest_num = num\n                smallest_num = num\n            \n            # If the count of the current number is greater than 1, update the largest and smallest numbers in the current subset\n            elif count_dict[num] > 1:\n                largest_num = max(largest_num, num)\n                smallest_num = min(smallest_num, num)\n            \n            # Remove the current number from the dictionary and decrement its count\n            count_dict[num] -= 1\n            \n            # If the count of the current number is 0, move on to the next number in the list\n            if count_dict[num] == 0:\n                del count_dict[num]\n    \n    # Return the length of the largest subset\n    return len(current_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the given list\n    a.sort()\n\n    # Initialize variables to keep track of the largest subsets and the current largest subset\n    largest_subsets = [1, 2]\n    current_largest_subset = 2\n\n    # Loop through each element in the list\n    for num in a:\n        # Check if the current element can be added to the current largest subset\n        if num % current_largest_subset == 0:\n            # If it can, add it to the current largest subset and update the largest_subsets\n            current_largest_subset += 1\n            largest_subsets.append(current_largest_subset)\n        # If it cannot, move on to the next largest subset\n        else:\n            current_largest_subset = max(largest_subsets)\n\n    return max(largest_subsets)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two arrays in one sorted array\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Find the median\n    median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    length = len(arr)\n    mid = length // 2\n    if length % 2 == 0:\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    if n % 2 == 0:\n        return (arr1[n//2 - 1] + arr1[n//2]) / 2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays into one\n    merged_arr = arr1 + arr2\n\n    # Find the length of the merged array\n    length = len(merged_arr)\n\n    # Find the median index\n    median_index = length // 2\n\n    # If the length is odd, the median is the middle element\n    if length % 2 == 1:\n        median = merged_arr[median_index]\n    else:\n        # If the length is even, the median is the average of the middle two elements\n        median = (merged_arr[median_index - 1] + merged_arr[median_index]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the middle element of both arrays\n    mid1 = n//2\n    mid2 = n//2\n    \n    # if the length of the arrays is odd, take the middle element\n    if n % 2 == 1:\n        return max(arr1[mid1], arr2[mid2])\n    # if the length of the arrays is even, take the average of the middle elements\n    else:\n        return (max(arr1[mid1], arr2[mid2]) + min(arr1[mid1], arr2[mid2]))/2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 4.0\n    else:\n        median = (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 2.0\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        mid_index = n // 2\n        # If length of one list is odd, take the middle element\n        median = (arr1[mid_index] + arr2[mid_index]) / 2\n        return median\n    else:\n        # If length of one list is even, take the average of the middle two elements\n        mid_index = n // 2\n        median = (arr1[mid_index - 1] + arr1[mid_index] + arr2[mid_index - 1] + arr2[mid_index]) / 4\n        return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two arrays into one sorted array\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array in ascending order\n    merged_arr.sort()\n\n    # Calculate the middle index of the array\n    mid = n // 2\n\n    # If the length of the array is odd, the median is the middle element\n    if n % 2 == 1:\n        return merged_arr[mid]\n\n    # If the length of the array is even, the median is the average of the two middle elements\n    else:\n        return (merged_arr[mid - 1] + merged_arr[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge two sorted arrays into one array\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n\n    # Find the length of the sorted array\n    length = len(sorted_arr)\n\n    # Calculate the median\n    if length % 2 == 0:\n        median = (sorted_arr[length//2-1] + sorted_arr[length//2]) / 2\n    else:\n        median = sorted_arr[length//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the middle index of both arrays\n    mid1 = n//2\n    mid2 = n//2\n    \n    # Find the median of the first array\n    median1 = arr1[mid1] if n%2 == 0 else (arr1[mid1] + arr1[mid1-1]) / 2\n    \n    # Find the median of the second array\n    median2 = arr2[mid2] if n%2 == 0 else (arr2[mid2] + arr2[mid2-1]) / 2\n    \n    # Return the median of the two arrays\n    return max(median1, median2)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and an integer n as inputs.\n    The function computes the n-th power of each number in the list and returns a new list containing the results.\n    \"\"\"\n    results = []\n    for num in nums:\n        result = num ** n\n        results.append(result)\n    return results"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    :param nums: A list of numbers.\n    :param n: An integer representing the power to compute.\n    :return: A list of n-th powers of each number in the original list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are uppercase and False otherwise.\n    \"\"\"\n    for char in string:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n\n    # Convert the string to uppercase and return the result\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"The given list should have at least two elements.\"\n    \n    # Interchange first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Print the modified list\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop(0)\n    newList.insert(0, newList.pop())\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"Error: The list must have at least two elements.\"\n    \n    # swap the first and last element in the list\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the length of the list is less than or equal to 1. \n    # If it is, then there is nothing to swap. \n    if len(newList) <= 1: \n        return newList \n\n    # Swap the first and last elements of the list. \n    newList[0], newList[-1] = newList[-1], newList[0] \n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    #finding the last element in the list\n    n=len(newList)\n    last=newList[n-1]\n\n    #swapping the first and last element in the list\n    newList[0],newList[n-1]=newList[n-1],newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    # first element of the list\n    first_element = newList[0]\n    # last element of the list\n    last_element = newList[-1]\n    # interchanging first and last element\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    if len(newList) > 1:\n        # swapping the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # printing the modified list\n        print(\"Modified List:\", newList)\n    else:\n        print(\"List should have at least two elements\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Length of the list\n    n = len(newList)\n    # Checking if the length of the list is greater than 1\n    if n > 1:\n        # Swapping the first and last elements\n        newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Using the formula for the area of a triangle given its base and height\n    a = r * (r+math.sqrt(r**2-1))\n    b = r * (r-math.sqrt(r**2-1))\n    # The maximum area of any triangle is obtained by taking the maximum of the areas of all three triangles\n    return max(a, b, math.sqrt(r**2-a**2-b**2))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula for calculating the area of a triangle given its base and height\n    def triangle_area(b, h):\n        return 0.5 * b * h\n\n    # Function to calculate the semi-perimeter of a semicircle with given radius\n    def semicircle_perimeter(r):\n        return 2 * r\n\n    # Function to calculate the area of a triangle that can be inscribed in a semicircle with given radius\n    def max_triangle_area(r):\n        return triangle_area(semicircle_perimeter(r), r)\n\n    return max_triangle_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the circumference of the semicircle\n    c = 2 * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    s = (3 * r ** 2) / (4 * math.tan(math.pi / 3))\n    a = math.sqrt(s ** 2 - c ** 2)\n\n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    A = 3 * r ** 2 / (4 * math.tan(math.pi / 3))\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = max(A, a)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Constants\n    PI = math.pi\n    TWO_PI = 2 * PI\n    HALF_PI = PI / 2\n    \n    # Helper function to calculate the area of a triangle\n    def triangle_area_helper(a, b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n\n    # Calculate the semi-circle radius\n    semi_radius = r - math.sqrt(r**2 - 2 * r)\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = max(triangle_area_helper(r, semi_radius, semi_radius),\n               triangle_area_helper(r, semi_radius, -semi_radius),\n               triangle_area_helper(r, -semi_radius, semi_radius),\n               triangle_area_helper(r, -semi_radius, -semi_radius))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # define the values of the coefficients of the triangle\n    a = math.cos(math.radians(120))\n    b = math.sin(math.radians(120))\n    c = math.cos(math.radians(240))\n    d = math.sin(math.radians(240))\n    # calculate the area of the triangle\n    area1 = 0.5 * r * (a**2 + b**2)\n    area2 = 0.5 * r * (c**2 + d**2)\n    # find the area of the larger triangle\n    if area1 > area2:\n        area = area1\n    else:\n        area = area2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    # Find the area of the circle\n    area_circle = math.pi * r ** 2\n    # Find the side of the largest triangle that can be inscribed in the circle\n    side = math.sqrt(area_circle / (3 * math.tan(math.pi / 3)))\n    # Find the height of the largest triangle that can be inscribed in the circle\n    height = math.sqrt(area_circle / (3 * r))\n    # Return the area of the largest triangle\n    return (side * height) / 2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * r\n\n    # Calculate the areas of the triangles\n    a = math.sqrt(s * (s - r) * (s - 2*r)) / 4\n    b = math.sqrt(s * (s - r) * (s - 2*r)) / 4\n    c = math.sqrt(s * (s - r) * (s - 2*r)) / 4\n\n    # Calculate the maximum area of any triangle\n    max_area = max(a, b, c)\n\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # define the semi-circle equation\n    s = 2 * r\n\n    # find the semi-circle area using the formula for the area of a triangle\n    a = (s * s * (s - r) * (s - r) * (s - r) * (s - r)) ** 0.5\n\n    # find the largest triangle side\n    b = (s * (2 * r - s)) ** 0.5\n\n    # find the area of the largest triangle using Heron's formula\n    c = (a + b + b) / 2\n\n    # calculate the area of the triangle and return the result\n    return c"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the hypotenuse of the largest triangle\n    s = 2 * r\n    # calculate the area of the largest triangle\n    a = (3 * r**2) / 4\n    # calculate the area of the semicircle\n    area_semicircle = 3.14 * r**2\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_largest_triangle = 0.5 * (a + s)\n    # calculate the area of the smallest triangle that can be inscribed in the semicircle\n    area_smallest_triangle = 0.5 * (a - s)\n    # check which triangle has the largest area\n    if area_largest_triangle > area_smallest_triangle:\n        area = area_largest_triangle\n    else:\n        area = area_smallest_triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-circle radius as r/2\n    sr = r/2\n\n    # Calculate the length of a side of the largest triangle\n    # as the square root of (1 + (sr/2)^2)\n    a = math.sqrt(1 + (sr/2)**2)\n\n    # Calculate the area of the largest triangle\n    # as the semi-circle area divided by the square root of the length of its side\n    area = math.pi * sr**2 / a\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n\n    # Check if the input is valid\n    if not (isinstance(array, list) and all(isinstance(x, int) for x in array) and len(array) > 0 and array[0] > 0):\n        raise ValueError(\"Input should be a valid list of natural numbers.\")\n\n    # Sort the input list\n    array.sort()\n\n    # Find the first missing number\n    for i in range(start, end if end else len(array)):\n        if array[i]!= i + 1:\n            return i + 1\n\n    # Return the last element in the list\n    return len(array) + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If end is not specified, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Loop through the array and check for missing numbers\n    for i in range(start, end):\n        # If the current number is missing, return it\n        if i+1!= array[i]:\n            return i+1\n\n    # If the loop completes without finding a missing number, return None\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid < len(array) and array[mid] == mid:\n            start = mid + 1\n        elif mid > 0 and array[mid - 1] < mid:\n            return mid\n        else:\n            end = mid - 1\n\n    return -1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!=i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n            \n    return len(array)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the first missing number in a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index of the array to search. Defaults to 0.\n        end (int, optional): The ending index of the array to search. Defaults to None, which means the last index of the array.\n\n    Returns:\n        int: The first missing number in the array.\n    \"\"\"\n    if not array:\n        raise ValueError(\"Array is empty\")\n\n    if start < 0 or start >= len(array):\n        raise ValueError(\"Start index is out of range\")\n\n    if end is None:\n        end = len(array) - 1\n\n    if end >= len(array) or end < start:\n        raise ValueError(\"End index is out of range\")\n\n    missing = start\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            missing = i + 1\n            break\n\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n\n    if end==start:\n        if array[start]<array[end]:\n            return end+1\n        else:\n            return start+1\n\n    mid=start+(end-start)//2\n\n    if array[mid]<array[end]:\n        if array[start]<array[mid]:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid-1)\n\n    elif array[mid]>array[end]:\n        if array[mid]<array[end]:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,mid+1,end)\n\n    else:\n        return find_First_Missing(array,mid+1,end)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start>=end:\n        return start+1\n    mid = (start+end)//2\n    if mid>0 and array[mid-1]!=mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing the even numbers from the input list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple of two elements and returns all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n\n    # get the adjacent x coordinates\n    if x > 1:\n        adj.append((x-1, y))\n    if x < 10:\n        adj.append((x+1, y))\n    if y > 1:\n        adj.append((x, y-1))\n    if y < 10:\n        adj.append((x, y+1))\n\n    # get the adjacent coordinates with the same subsection\n    if sub:\n        for s in sub:\n            if abs(x-s[0]) == 1 and abs(y-s[1]) == 1:\n                adj.append(s)\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    # Check if the given tuple is empty\n    if not sub:\n        return [ele]\n\n    # Extract adjacent coordinates\n    adj_coords = [(x, y) for x in range(ele[0] - 1, ele[0] + 2) \n                  for y in range(ele[1] - 1, ele[1] + 2) if (x, y)!= ele]\n\n    # Add the adjacent coordinates to the sublist\n    sub.extend(adj_coords)\n\n    # Recursively extract adjacent coordinates for the new sublist\n    return adjac(adj_coords, sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)] + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple (x,y) and a list of adjacent coordinates (sub) as input and returns all the adjacent coordinates.\n\n    Example:\n    >>> adjac((0,0))\n    [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    The output will be a list of tuples containing all the adjacent coordinates of the given coordinate.\n    '''\n\n    x, y = ele\n    dx = [1, -1, 0, 0]\n    dy = [0, 0, 1, -1]\n    adj = []\n\n    for i in range(4):\n        nx, ny = x + dx[i], y + dy[i]\n        if (0 <= nx < 9) and (0 <= ny < 9) and (nx, ny) not in sub:\n            adj.append((nx, ny))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    x, y = ele\n    sub.append((x, y+1))\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    # Convert the tuple to a list to make it mutable\n    sub = list(sub)\n    # Extract the x and y coordinates of the element\n    x, y = ele\n    \n    # Iterate over the rows and columns of the grid\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # If the element is in a valid direction, add the adjacent coordinate to the sublist\n            if 0 <= x + i < len(sub[0]) and 0 <= y + j < len(sub):\n                if sub[x + i][y + j]!= None:\n                    sub.append((x + i, y + j))\n    # Remove duplicates and return the final list of adjacent coordinates\n    return list(set(sub))"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    adjacent = [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]\n    return [ele] + [adj for adj in adj if adj not in sub]"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    for char in text:\n        if char == \" \":\n            text = text.replace(\" \", \"_\")\n        elif char == \"_\":\n            text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    new_text = text.replace(' ', '_')\n    # replace underscores with whitespaces\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Initialize empty string to store the modified text\n    modified_text = ''\n    # Loop through each character of the input string\n    for char in text:\n        # Check if the character is a whitespace character\n        if char.isspace():\n            # If it is, replace it with an underscore\n            modified_text += '_'\n        else:\n            # If it's not, leave it as is\n            modified_text += char\n    # Return the modified string\n    return modified_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char =='':\n            result += '_'\n        elif char == '_':\n            result +=''\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the input string into words\n    words = text.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the word contains a space\n        if'' in words[i]:\n            # Replace spaces with underscores\n            words[i] = words[i].replace(' ', '_')\n        # Check if the word contains an underscore\n        elif '_' in words[i]:\n            # Replace underscores with spaces\n            words[i] = words[i].replace('_','')\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    new_text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    final_text = new_text.replace('_','')\n    return final_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    new_text = text.replace(' ', '_')\n    # replace underscores with spaces\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # split the string into words\n    words = text.split()\n    # iterate over the words and replace the spaces with underscores\n    new_words = []\n    for word in words:\n        new_word = word.replace(' ', '_')\n        new_words.append(new_word)\n    # join the new words with underscores\n    new_text =''.join(new_words)\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            if zero_count > 0:\n                num_list[i-zero_count], num_list[i] = num_list[i], num_list[i-zero_count]\n            else:\n                num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n    if len(zero_indices) > 0:\n        for index in reversed(zero_indices):\n            num_list.pop(index)\n            num_list.append(0)\n        return num_list\n    else:\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    if len(zero_index) > 0:\n        for i in range(len(num_list)-1, -1, -1):\n            if i not in zero_index:\n                num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize an empty list to store non-zero numbers\n    non_zero_list = []\n    # Loop through the input list\n    for num in num_list:\n        # If the number is not zero, append it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n    # Append all zeroes to the non-zero list\n    non_zero_list.extend([0] * num_list.count(0))\n    # Return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1 # Initialize the index of the zero to -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break # If a zero is found, break the loop\n        \n    if zero_index == -1: # If no zero is found\n        return num_list\n    \n    # Move all the non-zero numbers to their correct positions\n    for i in range(len(num_list)-1, zero_index-1, -1):\n        num_list[i+1], num_list[i] = num_list[i], num_list[i+1]\n        \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    # loop through the list and check if each element is zero\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            # if the element is zero, move it to the end of the list\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the zeroes moved to the end of the original list.\n    \"\"\"\n    # initialize a variable to keep track of the index of the last non-zero value\n    last_nonzero = len(num_list) - 1\n    \n    # iterate over the list from the beginning\n    for i in range(len(num_list)):\n        # if the current value is zero, swap it with the last non-zero value and decrease the last non-zero value\n        if num_list[i] == 0:\n            num_list[i], num_list[last_nonzero] = num_list[last_nonzero], num_list[i]\n            last_nonzero -= 1\n    \n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of integers and a number n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 1:\n        return sum(arr)\n    elif n == 2:\n        return sum(a^b for a in arr for b in arr)\n    else:\n        xor_sum = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                xor_sum ^= arr[i] ^ arr[j]\n        return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of n numbers and calculates the sum of XOR of all pairs of them.\n\n    :param arr: A list of n numbers.\n    :param n: The number of elements in the list.\n    :return: The sum of XOR of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Given a list of integers, n, compute the sum of xor of all pairs of integers in the list.\n    \"\"\"\n    # Initialize the sum to zero\n    xor_sum = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # Iterate over the remaining elements in the array\n        for j in range(i + 1, n):\n            # Compute the xor of the two elements\n            xor = arr[i] ^ arr[j]\n            # Add the xor to the sum\n            xor_sum += xor\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize sum of xor to zero\n    xor_sum = 0\n\n    # iterate through the list and for each pair of numbers, calculate xor\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n\n    # return the sum of xor\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR of all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers and a number n as input.\n    It returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and its size as input and returns the sum of XOR of all pairs of numbers in the list.\n    '''\n\n    xor_sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heapq.heapify(iterable)\n    for _ in range(len(iterable)):\n        max_value = heapq.heappop(iterable)\n        heapq.heappush(iterable, max_value)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the list to a max heap\n    max_heap = [float('-inf')] * len(iterable)\n    for i, item in enumerate(iterable):\n        max_heap[i] = item\n        hq.heapify(max_heap)\n    \n    # Convert the heap to a sorted list\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(hq.heappop(max_heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list so we can modify it\n    arr = list(iterable)\n    \n    # Build a max heap from the list\n    hq.heapify(arr)\n    \n    # Extract the maximum element from the heap and remove it\n    max_element = arr[0]\n    hq.heappop(arr)\n    \n    # Build a new heap from the remaining list\n    hq.heapify(arr)\n    \n    # Iterate through the new heap and append each element to the result list\n    result = []\n    while arr:\n        result.append(max_element)\n        max_element = hq.heappop(arr)\n    \n    # Return the sorted list\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    for i in range(n-1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        hq.heapify(iterable, 0, i-1)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    for i in range(len(iterable) // 2 - 1, -1, -1):\n        hq.heapify(heap, i, len(iterable))\n    for i in range(len(iterable) - 1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap, 0, i)\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heappop(iterable)\n    for _ in range(n):\n        iterable[0], iterable[-1] = iterable[-1], iterable[0]\n        hq.heappop(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max-heap\n    hq.heapify(iterable)\n\n    # Pop elements from the max-heap and append to a new list\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n\n    # Return the sorted list\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min-heap using a list comprehension\n    min_heap = [min(iterable)] + [min_heap[0]] * (len(iterable) - 1)\n    # Remove the min element from the heap and add it to the sorted list\n    for element in iterable[1:]:\n        min_heap[0] = element\n        hq.heapreplace(min_heap, min_heap[0])\n    return min_heap"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss.\n    \"\"\"\n\n    if actual_cost <= sale_amount:\n        return False\n    elif sale_amount <= 0:\n        return True\n    else:\n        if actual_cost - sale_amount >= 0:\n            return noprofit_noloss(actual_cost - sale_amount, sale_amount)\n        else:\n            return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (int): The cost of the items sold\n    sale_amount (int): The total amount of items sold\n    \n    Returns:\n    bool: True if no profit and no loss, False otherwise\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \n    Parameters:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The sale amount\n    \n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return False, \"Actual cost is less than or equal to the sale amount\"\n    elif sale_amount == 0:\n        return False, \"Sale amount is zero\"\n    else:\n        return True, \"Actual cost is greater than the sale amount\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check if the profit and loss are zero\n    if profit == 0 and loss == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n\n    # convert wind velocity to miles per hour\n    v = v * 2.237\n\n    # calculate wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * (v**0.16)\n\n    # round wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    v: wind velocity in km/h\n    t: temperature in celsius\n    '''\n    if t < 0:\n        print(\"Invalid temperature. Temperature should be a positive number.\")\n        return None\n\n    # convert temperature to Fahrenheit\n    f = 1.8 * t + 32\n\n    # calculate the wind chill index\n    if v < 10:\n        w = 13.12 + 0.6215 * v + 1.4 * (f - 32)\n    elif 10 <= v < 15:\n        w = 8.31 + 0.3965 * v - 0.0065 * (f - 32) + 1.4 * (f - 32)\n    elif 15 <= v < 25:\n        w = 5.68 + 0.34 * v - 0.0012 * (f - 32) + 1.4 * (f - 32)\n    elif 25 <= v < 35:\n        w = 3.11 + 0.288 * v - 0.0004 * (f - 32) + 1.4 * (f - 32)\n    elif 35 <= v < 45:\n        w = 1.45 + 0.237 * v - 0.0001 * (f - 32) + 1.4 * (f - 32)\n    elif 45 <= v < 60:\n        w = 0.57 + 0.18 * v - 0.00001 * (f - 32) + 1.4 * (f - 32)\n    else:\n        w = 0.0\n\n    # round the wind chill index to the nearest integer\n    w_int = math.ceil(w)\n\n    return w_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index using the formula: wci = 35.74 + 0.6215*t - 35.75*math.pow(v, 0.16) + 0.4275*math.pow(t, 0.16)\n    wci = 35.74 + 0.6215 * t - 35.75 * math.pow(v, 0.16) + 0.4275 * math.pow(t, 0.16)\n    # round the wind chill index to the nearest integer using the int() function\n    wci = int(wci + 0.5)\n    # return the wind chill index rounded to the nearest integer\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        print(\"Invalid wind velocity. Wind velocity should be greater than 0 km/h.\")\n        return None\n    elif t <= 0:\n        print(\"Invalid temperature. Temperature should be greater than 0 degrees Celsius.\")\n        return None\n    else:\n        # Calculate wind chill in celsius\n        wc = (13.12 + (0.6215 * t) + (11.37 * v**0.16) - (0.3965 * t**0.16)) / 5.556\n        # Round wind chill to the nearest integer\n        wc_int = math.floor(wc)\n        # Return wind chill rounded to the nearest integer\n        return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v (float): wind velocity in km/h\n        t (float): temperature in celsius\n\n    Returns:\n        int: wind chill index rounded to the next integer\n    \"\"\"\n    if t < 0:\n        raise ValueError(\"Temperature must be a non-negative value.\")\n\n    if v <= 0:\n        raise ValueError(\"Wind velocity must be a positive value.\")\n\n    # Convert wind velocity to m/s and temperature to Kelvin\n    v_ms = v * 1.60934  # m/s to m/s\n    t_K = t + 273.15  # celsius to Kelvin\n\n    # Calculate the wind chill index\n    wind_chill_index = math.ceil((13.12 + 0.6215 * t_K + 11.37 * v_ms - 0.3965 * t_K * v_ms) * 10) / 10\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t > 0:\n        R = 8.3144598\n        c = 1.0\n        alpha = 1.8\n        k = 0.6219716\n        delta = 2.0\n        rho = 1.225\n        L = 2.501\n        B = 1000\n        h = 1000\n        u = v*3.6\n        v_wind = u/L\n        c_wind = delta/math.log(1 + (B/u)**delta)\n        w_prime = (v_wind - k * c_wind * (math.exp(c_wind * (math.log(1 + (B/u)**delta))) - 1)) / (1 - k * c_wind * (math.exp(c_wind * (math.log(1 + (B/u)**delta))) - 1))\n        w_prime = w_prime * L\n        w_prime = w_prime / math.sqrt(c_wind)\n        T_e = w_prime * (math.exp(c_wind * (math.log(1 + (B/u)**delta))) - 1)\n        T_e = T_e * (h/L)\n        T_e = T_e * rho\n        T_e = T_e * math.exp((-c_wind * (math.log(1 + (B/u)**delta))) / (R * T_e))\n        T_e = T_e - (c_wind * (math.log(1 + (B/u)**delta))) / (R * T_e)\n        T_e = T_e - 273.15\n        T_e = T_e + 273.15\n        return round(T_e)\n    else:\n        print(\"Temperature cannot be zero or negative.\")\n`"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c = 2.5\n    f = math.floor(t * 9/5 + 32)\n    k = (v * c) / (f - t)\n    wc = math.floor((f - k) * (f - k)) / (math.pow((f - k), 2) + 610.78)\n    wc_rounded = math.ceil(wc)\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # calculate the dew point temperature\n    def dew_point(v, t):\n        # calculate the dew point using the formula: T = 243.04 * (e^((17.625*T)/(T+243.04))/(e^((17.625*T)/(T+243.04))+1))\n        e = math.exp(1)\n        T = (243.04 * (e**((17.625*t)/(t+243.04)) / (e**((17.625*t)/(t+243.04))+1)))\n        return T\n    \n    # calculate the wind chill index\n    def wind_chill_index(v, T):\n        # calculate the gust factor\n        def gust_factor(v):\n            # calculate the factor based on the given wind velocity\n            if v <= 3.5:\n                return 0.02\n            elif 3.5 < v <= 6:\n                return 0.05\n            elif 6 < v <= 8:\n                return 0.1\n            elif 8 < v <= 10:\n                return 0.15\n            else:\n                return 0.2\n        \n        # calculate the speed of sound\n        C = 0.62197189 * math.log(T)\n        \n        # calculate the gust factor and speed of sound\n        g = gust_factor(v)\n        cs = C + g * v\n        \n        # calculate the wind chill index\n        wci = 35.74 + 0.6215 * T - 35.75 * math.log(cs) + 0.4275 * T * math.log(cs)\n        return int(wci)\n    \n    # calculate the dew point temperature\n    T = dew_point(v, t)\n    \n    # calculate the wind chill index\n    wci = wind_chill_index(v, T)\n    \n    # return the wind chill index rounded to the nearest integer\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Formula for wind chill index calculation\n    # https://en.wikipedia.org/wiki/Wind_chill\n    # The formula is:\n    # C = 35.74 + 0.6215 * T - 35.75 * math.log(R) + 0.4275 * v + 0.0068 * t\n    # where C is the wind chill index, T is the temperature in celsius, R is the air humidity in percentage, and v is the wind velocity in km/h\n    # and t is the time in hours.\n    # Note: If T is less than 0, the function returns None.\n    # Note: If R is less than 0, the function returns None.\n\n    # Check if temperature is valid\n    if t < 0:\n        return None\n    \n    # Check if air humidity is valid\n    if R < 0:\n        return None\n    \n    # Calculate air humidity in kg/m^3\n    R_kg_m3 = (R * 1000)/100\n    \n    # Calculate C\n    C = 35.74 + 0.6215 * t - 35.75 * math.log(R_kg_m3) + 0.4275 * v + 0.0068 * t\n    \n    # Round C to the nearest integer\n    return round(C)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer.\n\n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: the wind chill index rounded to the nearest integer\n    \"\"\"\n    # calculate the temperature in Kelvin\n    k = t + 273.15\n\n    # calculate the dew point temperature\n    dp = 243.04 * math.exp((17.67 * k) / (k + 243.04))\n\n    # calculate the heat capacity at constant pressure\n    hcp = 1004.6 * math.exp((17.67 * dp) / (dp + 243.04))\n\n    # calculate the heat capacity at constant volume\n    hcv = hcp * (dp / (273.15 + dp))\n\n    # calculate the rate of fire\n    r = (v * 1.60934) / (hcv * (k - dp))\n\n    # calculate the wind chill index\n    wci = 35.74 + (0.6215 * t) - (35.75 * math.exp((-11.37 * t) / (t + 237.3))) + (0.4275 * (t - 11.37) * math.exp((-11.37 * t) / (t + 237.3)))\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize a variable to store the sum of names' lengths\n    name_sum = 0\n\n    # Iterate through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name\n            continue\n        # If the name doesn't start with a lowercase letter, add its length to the name_sum\n        else:\n            name_sum += len(name)\n\n    # Return the name_sum\n    return name_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define a list to store the names after removing the ones starting with lowercase letters\n    new_names = []\n\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and move on to the next name\n            continue\n        # If the name does not start with a lowercase letter, add it to the new_names list\n        new_names.append(name)\n\n    # Calculate the sum of the lengths of the names in the new_names list\n    sum_lengths = sum([len(name) for name in new_names])\n\n    # Return the sum of the lengths of the names in the new_names list\n    return sum_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name.isupper():\n            valid_names.append(name)\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    filtered_names = []\n    for name in sample_names:\n        if name.isupper() or name.islower():\n            filtered_names.append(name)\n    total_length = sum([len(name) for name in filtered_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [name for name in sample_names if not name[0].islower()] # remove lowercase names\n    total_length = sum(len(name) for name in sample_names) # sum the lengths of the remaining names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of lengths of valid names\n    valid_length_sum = 0\n    \n    # Iterate through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, skip it and continue to the next name in the list\n            continue\n        # If the name does not start with a lowercase letter, add its length to the valid_length_sum\n        else:\n            valid_length_sum += len(name)\n    \n    # Return the valid_length_sum\n    return valid_length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of the lengths of the names to 0\n    total_length = 0\n    \n    # Iterate over each name in the list\n    for name in sample_names:\n        # Check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # If it is, remove it from the name and continue to the next iteration\n            name = name[1:]\n        # Add the length of the non-lowercase name to the total length\n        total_length += len(name)\n    \n    # Return the total length of all the non-lowercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_to_sum = []\n    for name in sample_names:\n        if name[0].isupper():\n            names_to_sum.append(name)\n    return sum([len(name) for name in names_to_sum])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of lengths to zero\n    length_sum = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and continue to the next name\n            continue\n        # If it doesn't, add the length of the name to the sum\n        length_sum += len(name)\n    # Return the total length sum\n    return length_sum"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    matches = pattern.findall(items)\n    if matches:\n        return [item.strip() for item in matches[0].split(',')]\n    else:\n        return []"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)') # regex pattern to match parenthesis\n    return pattern.sub('', items) # replace the parenthesis with an empty string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern to match the parenthesis and what is inbetween them\n    pattern = r'\\([^\\)]+\\)'\n\n    # Use the re.sub() function to replace the parenthesis with an empty string\n    result = re.sub(pattern, '', items)\n\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\(.*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    # Remove the parenthesis\n    items = items.strip('()')\n    # Split the string based on the space\n    split_items = items.split()\n    # Remove the first and last element of the list (which are the parenthesis)\n    remove_list = split_items[0]\n    for i in range(len(split_items)-1):\n        remove_list +='' + split_items[i+1]\n    # Return the string with the parenthesis removed\n    return remove_list.strip()"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern to match the parenthesis and what's inbetween them\n    pattern = re.compile(r'\\([^)]*\\)')\n    \n    # Find all the parenthesis in the string and replace them with an empty string\n    items = pattern.sub('', items)\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(?P<text>\\(.*?\\))'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Returns True if the given number is a nonagonal number, False otherwise.\n    \"\"\"\n    return n == (n**2 - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n and returns True if it is a nonagonal number, False otherwise.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return (is_nonagonal(n-2) + is_nonagonal(n-1)) % 2 == 0"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define a counter variable to keep track of the number of nonagonal numbers\n    counter = 0\n    \n    # Loop through all the numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # If the number is not a multiple of 2 (i.e. 1, 3, 5, etc.),\n        # then it's a nonagonal number\n        if i % 2!= 0:\n            counter += 1\n            \n    # Return the nth nonagonal number\n    return counter"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Define the first and last nonagonal numbers\n    first_nonagonal = 0\n    last_nonagonal = n * (n + 1) // 2\n\n    # Iterate from first nonagonal to last nonagonal, checking for nonagonal numbers\n    nonagonal_count = 0\n    for i in range(first_nonagonal, last_nonagonal + 1):\n        if i % 2 == 1:  # Check if i is odd\n            nonagonal_count += 1  # Increment the count if it is odd\n\n        # Check if we have found the nth nonagonal number\n        if nonagonal_count == n:\n            return i"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # first nonagonal number is 1\n    if n == 1:\n        return 1\n    # second nonagonal number is 4\n    elif n == 2:\n        return 4\n    # calculating remaining nonagonal numbers\n    else:\n        return 4 * (2*n - 1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i**2\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_square(num):\n        return num == int(num ** 0.5 + 0.5) ** 2\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nonagonal_number(n):\n        if not is_prime(n):\n            return None\n\n        p = 3\n        q = 5\n        num = 2\n\n        while q * q <= n:\n            p = q\n            q += p\n\n            if is_square(num) and is_prime(num + p):\n                return num + p\n\n            if is_square(num) and is_prime(num + q):\n                return num + q\n\n            num += p\n\n        return None\n\n    return nonagonal_number(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    i = 1\n    j = 1\n    while i <= n:\n        j += 1\n        i += 1\n    return j - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the result\n    result = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Increment the result by (n-i)\n        result += (n - i)\n\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return (n - 1) * (2 * n - 1) // 2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*[a-z])z(?!\\w*)\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern to match 'z' at the start and end of a word\n    pattern = r'\\b[zZ]\\b'\n    # Use the re.search() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Check if the matches list is empty or not\n    if matches:\n        # If it is not empty, return True\n        return True\n    else:\n        # If it is empty, return False\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]+[zZ]\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # create a regular expression pattern to match 'z'\n    pattern = r'(?<!\\w)z(?!\\w)'\n    \n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # check if there are any matches\n    if matches:\n        # check if the match is at the start or end of the word\n        if not (matches[0][0].isalpha() and matches[0][-1].isalpha()):\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b(z)([a-zA-Z]+)\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"\\b[zZ][a-zA-Z]+[zZ]\\b\"\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall('\\b\\w+\\b', text)\n\n    # Loop through the words and check if they contain 'z' except at the start and end of the word\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            continue\n        if 'z' in word:\n            return True\n\n    # If no 'z' is found, return False\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern to match 'z' except at the start and end of a word\n    pattern = r'\\b(z)\\b'\n\n    # Use the re.search() function to search for the pattern in the text\n    result = re.search(pattern, text)\n\n    # If the pattern is found, return True. Otherwise, return False\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Check if 'z' is present at the start or end of a word\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    \n    # If no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k > len(input)-1:\n        return None\n\n    for i in range(k, len(input)):\n        input[i], input[k] = input[k], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k as input and reverses the array upto k.\n    \"\"\"\n    # Check if the position k is valid\n    if k > len(input) or k < 0:\n        return \"Invalid position\"\n    \n    # Reverse the array from the first position to the position k-1\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the array from position k to the end\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the array up to the given position\n    input[:k] = input[:k][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        return input\n    elif k == 1:\n        return input[::-1]\n    else:\n        return reverse_Array_Upto_K(input[::-1], k-1) + [input[k-1]]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k >= len(input):\n        return \"Invalid Input\"\n    input = input[k:] + input[:k]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # find the length of the array\n    length = len(input)\n\n    # check if the position is within the bounds of the array\n    if k > length:\n        return \"Invalid Position\"\n\n    # create a new array of the length of the input array\n    reversed_array = [0] * length\n\n    # reverse the array upto the given position\n    for i in range(k-1, length-1):\n        reversed_array[i] = input[length-i-1]\n\n    # reverse the remaining elements of the array\n    for i in range(length-k):\n        reversed_array[length-i-1] = input[i]\n\n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    for i in range(k-1, -1, -1):\n        input[i], input[-(i+1)] = input[-(i+1)], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k and returns a reversed array.\n    '''\n    # Initialize an empty list to hold the reversed array\n    reversed_array = []\n    # Reverse the array up to the position k-1\n    for i in range(k-1, -1, -1):\n        reversed_array.append(input[i])\n    # Reverse the rest of the array\n    for i in range(k, len(input)):\n        reversed_array.append(input[i])\n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Initialize two pointers, one at the beginning and other at the end of the array\n    start = 0\n    end = len(input) - 1\n    \n    # While the pointers are not crossing each other, reverse the array between them\n    while start < end:\n        # Swap the values at the pointers\n        input[start], input[end] = input[end], input[start]\n        # Move the pointers towards each other\n        start += 1\n        end -= 1\n        \n    # Reverse the array upto position k (if it is less than the length of the array)\n    if k < len(input):\n        input = input[:k][::-1] + input[k:]\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)-1, -1): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i] \n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = (test_tup, test_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tuple = new_tuple + (value,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict = dict(test_dict)  # convert dictionary to a regular dictionary\n    return test_tup + tuple(test_dict.items())  # concatenate tuple and dictionary items and return the result"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        if key not in test_tup:\n            test_tup = test_tup + (key, test_dict[key])\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # iterate through the tuple\n    for item in test_tup:\n        # check if the item is a dictionary\n        if isinstance(item, dict):\n            # add the dictionary to the item\n            item.update(test_dict)\n    # return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with the items from the original tuple and the new dictionary\n    new_dict = {**test_dict, **test_tup}\n    # Convert the new dictionary to a tuple and return it\n    return tuple(new_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Check if the input is valid\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input should be a tuple\")\n    if not isinstance(test_dict, dict):\n        raise TypeError(\"Input should be a dictionary\")\n\n    # Add the dictionary to the tuple\n    test_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    new_tuple += (test_dict,)\n    return new_tuple"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_average = float('-inf')\n    visited = set()\n    path_cost = 0\n    current_pos = (0, 0)\n    steps = 0\n\n    while steps < N**2:\n        steps += 1\n        current_cell = (current_pos[0] + 1) % N, current_pos[1]\n        next_cell = (current_pos[0], current_pos[1] + 1) % N, (current_pos[0] + 1) % N\n\n        if current_cell in visited or next_cell in visited:\n            continue\n\n        visited.add(current_cell)\n        visited.add(next_cell)\n        path_cost += cost[current_pos[0]][current_pos[1]] + cost[next_cell[0]][next_cell[1]]\n\n        if steps == N**2:\n            path_cost -= cost[N-1][N-1]\n            current_pos = N - 1, N - 1\n\n        if steps > N**2:\n            path_cost += cost[0][0]\n\n        if current_pos == (N-1, N-1):\n            if path_cost > max_average:\n                max_average = path_cost\n                print('Path:', current_pos, 'Cost:', path_cost, 'Steps:', steps)\n            path_cost = 0\n            visited.clear()\n            current_pos = 0, 0\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    # DP table to store maximum average of a path\n    dp = [[0 for j in range(N)] for i in range(N)]\n    # Initialize first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n    # Fill the rest of the DP table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    # Find maximum average of a path\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                continue\n            avg = dp[i][j] / (i+j+1)\n            max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = 0\n    visited = [[False]*n for i in range(n)]\n    stack = []\n    stack.append((0,0))\n    \n    while stack:\n        x, y = stack.pop()\n        if x == n-1 and y == n-1:\n            avg = sum(cost[x][y])\n            if avg > max_avg:\n                max_avg = avg\n        else:\n            visited[x][y] = True\n            if x+1 < n and not visited[x+1][y]:\n                stack.append((x+1,y))\n            if y+1 < n and not visited[x][y+1]:\n                stack.append((x,y+1))\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Initialize variables\n    N = len(cost)\n    max_avg = float('-inf')\n    paths = []\n    \n    # Compute the maximum average for each cell\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            total_cost = cost[i][j]\n            visited_cells = 1\n            if i > 0:\n                total_cost += cost[i-1][j]\n                visited_cells += 1\n            if j > 0:\n                total_cost += cost[i][j-1]\n                visited_cells += 1\n            if i < N-1:\n                total_cost += cost[i+1][j]\n                visited_cells += 1\n            if j < N-1:\n                total_cost += cost[i][j+1]\n                visited_cells += 1\n            max_avg = max(max_avg, total_cost/visited_cells)\n            paths.append((i, j, visited_cells))\n    \n    # Find the maximum average path\n    max_path = (0, 0, 0)\n    for i in range(len(paths)):\n        if paths[i][2] > max_path[2]:\n            max_path = paths[i]\n    \n    # Print the result\n    print(\"Maximum average of path:\", max_avg)\n    print(\"Path: (row, col, cells visited)\")\n    for i in range(max_path[0], max_path[0]+max_path[1]+1):\n        print(i, end=\" \")\n    print()"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    \n    # Initialize variables\n    max_avg = 0\n    total_cost = 0\n    path_count = 0\n    \n    # Iterate over all possible starting positions (i, j)\n    for i in range(N):\n        for j in range(N):\n            # Check if this position is a valid starting position\n            if i == 0 and j == 0:\n                continue\n            \n            # Recursively compute the maximum average of the path starting at (i, j)\n            avg = maxAverageOfPath(cost[1:N, 1:N])\n            \n            # Update max_avg and total_cost if this path has a higher average than the current best\n            if avg > max_avg:\n                max_avg = avg\n                total_cost = avg * path_count + cost[i][j]\n                path_count = 1\n            elif avg == max_avg:\n                total_cost += avg * path_count + cost[i][j]\n                path_count += 1\n    \n    # Return the maximum average of any existing path\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    curr_avg = 0\n    curr_path_len = 0\n    visited = set()\n    paths = []\n\n    # Iterate through each cell\n    for i in range(n):\n        for j in range(n):\n            # If current cell is visited, skip\n            if (i, j) in visited:\n                continue\n\n            # Expand current path\n            curr_path = [(i, j)]\n            visited.add((i, j))\n            curr_path_len = 1\n            while (i+1, j) < (n, n) and (i, j+1) < (n, n) and (i+1, j+1) < (n, n):\n                if (i+1, j) not in visited and (i, j+1) not in visited and (i+1, j+1) not in visited:\n                    curr_path.append((i+1, j))\n                    visited.add((i+1, j))\n                    curr_path_len += 1\n                elif (i+1, j) in visited and (i, j+1) not in visited and (i+1, j+1) not in visited:\n                    curr_path.append((i+1, j))\n                    curr_path_len += 1\n                elif (i+1, j) not in visited and (i, j+1) in visited and (i+1, j+1) not in visited:\n                    curr_path.append((i+1, j))\n                    curr_path_len += 1\n                elif (i+1, j) not in visited and (i, j+1) not in visited and (i+1, j+1) in visited:\n                    curr_path.append((i+1, j))\n                    curr_path_len += 1\n                i += 1\n                j += 1\n\n            # Compute average of current path\n            curr_avg = sum(cost[i][j] for i, j in curr_path) / curr_path_len\n\n            # Update maximum average and paths\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n                paths = [curr_path]\n            elif curr_avg == max_avg:\n                paths.append(curr_path)\n\n    # Return maximum average and paths\n    return max_avg, paths"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    m = len(cost[0])\n    \n    # Create a memo table to store the maximum average of each path\n    memo = [[float('-inf')] * m for i in range(n)]\n    \n    # Initialize the first row and column with 0\n    for i in range(m):\n        memo[0][i] = 0\n    \n    for i in range(n):\n        memo[i][0] = 0\n    \n    # Fill the memo table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, m):\n            memo[i][j] = max(memo[i-1][j-1] + cost[i-1][j-1], memo[i-1][j] + cost[i-1][j])\n    \n    # Find the maximum average of all paths\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(m):\n            if memo[i][j] > max_avg:\n                max_avg = memo[i][j]\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_path_avg = float('-inf')\n    max_path = None\n    visited = [[False]*N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if cost[i][j] == 0 and not visited[i][j]:\n                visited[i][j] = True\n                path_avg = dfs(cost, visited, i, j, 0)\n                if path_avg > max_path_avg:\n                    max_path_avg = path_avg\n                    max_path = [(i, j)]\n                visited[i][j] = False\n    return max_path_avg\n\ndef dfs(cost, visited, i, j, count):\n    if i == 0 and j == N-1:\n        return cost[i][j]\n    visited[i][j] = True\n    total_cost = 0\n    if i > 0 and not visited[i-1][j] and cost[i-1][j]!= 0:\n        total_cost += cost[i-1][j]\n        total_cost += dfs(cost, visited, i-1, j, count+1)\n    if j < N-1 and not visited[i][j+1] and cost[i][j+1]!= 0:\n        total_cost += cost[i][j+1]\n        total_cost += dfs(cost, visited, i, j+1, count+1)\n    visited[i][j] = False\n    return total_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    paths = []\n    max_avg = float('-inf')\n\n    def dfs(i, j, path_cost):\n        if i == N - 1 and j == N - 1:\n            avg = path_cost / (N * N)\n            max_avg = max(max_avg, avg)\n            paths.append(path_cost)\n            return\n\n        visited[i][j] = True\n\n        for k in range(N):\n            if k == i or k == j:\n                continue\n\n            if not visited[i][k] and not visited[k][j]:\n                dfs(k, j, path_cost + cost[i][k] + cost[k][j])\n\n        visited[i][j] = False\n\n    dfs(0, 0, 0)\n\n    return max_avg, paths\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N <= 1:\n        return 0\n    \n    # initialize variables\n    dp = [[0 for j in range(N)] for i in range(N)]\n    dp[0][0] = cost[0][0]\n    max_avg = dp[0][0]\n    max_path = [[0, 0]]\n    \n    # fill the DP table\n    for i in range(1, N):\n        for j in range(1, N):\n            if i == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n                if dp[i][j] > max_avg:\n                    max_avg = dp[i][j]\n                    max_path = [[i, j]]\n            elif j == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n                if dp[i][j] > max_avg:\n                    max_avg = dp[i][j]\n                    max_path = [[i, j]]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n                if dp[i][j] > max_avg:\n                    max_avg = dp[i][j]\n                    max_path = [[i, j]]\n    \n    # find the path with maximum average\n    max_path = max_path[0]\n    avg = max_avg / (N**2 - 1)\n    return avg, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter the students based on their height and weight\n    filtered_students = {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        return None\n    \n    # use the `eq` operator to check if each element in the lists is equal\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n            \n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], num) for num in nums2):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # initialize an empty dictionary to store the indices of the same elements in the two lists\n    indices = {}\n    \n    # loop through both lists simultaneously\n    for i in range(len(nums1)):\n        # check if the current element in the first list is equal to the corresponding element in the second list\n        if eq(nums1[i], nums2[i]):\n            # if the element is equal, add its index to the dictionary\n            indices[i] = True\n    \n    # initialize a counter variable to keep track of the count of same pairs\n    count = 0\n    \n    # loop through the indices dictionary and count the number of elements with True value\n    for i in indices.keys():\n        if indices[i]:\n            count += 1\n    \n    # return the count of same pairs\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n    # Loop through the lists and add the count to the dictionary\n    for i in range(len(nums1)):\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n    # Loop through the other list and check for pairs with the same count in the dictionary\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict and count_dict[nums2[i]] > 0:\n            count_dict[nums2[i]] -= 1\n            if count_dict[nums2[i]] == 0:\n                # We found a pair that matches\n                yield i"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize variables\n    count = 0\n    i = 0\n    j = 0\n    \n    # Loop through both lists\n    while i < len(nums1) and j < len(nums2):\n        # Check if the values at current indices are equal\n        if eq(nums1[i], nums2[j]):\n            count += 1\n            # Move the pointers to the next index\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            # Move the pointer to the right\n            i += 1\n        else:\n            # Move the pointer to the left\n            j += 1\n            \n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string so that we can iterate over its digits\n    base_str = str(base)\n\n    # initialize a variable to store the sum of digits\n    total_sum = 0\n\n    # iterate over each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the total sum\n        total_sum += int(digit)\n\n    # multiply the total sum by the power and return the result\n    return total_sum * power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += base % 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    # Convert the base to a string and split it into its digits\n    base_digits = [int(digit) for digit in str(base)]\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through the digits of the base\n    for digit in base_digits:\n        # Add the power of the digit to the total sum\n        total_sum += digit ** power\n\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert base and power to integer type\n    base = int(base)\n    power = int(power)\n    \n    # Initialize sum variable\n    sum = 0\n    \n    # Calculate sum of digits of base to power\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    \n    # Return sum of digits of base to power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base):\n        digit_int = int(digit)\n        power_digit = power % digit_int\n        if power_digit == 0:\n            sum += digit_int**power\n        else:\n            sum += digit_int**power_digit\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp = base\n    \n    while power > 0:\n        # Get the last digit of the base\n        digit = temp % 10\n        result += digit\n        # Remove the last digit of the base\n        temp //= 10\n        # Decrement the power\n        power -= 1\n        \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through each digit of the base\n    for digit in str(base):\n\n        # calculate the digit raised to the power\n        digit_power = int(digit) ** power\n\n        # add the digit raised to the power to the sum\n        sum += digit_power\n\n    # return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_digits = [int(digit) for digit in str(base)]\n    return sum([digit ** power for digit in base_digits])"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n    # Initialize the sum to 0\n    result = 0\n    # Iterate over the digits of the base string and add their value to the result\n    for digit in base_str:\n        result += int(digit)\n    # Calculate the result to the specified power\n    result = result ** power\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Use regular expression to extract the values between quotation marks\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n\n    # Return the extracted values as a list\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \".\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'(?<!\\\\)\"([^\"]+)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to extract values between quotation marks \" \"\n    pattern = r'\"(.+?)(\"|\\Z)'\n    result = re.findall(pattern, text, re.DOTALL)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize a new empty tuple of length N+1\n    result_tup = ()\n    # Loop through each element of the input tuple\n    for i in range(len(test_tup)-1):\n        # Append the result of multiplying the i-th and (i+1)-th elements of the tuple to the new tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # Add the last element of the input tuple to the new tuple\n    result_tup += (test_tup[-1],)\n    # Return the new tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty list to store the multiplied elements\n    multiplied_elements = []\n    # Iterate over the tuple elements from the second one onwards\n    for i in range(1, len(test_tup)):\n        # Multiply the current element with the next element\n        multiplied_element = test_tup[i] * test_tup[i+1]\n        # Add the multiplied element to the list of multiplied elements\n        multiplied_elements.append(multiplied_element)\n    # Return the list of multiplied elements\n    return tuple(multiplied_elements)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x*y for x,y in zip(test_tup, test_tup[1:])])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(N)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result_tup = [0] * N\n    for i in range(N):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        if i+1 < N:\n            result_tup += (test_tup[i] * test_tup[i+1],)\n        else:\n            result_tup += (test_tup[i] * 1,)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n\n    # Get the length of the tuple\n    N = len(test_tup)\n\n    # Create an empty tuple of length N\n    result = tuple([0] * N)\n\n    # Loop through each element of the input tuple\n    for i in range(N):\n        # Multiply the current element with the next element\n        result[i] = test_tup[i] * test_tup[i+1]\n\n    # Return the result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    return tuple(t1 * t2 for i in range(N-1) for t1 in test_tup[:i] for t2 in test_tup[i+1:])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Concatenate the two lists and return the result\n    return lst1 + lst2"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # concatenate the two lists\n    lst = lst1 + lst2\n    # initialize a variable to store the sum\n    s = 0\n    # loop through the concatenated list and add each element to the sum\n    for i in lst:\n        s += i\n    # return the sum\n    return s"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n\n    Parameters:\n    nums (list): A list of integers\n\n    Returns:\n    (list): A list with consecutive duplicates removed.\n    \"\"\"\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Create a dictionary to store consecutive duplicates\n    consecutive_dict = {}\n\n    # Loop through the list\n    for num in nums:\n        # Check if the current number is already in the dictionary\n        if num in consecutive_dict:\n            # If it is, increment the count by 1\n            consecutive_dict[num] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            consecutive_dict[num] = 1\n\n    # Create a new list to store the unique consecutive duplicates\n    unique_consecutive_list = []\n\n    # Loop through the dictionary and add each unique consecutive duplicate to the list\n    for num, count in consecutive_dict.items():\n        if count == 1:\n            unique_consecutive_list.append(num)\n\n    # Return the new list of unique consecutive duplicates\n    return unique_consecutive_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools groupby function to group numbers into consecutive duplicates\n    consecutive_groups = groupby(nums)\n    \n    # Create an empty list to store unique numbers\n    unique_nums = []\n    \n    # Iterate over consecutive groups\n    for group, group_nums in consecutive_groups:\n        # Check if the group is only one number long\n        if len(list(group_nums)) == 1:\n            # If yes, remove the first element from the list\n            unique_nums.append(group_nums[0])\n    \n    # Return the unique list of numbers\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n\n    for num in nums:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for num, group in groupby(nums) if not group]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i, g in groupby(nums):\n        if len(list(g)) > 1:\n            yield i"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(set(nums)), lambda x: x[0] == x[1]))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Split the list into individual elements\n    nums_list = list(nums)\n\n    # Group the list by consecutive duplicates\n    grouped_nums = groupby(nums_list)\n\n    # Remove consecutive duplicates from the grouped list\n    filtered_nums = [list(group) for group in grouped_nums if not (len(group) == 1 or len(list(group)) < 2)]\n\n    # Convert the list back to a list of integers\n    filtered_nums = [int(num) for sublist in filtered_nums for num in sublist]\n\n    return filtered_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a list of integers.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list of integers without consecutive duplicates.\n    \"\"\"\n    return [item for key, group in groupby(enumerate(nums), key=lambda x: x[1]-x[0])]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function finds the lateral surface area of a cone given the radius r and the height h.\n    '''\n    return 2 * math.pi * (r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    lateral_surface_area = math.pi * (r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Compute the lateral surface area of the cone using the formula A = 2pi r^2 h\n    area = 2 * math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula lateral_area = 2 * pi * r * h\n    lateral_area = 2 * math.pi * r * h\n    \n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Use the formula for the lateral surface area of a cone\n    lateral_area = 2 * (r * h) + r * (h**2 / 3) + r**2 * math.tan(math.pi / 6)\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to calculate the lateral surface area of a cone\n    A = math.pi*r**2*h\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r**2\n    L = s * h\n    return L"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[.,!?;:]')\n    text = special_chars.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_specialchar(text):\n    # define the regular expression pattern for spaces, commas, and dots\n    pattern = r'[,\\s\\.]'\n    # replace all matches of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|,\\s+|\\.+|:+','',text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # remove non-word and non-space characters\n    text = re.sub(r'[\\s,\\.]+', ':', text) # replace spaces, commas, and dots with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match spaces, commas, and dots\n    pattern = re.compile(r'[\\s.,]')\n    # Replace all matches with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'\\s+|\\\\,|\\\\.|[,;:]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces with a colon\n    text = re.sub(r' +', ':', text)\n    # Replace all occurrences of commas with a colon\n    text = re.sub(r',', ':', text)\n    # Replace all occurrences of dots with a colon\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text).replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]','',text)\n    text = re.sub(r'\\s+','',text)\n    return text\n\ntext = \"This, is a test. of replacing special characters.\"\nprint(replace_specialchar(text))"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace special characters with colon\n    special_characters = re.compile(r'[^\\w\\s]|_')\n    text = special_characters.sub(':', text)\n    # replace spaces with colon\n    text = text.replace(' ', ':')\n    # replace commas with colon\n    text = text.replace(',', ':')\n    # replace dots with colon\n    text = text.replace('.', ':')\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize variables\n    left, right = 0, len(A) - 1\n    index = -1\n    \n    # binary search for the first occurrence\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes an array `A` and a number `x` as input. It then returns the index of the first occurrence of `x` in `A`. If `x` is not found in `A`, the function returns -1.\n    \n    Example:\n    >>> A = [1, 3, 4, 5, 6, 7, 8, 10, 12]\n    >>> x = 4\n    >>> find_first_occurrence(A, x)\n    2\n    \"\"\"\n    \n    # Initialize a counter to keep track of the number of times x has occurred in A\n    count = 0\n    \n    # Traverse the array A using a for loop and compare each element with x\n    for i in range(len(A)):\n        if A[i] == x:\n            count += 1\n            \n            # If the count is equal to 1, then we have found the first occurrence of x\n            if count == 1:\n                return i\n    \n    # If we have not found the first occurrence of x, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Find the first occurrence of x in A using binary search\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the first occurrence index as -1\n    first_occurrence_index = -1\n    \n    # loop through the sorted array A\n    for i in range(len(A)):\n        # check if the current element is equal to x\n        if A[i] == x:\n            # if it is, update the first occurrence index\n            first_occurrence_index = i\n            # break out of the loop\n            break\n    \n    # return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i]!= x:\n        i += 1\n    if i == n:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted array.\n        x (int): A number to search for in the array.\n\n    Returns:\n        int: The index of the first occurrence of `x` in `A`, or -1 if `x` is not found in `A`.\n\n    \"\"\"\n    # Find the index of the first element that is greater than or equal to x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    # If x was not found, return -1\n    if A[left]!= x:\n        return -1\n    # Otherwise, return the index of the first occurrence of x\n    return left\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index of the first occurrence to -1\n    index = -1\n    \n    # loop through the array\n    for i in range(len(A)):\n        # check if the current element is equal to x\n        if A[i] == x:\n            # if it is, update the index of the first occurrence\n            if index == -1:\n                index = i\n            # if it's not the first occurrence, decrement the index\n            else:\n                index -= 1\n    \n    # return the index of the first occurrence\n    return index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Find length of the array\n    n = len(arr)\n\n    # Initialize two variables to store the maximum and minimum value of current subarray\n    max_val = arr[0]\n    min_val = arr[0]\n\n    # Initialize variables to store sum of products of current subarray and sum of products of all subarrays\n    current_prod = 1\n    sum_prod = 1\n\n    # Initialize variable to store sum of products of all subarrays\n    sum_of_products = 1\n\n    # Initialize variables to store current subarray and the number of elements in current subarray\n    current_subarray = [arr[0]]\n    count = 1\n\n    # Iterate through all elements of the array\n    for i in range(1, n):\n\n        # If the current element is greater than the maximum value, update maximum value and shift the maximum element to the left\n        if arr[i] > max_val:\n            max_val = arr[i]\n            current_subarray.pop(0)\n            current_subarray.append(arr[i])\n        # If the current element is smaller than the minimum value, update minimum value and shift the minimum element to the right\n        elif arr[i] < min_val:\n            min_val = arr[i]\n            current_subarray.pop(-1)\n            current_subarray.insert(0, arr[i])\n        # If the current element is between the minimum and maximum values, it can be included in the current subarray without any changes\n        else:\n            current_subarray.append(arr[i])\n\n        # Update current subarray product and sum of products of all subarrays\n        current_prod = 1\n        for j in range(count):\n            current_prod *= current_subarray[j]\n        sum_prod *= current_prod\n\n        # Update sum of products of all subarrays\n        sum_of_products *= (i+1)\n\n        # Update variables to store current subarray and the number of elements in current subarray\n        count = len(current_subarray)\n        current_subarray = current_subarray[-count:]\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # create a new list to store the products of all subarrays\n    product_list = []\n    # initialize the product of an empty array as 1\n    product_list.append(1)\n    # loop through the array\n    for i in range(1, n):\n        # initialize the current subarray product as 1\n        current_product = 1\n        # loop through the previous subarrays and add their product to the current subarray product\n        for j in range(i):\n            current_product *= arr[j]\n        # add the current subarray product to the product_list\n        product_list.append(current_product)\n    # initialize the sum of products of all subarrays\n    sum_of_products = 0\n    # loop through the product_list and add each product to the sum_of_products\n    for i in range(1, n+1):\n        sum_of_products += product_list[i-1]\n    # return the sum_of_products\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n\n    # calculating prefix sum of arr\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n    # defining function to find sum of products of subarrays\n    def sum_of_products(start, end):\n        if start == end:\n            return arr[start] * prefix_sum[end + 1]\n        return arr[start] * prefix_sum[end + 1] + sum_of_products(start + 1, end)\n\n    # finding sum of products of all subarrays\n    result = sum_of_products(0, n - 1)\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sub_array_sum = [0] * (n+1)\n\n    for i in range(1, n+1):\n        sub_array_sum[i] = sub_array_sum[i-1] + arr[i-1]\n\n    sub_array_prod = [1] * n\n    product = 1\n    for i in range(n-1, -1, -1):\n        product *= arr[i]\n        sub_array_prod[i] = product\n\n    result = 0\n    for i in range(1, n+1):\n        left = 0\n        right = i\n        while left < n and right <= n:\n            result += sub_array_prod[left] * sub_array_prod[right]\n            left += 1\n            right += 1\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n\n    # Step 1: Calculate the product of subarray ending at index i\n    def product_end_at_i(i):\n        if i == 0:\n            return 1\n        else:\n            return arr[i] * product_end_at_i(i-1)\n\n    # Step 2: Calculate the product of subarray starting at index 0\n    product_start = product_end_at_i(n-1)\n\n    # Step 3: Calculate the product of subarray ending at index i\n    def product_of_sublists(i):\n        if i == 0:\n            return product_start\n        else:\n            return arr[i-1] * product_of_sublists(i-1)\n\n    # Step 4: Calculate the sum of products of all sublists\n    def sum_of_products(i, j):\n        if i == j:\n            return product_of_sublists(i)\n        else:\n            return product_of_sublists(i) + sum_of_products(i+1, j)\n\n    sum_of_products = sum_of_products(0, n-1)\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Initialize the sum of products and the product of the first element\n    sum_prod = arr[0]\n    prod = 1\n    \n    # Loop through the array and update the sum and product of each element\n    for i in range(1, len(arr)):\n        prod *= arr[i]\n        sum_prod += prod\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize two variables to store the sum of products of subarrays\n    # of length 1 and n\n    prod_sum_1 = prod_sum_n = 1\n    # Initialize a variable to store the sum of products of subarrays\n    # of length greater than 1\n    prod_sum = 0\n\n    # Loop through the array and for each element, calculate the sum\n    # of products of subarrays of length 1 and n\n    for i in range(n):\n        # Calculate the sum of products of subarrays of length 1\n        prod_sum_1 *= arr[i]\n        # Calculate the sum of products of subarrays of length n\n        prod_sum_n *= arr[i]\n        # Calculate the sum of products of subarrays of length greater than 1\n        prod_sum += prod_sum_1 * prod_sum_n\n\n    # Return the final sum of products of subarrays\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    dp = [0] * (n+1)\n    \n    # Calculate the cumulative sum of the array\n    cum_sum = [0] * (n+1)\n    cum_sum[0] = arr[0]\n    for i in range(1, n+1):\n        cum_sum[i] = cum_sum[i-1] + arr[i-1]\n        \n    # Calculate the cumulative product of the array\n    cum_prod = [0] * (n+1)\n    cum_prod[0] = 1\n    for i in range(1, n+1):\n        cum_prod[i] = cum_prod[i-1] * arr[i-1]\n    \n    # Initialize the sum of products to 0\n    sum_of_products = 0\n    \n    # Iterate through all possible subarrays of the array\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            # Calculate the sum of products of the subarray\n            subarray_products = cum_prod[j] - cum_prod[i-1] * cum_prod[j-i+1]\n            \n            # If the subarray is valid (i.e., has non-zero sum), add it to the sum of products\n            if subarray_products > 0:\n                sum_of_products += subarray_products\n    \n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            ans += prod\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n\n    n = len(arr)\n    product = 1\n    subarray_product = 1\n    sum_of_subarray_product = 0\n\n    for i in range(n):\n        product = product * arr[i]\n        subarray_product = subarray_product * arr[i]\n\n        for j in range(i + 1, n):\n            subarray_product = subarray_product * (arr[j] - arr[i])\n\n        sum_of_subarray_product = sum_of_subarray_product + subarray_product\n\n    return sum_of_subarray_product"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # initialize variables\n    first_bit = (n & 1) << 31\n    last_bit = (n & 1) << 30\n    mid_bit = (n & 1) << 29\n    temp = n\n\n    # toggle bits except first and last\n    temp ^= first_bit ^ last_bit ^ mid_bit\n\n    # remove the bits that were toggled\n    temp = temp ^ (first_bit ^ last_bit ^ mid_bit)\n\n    return temp"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits\n    num_bits = len(bin(n)[2:])\n\n    # Get the first and last bits\n    first_bit = int(bin(n)[2:].lstrip('0')[0])\n    last_bit = int(bin(n)[2:].rstrip('0')[-1])\n\n    # Get the middle bits\n    middle_bits = bin(n)[2:].lstrip('0')[1:-1]\n\n    # Toggle the middle bits\n    for i in range(len(middle_bits)):\n        if middle_bits[i] == '0':\n            middle_bits[i] = '1'\n        else:\n            middle_bits[i] = '0'\n\n    # Combine the first and last bits with the middle bits\n    new_middle_bits = first_bit + middle_bits + last_bit\n\n    # Combine the first and last bits with the middle bits\n    new_n = first_bit + new_middle_bits + last_bit\n\n    # Convert the binary string to an integer\n    new_n = int(new_n, 2)\n\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # convert the integer to binary\n    binary = bin(n)[2:]\n    # split the binary string into two parts\n    first_part = binary[0:len(binary)//2]\n    last_part = binary[len(binary)//2:]\n    # toggle the first and last bits\n    first_part = ''.join(reversed([int(bit) ^ 1 for bit in first_part]))\n    last_part = ''.join(reversed([int(bit) ^ 1 for bit in last_part]))\n    # concatenate the two parts\n    final_binary = first_part + last_part\n    # convert the final binary string back to an integer\n    final_int = int(final_binary, 2)\n    return final_int"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # First, extract the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n\n    # Then, toggle the first and last bits\n    n ^= (first_bit << 1) ^ (last_bit << 1)\n\n    # Finally, combine the first and last bits\n    n ^= last_bit ^ (first_bit << 1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (2**31)\n\n    # toggle the first and last bits\n    first_bit = not first_bit\n    last_bit = not last_bit\n\n    # set the other bits to 1\n    middle_bits = n & ~(1 | (2**31))\n\n    # return the number with the middle bits toggled\n    return middle_bits | (first_bit | last_bit)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # XOR operation with a mask will toggle bits of n except the first and the last bit\n    return n ^ 0b
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n\n    # initialize variables\n    first_bit = False\n    last_bit = False\n\n    # get the binary representation of the number\n    bin_n = bin(n)[2:]\n\n    # toggle the middle bit and get the updated binary representation\n    if bin_n[len(bin_n)//2] == '0':\n        updated_bin = bin_n[:len(bin_n)//2] + '1' + bin_n[len(bin_n)//2+1:]\n    else:\n        updated_bin = bin_n[:len(bin_n)//2] + '0' + bin_n[len(bin_n)//2+1:]\n\n    # convert the binary representation back to integer\n    n = int(updated_bin, 2)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    This function toggles bits of the number except the first and the last bit.\n    '''\n    n = n ^ ((n & 0x55555555) << 1)  \n    n = n ^ ((n & 0xAAAAAAAA) >> 1)  \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # Initialize the bit positions for the first and last bits\n    first_bit_pos = 0\n    last_bit_pos = 31\n\n    # Initialize the mask for the first and last bits\n    first_bit_mask = 1 << first_bit_pos\n    last_bit_mask = 1 << last_bit_pos\n\n    # Shift the number to the left by one bit position to exclude the first and last bits\n    shifted_n = n << 1\n\n    # Set the middle bits to 0\n    middle_bits = shifted_n & ~(first_bit_mask | last_bit_mask)\n\n    # Shift the shifted number to the right by the number of positions of the first and last bits\n    shifted_middle_bits = middle_bits >> (32 - (first_bit_pos + last_bit_pos))\n\n    # Return the shifted middle bits\n    return shifted_middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Convert number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Find the index of the first and last bits\n    first_index = binary_str.find('1')\n    last_index = binary_str.rfind('1')\n    \n    # Toggle bits except the first and last bits\n    for i in range(first_index, last_index):\n        if binary_str[i] == '0':\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n        else:\n            binary_str = binary_str[:i] + '0' + binary_str[i+1:]\n    \n    # Convert binary string back to integer\n    result = int(binary_str, 2)\n    \n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return idx\n    elif x < a[idx]:\n        return idx\n    else:\n        return idx - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index > 0 and a[index-1] == x:\n        return index\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect to search for the value x in the list a\n    index = bisect.bisect_left(a, x)\n\n    # If the value x is already present, return its index\n    if index!= len(a) and a[index] == x:\n        return index\n\n    # Otherwise, return the index of the first element greater than x\n    return bisect.bisect_left(a, x, lo=index)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # initialize index and key variables\n    i = 0\n    key = a[0]\n    while i < len(a) and key < x:\n        i += 1\n        key = a[i]\n    # return index if x is found, else return len(a)\n    return i if i < len(a) and a[i] == x else len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # Find the index of the leftmost element that is greater than or equal to x\n    index = bisect.bisect_left(a, x)\n\n    # If the value is greater than all elements to its left, insert at the beginning of the array\n    if index == len(a):\n        a.append(x)\n        return 0\n\n    # Otherwise, insert at the index found\n    a.insert(index, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)  # Find the left insertion point using binary search\n    if i == len(a):  # If x is greater than all elements in the list\n        return i\n    elif a[i] == x:  # If x is equal to an element in the list\n        return i\n    elif a[i] < x:  # If x is less than an element in the list\n        return i - 1\n    else:  # If x is greater than an element in the list\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        print(string, \"starts with a vowel.\")\n    else:\n        print(string, \"does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * (geometric_sum(n-1) + 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1 using recursion.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/(n-1)) + (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case: sum of 1\n    if n == 1:\n        return 1\n\n    # Recursive case: sum of n and the sum of n-1\n    else:\n        return n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    :param n: integer, the number of terms to sum.\n    :return: float, the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    Args:\n        n (int): Positive integer.\n\n    Returns:\n        int: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    # Initialize the first three triangular numbers with n digits\n    a = math.ceil(10 ** n)\n    b = a * a\n    c = b * a\n\n    # Iterate over the digits of n and find the index of the smallest triangular number\n    for i in range(1, n + 1):\n        # Calculate the triangular number with n digits\n        d = math.ceil(10 ** (n - i)) * a\n        # If the triangular number is smaller than the current smallest triangular number, update the index\n        if d < c:\n            c = d\n\n    # Return the index of the smallest triangular number\n    return int(math.log10(c))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def smallest_triangular_number(n):\n        triangular_numbers = []\n        num = 1\n        while len(triangular_numbers) < n:\n            triangular_numbers.append(num)\n            num += 1\n        return triangular_numbers\n    \n    def find_index(triangular_numbers):\n        smallest_triangular_number = min(triangular_numbers)\n        for i, num in enumerate(triangular_numbers):\n            if num == smallest_triangular_number:\n                return i\n        return -1\n    \n    triangular_numbers = smallest_triangular_number(n)\n    index = find_index(triangular_numbers)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Check if the given number of digits is valid or not \n    if n < 1: \n        return -1 \n\n    # Initialize the largest and smallest triangular numbers \n    smallest_triangular_number = 10**n \n    largest_triangular_number = 9 * 10**n\n\n    # Initialize the smallest and largest indices \n    smallest_index = 1\n    largest_index = n\n\n    # Initialize the current triangular number \n    current_triangular_number = largest_triangular_number\n\n    # While the current triangular number is less than the largest triangular number \n    while current_triangular_number < largest_triangular_number: \n        # Find the index of the current triangular number in the sequence \n        index = math.log10(current_triangular_number) + 1\n\n        # If the current triangular number is equal to the smallest triangular number \n        if current_triangular_number == smallest_triangular_number: \n            # If the index is greater than the largest index, update both the smallest and largest indices \n            if index > largest_index: \n                smallest_index = index \n                largest_index = index + 1\n\n        # If the current triangular number is greater than the smallest triangular number \n        elif current_triangular_number > smallest_triangular_number: \n            # If the index is less than the smallest index, update the smallest index only \n            if index < smallest_index: \n                smallest_index = index\n\n        # If the current triangular number is less than the smallest triangular number \n        elif current_triangular_number < smallest_triangular_number: \n            # If the index is greater than the largest index, update the largest index only \n            if index > largest_index: \n                largest_index = index\n\n        # Update the current triangular number and repeat the loop \n        current_triangular_number += 1\n\n    # Return the smallest index \n    return smallest_index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Calculate the number of digits in the number of digits to find the smallest triangular number with n digits\n    digits = math.log10(n) + 1\n\n    # Initialize a variable to store the smallest triangular number with n digits\n    smallest_triangular = 10**digits\n\n    # Calculate the sum of the digits of the smallest triangular number with n digits\n    sum_digits = sum(int(digit) for digit in str(smallest_triangular))\n\n    # Calculate the difference between the number of digits in the smallest triangular number and n\n    diff = n - sum_digits\n\n    # Calculate the number of digits in the difference between the smallest triangular number with n digits and n\n    diff_digits = math.log10(diff) + 1\n\n    # Calculate the number of digits in the smallest triangular number with n digits\n    smallest_digits = math.log10(smallest_triangular) + 1\n\n    # Initialize a variable to store the sum of the digits of the smallest triangular number with n digits\n    sum_smallest = 0\n\n    # Initialize a variable to store the sum of the digits of the difference between the smallest triangular number with n digits and n\n    sum_diff = 0\n\n    # Initialize a variable to store the index of the smallest triangular number with n digits\n    index = 0\n\n    # Loop through all possible values of the sum of the digits of the smallest triangular number with n digits\n    for i in range(10**(diff_digits-1), 10**diff_digits):\n\n        # Calculate the sum of the digits of the difference between the smallest triangular number with n digits and n\n        sum_diff = sum(int(digit) for digit in str(i))\n\n        # If the sum of the digits of the difference between the smallest triangular number with n digits and n is equal to n, then the smallest triangular number with n digits is the i-th triangular number\n        if sum_diff == diff:\n            index = i\n            break\n\n        # Update the sum of the digits of the smallest triangular number with n digits\n        sum_smallest += sum(int(digit) for digit in str(smallest_triangular))\n\n        # If the sum of the digits of the smallest triangular number with n digits is greater than the sum of the digits of the difference between the smallest triangular number with n digits and n, then update the smallest triangular number with n digits\n        if sum_smallest > sum_diff:\n            smallest_triangular = i\n            sum_digits = sum(int(digit) for digit in str(smallest_triangular))\n            diff_digits = math.log10(diff) + 1\n            smallest_digits = math.log10(smallest_triangular) + 1\n            sum_smallest = 0\n            sum_diff = 0\n            index = 0\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Index(n):\n    # Formula for the smallest triangular number with n digits: T(n) = 3^n - 1\n    triangular = 3 ** n - 1\n    # Initialize the counter variable\n    count = 0\n    # Loop through all the digits of the triangular number\n    while triangular > 0:\n        # Check if the current digit is 0\n        if triangular % 10 == 0:\n            count += 1\n            triangular = int(triangular / 10)\n        else:\n            triangular = int(triangular / 10)\n    # Return the index of the smallest triangular number with n digits\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the total number of digits in the triangular number\n    total_digits = n * (n + 1) // 2\n    # Calculate the smallest triangular number with n digits\n    smallest_triangular_num = 10 ** (n - 1)\n    # Calculate the index of the smallest triangular number\n    triangular_num = smallest_triangular_num\n    index = 0\n    while triangular_num < smallest_triangular_num * 10 ** total_digits:\n        index += 1\n        triangular_num = triangular_num * 10\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    i = 0\n    while True:\n        triangular_num = i * (i + 1) / 2\n        triangular_digits = str(triangular_num)[2:]\n        if len(triangular_digits) >= n:\n            return triangular_num\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    #find the sum of first n terms of T(n) series\n    sum = n * (n+1) // 2\n\n    #find the n-th triangular number T(n)\n    triangular_number = sum * math.sqrt(5) + 1\n\n    #find the digit of the sum of n-th triangular number\n    digit = int(math.log10(triangular_number))\n\n    #find the index of smallest triangular number with n digits\n    index = sum - 10 ** (n-digit) + 1\n\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = 10**(n-1)\n    triangular_sum = 0\n    count = 0\n\n    while triangular_sum < 2*triangular_num:\n        triangular_sum += triangular_num\n        count += 1\n\n    return count-1\n\n\nn = int(input(\"Enter the value of n: \"))\nindex = find_Index(n)\nprint(\"The index of the smallest triangular number with\", n, \"digits is:\", index)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a dictionary using adjacent elements as keys.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create a dictionary to hold the key-value pairs\n    result_dict = {}\n    \n    # iterate over the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # extract the keys and values from the adjacent elements\n        key = test_tup[i]\n        value = test_tup[i+1]\n        # add the key-value pair to the dictionary\n        result_dict[key] = value\n        \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i + 1]\n            dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create a dictionary to store the key-value pairs\n    my_dict = {}\n    \n    # loop through the tuple and add the adjacent elements to the dictionary as keys and values\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n    \n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    dict_obj = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Using zip() function to convert the tuple to a key-value dictionary\n    result_dict = dict(zip(test_tup, test_tup[1:]))\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = ''\n    for i in s:\n        if i!= char:\n            return False\n        char = i\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    \n    if s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert string to lowercase to ignore case\n    s = s.lower()\n    # Check if length of string is 1\n    if len(s) == 1:\n        return True\n    # Check if all characters are the same\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    if len(s) <= 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return s[0] == s[0]\n    if s[0] == s[1]:\n        return all_Characters_Same(s[2:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are same, False otherwise.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    # convert string to lowercase\n    s = s.lower()\n\n    # check if all characters in string are same\n    all_chars_same = True\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            all_chars_same = False\n            break\n\n    # return the result\n    return all_chars_same"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list\n    list_s = list(s)\n    \n    # Iterate over each character in the list\n    for i in range(len(list_s)):\n        # Check if the character is not the first character of the list\n        if i!= 0 and list_s[i]!= list_s[0]:\n            # If there is at least one character that is not the same as the first character, return False\n            return False\n    \n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    # convert string to list\n    s = list(s)\n    # check if list has only one element\n    if len(s) == 1:\n        return True\n    # check if all the elements in the list are the same\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    # if all the elements are the same, return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (6.0 / (5.0 * math.factorial(1.0))) * (side ** 2)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/3) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * (side ** 2 + side ** 2 + side ** 2)\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) * math.sqrt(2) / 6\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)/2\n    return math.sqrt(s*(s-side)*(s-2*side))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.5  # semi-perimeter\n    area = (1/3) * s * (s - side) * (s - side) * (s - side)  # area formula\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Convert side to meters\n    side_meters = side * 0.001\n\n    # Use Heron's formula to calculate the area of the tetrahedron\n    s = (side_meters ** 2 + side_meters ** 2 + side_meters ** 2 + side_meters ** 2) / 4\n    area = math.sqrt(s)\n\n    # Return the calculated area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side/2\n    height = math.sqrt(3)/2\n    return base * height"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    '''\n    This function rotates a given list by specified number of items to the right direction.\n    '''\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        list.extend(list[:m])\n        list[:m] = []\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[m:] = list[:m][::-1]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    '''\n    Rotate a list to the right by n items.\n    '''\n    n = n % len(lst)\n    lst.extend(lst[:n])\n    lst = lst[n:]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    # If m is greater than n, do nothing\n    if m > n:\n        return lst\n\n    # If m is 0, return the original list\n    if m == 0:\n        return lst\n\n    # Reverse the list from 0 to m-1\n    lst = lst[-m:] + lst[:-m]\n\n    # Reverse the list from m to n-1\n    lst = lst[::-1]\n\n    # Return the reversed list\n    return lst\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Check if list is empty\n    if n == 0:\n        return []\n\n    # Check if rotation count is greater than list size\n    if m >= n:\n        return list\n\n    # Perform rotation\n    temp = list[-1]\n    for i in range(n-1, m-1, -1):\n        list[i] = list[i-1]\n    list[m-1] = temp\n\n    # Return rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Check if the list is empty\n    if not list:\n        return list\n    \n    # Calculate the total number of items in the list\n    n = len(list)\n    \n    # If the number of items to be rotated is more than the number of items in the list, rotate the entire list\n    if m > n:\n        return rotate_right(list, m % n)\n    \n    # Perform the rotation\n    for i in range(n - m):\n        # Swap the i-th item with the (i+m)-th item\n        list[i], list[i+m] = list[i+m], list[i]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m % n):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Calculate the number of rotations required to make the list circular\n    rotations = m % n\n    # Reverse the sublist from index 0 to (m-1) and then reverse the whole list\n    list[0:rotations] = list[0:rotations][::-1]\n    list[rotations:] = list[rotations:][::-1]\n    # Reverse the sublist from index (n-rotations) to n-1 and then reverse the whole list\n    list[n-rotations:n] = list[n-rotations:n][::-1]\n    list[0:n-rotations] = list[0:n-rotations][::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    return list[n:] + list[:n]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(int(digit) % num == 0 for digit in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(int(digit) % num == 0 for digit in str(num)):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_all_digits(num):\n        '''\n        Helper function to check if a number is divisible by every digit it contains.\n        '''\n        digits = [int(d) for d in str(num)]\n        return all(d in digits for d in digits)\n    \n    return list(filter(is_divisible_by_all_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = [int(x) for x in str(startnum)]\n    for num in range(startnum, endnum+1):\n        if all(num % d == 0 for d in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    # Create a list of digits for reference\n    digits = [int(digit) for digit in str(endnum)]\n\n    # Create a list of digit divisors\n    digit_divisors = []\n    for digit in digits:\n        for i in range(1, 10):\n            digit_divisors.append(digit * i)\n\n    # Create a lambda function that checks if a number is divisible by any of the digit divisors\n    is_divisible = lambda num: any(num % divisor == 0 for divisor in digit_divisors)\n\n    # Use the lambda function to filter out the numbers within the given range\n    result = list(filter(is_divisible, range(startnum, endnum + 1)))\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(d) % int(str(x)[i]) == 0 for i, d in enumerate(str(x))), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two numbers as arguments, startnum and endnum, and returns a list of all numbers\n    in the given range that are divisible by every digit that the number contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        This inner function checks if a number is divisible by every digit that it contains.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n            if digit % 9!= 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit in digits for digit in range(10))\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(num % digit == 0 for digit in digits)\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    a = math.radians(a)\n    \n    # calculate area of sector using Heron's formula\n    area = (3 * r ** 2 * math.sin(a) / 4) + (math.pi * r ** 2 / 4)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Convert angle to radians\n    a = math.radians(a)\n    \n    # Check if angle is valid\n    if a > math.pi:\n        return None\n    \n    # Calculate area\n    area = r * r * math.sin(a/2)\n    \n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    angle = a * math.pi / 180\n    \n    # Calculate area of sector using formula: A = pi*r^2*sin(angle/2)\n    area = math.pi * r**2 * math.sin(angle/2)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function takes the radius and angle of a sector as inputs and returns the area of the sector. If the angle is greater than 360 degrees, the function returns None.\n    '''\n\n    # Convert angle to radians\n    a = math.radians(a)\n\n    # Calculate area of the sector\n    area = r * a\n\n    # Check if the angle is greater than 360 degrees\n    if a > math.pi:\n        return None\n    else:\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is greater than 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r**2 * a / 360\n    \n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a 2D table to store the lengths of LCS for all substrings\n    dp = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # fill the table in bottom up fashion\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # return the length of the longest common subsequence\n    return dp[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Step 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    # Step 2\n    lcs = ''\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    def lcs_helper(X, Y, Z, m, n, p, q):\n        if m == 0 or n == 0:\n            return 0\n        \n        if X[m-1] == Y[n-1] and X[m-1] == Z[p-1]:\n            return 1 + lcs_helper(X, Y, Z, m-1, n-1, p-1, q-1)\n        elif X[m-1] == Y[n-1]:\n            return lcs_helper(X, Y, Z, m-1, n-1, p, q)\n        else:\n            return lcs_helper(X, Y, Z, m-1, n-1, p, q)\n    \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    q = 0\n    \n    for i in range(p):\n        if Z[i] in Y:\n            q = i\n            break\n    \n    return lcs_helper(X, Y, Z, m, n, p, q)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Base case\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return \"\"\n\n    # Table to store lengths of longest common subsequences\n    L = [[0] * (len(Z) + 1) for _ in range(len(X) + 1)]\n\n    # Fill table in bottom up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i - 1] == Z[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Print the constructed table\n    for i in range(len(X) + 1):\n        print(L[i])\n\n    # Find the length of the longest common subsequence\n    lcs_length = L[len(X)][len(Z)]\n\n    # Construct the longest common subsequence\n    lcs = \"\"\n    i, j = len(X), len(Z)\n    while i > 0 and j > 0:\n        if X[i - 1] == Z[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0]*(o+1) for j in range(m+1)] for i in range(n+1)]\n    # Initialize the dp table with all 0's\n    for i in range(n+1):\n        dp[i][0][0] = 0\n    for j in range(m+1):\n        dp[0][j][0] = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, o+1):\n                if X[j-1] == Y[i-1] and Y[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[n][m][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Using dynamic programming to find the length of the longest common subsequence of three strings.\n    # dp[i][j] represents the length of the longest common subsequence of X[0:i] and Y[0:j] and Z[0:k]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 where i >= 1 and j >= 1 and k >= 1\n    dp = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n\n    # Using dynamic programming to find the LCS of three strings.\n    # lcs[i][j][k] represents the longest common subsequence of X[0:i], Y[0:j], and Z[0:k]\n    # lcs[i][j][k] = X[i-1] if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]\n    # else, lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i-1][j][k-1])\n    lcs = [[[0] * (len(Z) + 1) for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    lcs[i][j][k] = X[i - 1]\n                else:\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], lcs[i][j - 1][k], lcs[i - 1][j][k - 1])\n\n    # Using dynamic programming to find the length of the longest common subsequence of X[0:i], Y[0:j], and Z[0:k].\n    # len_lcs[i][j][k] represents the length of the longest common subsequence of X[0:i], Y[0:j], and Z[0:k]\n    # len_lcs[i][j][k] = dp[i][j]\n    len_lcs = [[[0] * (len(Z) + 1) for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                len_lcs[i][j][k] = dp[i][j]\n\n    # Using dynamic programming to find the length of the longest common subsequence of X[0:i], Y[0:j], and Z[0:k] using LCS.\n    # len_lcs_of_lcs[i][j][k] represents the length of the longest common subsequence of X[0:i], Y[0:j], and Z[0:k] using L"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    # Find the length of the strings\n    n, m, p = len(X), len(Y), len(Z)\n    \n    # Create a 2D table to store the lengths of LCS for all prefixes of X, Y and Z\n    L = [[0 for j in range(p+1)] for i in range(n+1)]\n    \n    # Initialize L[i][j] for all i, j\n    for i in range(n+1):\n        for j in range(p+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] or X[i-1] == Z[j-1] or Y[j-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    \n    # Print the LCS for all three strings\n    for i in range(n+1):\n        for j in range(p+1):\n            if i == 0 or j == 0:\n                continue\n            if X[i-1] == Y[j-1] or X[i-1] == Z[j-1] or Y[j-1] == Z[j-1]:\n                lcs = ''.join([X[i-1], Y[j-1], Z[j-1]])\n                print(f\"LCS for {X}, {Y}, and {Z} is: {lcs}\")\n            else:\n                print(f\"LCS for {X}, {Y}, and {Z} is: {L[i-1][j]}\")\n    \n    return L[-1][-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    T = [[0] * (o+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, o+1):\n            if X[i-1] == Y[j-1]:\n                T[i][j] = T[i-1][j-1] + 1\n            elif T[i-1][j] >= T[i][j-1]:\n                T[i][j] = T[i-1][j]\n            else:\n                T[i][j] = T[i][j-1]\n\n    # Building the LCS\n    lcs = []\n    i = m\n    j = o\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif T[i-1][j] >= T[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    # creating a 3D array to store the lengths of LCS for three strings\n    LCS = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n    \n    # filling the array using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i-1][j-1][k])\n    \n    # finding the length of LCS of the three strings\n    length = LCS[m][n][p]\n    \n    # creating a list to store the common subsequence\n    common_subseq = []\n    \n    # backtracking to reconstruct the common subsequence\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            common_subseq.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] == LCS[i][j-1][k]:\n            i -= 1\n        elif LCS[i][j-1][k] == LCS[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    # reversing the list to get the LCS as string\n    LCS_string = ''.join(common_subseq[::-1])\n    \n    # returning the length of LCS and LCS itself\n    return length, LCS_string"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D table to store LCS values\n    dp = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # Using the table to find the LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i-1][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] == dp[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reversing the LCS\n    lcs.reverse()\n\n    return ''.join(lcs)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Define a regular expression pattern for splitting the string by words\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n\n    # Split the string by words using the pattern\n    words = pattern.split(str1)\n\n    # Loop through the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n\n    # Join the words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub(r' \\1', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n\n    # Create a new list to store the new words\n    new_words = []\n\n    # Iterate over the list of words\n    for word in words:\n        # If the word starts with a capital letter, add a space before it\n        if word[0].isupper():\n            new_words.append(''+ word)\n        else:\n            new_words.append(word)\n\n    # Join the list of words with spaces and return the result\n    return''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Capitalize the first word and join the words with spaces\n    result = words[0].capitalize()\n    for word in words[1:]:\n        result +='' + word.capitalize()\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through each word and check if the first letter is uppercase\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If it is, add a space after it\n            words[i] = words[i][0] +'' + words[i][1:]\n    \n    # Join the words back together with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to match capital words\n    pattern = r'([A-Z][a-z]*)'\n    # Use re.sub() function to replace matched words with spaces\n    result = re.sub(pattern, r'\\1 ', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = str1.split()\n\n    # loop through each word and capitalize it if it starts with uppercase letter\n    for i in range(len(words)):\n        word = words[i]\n        if word[0].isupper():\n            words[i] = word.capitalize()\n\n    # join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all the special characters\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # split the string into words\n    words = str1.split()\n    # loop through each word and capitalize it if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    # join the words back into a string with spaces between them\n    str1 =''.join(words)\n    # return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Replace capital letters with spaces and join them back into a string\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Create a list to store the capitalized words with spaces\n    capitalized_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        \n        # Capitalize the first letter of the word\n        capitalized_word = word.capitalize()\n        \n        # Check if the word starts with a capital letter\n        if capitalized_word[0].isupper():\n            \n            # Add the capitalized word to the list of capitalized words with spaces\n            capitalized_words.append(capitalized_word)\n    \n    # Join the list of capitalized words with spaces\n    result =''.join(capitalized_words)\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a list of strings of numbers numerically.\n\n    Args:\n    nums_str: List of strings of numbers, e.g. ['2', '3', '10', '5']\n\n    Returns:\n    List of strings of numbers sorted in ascending order, e.g. ['1', '2', '3', '5', '10']\n    \"\"\"\n    def convert_to_int(s):\n        \"\"\"\n        Convert a string to an integer.\n\n        Args:\n        s: String of a number, e.g. '2'\n\n        Returns:\n        Integer value of the string, e.g. 2\n        \"\"\"\n        try:\n            return int(s)\n        except ValueError:\n            return float('inf')  # a large number\n\n    nums_int = [convert_to_int(s) for s in nums_str]\n    nums_int.sort()  # sort the list of integers numerically\n    nums_str_sorted = [str(i) for i in nums_int]  # convert back to strings\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all string numbers to float numbers\n    nums = [float(num) for num in nums_str]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to string numbers\n    nums_str = [str(num) for num in nums]\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert the strings to lists of integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the lists of integers numerically using the built-in sort() function\n    nums_int.sort()\n\n    # Convert the sorted lists of integers back to strings and join them into a single string\n    sorted_nums_str = ''.join(map(str, nums_int))\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert all strings to numeric\n    nums = [int(num) for num in nums_str]\n    # sort the list in numeric order\n    nums.sort()\n    # convert the sorted list back to strings\n    nums_str = [str(num) for num in nums]\n    # return the sorted list\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            num_list.append(num)\n        except ValueError:\n            pass\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to integers and store in a list\n    nums_list = list(map(int, nums_str))\n\n    # Sort the list in ascending order\n    nums_list.sort()\n\n    # Convert the sorted list back to strings and return as a list\n    return list(map(str, nums_list))"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Splitting the strings into list of numbers\n    nums = []\n    for num in nums_str:\n        nums.append(int(num))\n    # Sorting the list numerically\n    nums.sort()\n    # Joining the sorted list of numbers into a string\n    sorted_nums = ''.join(str(num) for num in nums)\n    # Returning the sorted list of numbers as a string\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_str_list = []\n    \n    for num_str in nums_str:\n        try:\n            num_str_list.append(float(num_str))\n        except ValueError:\n            pass\n    \n    num_str_list.sort()\n    \n    return num_str_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: (int(x), x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(\"The new list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n\n    # Concatenate the two lists into a new list\n    combined_list = test_list + test_tup\n\n    # Return the modified list\n    return combined_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case: if i is 0, then arr[i] is the root of the heap\n    if i == 0:\n        return True\n    \n    # Check if the element at i is less than or equal to the parent element at i//2\n    if arr[i] <= arr[i//2]:\n        return False\n    \n    # Recursively call the function for the left subtree\n    if i//2 > 0:\n        if not check_min_heap_helper(arr, i//2):\n            return False\n    \n    # Recursively call the function for the right subtree\n    if 2*i <= len(arr)-1:\n        if not check_min_heap_helper(arr, 2*i):\n            return False\n    \n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n\n    # The root element is the first element in the array.\n    root = 0\n\n    # Loop through the array and compare each element with its children.\n    for i in range(1, n):\n        left = 2 * i\n        right = 2 * i + 1\n\n        # If the left child is greater than the parent, swap them.\n        if left < n and arr[left] > arr[root]:\n            root = left\n\n        # If the right child is greater than the parent, swap them.\n        if right < n and arr[right] > arr[root]:\n            root = right\n\n        # If the parent is greater than its child, swap them.\n        if root!= i:\n            arr[root], arr[i] = arr[i], arr[root]\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if it represents a min heap, else False.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the current element is greater than its parent\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n\n    # Recursively check the parent nodes\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n\n    # Return False if the array is empty\n    if len(arr) == 0:\n        return False\n\n    # Call the helper function on the first element of the array\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[(i-1)//2]:\n        return False\n    return True\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i == len(arr) - 1:\n        return True\n    elif arr[i] > arr[i // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i // 2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr):\n        if arr[i] < arr[i+1] and i+1 < len(arr):\n            return False\n        return check_min_heap_helper(arr, i+1)\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jac_num = 0\n    i = 1\n    while i <= n:\n        jac_num += i\n        i += 1\n    return jac_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # First, we need to generate the first 100 prime numbers using the Sieve of Eratosthenes algorithm.\n    primes = [True] * (n+1)  # Initialize the boolean list to True\n    primes[0] = primes[1] = False  # 0 and 1 are not prime\n    for i in range(2, int(n**0.5)+1):  # Loop through all numbers up to the square root of n\n        if primes[i]:  # If i is prime\n            for j in range(i*i, n+1, i):  # Loop through all multiples of i up to n\n                primes[j] = False  # Mark all multiples of i as composite\n    # Now we can calculate the nth jacobsthal number using the formula:\n    # J(n) = (n-1) * (sum of primes up to sqrt(n))\n    count = 0  # Initialize the count to 0\n    for i in range(2, n+1):  # Loop through all numbers up to n\n        if primes[i]:  # If i is prime\n            count += 1  # Increment the count\n    jacobsthal_num = (n-1) * count  # Calculate the nth jacobsthal number\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Define the first two numbers of the sequence\n    a = 0\n    b = 1\n    # Iterate through the sequence up to n\n    for i in range(n):\n        # Calculate the next number in the sequence\n        c = a + b\n        # Update the values of a and b\n        a = b\n        b = c\n    # Return the nth number in the sequence\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    prev_prev_num = 1\n    prev_num = 1\n    curr_num = 3\n\n    for i in range(2, n+1):\n        prev_num = prev_prev_num\n        curr_num = prev_num + prev_prev_num\n        prev_prev_num = prev_num\n\n    return curr_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + (n+1) * jacobsthal_num(n-2) - (n-1) * jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    for i in range(n):\n        if i == 0:\n            j = 0\n        elif i == 1:\n            j = 1\n        elif i > 1:\n            j = j + 2 * j - 1\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function returns the nth jacobsthal number.\n    \"\"\"\n    j = 0\n    for i in range(1, n+1):\n        j = (j + 4*i*i) % 28\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n - 1) * jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Initialize the first two jacobsthal numbers as 0 and 1\n        j0, j1 = 0, 1\n        # Initialize the variable to store the nth jacobsthal number\n        j = 1\n        # Iterate n-1 times to compute the nth jacobsthal number\n        for i in range(2, n):\n            # Compute the nth jacobsthal number using the formula: j^(n-i-1) = j^i * (1 - j)\n            j = j * j0 * (1 - j1)\n            # Update the values of j0 and j1 for the next iteration\n            j0 = j1\n            j1 = j\n        # Return the nth jacobsthal number\n        return j"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the list in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize minimum count and minimum records to the first K elements of the sorted list\n    min_count = min_records = test_list[:K]\n\n    # Iterate over the remaining elements of the list\n    for i in range(K, len(test_list)):\n        # If the count of the current element is less than the count of the minimum records, update the minimum records\n        if min_count[0][0] < test_list[i][0]:\n            min_count = [test_list[i][:2], 1]\n        # If the count of the current element is equal to the count of the minimum records, update the minimum count\n        elif min_count[0][0] == test_list[i][0]:\n            min_count[1] += 1\n\n        # If the count of the minimum records is greater than or equal to k, break out of the loop\n        if min_count[1] >= K:\n            break\n\n        # Update the minimum records if the count of the current element is greater than the count of the minimum records\n        if test_list[i][0] < min_records[0][0] or (test_list[i][0] == min_records[0][0] and test_list[i][1] < min_records[0][1]):\n            min_records = [test_list[i][:2], 1]\n        elif test_list[i][0] == min_records[0][0] and test_list[i][1] == min_records[0][1]:\n            min_records[1] += 1\n\n    # Return the minimum records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    count = 0\n    \n    for tup in test_list:\n        if len(min_list) < K:\n            min_list.append(tup)\n        elif tup[0] < min_list[0][0]:\n            min_list.pop(0)\n            min_list.append(tup)\n        count += 1\n        \n        if count == K:\n            break\n            \n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Input:\n    test_list: a tuple list\n    K: an integer\n    \n    Output:\n    A list of tuples representing the minimum k records from the tuple list\n    '''\n    \n    # sort the tuple list in ascending order based on the second element\n    test_list.sort(key=lambda x: x[1])\n    \n    # initialize an empty list to store the minimum k records\n    min_list = []\n    \n    # iterate through the sorted tuple list and add the first K elements to the min_list\n    for i in range(K):\n        min_list.append(test_list[i])\n    \n    # return the min_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Sort the list in ascending order based on the second element in each tuple\n    test_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize a variable to store the minimum k records\n    min_k_records = []\n    # Initialize a variable to store the current k records\n    current_k_records = []\n    # Initialize a variable to store the current minimum k\n    min_k = None\n    # Loop through the sorted list\n    for i in range(len(test_list)):\n        # If the current k is less than or equal to K, add the current record to the current k records\n        if len(current_k_records) <= K:\n            current_k_records.append(test_list[i])\n        # If the current k is greater than K, add the minimum k records to the min k records list and reset the current k records list\n        else:\n            min_k_records.append(min_k)\n            current_k_records.append(test_list[i])\n            if min_k is None or min_k[1] > test_list[i][1]:\n                min_k = test_list[i]\n    # Add the minimum k records to the min k records list\n    min_k_records.append(min_k)\n    # Return the list of minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the minimum count and minimum value\n    min_count = min_value = None\n\n    # Iterate over the first K elements of the sorted list\n    for i in range(K):\n        # Get the count and value of the current element\n        count = len(test_list[i][1])\n        value = test_list[i][1][0]\n\n        # If the current element is the minimum value so far or its count is smaller than the minimum count, update the minimum value and count\n        if min_value is None or value < min_value or (value == min_value and count < min_count):\n            min_value = value\n            min_count = count\n\n    # Return the minimum count and minimum value\n    return min_count, min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n        test_list (list): List of tuples (value, weight)\n        K (int): Maximum number of records to be considered.\n\n    Returns:\n        list: List of tuples (value, weight) of K smallest values.\n    \"\"\"\n\n    test_list.sort(key=lambda x: x[1])  # Sort the list based on the second element of each tuple\n\n    # Initialize an empty list to store the K smallest values\n    result = []\n\n    # Iterate through the sorted list and add the elements to the result list\n    for i in range(K):\n        result.append(test_list[i])\n\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples, where each tuple contains\n    a unique identifier and a value, and a value representing the\n    number of records that share the identifier in the list.\n    It finds the minimum K records from the list.\n\n    Args:\n    test_list (list): A list of tuples, where each tuple contains a unique\n        identifier and a value.\n    K (int): The value representing the number of records to find the minimum.\n\n    Returns:\n    list: A list containing the minimum K records from the test_list.\n\n    Example:\n    >>> test_list = [('id1', 2), ('id1', 3), ('id2', 1), ('id3', 1)]\n    >>> min_k(test_list, 2)\n    [('id1', 2), ('id1', 3)]\n    \"\"\"\n\n    # Create a dictionary to store the count of each identifier\n    count_dict = {}\n    for tup in test_list:\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += tup[1]\n        else:\n            count_dict[tup[0]] = tup[1]\n\n    # Create a list to store the minimum K records\n    min_records = []\n\n    # Iterate through the count dictionary and add the tuples with count\n    # less than or equal to K to the minimum records list\n    for key, value in count_dict.items():\n        if value <= K:\n            min_records.append((key, value))\n\n    # Sort the minimum records list in ascending order of the value\n    min_records.sort(key=lambda x: x[1])\n\n    # Return the minimum K records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list based on the first element of the tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize min_k to the first record in the list\n    min_k = test_list[0]\n\n    # Iterate over the rest of the list\n    for i in range(1, len(test_list)):\n        # If the current record has a smaller key than the previous min_k, update min_k\n        if test_list[i][0] < min_k[0]:\n            min_k = test_list[i]\n\n        # If we have found k records, break the loop\n        if i >= K:\n            break\n\n    return min_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # Initialize the minimum list as an empty list\n    min_list = []\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Check if the length of the minimum list is less than K\n        if len(min_list) < K:\n            # If yes, append the current tuple to the minimum list\n            min_list.append(test_list[i])\n        else:\n            # If not, check if the current tuple is greater than the last element of the minimum list\n            if test_list[i][0] > min_list[-1][0]:\n                # If yes, replace the last element of the minimum list with the current tuple\n                min_list[-1] = test_list[i]\n    # Return the minimum list of tuples\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples in ascending order\n    test_list = sorted(test_list)\n    # Initialize minimum k value\n    min_value = float('inf')\n    # Initialize the list to store minimum k values\n    min_k_list = []\n    # Iterate over the sorted list of tuples\n    for i in range(K):\n        # Check if the current tuple has a smaller value than the current minimum value\n        if test_list[i][1] < min_value:\n            # If yes, update the minimum value and add the index of the tuple to the list of minimum k values\n            min_value = test_list[i][1]\n            min_k_list = [i]\n        # If the current tuple has the same value as the current minimum value, add the index of the tuple to the list of minimum k values\n        elif test_list[i][1] == min_value:\n            min_k_list.append(i)\n    # Return the list of minimum k values\n    return min_k_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for index, element in enumerate(l1):\n        if element in l2 and element in l3:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty list to store the common elements\n    common = []\n\n    # Loop through each index of each list\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            # Add the common element to the list of common elements\n            common.append(l1[i])\n\n    # Return the list of common elements\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_elements = []\n    \n    # Loop through each index of l1 and l2\n    for i in range(len(l1)):\n        # Check if the element at this index is present in both l1 and l2\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, append it to the common_elements list\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store common elements\n    common = []\n    \n    # Loop through each element in the first list\n    for i in range(len(l1)):\n        # Check if the element is also present in the other two lists\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the list of common elements\n            common.append(l1[i])\n    \n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for index in range(min(len(l1), len(l2), len(l3))):\n        if l1[index] == l2[index] == l3[index]:\n            common_elements.append(l1[index])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError('The list should have at least two numbers')\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two numbers.\")\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for number in numbers:\n            if number < smallest:\n                second_smallest = smallest\n                smallest = number\n            elif number < second_smallest and number!= smallest:\n                second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The second smallest number in the list.\n\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # If the list has only one element, it's the smallest and largest\n    if len(numbers) == 1:\n        return numbers[0]\n\n    # Otherwise, return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n\n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initialize the smallest and second smallest variables to the largest possible integer\n    smallest = float('-inf')\n    second_smallest = float('-inf')\n    \n    # Iterate through the list and update the smallest and second smallest variables accordingly\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    # If there is no second smallest number, return None\n    if second_smallest == float('-inf'):\n        return None\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"The list should have at least 2 elements\"\n    elif len(numbers) == 2:\n        return sorted(numbers)[1]\n    else:\n        min1 = numbers[0]\n        min2 = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < min1:\n                min2 = min1\n                min1 = numbers[i]\n            elif numbers[i] < min2 and numbers[i]!= min1:\n                min2 = numbers[i]\n        return min2"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Returns the second smallest number in a list, or None if the list has less than two elements.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n            \n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\w+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r'a(?P<zero_or_one>b){0,1}'\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab(.|\\n)*?'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?:b*)'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"abaabb\"\nprint(text_match_zero_one(text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*?'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'ab*a'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # The pattern to match the given string\n    pattern = r'a(b*){0,1}'\n\n    # Search for the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If a match is found, return True\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    # count the number of characters in each string\n    char_count = [0] * 128\n    for string in test_list:\n        for char in string:\n            char_count[ord(char)] += 1\n    \n    # check for reverse pairs\n    pairs = 0\n    for i in range(128):\n        if char_count[i] % 2 == 1:\n            # check if the corresponding reverse character exists\n            if char_count[i-128] % 2 == 1:\n                pairs += 1\n    \n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # function to check if two strings are reverse of each other\n    def is_reverse(str1, str2):\n        return str1[::-1] == str2\n        \n    # iterate over all strings in the list\n    for i in range(len(test_list)):\n        # check if the current string is a reverse of any other string\n        for j in range(i+1, len(test_list)):\n            # check if the reverse of the current string is a reverse of any other string\n            if is_reverse(test_list[i], test_list[j]):\n                # check if the reverse of the reverse of the current string is a reverse of any other string\n                if is_reverse(test_list[j], test_list[i]):\n                    # increment the count of reverse pairs\n                    count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublist_count = {}\n\n    # iterate over the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # check if the tuple is already a key in the dictionary\n        if sublist_tuple in sublist_count:\n            # if it is, increment its value by 1\n            sublist_count[sublist_tuple] += 1\n        # if the tuple is not in the dictionary, add it with a value of 1\n        else:\n            sublist_count[sublist_tuple] = 1\n\n    # return the dictionary\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count_dict:\n                count_dict[sublist_tuple] += 1\n            else:\n                count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    lst = list(set(lst))\n    count = {}\n    for num in lst:\n        count[tuple(num)] = lst.count(num)\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of unique sublists\n    unique_sublist_count = {}\n    # iterate through each element of the input list\n    for element in list1:\n        # convert the element to a tuple and check if it is already in the dictionary\n        if tuple(sorted(element)) not in unique_sublist_count:\n            # if not, add it to the dictionary and set its value to 1\n            unique_sublist_count[tuple(sorted(element))] = 1\n        else:\n            # if it is, increment its value by 1\n            unique_sublist_count[tuple(sorted(element))] += 1\n    # return the dictionary\n    return unique_sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    count_dict = {}\n    \n    # loop through the list of lists\n    for sublist in list1:\n        # convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in count_dict:\n            # if it is, increment the value of the tuple\n            count_dict[tuple(sublist)] += 1\n        else:\n            # if it's not, add it to the dictionary with a value of 1\n            count_dict[tuple(sublist)] = 1\n    \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sorted(sublist)) in sublist_count:\n            sublist_count[tuple(sorted(sublist))] += 1\n        else:\n            sublist_count[tuple(sorted(sublist))] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the number of occurrences of each unique sublist\n    count = {}\n    # iterate through the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # check if the tuple is already in the dictionary\n        if sublist_tuple not in count:\n            # if not, add it with a count of 1\n            count[sublist_tuple] = 1\n        else:\n            # if it is, increment its count by 1\n            count[sublist_tuple] += 1\n    # return the dictionary of counts\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    # create a dictionary to store the unique sublists and their counts\n    counts = {}\n    # loop through all sublists in the original list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in counts:\n            # if it is, increment its count\n            counts[tuple(sublist)] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary to store the count of unique sublists\n    unique_sublist_count = {}\n    # iterate over each element in the input list\n    for element in list1:\n        # check if the element is a list\n        if isinstance(element, list):\n            # convert the list to a tuple and add it to the dictionary if it doesn't already exist\n            if tuple(element) not in unique_sublist_count:\n                unique_sublist_count[tuple(element)] = 1\n            # increment the count of the list in the dictionary\n            else:\n                unique_sublist_count[tuple(element)] += 1\n    # return the dictionary\n    return unique_sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 0\n        count[item] += 1\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if num.count('.') == 1:\n        parts = num.split('.')\n        int_part = parts[0]\n        if len(int_part) > 1 and int_part[0] == '0':\n            return False\n        decimal_part = parts[1]\n        if len(decimal_part) > 2:\n            return False\n        for digit in decimal_part:\n            if not digit.isdigit():\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 1 and num[0] == '-' and num[1] == '.':\n        num = num[2:]\n    for i in range(len(num)):\n        if num[i] == '.' and num[i-1] == 'e':\n            return False\n        if num[i] == '.' or num[i] == '-':\n            continue\n        if num[i] == 'e':\n            continue\n        if not num[i].isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if num.split('.')[1] and len(num.split('.')[1]) > 2:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Check if the number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Split the number into integer and decimal parts\n    int_part, dec_part = num.split('.')\n    \n    # Check if the number contains only digits\n    if not int_part.isdigit() or not dec_part.isdigit():\n        return False\n    \n    # Check if the decimal part has a precision of 2\n    if len(dec_part) > 2:\n        return False\n    \n    # Check if the decimal part is a valid decimal number\n    if not dec_part.replace('.', '', 1).isdigit():\n        return False\n    \n    # Convert the decimal part to an integer\n    dec_part = int(dec_part)\n    \n    # Check if the decimal part is within the range of 0-9\n    if dec_part < 0 or dec_part > 9:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        decimal_part, whole_part = num.split('.')\n        if len(decimal_part) > 2 or len(whole_part) > 2:\n            return False\n        for digit in decimal_part:\n            if not digit.isdigit():\n                return False\n        for digit in whole_part:\n            if not digit.isdigit():\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the input string is a decimal number with a precision of 2\n    try:\n        decimal_point = num.index('.')\n        if num.count('.') > 1:\n            return False\n        for i in range(decimal_point+1, len(num)):\n            if not num[i].isdigit():\n                return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if str(num).count('.') == 1:\n            int_part, decimal_part = str(num).split('.')\n            if len(int_part) == 0 or len(decimal_part) == 0 or len(decimal_part) > 2:\n                return False\n            for char in decimal_part:\n                if not char.isdigit():\n                    return False\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2 or len(parts[0]) > 10 or len(parts[1]) > 2:\n        return False\n    for c in parts[0]:\n        if c < '0' or c > '9':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n    if num % 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.strip()\n    if '.' in num:\n        decimal_part = num.split('.')[-1]\n        if len(decimal_part) > 2:\n            return False\n        for digit in decimal_part:\n            if not digit.isdigit():\n                return False\n        return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    distinct_count = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            distinct_count += 1\n    return distinct_count == len(arr)"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if it contains only one distinct element, and False otherwise.\n    '''\n\n    # Initialize a set to store the elements of the list\n    unique_set = set()\n\n    # Loop through the list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # If the size of the set is equal to one, we have found a unique element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store the unique elements\n    unique_set = set(arr)\n\n    # Check whether the length of the set is 1 or not\n    if len(unique_set) == 1:\n        print(\"The list contains only one unique element.\")\n    else:\n        print(\"The list contains multiple unique elements.\")\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = False\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = True\n                break\n        if unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set from the list of numbers to remove duplicates\n    unique_set = set(arr)\n    \n    # Check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    # Check that the input is a number between 1 and 12\n    if type(monthnum3)!= int or not (1 <= monthnum3 <= 12):\n        print(\"Input must be a number between 1 and 12\")\n        return\n    \n    # Check if the month number contains 30 days\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(\"The month number contains 30 days\")\n    else:\n        print(\"The month number does not contain 30 days\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2:\n        if ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    if monthnum in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]: # April, June, September, November\n        return True\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]: # February, March, May, July, August, October, December\n        if monthnum3 % 2 == 0: # If month number is even, then it contains 30 days\n            return True\n        else:\n            return False\n    else:\n        return False # If month number is not 2, 3, 5, 7, 8, 10, or 12, then it does not contain 30 days."
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Dictionary to store the number of days in each month\n    days = {\n        1: 31,\n        2: 28,  # 28 or 29 depending on whether it is a leap year or not\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # Check if the given month number is in the range of 1 to 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number. Months are given as number from 1 to 12.\"\n    \n    # Get the number of days in the given month\n    num_days = days[monthnum3]\n    \n    # Check if the number of days is 30\n    if num_days == 30:\n        return \"The given month number contains 30 days.\"\n    elif num_days == 28:\n        # Check if the year is a leap year\n        if is_leap_year(year):\n            return \"The given month number contains 28 days.\"\n        else:\n            return \"The given month number contains 29 days.\"\n    else:\n        return \"The given month number contains 31 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum3, \"contains 30 days.\")\n    elif monthnum3 in [4, 6, 9, 11]:\n        print(monthnum3, \"contains 31 days.\")\n    else:\n        print(monthnum3, \"is not a valid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the given month number is within the range of 1 to 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n\n    # Check whether the given month number has 30 days or not\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        print(\"Invalid month number.\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 == 2:\n        if monthnum3 % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize minimum difference and two variables to keep track of the minimum and maximum difference\n    min_diff = float('inf')\n    prev_num = float('inf')\n    \n    # Traverse the array from the first element to the second last element\n    for i in range(1, n-1):\n        # Calculate the current difference\n        curr_diff = arr[i] - arr[i-1]\n        \n        # Update the minimum difference if the current difference is less than the minimum difference\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n        \n        # Update the previous number if the current difference is greater than the previous number\n        if curr_diff > prev_num:\n            prev_num = arr[i-1]\n    \n    # If the minimum difference is still infinity, the array is not sorted\n    if min_diff == float('inf'):\n        return -1\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[-1] - arr[0]\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    min_pair = [0, 0]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = [arr[i], arr[j]]\n\n    return min_diff, min_pair\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Invalid input\"\n\n    arr.sort()\n\n    min_diff = abs(arr[n-1] - arr[0])\n\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # Sort the given array\n    arr.sort()\n\n    # Initialize variables for minimum and maximum elements in the array\n    min_diff = float('inf')\n    max_element = arr[n-1]\n\n    # Iterate over the array from the first element to the last element\n    for i in range(1, n):\n        diff = abs(arr[i] - max_element)\n\n        # Update minimum difference if current difference is smaller than minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # Update maximum element if current element is greater than the current maximum element\n        if arr[i] > max_element:\n            max_element = arr[i]\n\n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference to be the difference between the last two elements\n    min_diff = abs(arr[-1] - arr[-2])\n    # Initialize a flag to keep track of the minimum element\n    min_elem = arr[-1]\n    # Loop through the array from the second element to the first element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the minimum element\n        diff = abs(arr[i] - min_elem)\n        # If the difference is smaller than the minimum difference, update the minimum difference and the minimum element\n        if diff < min_diff:\n            min_diff = diff\n            min_elem = arr[i]\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3 + 2 * math.floor((n-3)/2)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Function to find nth polite number. \n    '''\n    # base case \n    if n == 1: \n        return 1 \n    # recursive case \n    else: \n        # calculate nth polite number \n        ans = math.sqrt(n) + 1 \n        return int(ans) "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n\n    # Initialize variables\n    i = 1\n    polite = 1\n\n    # Calculate nth polite number using math.comb() function\n    while i <= n:\n        polite *= math.comb(n, i)\n        i += 1\n\n    return polite\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def find_nth_polite_number(n): \n        '''\n        Recursive function to find nth polite number.\n        '''\n        if n == 0: \n            return 0 \n        elif n == 1: \n            return 1 \n        elif n % 2 == 0: \n            return find_nth_polite_number(n//2) + 1 \n        else: \n            return find_nth_polite_number((n//2)+1) + 2 \n\n    return find_nth_polite_number(n) "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    count = 1 \n    a = 1\n    b = 2\n    # Loop through the numbers until the nth polite number is found\n    while count < n:\n        # Check if a is a polite number\n        if a % 2 == 1 and is_prime(a):\n            print(a)\n            count += 1\n        # Update values for the next iteration\n        a = b\n        b += 2\n\ndef is_prime(n): \n    '''\n    Function to check if a number is prime.\n    '''\n    # Base case\n    if n <= 1:\n        return False\n    # Check if n is divisible by any number from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n    \"\"\"\n    # Initialize the base\n    base = 5\n\n    # Initialize the count\n    count = 0\n\n    # Initialize the result\n    result = 0\n\n    # Initialize the counter\n    i = 0\n\n    # Loop through each digit of the base number\n    while i < n:\n        # If the count is greater than or equal to the base\n        if count >= base:\n            # Add the result to the result\n            result += count\n\n            # Reset the count\n            count = 0\n\n            # Increment the base\n            base *= 5\n\n            # Increment the counter\n            i += 1\n        else:\n            # Increment the count\n            count += 1\n\n            # Increment the counter\n            i += 1\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(start_num):\n        polite_number = start_num\n        current_num = start_num\n        count = 1\n        while True:\n            current_num += 1\n            if is_prime(current_num):\n                if count == n:\n                    return current_num\n                count += 1\n            elif current_num == 4:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 10:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 12:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 14:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 16:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 18:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 20:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 22:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 24:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 26:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 28:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 30:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 32:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 34:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 36:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 38:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 40:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 42:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 44:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 46:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 48:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 50:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 52:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 54:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 56:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 58:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 60:\n                current_num += 2\n                polite_number += 2\n                count = 1\n            elif current_num == 62:\n                current_num += 2\n                polite_number += 2\n               "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        polite_count = 0\n        num = 2\n        while True:\n            if is_prime(num):\n                polite_count += 1\n                if polite_count == n:\n                    return num\n            num += 1\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_count = 1\n    polite_number = 1\n    \n    while polite_count < n:\n        polite_number += 1\n        if is_prime(polite_number):\n            polite_count += 1\n            \n    return polite_number\n    \ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Get the nth polite number\n    nth_polite = 1\n    while nth_polite < n:\n        # Find the next polite number\n        if nth_polite % 2 == 0:\n            nth_polite += 2\n        else:\n            nth_polite += 1\n    \n    # Return the nth polite number\n    return nth_polite"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    return [lst[i:i+2] for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1[:-1], l1[1:]))"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    # initializing an empty list to store the pairs\n    result = []\n\n    # iterating over the list and adding pairs to the result list\n    for i in range(len(l1)-1):\n        pair = (l1[i], l1[i+1])\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [tuple(l1[i:i+2]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    \n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    \n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Return a list of all pairs of consecutive items in a given list.\n\n    Parameters:\n    l1 (list): the list of items\n\n    Returns:\n    list: a list of pairs of consecutive items in the input list\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes two lists of numbers and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    \n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    return len([num for i, num in enumerate(arr) if sum - num in arr[i+1:]])"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list that contains the elements of li1 that are not present in li2.\n    '''\n    result = []\n    for item in li1:\n        if item not in li2:\n            result.append(item)\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Get the union of the two lists\n    union = list(set(li1) | set(li2))\n    # Get the intersection of the two lists\n    intersection = list(set(li1) & set(li2))\n    # Get the elements that are only in one of the lists\n    diff = [x for x in union if x not in intersection]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(li1)\n    set2 = set(li2)\n    \n    # Return the difference between the sets\n    return list(set1.symmetric_difference(set2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function finds the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n+1, 2):\n        result += i ** 4\n    return result"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    \n    for i in range(1, n+1):\n        if i % 2 == 1:\n            power_of_i = i ** 4\n            sum_of_powers += power_of_i\n            \n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_num_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n    sum_of_powers = 0\n    \n    for num in odd_num_list:\n        sum_of_powers += num ** 4\n    \n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # initialize sum variable\n    sum = 0\n\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add fourth power of odd number to sum\n        sum += i*i*i*i\n\n    # return sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += (i ** 4)\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**4)\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num = 1\n    sum = 0\n\n    while num <= n:\n        sum += num ** 4\n        num += 1\n\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    parentheses = {'(', '[', '{'}\n\n    for char in exp:\n        if char in parentheses:\n            stack.append(char)\n        elif char == ')' and not stack or char == ']' and not stack or char == '}' and not stack:\n            return False\n        elif char == ')' and stack[-1] == '(' or char == ']' and stack[-1] == '[' or char == '}' and stack[-1] == '{':\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return \"Not balanced\"\n            elif i in ['(', '{']:\n                if i == stack[-1]:\n                    stack.pop()\n                else:\n                    return \"Not balanced\"\n            else:\n                if i == stack[-1]:\n                    stack.pop()\n                elif stack[-1] in ['(', '{']:\n                    return \"Not balanced\"\n    if stack:\n        return \"Not balanced\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char == ')' and top!= '(':\n                return False\n            elif char == ']' and top!= '[':\n                return False\n            elif char == '}' and top!= '{':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    balance = True\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                balance = False\n                break\n            else:\n                stack.pop()\n\n    return balance"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if not (char in ['(', '{', '['] and last_char in [')', '}', ']']):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if (char == ')' and top_char!= '(') or (char == ']' and top_char!= '[') or (char == '}' and top_char!= '{'):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. \n    \"\"\"\n    stack = deque()\n\n    for i, c in enumerate(exp):\n        if c in ['(', '[', '{']:\n            stack.append(c)\n        elif c in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if c in ['(', '[', '{']:\n                if top!= c:\n                    return False\n            elif c in [')', ']', '}']:\n                if top == c:\n                    return False\n\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening = {'(':1, '[':2, '{':3}\n    closing = {')':1, ']':2, '}':3}\n    for c in exp:\n        if c in opening:\n            stack.append(c)\n        elif c in closing:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if closing[c]!= opening[top]:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n\ntest_str = \"The quick brown fox jumps over the lazy dog. The dog barks at the fox.\"\nK = 3\n\nresult = remove_length(test_str, K)\nprint(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with k length\n    words_k_length = []\n    \n    # Loop through each word\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) >= K:\n            # If the word has k length, append it to the list of words with k length\n            words_k_length.append(word)\n    \n    # Join the words with k length into a single string\n    result =''.join(words_k_length)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Loop through the words and remove words with k length\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    \n    # Join the new words back into a string\n    result_str =''.join(new_words)\n    \n    # Return the result string\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the remaining words\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If the length is not equal to K, add the word to the result list\n            result.append(word)\n    # Join the remaining words in the result list back into a string and return it\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    \n    # Remove words with length equal to K\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            del words[i]\n    \n    # Join the list of words into a single string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use regular expression search to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern,text)\n    \n    # check if there are any matches\n    if matches:\n        # loop through each match and find its position and length\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            position = text.rfind(match,start_index-1,-1) # find the last occurrence of the match before the current start index\n            \n            # return the results if there is at least one match\n            return {\"match\":match,\"start_index\":start_index,\"end_index\":end_index,\"position\":position}\n    \n    # return None if there are no matches\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use regex to search for the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # iterate over matches and count the number of occurrences of the pattern\n    count = 0\n    for match in matches:\n        count += 1\n    \n    # check if count is greater than 0, and return the match object if it is\n    if count > 0:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    else:\n        for matchNum, match in enumerate(matches, start=1):\n            # print(f\"Match {matchNum}: {match.group()}\")\n            # print(f\"Match {matchNum}: {match.start()}\")\n            # print(f\"Match {matchNum}: {match.end()}\")\n            # print(f\"Match {matchNum}: {match.span()}\")\n            print(f\"Match {matchNum}: {match.group()} ({match.start()}, {match.end()})\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string. Returns None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    m = re.search(pattern, text)\n    if m:\n        return m.group(), m.start(), m.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:  # check if index is odd\n            if nums[i] % 2!= 0:  # check if number at odd index is odd\n                return False  # if both conditions are true, return False\n    return True  # if loop completes and no false condition is encountered, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i+1) % 2!= 0: # check if the current index is odd\n            if nums[i] % 2!= 0: # check if the current number is odd\n                return False # return False if the current index contains an odd number\n    return True # return True if every odd index contains odd numbers"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # Initialize a variable to keep track of whether every odd index contains odd numbers\n    is_valid = True\n    \n    # Iterate through the list of numbers\n    for i in range(len(nums)):\n        # Check if the current number is odd\n        if nums[i] % 2!= 0:\n            # If the current number is odd and the current index is odd, the list is invalid\n            if i % 2!= 0:\n                is_valid = False\n                break\n    \n    # Return whether every odd index contains odd numbers or not\n    return is_valid"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Loop through each index in the list\n    for i in range(0, len(nums), 2):\n        # If the current index contains an odd number, return True immediately\n        if nums[i] % 2!= 0:\n            return True\n    # If we make it through the entire loop without finding an odd number, return False\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if i % 2 == 0: #if the index is even, then skip it\n            continue\n        else: #if the index is odd\n            if sum(nums[i:]) % 2!= 0: #if the sum of odd numbers in the odd index is odd, then return False\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if i + 1 < len(nums) and nums[i] % 2 == 0 or nums[i + 1] % 2 == 0:\n                print(False)\n                return True\n    print(True)\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(str(nums[i]))) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # initialize variables\n    count = 0\n\n    # iterate through the list\n    for i in range(len(nums)):\n        # if the current index is odd\n        if i % 2!= 0:\n            # initialize counter for odd numbers in the current index\n            odd_count = 0\n\n            # iterate through the current index\n            for num in nums[i]:\n                # if the current number is odd\n                if num % 2!= 0:\n                    # increment the counter for odd numbers in the current index\n                    odd_count += 1\n\n            # if the number of odd numbers in the current index is equal to the length of the list, then add 1 to the count\n            if odd_count == len(nums[i]):\n                count += 1\n\n    # return the final count\n    return count"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if sum(nums[i-1:i+1]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                odd_count += 1\n            else:\n                return False\n        else:\n            if nums[i] % 2 == 1:\n                odd_count += 1\n            else:\n                return False\n    if odd_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            vowel_count += 1\n    return vowel_count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    total_sum = 0\n    for element in unique_elements:\n        total_sum += element\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # sum of non-repeated elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the elements of the list\n    unique_set = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Iterate over the unique set of elements and add their values to the sum_non_repeated variable\n    for element in unique_set:\n        sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the sum of non-repeated elements\n    non_repeated_sum = 0\n    for num in freq:\n        if freq[num] == 1:\n            non_repeated_sum += num\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    n = len(arr)\n    count = [0] * 101 # create a list of size 101 to store the count of each element\n    \n    # loop through the list and increment the count of each element\n    for i in range(n):\n        count[arr[i]] += 1\n    \n    # initialize the sum variable\n    sum = 0\n    \n    # loop through the list again and add the non-repeated elements to the sum\n    for i in range(n):\n        if count[arr[i]] == 1:\n            sum += arr[i]\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list using sets.\n\n    Args:\n        arr (list): List of integers.\n\n    Returns:\n        int: The sum of non-repeated elements in the list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n\n    # Convert the set back to a list and sum its elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    \n    # Iterate through the dictionary to calculate the sum of non-repeated elements\n    for num in freq:\n        if freq[num] == 1:\n            non_repeated_sum += num\n    \n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list of integers as input and returns the sum of all the unique non-repeated elements in the list.\n    '''\n    unique_list = []\n    sum_list = []\n\n    # Finding all the unique elements in the list\n    for i in arr:\n        if i not in unique_list:\n            unique_list.append(i)\n\n    # Calculating the sum of all the unique elements\n    for j in unique_list:\n        sum_list.append(j)\n\n    return sum(sum_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Convert the list to set to remove duplicates\n    unique_set = set(arr)\n    # Sum of non-repeated elements in the set\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create an empty dictionary to store the frequency of elements in the list\n    freq = {}\n\n    # Loop through the list and increment the frequency of each element in the dictionary\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n\n    # Find the sum of the elements in the dictionary that have a frequency of 1\n    sum_non_rep = 0\n    for key in freq:\n        if freq[key] == 1:\n            sum_non_rep += int(key)\n\n    return sum_non_rep"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(enumerate(list1), lambda x: x[1] == x[1]+1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # groupby takes an iterable and returns a generator of (key, group) tuples\n    grouped_list = groupby(list1)\n    # create an empty list to store the sublists\n    sublists = []\n    # iterate over the grouped_list and add consecutive duplicates of same element to sublists\n    for key, group in grouped_list:\n        if key is None:\n            # if the key is None, it means we have reached the end of the list, so we need to add the group to sublists\n            sublists.append(list(group))\n        else:\n            # if the key is not None, it means we have found a new consecutive duplicate, so we append the group to sublists\n            sublists.append(list(group))\n    # return the list of sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group consecutive duplicates of list1 into sublists\n    grouper = lambda x: groupby(enumerate(x), lambda y: y[0] == y[1])\n    grouped_list = sorted(list(grouper(list1)))\n    \n    # extract the sublists and pack them into a new list\n    packed_list = []\n    for _, sublist in grouped_list:\n        if len(sublist) > 1:\n            packed_list.extend(list(sublist))\n        else:\n            packed_list.append(sublist[0][1])\n    \n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(map(list, groupby(lst)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(enumerate(list1), lambda x: x[0] == x[1])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = sorted(list1, key=lambda x: (-len(list(g)), x))\n    return [list(g) for k, g in groupby(grouped_list)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1) if not k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n    list1 (list): A list of elements.\n\n    Returns:\n    list: A list of sublists of consecutive duplicates of the input list.\n\n    '''\n\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for element in list1:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # create a list to store the sublists of consecutive duplicates\n    consecutive_duplicates = []\n    for key, group in groupby(list1):\n        if key in count_dict and count_dict[key] > 1:\n            consecutive_duplicates.append(list(group))\n\n    return consecutive_duplicates"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group consecutive duplicates\n    grouped = groupby(list1)\n\n    # Iterate over the grouped duplicates and pack them into sublists\n    packed_list = []\n    for group in grouped:\n        if len(list(group)) > 1:\n            sublist = list(group)\n            del sublist[-1]\n            packed_list.append(sublist)\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    # Iterate through the list\n    for sublist in list1:\n        # Turn the sublist to a tuple and check if it exists in the dictionary\n        if tuple(sublist) in count_dict:\n            # Increment the count of the tuple by 1\n            count_dict[tuple(sublist)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if sublist not in sublists:\n            sublists[tuple(sublist)] = 1\n        else:\n            sublists[tuple(sublist)] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the number of occurrences of each tuple\n    sublist_dict = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert each list to a tuple\n        sublist_tuple = tuple(sublist)\n\n        # If the tuple is already in the dictionary, increment the count\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the counts of each unique list\n    count_dict = {}\n\n    # Iterate through each list in the main list\n    for i in list1:\n        # Convert the list to a tuple and add it to the dictionary\n        count_dict[(tuple(i),)] = count_dict.get((tuple(i),), 0) + 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            sublists.append(tuple(list1[i]))\n    sublists_count = {}\n    for item in sublists:\n        if item in sublists_count:\n            sublists_count[item] += 1\n        else:\n            sublists_count[item] = 1\n    return sublists_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Initialize an empty dictionary to store the counts of unique sublists\n    counts = {}\n\n    # Iterate over each list in the input list\n    for item in list1:\n        # Convert the list to a tuple to avoid duplicates\n        sublist = tuple(item)\n        # Check if the tuple is already a key in the dictionary\n        if sublist in counts:\n            # Increment the count for this tuple\n            counts[sublist] += 1\n        else:\n            # Add the tuple as a new key in the dictionary with a count of 1\n            counts[sublist] = 1\n\n    # Return the dictionary of unique sublist counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sublist) in sublist_count:\n            sublist_count[tuple(sublist)] += 1\n        else:\n            sublist_count[tuple(sublist)] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # create a dictionary to store the counts of each unique sublist\n    sublist_counts = {}\n    \n    # loop through the list of lists\n    for sublist in list1:\n        \n        # convert the sublist to a tuple and add it to the dictionary if it doesn't already exist\n        if tuple(sublist) in sublist_counts:\n            sublist_counts[tuple(sublist)] += 1\n        else:\n            sublist_counts[tuple(sublist)] = 1\n            \n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of unique lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists_dict = {}\n    for sublist in lst:\n        if tuple(sorted(sublist)) not in unique_sublists_dict:\n            unique_sublists_dict[tuple(sorted(sublist))] = 1\n        else:\n            unique_sublists_dict[tuple(sorted(sublist))] += 1\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            for j in range(len(list1[i])):\n                if list1[i][j] not in sublists:\n                    sublists[list1[i][j]] = 1\n                else:\n                    sublists[list1[i][j]] += 1\n    return sublists"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Calculate the sum of all tuples in the list\n    total_sum = sum(test_list)\n\n    # Create a list of tuples of tuples\n    list_of_tuples_of_tuples = []\n    for i in range(1, len(test_list) + 1):\n        for j in range(i):\n            list_of_tuples_of_tuples.append(tuple(combinations(test_list, i)))\n\n    # Create a set of tuples of sums to remove duplicates\n    set_of_tuples_of_sums = set()\n\n    # Iterate over the combinations of tuples of sums\n    for i in range(len(list_of_tuples_of_tuples)):\n        for j in range(i + 1, len(list_of_tuples_of_tuples)):\n            # Calculate the sum of the two tuples\n            sum_of_tuples = sum(list_of_tuples_of_tuples[i] + list_of_tuples_of_tuples[j])\n            # Add the tuple of sums to the set\n            set_of_tuples_of_sums.add(tuple(sorted(list_of_tuples_of_tuples[i] + list_of_tuples_of_tuples[j])))\n\n    # Create a list of tuples of sums\n    list_of_tuples_of_sums = sorted(list(set_of_tuples_of_sums))\n\n    # Iterate over the tuples of sums and check if the sum is equal to the total sum\n    result_list = []\n    for i in range(len(list_of_tuples_of_sums)):\n        if list_of_tuples_of_sums[i][0] == total_sum:\n            result_list.append(list_of_tuples_of_sums[i][1:])\n\n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Creating a set to store the unique elements of the list\n    unique_list = set(test_list)\n    # Creating a set to store the pairs of tuples\n    pairs = set()\n    # Loop through the list to find pairs of tuples with unique elements\n    for i in range(len(unique_list)):\n        for j in range(i+1, len(unique_list)):\n            pairs.add((unique_list[i], unique_list[j]))\n    # Creating a set to store the combinations of sums\n    sums = set()\n    # Loop through all possible pairs of tuples\n    for pair in pairs:\n        # Using itertools to find all possible combinations of sums from the pair of tuples\n        for combination in combinations(pair, r=2):\n            # Using set to remove duplicates and convert to a tuple\n            combination_tuple = tuple(sorted(combination))\n            # Checking if the combination tuple is already in the set of combinations of sums\n            if combination_tuple not in sums:\n                # Adding the combination tuple to the set of combinations of sums\n                sums.add(combination_tuple)\n    # Returning the set of combinations of sums\n    return sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    def combination(lst):\n        return list(combinations(lst, len(lst)))\n    \n    for combination in combination(test_list):\n        total = sum(combination)\n        if total in test_list:\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    unique_tuples = list(set(tuple(x) for x in test_list))\n    combinations_list = []\n    \n    for i in range(1, len(unique_tuples) + 1):\n        for comb in combinations(unique_tuples, i):\n            combinations_list.append(tuple(comb))\n    \n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the given tuple list in ascending order\n    test_list.sort()\n\n    # Find all unique combinations of sums with tuples in the given tuple list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                print(test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a list of tuples to use as the target list for combinations\n    target_list = [tuple(i) for i in test_list]\n    # Use itertools.combinations to find all combinations of sums with tuples in the target list\n    for comb in combinations(target_list, len(test_list)):\n        print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    n = len(test_list)\n    total_sum = sum(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if k > i+j:\n                    break\n                combination = tuple(sorted(test_list[i:j+1])) + tuple(sorted(test_list[j:k])) + tuple(sorted(test_list[k:]))\n                if sum(combination) == total_sum:\n                    print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combination = tuple(sorted(test_list[i:j]))\n            all_combinations.append(combination)\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the given list of tuples\n    test_list.sort(key=lambda x: sum(x))\n    # initialize empty list to store the combinations\n    combinations_list = []\n    # loop through all possible combinations\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # add the combination to the list of combinations\n            combinations_list.append(tuple(test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    # return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            for k in range(j + 1, len(test_list)):\n                if sum(test_list[i]) + sum(test_list[j]) + sum(test_list[k]) == 0:\n                    result.append(tuple(sorted([test_list[i], test_list[j], test_list[k]])))\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Check if the number is even\n    if n % 2 == 0:\n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                count += 1\n        return count\n    else:\n        return 'The number is odd'"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter a number: \"))\nprint(\"Count of divisors is even:\", count_divisors(n))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function calculates the count of divisors of a number n. \n    The count of divisors of a number n is the number of integers less than or equal to n that divide evenly into n.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given number using the formula for even numbers of divisors.\n    \"\"\"\n    # Check if the given number is even or not\n    if n % 2 == 0:\n        # Count the number of even divisors\n        count = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                count += 1\n        # Add 1 to the count if the square root of the given number is also an even number\n        if int(math.sqrt(n)) * int(math.sqrt(n)) == n:\n            count += 1\n        return count\n    else:\n        # If the given number is odd, return 1 as there is only 1 divisor.\n        return 1"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def count_div(n, count):\n        if n == 1:\n            return count\n        elif n % 2 == 0:\n            return count_div(n//2, count)\n        else:\n            return count_div((3*n+1)//2, count+1)\n\n    count = count_div(n, 0)\n    even = True\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            even = False\n            count -= 1\n        divisor += 1\n    if even:\n        print(n, 'has an even count of divisors.')\n    else:\n        print(n, 'has an odd count of divisors.')"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.add(i)\n            if n // i!= i:\n                divisors.add(n // i)\n    return sum(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return True\n    divisors_count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors_count += 1\n            if n // i!= i:\n                divisors_count += 1\n    if divisors_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count == int(math.sqrt(n))+1:\n                return \"The count of divisors is even\"\n            else:\n                continue\n    return \"The count of divisors is odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if i!= n//i:\n                count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        if i % 2 == 0:\n            # if the current element is even, add it to the sum of odd subarrays\n            sum_odd += arr[i]\n        else:\n            # if the current element is odd, check if there is a previous even element before it\n            j = i - 1\n            while j >= 0 and arr[j] % 2 == 0:\n                j -= 1\n            # if there is a previous even element, add the sum of the previous even subarrays to the sum of the current odd subarray\n            if j >= 0:\n                sum_odd += sum_odd_subarray(arr, j)\n    return sum_odd\n\n\ndef sum_odd_subarray(arr, j):\n    n = len(arr)\n    sum_odd = 0\n    for k in range(j, n, 2):\n        sum_odd += arr[k]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    count = 0\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                sum += arr[j]\n                count += 1\n    return sum, count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum of all odd length subarrays\n    sum_of_odd_subarrays = 0\n    \n    # Iterate through all subarrays\n    for i in range(len(arr)):\n        # Get the current subarray\n        current_subarray = arr[i:i+3]\n        \n        # If the length of the subarray is odd, add the subarray to the sum\n        if len(current_subarray) % 2 == 1:\n            sum_of_odd_subarrays += sum(current_subarray)\n    \n    return sum_of_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    odd_subarrays_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                odd_subarrays_sum += arr[j] - arr[i]\n    return odd_subarrays_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each element in the array\n    for i in range(len(arr)):\n        \n        # Check if the current element is odd\n        if arr[i] % 2 == 1:\n            \n            # Calculate the sum of all odd length subarrays\n            for j in range(i+1, len(arr)):\n                if j-i+1 % 2 == 1:\n                    sum += arr[j]\n                    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd = 0\n\n    # Initialize a variable to store the current sum of odd length subarrays\n    curr_sum_odd = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Add the current element to the current sum of odd length subarrays\n        curr_sum_odd += arr[i]\n\n        # If the current sum of odd length subarrays is odd, add it to the sum of odd length subarrays\n        if curr_sum_odd % 2!= 0:\n            sum_odd += curr_sum_odd\n\n        # If the current sum of odd length subarrays becomes even after adding the current element,\n        # set the current sum of odd length subarrays to the current element\n        else:\n            curr_sum_odd = arr[i]\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                sum_of_subarrays += sum(arr[i:j+1])\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length_subarrays = 0\n\n    for i in range(n-1):\n        for j in range(i+2, n, 2):\n            sum_odd_length_subarrays += arr[j]\n\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    sum_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            count += 1\n            sum_odd_length += arr[j-1]\n    return sum_odd_length"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to floats\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    # Find the minimum and maximum values of r, g, b\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    # Find the difference between the maximum and minimum values\n    delta = max_val - min_val\n    # Calculate the h, s, and v values\n    if delta == 0:\n        h, s, v = 0, 0, max_val\n    elif max_val == r:\n        h = (g - b) / delta\n        h = 60 * (h + (h < 0))\n    elif max_val == g:\n        h = (b - r) / delta\n        h = 60 * (h + 2)\n    elif max_val == b:\n        h = (r - g) / delta\n        h = 60 * (h + 4)\n    # Calculate the s and v values\n    if max_val == 0:\n        s = 0\n        v = max_val\n    else:\n        s = delta / max_val\n        s = 1 - s\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    if max_color == min_color:\n        h = 0.0\n    else:\n        if r == max_color:\n            h = (g - b) / (max_color - min_color)\n        elif g == max_color:\n            h = 2 + (b - r) / (max_color - min_color)\n        else:\n            h = 4 + (r - g) / (max_color - min_color)\n        \n        h = h * 60.0\n        if h < 0.0:\n            h = h + 360.0\n            \n    s = max_color\n    if max_color == 0.0:\n        v = 0.0\n    else:\n        v = max_color\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HSV\n    # r, g, b are values between 0 and 255\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n\n    if h < 0:\n        h += 360\n\n    return (h, v, delta)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0 # Normalize values to 0-1 range\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    h = None\n    \n    if delta == 0: # If color is a shade of gray\n        h = 0 # Set hue to 0\n    elif cmax == r:\n        h = ((g-b)/delta) % 6\n    elif cmax == g:\n        h = (b-r)/delta + 2\n    else:\n        h = (r-g)/delta + 4\n    \n    h = h*60 # Convert hue to degrees\n    \n    s = delta/cmax\n    \n    v = cmax\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h/6\n    s = delta / (1 - abs(2*cmax - 1)) if delta!= 0 else 0\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert r, g, b to float values\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n\n    # Convert r, g, b to max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate delta value\n    delta = max_val - min_val\n\n    # Check if max_val is zero\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        # Calculate h value\n        if delta == 0:\n            h = 0\n        elif r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        # Convert h value to degrees\n        h *= 60\n\n        # Check if h value is less than zero\n        if h < 0:\n            h += 360\n\n        # Calculate s value\n        if max_val == r:\n            s = delta / (max_val + min_val)\n        elif max_val == g:\n            s = delta / (max_val + min_val)\n        else:\n            s = delta / (max_val + min_val)\n\n        # Calculate v value\n        v = max_val\n\n    # Convert h, s, v values to integers\n    h, s, v = int(h), int(s * 255), int(v * 255)\n\n    # Return h, s, v values as a tuple\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    \"\"\"\n    # Convert r, g, b to floats\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Convert r, g, b to float values between 0 and 1\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Convert r, g, b to float values between 0 and 1\n    delta = max_value - min_value\n\n    # Set default values\n    h = s = v = 0\n\n    # Check if max_value is equal to 0, in which case we set h to 0 and return hsv tuple\n    if max_value == 0:\n        h = 0\n        return (h, s, v)\n\n    # Calculate the h value\n    if max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # Calculate the h value by converting it to degrees\n    h *= 60\n\n    # Check if h is less than 0\n    if h < 0:\n        h += 360\n\n    # Calculate the s and v values\n    if delta == 0:\n        s = 0\n        v = max_value\n    else:\n        s = delta / max_value\n        v = max_value\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color\n    \n    Parameters:\n    r (int): Red value between 0 and 255\n    g (int): Green value between 0 and 255\n    b (int): Blue value between 0 and 255\n    \n    Returns:\n    h (float): Hue value between 0 and 360\n    s (float): Saturation value between 0 and 1\n    v (float): Value value between 0 and 1\n    \n    \"\"\"\n\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n\n    cmax = max(r_norm, g_norm, b_norm)\n    cmin = min(r_norm, g_norm, b_norm)\n\n    delta = cmax - cmin\n\n    if cmax == cmin:\n        h = 0\n    else:\n        if r_norm == cmax:\n            h = 60 * ((g_norm - b_norm) / delta)\n        elif g_norm == cmax:\n            h = 60 * (2 + (b_norm - r_norm) / delta)\n        else:\n            h = 60 * (4 + (r_norm - g_norm) / delta)\n\n        if h < 0:\n            h += 360\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n\n    v = cmax\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0  # Normalizing the values to 0-1 range\n    cmin, cmax = min(r, g, b), max(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = int(h * 60)\n\n    if h < 0:\n        h += 360\n\n    v = int(cmax * 255)\n\n    if delta == 0:\n        s = 0\n    else:\n        s = int(delta / (1 - abs(2 * cmax - 1)) * 255)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_c\n    if max_c!= 0:\n        s = (max_c - min_c) / max_c\n    if max_c == min_c:\n        h = 0\n    else:\n        if max_c == r:\n            h = (g - b) / (max_c - min_c)\n        elif max_c == g:\n            h = 2 + (b - r) / (max_c - min_c)\n        else:\n            h = 4 + (r - g) / (max_c - min_c)\n        if h < 0:\n            h += 6\n        h /= 6\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and first odd numbers of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n            \n    if even_count == 0:\n        return 0\n    elif odd_count == 0:\n        return 0\n    \n    if even_count > odd_count:\n        return even_product\n    else:\n        return odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    result = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            result *= num\n        else:\n            odd_count += 1\n            result *= num\n\n    if even_count == 0:\n        return None\n    else:\n        return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    product = even_num * odd_num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n            if count == 1:\n                even_num = num\n        elif num % 2!= 0:\n            count += 1\n            if count == 2:\n                odd_num = num\n\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    product = even_sum * odd_sum\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through the list and count the number of even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Check if the first even number exists and return None if it doesn't\n    if even_count == 0:\n        return None\n    \n    # Calculate the product of the first even and odd numbers\n    product = lst[0] * lst[1]\n    \n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n    \n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return \"List does not contain even and odd numbers.\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and first odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    # Iterate over the list and count the even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Check if even_count is greater than 0 and odd_count is greater than 0\n    if even_count > 0 and odd_count > 0:\n        # If both conditions are satisfied, calculate and return the product\n        product = lst[0] * lst[1]\n        return product\n    else:\n        # If not, return None\n        return None\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    product = 1\n    count = 0\n    for num in list1:\n        if num % 2 == 0 and num % 2 == 0:\n            product *= num\n            count += 1\n        elif num % 2 == 0:\n            product *= num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even = 1\n    odd = 1\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n        if even!= 1:\n            product *= even\n        if odd!= 1:\n            product *= odd\n\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a tuple of strings\n    string_tuple = test_str.split(',')\n    \n    # Convert each string to an integer and append to a new tuple\n    int_tuple = tuple(int(i) for i in string_tuple)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by the space character\n    string_list = test_str.split(' ')\n    # Create an empty integer list to hold the converted integers\n    int_list = []\n    # Loop through each element in the list\n    for elem in string_list:\n        # If the element is an integer, append it to the integer list\n        if elem.isdigit():\n            int_list.append(int(elem))\n        # If the element is not an integer, raise an error\n        else:\n            raise ValueError('The tuple string contains a non-integer element.')\n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Check if test_str is a tuple string\n    if isinstance(test_str, tuple):\n        # Convert tuple string to integer tuple\n        int_tuple = tuple(map(int, test_str))\n        return int_tuple\n    else:\n        print(\"Error: test_str is not a tuple string\")\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of integers\n    lst = [int(x) for x in test_str.split(',')]\n    # Convert the list of integers to a tuple\n    return tuple(lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    lst = test_str.split(',')\n    # Loop through the list\n    result = []\n    for i in lst:\n        # Convert each element to integer\n        if i.strip():\n            result.append(int(i.strip()))\n    # Return the tuple\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def split_str(test_str):\n        '''\n        Helper function to split a string into a list of strings based on a delimiter.\n        '''\n        return test_str.split(',')\n\n    def str_to_int(test_str):\n        '''\n        Helper function to convert a string to an integer.\n        '''\n        return int(test_str)\n\n    # Split the string into a list of strings based on a comma delimiter\n    str_list = split_str(test_str)\n\n    # Convert each string in the list to an integer\n    int_list = [str_to_int(s) for s in str_list]\n\n    # Convert the integer list to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Splitting the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Creating a new list to store the integers\n    int_list = []\n\n    # Converting the strings to integers and appending to the new list\n    for str_elem in str_list:\n        int_elem = int(str_elem)\n        int_list.append(int_elem)\n\n    # Converting the list of integers into a tuple and returning it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    return tuple(map(int, test_str.strip('()').replace(',', '').split()))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of words\n    words = test_str.split()\n    # create an empty list to hold the converted integers\n    int_list = []\n    # iterate over each word in the list\n    for word in words:\n        # try to convert the word to an integer and add it to the list\n        try:\n            int_list.append(int(word))\n        except ValueError:\n            # if the word cannot be converted to an integer, add it to the list unchanged\n            int_list.append(word)\n    # return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Initialize index and value of left and right pointers\n    i = 0\n    j = len(a) - 1\n\n    # Perform binary search on the sorted list\n    while i <= j:\n        mid = (i + j) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n\n    # If value not found in sorted list, insert at the right insertion point\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    This function takes a list a and a value x, and returns the index of the right insertion point for x in a.\n    If x is already in a, the function will return the index of the first occurrence of x.\n\n    The right insertion point for x in a is the smallest index i such that x is greater than all elements in a[:i].\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i < len(a) and a[i] == x:\n        # x is already in a\n        return i\n    else:\n        # x is not in a, but it may be the smallest element in a greater than x\n        i = bisect.bisect_right(a, x)\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index if index < len(a) and a[index] == x else index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index > 0 and a[index] == x:\n        return index\n    elif index > 0 and a[index-1]!= x:\n        return index\n    else:\n        return index+1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\bb\\bb\\bb'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'The quick brown fox jumps over the lazy dog.'\nmatches = text_match_three(text)\nprint(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.+b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Combine the two tuples into a new tuple\n    new_tuple = (test_str, new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + tuple(test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(str(i))\n    new_tuple = tuple(test_str + tuple(new_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split(', '))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_list = [test_str] + test_list\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the given string and list\n    new_tuple = tuple(test_str + str(test_list))\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_found = True\n    for i in range(len(nums)):\n        if i % 2 == 0:  # check if current index is even\n            count = 0\n            for j in range(i, len(nums), 2):  # check every even index after current index\n                if nums[j] % 2 == 0:\n                    count += 1\n                else:\n                    break  # break if current even number is not found\n            if count % 2 == 0:  # check if the number of even numbers is even\n                even_found = False\n                break\n        else:\n            break  # break if current index is odd\n    return even_found"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # Loop through the list and check if the index is even\n    for i in range(0, len(nums), 2):\n        # Check if the number at the current even index is even\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            # If the number is odd, return False\n            return False\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += nums[i]\n    return count == len(nums) * 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == 2:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(i, len(nums), 2)])) < 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count > 1:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for i in test_tup:\n        if type(i) == tuple:\n            new_tup = new_tup + remove_nested(i)\n        else:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for element in test_tup:\n        if type(element)!= tuple:\n            flat_list.append(element)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(t for tup in test_tup for t in tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n\n    # Loop through each item in the tuple\n    for item in test_tup:\n        # If the item is a tuple, call the remove_nested function recursively\n        if type(item) == tuple:\n            test_tup = remove_nested(test_tup)\n\n    # Remove any tuples in the tuple\n    test_tup = [i for i in test_tup if type(i)!= tuple]\n\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n\n    # Create a new list to store the non-nested tuples\n    new_list = []\n\n    # Loop through each tuple in the input tuple\n    for tup in test_tup:\n        # Check if the tuple is a list or not\n        if type(tup)!= list:\n            # If it's not a list, append it to the new list\n            new_list.append(tup)\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    count = 0 \n    for i in input_list: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left if arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments: the sorted array and the element to find the last position of.\n    It returns the last position of the element in the array.\n    '''\n    # Initialize two pointers, one starting at the beginning of the array and the other at the end\n    left, right = 0, len(arr) - 1\n\n    # Loop while the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Compute the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the target element, return the index\n        if arr[mid] == x:\n            return mid\n\n        # If the middle element is less than the target element, update the left pointer to mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the middle element is greater than the target element, update the right pointer to mid - 1\n        else:\n            right = mid - 1\n\n    # If the target element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # binary search\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # if element is not found"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x as input and returns the index of the last occurrence of x in the array.\n\n    Args:\n        arr: A sorted array.\n        x: An element to search for in the array.\n\n    Returns:\n        An integer representing the index of the last occurrence of x in the array.\n\n    Raises:\n        ValueError: If the array is not sorted or if the element is not found in the array.\n    \"\"\"\n\n    # Check if the array is sorted or if the element is not found in the array\n    if not all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or x not in arr:\n        raise ValueError(\"Array is not sorted or element is not found in the array.\")\n\n    # Initialize the last index to -1\n    last_index = -1\n\n    # Loop through the array and update the last index if x is found\n    for i, num in enumerate(arr):\n        if num == x:\n            last_index = i\n\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    This function takes two arguments:\n    - arr: a sorted array\n    - x: the element whose last position is to be found\n    \n    This function returns the last position of x in arr. If x is not present in arr, then the function returns -1.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    i = n-1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i == -1:\n        return -1\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize left and right pointers to start and end of array\n    left = 0\n    right = len(arr) - 1\n\n    # iterate until left pointer is greater than or equal to right pointer\n    while left < right:\n        # calculate midpoint of array\n        mid = left + (right - left) // 2\n\n        # if mid element is greater than x, then right pointer moves to midpoint\n        if arr[mid] > x:\n            right = mid\n        # if mid element is less than or equal to x, then left pointer moves to midpoint\n        else:\n            left = mid + 1\n\n    # if element is found, return the index of the last occurrence of x\n    return left"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)(.*?)(?=[b])'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'(?<=a)[^b]*b(?=a)'\n\n    result = re.search(pattern, text)\n\n    if result:\n        return result.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^[a]*b$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all the values in the dictionary.\n    \"\"\"\n    total = 0\n    for value in dictionary.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for key, value in dict.items():\n        sum_of_items += value\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all its items.\n    '''\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    if r < l:\n        print(\"Error: r should be greater than or equal to l\")\n        return\n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n\n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through range from 1 to n\n    for i in range(1, n+1):\n        # check if i is odd and greater than or equal to 3 (to exclude 1 and 2)\n        if i % 2!= 0 and i >= 3:\n            # add i to sum\n            sum += i\n\n    # return sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    odd_sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            odd_sum += l\n        l += 1\n    return odd_sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be a positive integer.\")\n    sum_of_odds = 0\n    for i in range(1, n+1, 2):\n        sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable to 0\n    sum_ = 0\n    # loop through the range from 1 to n\n    for i in range(1, n+1): \n        # check if the current number is odd\n        if i % 2!= 0: \n            # add it to the sum variable\n            sum_ += i\n    # return the sum variable\n    return sum_"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # Find the range of natural numbers within the given range l and r\n    l, r = 1, n\n\n    # Initialize a variable to store the sum of odd natural numbers within the range\n    sum_odd = 0\n\n    # Loop through all natural numbers within the range l and r\n    while l <= r:\n\n        # Check if the current natural number is odd\n        if l % 2!= 0:\n\n            # Add the current odd natural number to the sum of odd natural numbers\n            sum_odd += l\n\n        # Increment the natural number by 2\n        l += 2\n\n    # Return the sum of odd natural numbers within the range l and r\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, which represent the lower and upper bounds of the range of odd natural numbers to be summed.\n    The function uses a for loop to iterate through all odd natural numbers between l and r (inclusive), calculates their sum, and returns the result.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize a variable to store the sum\n    sum = 0\n    # loop through the array and add each element to the sum\n    for num in arr:\n        sum += num\n    # return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n    \n    # iterate over each element in the array\n    for num in arr:\n        # add the current element to the total\n        total += num\n    \n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum to 0\n    total = 0\n    # loop through each element in the array\n    for num in arr:\n        # add the current element to the total sum\n        total += num\n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the given number to binary string\n    bin_str = bin(n)[2:]\n    # check if the number of bits is less than d\n    if len(bin_str) < d:\n        # add zeros at the beginning of the binary string to make it d bits long\n        bin_str = '0'*(d - len(bin_str)) + bin_str\n    # rotate the bits left by d bits\n    new_bin_str = bin_str[-d:] + bin_str[:-d]\n    # convert the binary string back to integer and return it\n    return int(new_bin_str, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1<<32) - 1\n    rotated_bits = (n >> d) | (n << (32-d))\n    rotated_bits &= mask\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & 0xffffffff # Ensure that the number is not negative\n    d = d % 32 # Ensure that d is within the range of 0 to 31\n    if d == 0: # If d is zero, no rotation is needed\n        return n\n    elif d < 32 - d: # If d is less than the number of bits that need to be shifted, we can shift directly\n        return (n << d) | (n >> (32 - d))\n    else: # If d is more than the number of bits that need to be shifted, we need to shift in two parts\n        return (n << (d - 32)) | (n >> (32 + (d - 32)))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32  # make sure d is within 0 to 31\n    if d == 0:\n        return n\n    else:\n        shift_amount = 32 - d  # get the number of bits to shift\n        # perform the left rotation using the arithmetic right shift operator\n        return ((n >> d) | (n << shift_amount)) & 0xFFFFFFFF  # mask the result to make sure it's a 32-bit number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Find the number of bits in the number\n    bits = bin(n)[2:].zfill(32)\n\n    # Find the number of bits in the shifted number\n    shifted_bits = bin((n<<d) | (n>>32-d))[2:].zfill(32)\n\n    # Find the number of bits to be rotated\n    rot_bits = shifted_bits[:d]\n\n    # Concatenate the rotated bits with the shifted bits\n    result = rot_bits + shifted_bits[d:]\n\n    # Convert the result to binary and convert to an integer\n    result = int(result,2)\n\n    # Return the rotated number\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the last d bits of n\n    last_d_bits = n & ((1<<d)-1)\n    # Shift the remaining bits of n to the left by d\n    shifted_n = n >> d\n    # Combine the shifted bits with the last d bits\n    result = last_d_bits | shifted_n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits that needs to be rotated\n    num_of_bits = 32 - d\n    \n    # Calculate the mask to be applied to get the top d bits of the number\n    mask = (1 << d) - 1\n    \n    # Rotate the number using bitwise left shift\n    result = (n << num_of_bits) & mask\n    \n    # Return the result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Check if the number is negative\n    if n < 0:\n        # Find the two's complement of n\n        n = (1 << 32) - 1 - abs(n)\n    \n    # Convert d to the binary representation\n    d_binary = bin(d)[2:]\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over each bit in the binary representation of d\n    for i in range(32):\n        # Check if the i-th bit of d is 1\n        if d_binary[i] == '1':\n            # Check if the i-th bit of n is 1\n            if n & (1 << i):\n                # Set the i-th bit of result to 1\n                result |= 1 << (31 - i)\n            # Shift the bits of n to the left by 1\n            n <<= 1\n        else:\n            # Shift the bits of n to the left by 1\n            n <<= 1\n            \n    # Check if the result should be negative\n    if result & (1 << 31):\n        # Find the two's complement of result\n        result = (1 << 32) - 1 - result\n        \n    # Return the result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    mask = mask >> (32 - d)\n    n = n & mask\n    return n << d"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(100):\n        if x == y == z == i:\n            count += 1\n    print(\"Number of equal numbers:\", count)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for num in [x, y, z]:\n        if x == num:\n            count += 1\n        elif y == num:\n            count += 1\n        elif z == num:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    # initialize count variable\n    count = 0\n    \n    # loop through the three given integers\n    for i in range(len(x)):\n        # check if the current element is equal to the previous element\n        if x[i] == x[i-1]:\n            # increment count if current element is equal to the previous element\n            count += 1\n    \n    # return count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    for i in range(min(x, y), max(x, y)+1):\n        for j in range(min(x, z), max(x, z)+1):\n            if i!= x and j!= y and i!= z:\n                if i == j and i == z:\n                    count += 1\n    \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i==j==k or i==j!=k or i!=j==k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z or x == y or x == z or y == x and y == z or y == z or z == x and z == y:\n        count += 1\n    if x == y and y == z or x == z and y == z or y == x and z == x or y == z and z == x or z == x and y == x:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # check if array is sorted\n    if arr == sorted(arr):\n        return 0\n\n    # use binary search to find the first occurrence of a sorted subarray\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == sorted(arr)[mid]:\n            left = mid + 1\n            count += 1\n        else:\n            right = mid - 1\n\n    # count the rotations required to generate sorted subarray\n    left = 0\n    right = n - 1\n    count = 0\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == sorted(arr)[mid]:\n            left = mid + 1\n            count += 1\n        else:\n            right = mid - 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        # If array[i] is greater than the pivot, it cannot be the pivot itself.\n        if arr[i] > arr[n-1-i]:\n            count += 1\n            # If the array is already sorted, we don't need any more rotations.\n            if arr == sorted(arr):\n                return count\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if array is sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    # check if array is already sorted\n    if n == 1:\n        return 0\n    # check for even or odd length\n    if n % 2 == 0:\n        # calculate middle index and perform binary search to find minimum count\n        mid = n // 2\n        min_count = count_min_count(arr[:mid], arr[mid:])\n        max_count = count_min_count(arr[mid:], arr[:mid])\n        return max(min_count, max_count)\n    else:\n        # calculate middle index and perform binary search to find minimum count\n        mid = n // 2\n        min_count = count_min_count(arr[:mid], arr[mid:])\n        max_count = count_min_count(arr[mid+1:], arr[:mid])\n        return max(min_count, max_count)\n\ndef count_min_count(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    # find minimum count\n    min_count = min(count_min_count(arr1[:i], arr2) + count_min_count(arr1[i:], arr2) for i in range(1, n1+1))\n    # update count with minimum count\n    count = 0\n    i, j = 0, 0\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n            count += 1\n        else:\n            j += 1\n    return count + min_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] > arr[i+n//2]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the longest increasing subsequence using binary search\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] < arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    # Count the number of rotations required\n    cnt = 0\n    while left > 0:\n        if arr[left - 1] > arr[left]:\n            cnt += 1\n        left -= 1\n    return cnt"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    max_idx = arr.index(max(arr))\n    min_idx = arr.index(min(arr))\n\n    if min_idx > max_idx:\n        return (max_idx - min_idx) % n + 1\n    else:\n        return (max_idx - min_idx) % n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. \n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # Check if array is already sorted\n    if n == 1 or arr[n-1] < arr[0]:\n        return 0\n\n    # Initialize a counter for the number of rotations\n    count = 0\n\n    # Initialize the index of the first element to be sorted\n    i = 0\n\n    # Initialize the index of the last element to be sorted\n    j = n - 1\n\n    # Loop while the first index is less than or equal to the last index\n    while i <= j:\n        # Find the middle index of the current subarray\n        mid = (i + j) // 2\n\n        # Check if the middle element is greater than the rightmost element of the subarray\n        if arr[mid] > arr[j]:\n            # If it is, then the subarray is already sorted and we don't need to do anything\n            j = mid - 1\n        else:\n            # If not, we can partition the subarray into two subarrays, one sorted and one unsorted\n            # Find the index of the first element in the subarray that is greater than or equal to the middle element\n            k = i\n            for l in range(i, mid):\n                if arr[l] >= arr[mid]:\n                    k = l\n            # Find the index of the last element in the subarray that is less than or equal to the middle element\n            l = mid\n            for m in range(mid+1, j+1):\n                if arr[m] <= arr[mid]:\n                    l = m\n            # Swap the first k elements with the middle element\n            for p in range(i, k):\n                arr[p], arr[mid] = arr[mid], arr[p]\n            # Swap the (k+1)th element with the last element\n            arr[k], arr[l] = arr[l], arr[k]\n            # Increment the counter for the number of rotations\n            count += 1\n            # Update the indices of the subarrays\n            i = k\n            j = l\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Initialize the count variable\n    count = 0\n    # Find the minimum element in the array\n    min_element = min(arr)\n    # Initialize the index variable\n    index = arr.index(min_element)\n    # Initialize the left and right pointers\n    left = index\n    right = index\n    \n    while left >= 0 and right < n and left <= right:\n        # If the left pointer is greater than the right pointer,\n        # then the array is already sorted\n        if arr[left] > arr[right]:\n            return count\n        # If the left pointer is less than the right pointer,\n        # then the array is not sorted and we need to perform a rotation\n        else:\n            # Perform a rotation\n            temp = arr[left]\n            arr[left] = arr[right]\n            arr[right] = temp\n            # Update the pointers\n            left -= 1\n            right += 1\n            # Increment the count\n            count += 1\n    \n    # If the loop completes without returning, then the array is already sorted\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the smallest element in the array\n    min_val = min(arr)\n    # Find the largest element in the array\n    max_val = max(arr)\n    # Initialize the count of rotations\n    count = 0\n    # Loop through all possible rotations of the array\n    for i in range(min_val, max_val+1):\n        # Initialize the count of elements in the current rotation\n        temp_count = 0\n        # Loop through all possible indices of the current rotation\n        for j in range(n):\n            # Check if the jth element is equal to i\n            if arr[j] == i:\n                # Increment the count of elements in the current rotation\n                temp_count += 1\n                # Check if the current rotation is sorted\n                if j > 0 and arr[j-1] > arr[j]:\n                    # Increment the count of rotations\n                    count += 1\n        # Check if the current rotation is sorted\n        if temp_count == n:\n            # Increment the count of rotations\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                return j - i + 1\n    return 0"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    import math\n\n    sqrt_n = math.sqrt(n)\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    Args:\n        n (int): The number to check for perfection.\n\n    Returns:\n        bool: True if n is a perfect square, False otherwise.\n    \"\"\"\n    # Square root function\n    def sqrt(x):\n        y = x\n        while y < x:\n            y = (y + x // y) // 2\n        return y\n\n    # Check if n is a perfect square\n    if n == int(sqrt(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        a = 1\n        while a*a <= n:\n            if n % a == 0:\n                return False\n            a += 1\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Calculate the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    # Check if the square root is an integer\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # To check if a number is a perfect square or not, we need to check if the square of its square is equal to the given number\n    # Here, we are taking the square of the given number and subtracting it from the number. If the result is 0, then it is a perfect square, else it is not a perfect square.\n    return n * n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # We check for negative numbers first\n    if n < 0:\n        return False\n\n    # We use the math library to check for perfect squares\n    import math\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Check if the number is a perfect square using the square root method\n    sqrt_n = int(n ** 0.5) + 1\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n == 1 or n == 4 or n == 9 or n == 16 or n == 25 or n == 36 or n == 49 or n == 64 or n == 81 or n == 100 or n == 121 or n == 144 or n == 169 or n == 196 or n == 225 or n == 256:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0 and i**2 == n:\n                return True\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    # Check if the number is a perfect square\n    sqrt_n = int(n ** 0.5) + 1\n    if sqrt_n * sqrt_n == n:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the given number is a perfect square\n    if n > 0:\n        left, right = 1, n\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == n:\n                return True\n            elif mid * mid < n:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize product variable\n    product = 1\n    \n    # Loop through each element in the list\n    for num in arr:\n        \n        # Update product variable\n        product *= num\n        \n        # Check if product is even\n        if product % 2 == 0:\n            \n            # Return True if even\n            return True\n        \n        # Reset product variable\n        product = 1\n        \n    # Return False if product is odd\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Parameters:\n    arr (list): List of numbers\n\n    Returns:\n    bool: True if the product of numbers in the list is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return (product % 2 == 0)"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize the product variable to 1\n    product = 1\n    \n    # Iterate through the list and multiply all the elements\n    for num in arr:\n        product *= num\n        \n    # Check if the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of the numbers is even.\"\n    else:\n        return \"The product of the numbers is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # Find the maximum sum of all lists in the input list\n    max_sum = max(sum(lst) for lst in lists)\n    \n    # Initialize a dictionary to store the lists and their respective sums\n    list_sums = {}\n    \n    # Loop through the input lists and calculate the sum of each list and their index\n    for i, lst in enumerate(lists):\n        sum_lst = sum(lst)\n        list_sums[i] = sum_lst\n    \n    # Find the list whose sum of elements is the highest\n    result = max(list_sums, key=list_sums.get)\n    \n    # Return the result\n    return lists[result]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    result = []\n    \n    # loop through the lists\n    for lst in lists:\n        # calculate the sum of the elements in the list\n        total = sum(lst)\n        # check if the sum is greater than the current max sum\n        if total > max_sum:\n            # update the max sum and the result list\n            max_sum = total\n            result = lst\n    \n    # return the result list\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sum_of_elements = lists[i][j]\n            for k in range(j+1, len(lists[i])):\n                sum_of_elements += lists[i][k]\n            if sum_of_elements > max_sum:\n                max_sum = sum_of_elements\n                max_list = [lists[i][j]]\n            elif sum_of_elements == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Create a set of lists to store the sums of each sublist\n    sums = set()\n\n    # Iterate through each sublist\n    for sublist in lists:\n        # Calculate the sum of the sublist\n        sublist_sum = sum(sublist)\n\n        # If the sublist is not already in the set, add it and the sublist_sum to the set\n        if sublist_sum not in sums:\n            sums.add(sublist_sum)\n            sums.add(sublist)\n\n    # Sort the set of sums and return the largest sum\n    return sorted(sums, reverse=True)[0]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables\n    max_list = []\n    max_sum = 0\n    \n    # Loop through each list in the list of lists\n    for lst in lists:\n        \n        # Calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n        \n        # If the sum is greater than the current max sum, update the max sum and max list\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n            \n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = None\n    for lst in lists:\n        total = sum(lst)\n        if total > max_sum:\n            max_sum = total\n            max_lists = [lst]\n        elif total == max_sum:\n            max_lists.append(lst)\n    return max_lists"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    start_index = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                start_index = i - current_run + 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start_index = i\n            current_run = 0\n    if current_run > max_run:\n        start_index = len(test_str) - current_run\n    return test_str[start_index:start_index+max_run], max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    current_run = 0\n    max_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            \n    if current_run > max_run:\n        max_run = current_run\n        \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    start = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            max_run += 1\n        else:\n            start = i\n            max_run = 1\n    return test_str[start:start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n\n    # Initialize variables to keep track of the current run length and the index of the start of the run\n    current_run_length = 0\n    start_index = 0\n\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, update the current run length and the start index\n        if test_str[i] == test_str[i].upper():\n            current_run_length += 1\n        # If the character is not uppercase, reset the current run length and start index\n        else:\n            if current_run_length > max_run:\n                max_run = current_run_length\n                start_index = i - current_run_length + 1\n            current_run_length = 0\n\n    # If the last run is longer than the maximum run, update the maximum run and start index\n    if current_run_length > max_run:\n        max_run = current_run_length\n        start_index = i - current_run_length + 1\n\n    # Return the maximum run and the start index\n    return max_run, start_index"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i - count + 1\n        else:\n            count = 0\n    \n    return test_str[start:start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = ''\n    \n    # Loop through the string\n    for char in test_str:\n        # If the current character is uppercase and not the same as the previous character, increase the current run count\n        if char.isupper() and char!= prev_char:\n            current_run += 1\n            max_run = max(max_run, current_run)\n        # If the current character is not uppercase or is the same as the previous character, reset the current run count\n        else:\n            current_run = 0\n        \n        # Update the previous character\n        prev_char = char\n    \n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n        i += 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    current_char = test_str[0]\n\n    # Loop through the string\n    for char in test_str[1:]:\n        if char == current_char.upper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 1\n            current_char = char\n\n    # Check if the last run is longer than the maximum run\n    if curr_run > max_run:\n        max_run = curr_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of current run and maximum run\n    current_run = 0\n    max_run = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase, reset the current run\n        else:\n            current_run = 0\n            \n        # Update the maximum run if the current run is greater\n        max_run = max(max_run, current_run)\n            \n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_count = 1\n    max_run = 1\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            if not test_str[i-1].isupper():\n                run_count += 1\n            else:\n                run_count = 1\n        else:\n            if test_str[i-1].isupper():\n                max_run = max(max_run, run_count)\n                run_count = 1\n\n    if run_count > max_run:\n        max_run = run_count\n\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # iterate over the list and check if each number is odd\n    for num in nums:\n        if num % 2!= 0:\n            # if the number is odd, return it and exit the loop\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # Initialize variables\n    first_odd_num = None\n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, set the first odd number to the current number\n            first_odd_num = num\n            # Break out of the loop since we found the first odd number\n            break\n    # Return the first odd number found in the list\n    return first_odd_num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n    nums (list of int): A list of integers.\n\n    Returns:\n    int: The first odd number in the list.\n\n    Raises:\n    TypeError: If the input is not a list of integers.\n\n    Examples:\n    >>> first_odd([1, 2, 3, 4, 5])\n    1\n    >>> first_odd([2, 4, 6, 8, 10])\n    10\n    \"\"\"\n\n    # Check if input is a list of integers\n    if not all(isinstance(num, int) for num in nums):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    # Find the first odd number in the list\n    for num in nums:\n        if num % 2!= 0:\n            return num\n\n    # If the list is empty, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return \"There is no odd number in the list\""
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a number K and returns True if K is present in the tuple and False otherwise.\n    '''\n    for item in test_tup:\n        if item == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n    '''\n    k = K[0]\n    if k in test_tup:\n        return True\n    else:\n        for tup in test_tup:\n            if k in tup:\n                return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    elif len(test_tup) == K:\n        return True\n    else:\n        for i in range(K):\n            if test_tup[i]!= test_tup[i+1]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    if count == len(test_tup):\n        print(\"The tuple contains the element\", K)\n    else:\n        print(\"The tuple does not contain the element\", K)"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(f\"{K} is present in the given tuples.\")\n    else:\n        print(f\"{K} is not present in the given tuples.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    for tup in test_tup:\n        if K in tup:\n            return True\n\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                print(f\"{i}-th element in the first tuple is greater than {i}-th element in the second tuple.\")\n                return\n        print(\"All elements in the first tuple are smaller than or equal to the corresponding elements in the second tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupples must have the same length.\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False"
    }
]