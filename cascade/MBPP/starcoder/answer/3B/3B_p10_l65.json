[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in result:\n            result.append(elem)\n    return result"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the shared elements between two lists.\n\n    Args:\n    test_tup1 (tuple): A tuple of elements.\n    test_tup2 (tuple): A tuple of elements.\n\n    Returns:\n    list: A list of the shared elements between the two lists.\n    \"\"\"\n    # Find the shared elements between the two lists\n    shared_elements = [elem for elem in test_tup1 if elem in test_tup2]\n\n    # Sort the shared elements in ascending order\n    shared_elements.sort()\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    return list(shared_set)\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples into lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n\n    # create an empty dictionary to store the count of each element\n    count_dict = {}\n\n    # iterate over the lists\n    for elem in lst1:\n        # check if the element is already in the dictionary\n        if elem in count_dict:\n            # increment the count for the element in the dictionary\n            count_dict[elem] += 1\n        else:\n            # otherwise, add the element to the dictionary with a count of 1\n            count_dict[elem] = 1\n\n    # iterate over the lists again to find the shared elements\n    for elem in lst2:\n        # check if the element is already in the count dictionary\n        if elem in count_dict:\n            # decrement the count for the element in the dictionary\n            count_dict[elem] -= 1\n            # if the count becomes 0, remove the element from the dictionary\n            if count_dict[elem] == 0:\n                del count_dict[elem]\n        else:\n            # if the element is not in the count dictionary, add it to the dictionary with a count of 1\n            count_dict[elem] = 1\n\n    # convert the dictionary keys to a list and return it\n    return list(count_dict.keys())"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Initialize empty list to store shared elements\n    shared_elements = []\n\n    # Iterate over both tuples and compare their elements\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Find the intersection of the two lists\n    shared_elements = list(set(test_tup1) & set(test_tup2))\n\n    # Return the shared elements\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number as input and returns True if the number is not prime, else False.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function takes an integer input n and returns True if it is not a prime number, otherwise False.\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    # Check if the number is divisible by 2 or 3\n    if n == 2 or n == 3:\n        return False\n    \n    # Check if the number is divisible by any number from 4 to the square root of the number\n    for i in range(4, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # If the number is not divisible by any number from 4 to the square root of the number, it is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return True\n\n    # Check if the number is divisible by any number between 2 and n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    min_heap = hq.nsmallest(n, nums)\n\n    # Extract the n largest integers from the heap\n    largest = []\n    while min_heap:\n        largest.append(min_heap[0])\n        min_heap = min_heap[1:]\n\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a max-heap with the first n elements of the list\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, nums[i])\n    \n    # Pop the maximum element from the heap and add it to the result list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(max_heap))\n    \n    # If there are more elements in the list than n, pop them from the heap\n    while len(nums) > n:\n        heapq.heappop(max_heap)\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max-heap of size n\n    max_heap = hq.nsmallest(n, nums)\n\n    # Remove and return the largest element from the heap\n    for _ in range(n):\n        max_heap.pop()\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = hq.nlargest(n, nums, key=lambda x: x)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap to store the n largest integers\n    hq.heapify(nums)\n    \n    # Remove the smallest element from the min heap and append it to a list\n    largest = []\n    while hq.heappop(nums)!= nums[-1]:\n        largest.append(hq.heappop(nums))\n    \n    # Reverse the list to get the n largest integers in descending order\n    largest.reverse()\n    \n    # Return the n largest integers in descending order\n    return largest[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a max heap\n    heap = list(nums)\n    heapq.heapify(heap)\n\n    # pop the first n elements of the heap and return them in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    hq.heapify(nums)\n    result = []\n    while len(result) < n:\n        largest = hq.heappop(nums)\n        result.append(largest)\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap from the given list of numbers\n    heap = hq.nlargest(n,nums)\n    # Return the max-heap as a list\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap with the first n elements of the input list\n    max_heap = hq.nlargest(n, nums)\n    # Return the heap as a list\n    return list(max_heap)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and checks whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: # Check whether the two numbers differ at one bit position only or not\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 1:\n        if x & 1 == 1:\n            count += 1\n        x >>= 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert both numbers to binary strings\n    bin_x = bin(x)[2:]\n    bin_y = bin(y)[2:]\n\n    # Compare the binary strings to check if they differ at only one bit position\n    if bin_x == bin_y:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0:\n        x &= x-1\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while x & (x-1)!= 0:\n        x &= (x-1)\n    return x == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x_reversed = bin(x)[2:][::-1]\n    return x!= int(x_reversed, 2)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True \n    while x!= 1: \n        if x & 1!= 0: \n            return False\n        x = x >> 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert binary representation of x to integer\n    x = int(bin(x)[2:], 2)\n\n    # check if x is a power of 2 or not\n    if x == 0 or (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a power of 2, False otherwise.\n    \"\"\"\n    # check if n is a power of 2\n    if n == 0 or n == 1:\n        return True\n    \n    # check if the last bit of n is set\n    if n & (1 << (n.bit_length() - 1)):\n        return False\n    \n    # if all checks pass, the number is a power of 2\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    pattern = r'\\b\\w{4,}\\b' # matches words with at least 4 characters\n    matches = re.findall(pattern, text) # finds all matches of the pattern\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define a regular expression pattern that matches words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Print the list of matches\n    print(matches)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of words that are at least 4 characters long.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to find words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n\n    # Find all matches in the text and return the results as a list\n    matches = pattern.findall(text)\n\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # define the regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n\n    # find all the words that match the pattern using the search() method\n    matches = pattern.findall(text)\n\n    # return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if the string is a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # check if the string contains only one character\n    if len(str) == 1:\n        return 1\n    \n    # check if the string has consecutive characters\n    if len(str) == 2 and str[0] == str[1]:\n        return 1\n    \n    # create a list of all possible rotations of the string\n    rotations = [str[::-1]]\n    for i in range(1, len(str)):\n        if str[i-1] == str[i]:\n            rotations.append(str[i] + str[:i-1] + str[i+1:])\n    \n    # find the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for rotation in rotations:\n        if rotation == str:\n            min_rotations = 0\n        elif rotation == str[::-1]:\n            min_rotations = 1\n        else:\n            min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    \n    # Check if the first character is part of the string\n    if str[0] in str:\n        min_rotations = min(min_rotations, 1)\n        \n    # Check if the last character is part of the string\n    if str[-1] in str:\n        min_rotations = min(min_rotations, 1)\n        \n    # Check if the string can be reversed\n    if str == str[::-1]:\n        min_rotations = min(min_rotations, 1)\n        \n    # Check if the string can be reversed without swapping any characters\n    for i in range(n):\n        if str[i] == str[n-1-i]:\n            min_rotations = min(min_rotations, i+1)\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n-1):\n        if str[i] == str[n-i-1]:\n            return i\n    return n-1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n    # loop through all possible rotations of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # calculate the reverse of the current substring\n            rev_str = str[i:j] + str[j:i][::-1]\n            # compare the lengths of the original and reversed substrings\n            if len(str) == len(rev_str):\n                # if they are equal, update the minimum number of rotations\n                min_rotations = min(min_rotations, j - i)\n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    # Finding the longest common prefix of the strings \n    i = 0\n    while i < n-1 and str[i] == str[n-1]: \n        i += 1 \n    # Shifting the string to the right by the length of the common prefix \n    shifted_str = str[i:] + str[:i] \n    # Calculating the number of rotations required to get the same string \n    rotations = 0\n    while shifted_str!= str: \n        shifted_str = shifted_str[1:] + shifted_str[0] \n        rotations += 1 \n    return rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Convert the input string to lowercase\n    str = str.lower()\n\n    # Find the first and last characters of the string\n    first = str[0]\n    last = str[-1]\n\n    # Check if the string has only one character\n    if len(str) == 1:\n        return 0\n\n    # Check if the first and last characters are equal\n    if first == last:\n        return 0\n\n    # Find the minimum number of rotations required to get the string reversed\n    rotations = 0\n    while True:\n        # Check if the string is now empty\n        if len(str) == 0:\n            return rotations\n\n        # Check if the first and last characters are equal\n        if str[0] == str[-1]:\n            # If they are, we can reverse the string\n            str = str[1:] + str[0]\n            rotations += 1\n        else:\n            # If they are not, we need to rotate the string by one character\n            if str[0] < str[-1]:\n                str = str[1:] + str[0]\n            else:\n                str = str[0] + str[1:]\n            rotations += 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            sub_str = str[j:j+i]\n            if sub_str == str[j+i:j+2*i]:\n                count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Initialize a dictionary to store the count of each character after rotating\n    char_count_rotated = {}\n    for _ in range(len(str)):\n        # Get the maximum character count\n        max_count = max(char_count_rotated.values())\n\n        # Remove the characters with the maximum count from the string\n        for char, count in char_count.items():\n            if count == max_count:\n                char_count[char] -= max_count\n                str = str.replace(char, '')\n                break\n\n        # If the string becomes empty, return 0 as there is no rotation required\n        if not str:\n            return 0\n\n        # Get the character with the minimum count in the rotated string\n        min_count = min(char_count_rotated.values())\n\n        # Add the characters with the minimum count to the rotated string\n        for char, count in char_count.items():\n            if count == min_count:\n                str = char + str\n                break\n\n        # If there is no character with the minimum count, return 0 as there is no rotation required\n        if not str:\n            return 0\n\n        # Rotate the string by 1 character\n        str = str[1:] + str[0]\n\n        # Update the count of each character in the rotated string\n        for char, count in char_count.items():\n            if char in char_count_rotated:\n                char_count_rotated[char] += 1\n            else:\n                char_count_rotated[char] = 1\n\n    # Return the count of each character in the rotated string\n    return char_count_rotated"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    for i in range(n): \n        if str[i:i+n] == str: \n            return i+1 "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # convert the string to a list of characters\n    char_list = list(str)\n    \n    # initialize the minimum number of rotations to 0\n    min_rotations = 0\n    \n    # loop through each character in the list\n    for i in range(len(char_list)):\n        # loop through each other character in the list\n        for j in range(i+1, len(char_list)):\n            # if the characters are not equal, swap them\n            if char_list[i]!= char_list[j]:\n                # swap the characters\n                char_list[i], char_list[j] = char_list[j], char_list[i]\n                # check if the string has been rotated\n                if str(char_list) == str(str):\n                    # if the string is the same, increment the minimum number of rotations\n                    min_rotations += 1\n                    # break out of the inner loop and go to the next character in the outer loop\n                    break\n    \n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '')\n        return remove_Occ(s, ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    index = s.find(ch)\n    while index!= -1:\n        s = s[:index] + s[index+1:]\n        index = s.find(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into a list of characters\n    lst = list(s)\n    \n    # remove first occurrence of the character from the list\n    lst.remove(ch)\n    \n    # remove last occurrence of the character from the list\n    lst.remove(ch)\n    \n    # convert the list back into a string\n    s = ''.join(lst)\n    \n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of the given character\n    while s[0] == ch:\n        s = s[1:]\n    # remove last occurrence of the given character\n    while s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    # Split the string into list of characters\n    lst = list(s)\n    # Initialize the count of occurrence of the character to be removed\n    count = 0\n    # Initialize the index of the first and last occurrence of the character to be removed\n    first_index = -1\n    last_index = -1\n    # Iterate through the list of characters\n    for i in range(len(lst)):\n        # If the current character is equal to the character to be removed\n        if lst[i] == ch:\n            # Check if the current index is the first occurrence\n            if first_index == -1:\n                first_index = i\n            # Check if the current index is the last occurrence\n            if lst[i] == lst[0]:\n                last_index = i\n            # Increment the count of occurrence of the character\n            count += 1\n            # Remove the current character from the list\n            lst.pop(i)\n            # Decrement the length of the list\n            i -= 1\n        # If the count of occurrence of the character is greater than or equal to 2, break the loop\n        if count >= 2:\n            break\n    # Convert the list of characters back to string and return\n    return ''.join(lst)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #remove first occurrence\n    if s.startswith(ch):\n        s = s[1:]\n    #remove last occurrence\n    if s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not isinstance(s, str):\n        raise TypeError(\"Input should be a string\")\n\n    if not isinstance(ch, str):\n        raise TypeError(\"Character should be a string\")\n\n    if len(s) == 0 or len(ch) == 0:\n        return s\n\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of character\n    i = s.find(ch)\n    if i!= -1:\n        s = s[:i] + s[i+1:]\n    # Remove last occurrence of character\n    j = s.rfind(ch)\n    if j!= -1:\n        s = s[:j] + s[j+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    # Remove the first occurrence of the character in the string\n    while s.find(ch)!= -1:\n        s = s[:s.find(ch)] + s[s.find(ch)+1:]\n\n    # Remove the last occurrence of the character in the string\n    while s.rfind(ch)!= -1:\n        s = s[:s.rfind(ch)] + s[s.rfind(ch)+1:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # find index of first occurrence of the character\n    index = s.find(ch)\n    \n    # if the character is not found, return the original string\n    if index == -1:\n        return s\n    \n    # find the index of the first and last occurrences of the character\n    first_index = s.find(ch, index+1)\n    last_index = s.rfind(ch, 0, index)\n    \n    # return the substring between the two indices (excluding the character itself)\n    return s[first_index+1:last_index]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows in ascending order based on the sum of their rows\n    sorted_rows = sorted(M, key=lambda x: row_sums[M.index(x)])\n    # Sort the matrix based on the sorted rows\n    sorted_matrix = sorted(M, key=lambda x: sorted_rows.index(x))\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Create a list to store the sum of each row\n    row_sums = []\n    \n    # Loop through each row in the matrix\n    for row in M:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Append the row sum to the list of row sums\n        row_sums.append(row_sum)\n    \n    # Sort the list of row sums in ascending order\n    row_sums.sort()\n    \n    # Create a new matrix to store the sorted rows\n    sorted_matrix = []\n    \n    # Loop through each row in the original matrix\n    for row in M:\n        # Find the row index in the sorted list of row sums\n        row_sum_index = row_sums.index(sum(row))\n        # Append the row from the original matrix to the sorted matrix\n        sorted_matrix.append(row)\n        # Remove the row from the original matrix so that it doesn't get sorted again\n        M.remove(row)\n        # Add the sorted row to the original matrix at the sorted row index\n        M.insert(row_sum_index, row)\n        \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    result = []\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            if j == i:\n                temp.append(M[i][j])\n            else:\n                temp.append(M[i][j])\n        result.append(temp)\n    for i in range(n):\n        for j in range(n):\n            M[i][j] = result[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort each row in the matrix\n    for row in M:\n        row.sort()\n    \n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    M.sort(key=lambda x: row_sums.index(sum(x)))\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the row sums in ascending order\n    row_sums.sort()\n    \n    # Create a new matrix sorted by the row sums\n    sorted_M = []\n    for i in range(len(M)):\n        row = sorted(M[i], reverse=True)\n        sorted_row = [row_sums.index(sum(row))] + row\n        sorted_M.append(sorted_row)\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row and store it in a list\n    sums = [sum(row) for row in M]\n\n    # Sort the list of sums in ascending order\n    sums.sort()\n\n    # Create a new matrix sorted according to the sorted list\n    sorted_M = []\n    for i in range(len(M)):\n        sorted_M.append([M[j][i] for j in range(len(M))])\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix and calculate the sum of its elements\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        # Sort the elements of the row in ascending order\n        M[i].sort()\n        # Add the sum of the sorted row to the sum of the rest of the matrix\n        row_sum += sum(M[i])\n        # Subtract the sum of the sorted row from the sum of the rest of the matrix\n        M[i] = [x - row_sum for x in M[i]]\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    n = len(M)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] - M[i][i] > M[j][j] - M[j][i]:\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i]:\n                M[i][j], M[i][i] = M[i][i], M[i][j]\n            if M[j][i] < M[j][j]:\n                M[j][i], M[j][j] = M[j][j], M[j][i]\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = l * b * h / 3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l * b * h) / 3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h) / 3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width, and height of a triangular prism and returns the volume.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes length and height of the sides of a triangular prism as inputs and outputs the volume of the prism.\n    '''\n    area = (l * b)\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l * b * h) / 2\n    volume = area * l\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes length of the base and the height of the prism and returns the volume of the prism.\n    '''\n\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the prism using the formula V = lbh/3\n    V = l*b*h/3\n    \n    # Print the result\n    print(\"The volume of the prism is: \", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes in the length of each side of the triangular prism, and returns the volume of the prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z_]*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])(?=[a-z])[a-z]+(?=[A-Z])'\n    result = re.match(pattern, text)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'^[a-z]+(_[a-z]+)*$')\n    return bool(pattern.match(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<![a-z])(?=[a-z])([a-z])\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z])_+'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![_a-zA-Z])[a-z]+(?![_a-zA-Z])_'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text.lower())\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<![a-z])[a-z](?=[a-z]|_)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Parameters:\n    string1 (str): The first string from which the characters should be removed.\n    string2 (str): The second string containing the characters to be removed from the first string.\n\n    Returns:\n    str: The modified first string with the characters present in the second string removed.\n\n    Example:\n    str_to_list(\"Hello World\", \"l\")\n    Output: \"He Wo\"\n    \"\"\"\n    # Convert the strings to lists of characters\n    list1 = list(string1)\n    list2 = list(string2)\n\n    # Find the intersection of the two lists\n    common = [char for char in list1 if char in list2]\n\n    # Create a new string by removing the characters from the first list\n    modified_list1 = [char for char in list1 if char not in common]\n    modified_string1 = ''.join(modified_list1)\n\n    return modified_string1"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # remove all characters present in the second string from the first string\n    for char in string:\n        if char in string:\n            string = string.replace(char, '')\n\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) > 0:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i] in string:\n            string_list.remove(string_list[i])\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Define a list to store the characters to be removed from the first string\n    chars_to_remove = []\n    # Loop through the characters of the second string\n    for char in string:\n        # If the character is not in the list of characters to remove, add it to the list\n        if char not in chars_to_remove:\n            chars_to_remove.append(char)\n    # Create a new string by looping through the characters of the first string and removing the ones in the list of characters to remove\n    new_string = ''\n    for char in string:\n        if char not in chars_to_remove:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the characters to be removed\n    remove_list = []\n    # Convert the second string to a list of characters\n    char_list = list(string)\n    # Iterate through the characters of the first string\n    for char in string:\n        # If the character is present in the second string, add it to the remove list\n        if char in char_list:\n            remove_list.append(char)\n    # Remove the characters from the first string which are present in the second string\n    for char in remove_list:\n        string = string.replace(char, \"\")\n    # Convert the modified string back to a list of characters and return it\n    return list(string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = []\n    for i in range(NO_OF_CHARS):\n        list_of_chars.append(chr(i))\n    str1 = ''.join(list_of_chars[:ord(string[0])+1])\n    for char in string[1:]:\n        if char in str1:\n            str1 = str1.replace(char, '')\n    return str1"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_list = []\n    for char in string:\n        if ord(char) not in range(NO_OF_CHARS):\n            remove_list.append(char)\n    return remove_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a new string without the characters present in the second string\n    new_string = \"\"\n    for char in string:\n        if char not in set(string):\n            new_string += char\n    return new_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    return len(unique_set) == len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a set to store unique elements\n    unique_set = set()\n\n    # iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements of the array\n    unique_elements = set(arraynums)\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty set to store unique elements\n    unique_nums = set()\n    # Iterate through the array of integers\n    for num in arraynums:\n        # If the number is already in the set, it is a duplicate\n        if num in unique_nums:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_nums.add(num)\n    # If the loop completes without finding any duplicates, the array is unique\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the indices of the elements in the array\n    indices = {}\n    for i in range(len(arraynums)):\n        if arraynums[i] in indices:\n            # if the element is already in the dictionary, return True because duplicates exist\n            return True\n        else:\n            # add the index of the element to the dictionary\n            indices[arraynums[i]] = i\n    # if no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the set is equal to the length of the original array\n    return len(unique_set) == len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arraynums)\n    # Check if the length of the set is equal to the length of the original array\n    if len(unique_set) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Loop through each element in the array\n    for num in arraynums:\n\n        # If the element is already in the set, the array contains a duplicate\n        if num in unique_set:\n            return True\n\n        # Otherwise, add the element to the set\n        unique_set.add(num)\n\n    # If the loop completes without finding a duplicate, the array does not contain a duplicate\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    if x == 5:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x//2)\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 10 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 5 or x == 10:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return is_woodall(x-1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return \"The number is even, it's not woodall.\"\n    elif x % 4 == 0 and x % 100!= 0:\n        return \"The number is divisible by 4, but not by 100, it's woodall.\"\n    else:\n        return \"The number is not even, but divisible by 4 and not by 100, it's not woodall.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the number is divisible by 5 and 7 \n    if x % 5 == 0 and x % 7 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n        print(x, \"is a woodball.\")\n    else:\n        print(x, \"is not a woodball.\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return is_woodall(x/2)\n    else:\n        return is_woodall(3*x + 1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return \"The number is a woodball.\"\n    elif x % 2 == 0:\n        return \"The number is not a woodball.\"\n    else:\n        return \"The number is a woodball.\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    \n    return (num + 1) ** 2 == rev_num ** 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert the given number to a string\n    str_num = str(num)\n\n    # find the length of the string\n    length = len(str_num)\n\n    # find the reverse of the string\n    reversed_str = str_num[::-1]\n\n    # convert the reversed string to an integer\n    reversed_num = int(reversed_str)\n\n    # calculate the difference between the given number and the reversed number\n    diff = num - reversed_num\n\n    # check if the difference is equal to one less than twice the reversed number\n    if diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num //= 10\n    return rev_num % 2 == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n\n    # convert the number to a string\n    num_str = str(num)\n\n    # reverse the string\n    rev_str = num_str[::-1]\n\n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n\n    # check if the number is one less than twice its reverse\n    if num - rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == 1 + reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == 1 if num == 0 else (num == 2 and (rev(str(num)[::-1]) % 2 == 0))"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return reversed_num % 2 == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # calculate the reverse of num\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    \n    # check if the reverse is one less than twice the original number\n    return reverse == 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse == num - 2:\n        return True\n    else:\n        return False\n\nnum = int(input(\"Enter a number: \"))\nif rev(num):\n    print(f\"{num} is one less than twice its reverse.\")\nelse:\n    print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    if (rev_num % 2 == 0) and (num == rev_num + 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    # Sort the given array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the largest number as 0\n    largest = 0\n\n    # Initialize the index to start from\n    index = 0\n\n    # Iterate through the sorted array and add the current digit to the largest number\n    for digit in arr:\n        largest += digit * (10**(index))\n        index += 1\n\n    # Return the largest number formed\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            temp_num = int(''.join(arr[i:j]))\n            if temp_num > max_num:\n                max_num = temp_num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits and returns the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Initialize the result variable with the first element of the list\n    max_num = arr[0]\n\n    # Loop through the sorted list and calculate the max number\n    for i in range(1, len(arr)):\n        temp = arr[i]\n        if temp > max_num:\n            max_num = temp\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n\n    Input:\n    arr: A list of digits where each digit can be 0-9.\n\n    Output:\n    The largest number that can be formed with the given list of digits.\n\n    Example:\n    arr = [1, 4, 9]\n    Output: 499\n\n    \"\"\"\n    arr.sort(reverse=True)\n    max_num = 0\n    for num in arr:\n        max_num += num * (10**(len(arr)-arr.index(num)))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        for digit in str(num):\n            max_num = max(max_num, int(digit))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the list of digits in descending order\n    arr.sort(reverse=True)\n    # initialize the maximum number to be 0\n    max_num = 0\n    # loop through each digit in the sorted list\n    for digit in arr:\n        # if the current digit is 0, continue to the next iteration\n        if digit == 0:\n            continue\n        # calculate the maximum number that can be formed with the current digit and the remaining digits\n        max_temp = max_num + digit\n        # update the maximum number if it is greater than the current maximum number\n        if max_temp > max_num:\n            max_num = max_temp\n    # return the maximum number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    def helper(start, end, digits):\n        if start == end:\n            return int(''.join(map(str, digits)))\n        max_val = float('-inf')\n        for i in range(start, end + 1):\n            digits[start] = i\n            val = helper(start + 1, end, digits)\n            if val > max_val:\n                max_val = val\n        return max_val\n    \n    return helper(0, len(arr) - 1, arr)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # sorting the given list of digits in descending order\n    arr.sort(reverse=True)\n\n    # initializing the result variable\n    result = \"\"\n\n    # iterating through the sorted digits\n    for digit in arr:\n\n        # if the result variable already contains a number, we need to check if it can be formed with the current digit\n        if result:\n            # creating a new result variable with the current digit appended to it\n            temp_result = result + str(digit)\n\n            # if the new result variable is greater than the current result variable, we update the result variable\n            if int(temp_result) > int(result):\n                result = temp_result\n\n        # if the result variable is empty, we simply append the current digit to it\n        else:\n            result = str(digit)\n\n    # converting the result variable to an integer\n    result = int(result)\n\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes in a list of digits as input and returns the largest number that can be formed with the given list of digits.\n\n    :param arr: A list of digits to form the largest number.\n    :return: The largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                current_num = int(''.join(sorted(arr[i:j+1])))\n                if current_num > max_num:\n                    max_num = current_num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    if x > 0 and y > 0:\n        print(\"Both numbers have positive signs.\")\n        return True\n    elif x < 0 and y < 0:\n        print(\"Both numbers have negative signs.\")\n        return True\n    elif x == 0 and y == 0:\n        print(\"Both numbers are zero.\")\n        return True\n    elif x == 0 and y!= 0:\n        print(\"The first number is zero, while the second number has a positive sign.\")\n        return False\n    elif x!= 0 and y == 0:\n        print(\"The second number is zero, while the first number has a positive sign.\")\n        return False\n    elif x < 0 and y == 0:\n        print(\"The second number is zero, while the first number has a negative sign.\")\n        return False\n    else:\n        print(\"Neither of the numbers have opposite signs.\")\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0: \n        return \"Both numbers are zero.\" \n    elif x == 0: \n        return \"The second number is zero.\" \n    elif y == 0: \n        return \"The first number is zero.\" \n    else: \n        if x*y < 0: \n            return \"Both numbers have opposite signs.\" \n        elif x*y > 0: \n            return \"Both numbers have same sign.\" "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    # check if both numbers have opposite signs or not\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if x and y have opposite signs\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs.\"\n    elif x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    elif x > 0 and y < 0:\n        return \"x is positive and y is negative.\"\n    elif x < 0 and y > 0:\n        return \"x is negative and y is positive.\"\n    else:\n        return \"Both numbers have same signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    else:\n        return 4 * (n**2) - 3 * n + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, 1001):\n        if i**2 + i**3 == n:\n            octagonal_numbers.append(i**2 + i**3)\n    if len(octagonal_numbers) == 1:\n        return octagonal_numbers[0]\n    else:\n        return None\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal_num = 1\n    while i <= n:\n        octagonal_num += i\n        i += 2\n    return octagonal_num\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Function to calculate the nth octagonal number\n    def nth_octagonal(n):\n        # Initialize the octagonal number to 1\n        octagonal = 1\n        \n        # Calculate the value of the n-th term of the sequence\n        while octagonal <= n:\n            octagonal = 8 * octagonal + 1\n        \n        # Return the octagonal number\n        return octagonal\n    \n    # Return the nth octagonal number\n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the octagon shape\n    octagon_shape = [1, 8, 27, 64, 125, 216, 343, 512, 729]\n\n    # Return the nth octagonal number\n    return octagon_shape[n-1]\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is an octagonal number.\n    \n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    sqrt_5 = 5 ** 0.5\n    return n % sqrt_5 == 0 or n % (2 * sqrt_5) == 0"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 1, 8  # set initial values of a and b\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 4 * n + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += (i*i*i)\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    max_side = int(n ** 0.5)\n    for i in range(1, max_side + 1):\n        if n % i!= 0:\n            return False\n    return True\n\ndef nth_octagonal(n):\n    \"\"\"\n    This function returns the nth octagonal number.\n    \"\"\"\n    count = 1\n    for i in range(1, n + 1):\n        if is_octagonal(count):\n            return count\n        count += 1\n    return None"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if len(set(substring)) == len(substring):\n                digits_sum = sum(int(digit) for digit in substring)\n                if digits_sum == len(substring):\n                    count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    for i in range(n):\n        dp[i] = sum(int(s[j]) for j in range(i, n))\n    for length in range(1, n+1):\n        for i in range(n-length+1):\n            j = i + length\n            dp[j] += dp[i] * length\n    return dp[n]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    def count_substrings(s, index, sum_of_digits):\n        if index == len(s):\n            return 1\n        if s[index] not in '0123456789':\n            return count_substrings(s, index + 1, sum_of_digits)\n        return count_substrings(s, index + 1, sum_of_digits + int(s[index]))\n\n    # initialize a dictionary to store the count of substrings with the sum of digits equal to the length of the substring\n    substrings_count = defaultdict(int)\n\n    # loop through the input string and count the number of substrings with the sum of digits equal to their length\n    for i in range(len(s)):\n        substrings_count[count_substrings(s, i, 0)] += 1\n\n    # return the count of substrings with the sum of digits equal to their length\n    return sum(substrings_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n    \n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            \n            # If the substring has sum of digits equal to its length, add it to the count dictionary\n            if substring_sum == len(s):\n                count[substring_sum] += 1\n                \n    # Return the count of substrings with sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the number of occurrences of each substring with sum of digits equal to their length\n    substring_count = defaultdict(int)\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Iterate through each character in the substring starting from the current index i\n        for j in range(i, len(s)):\n            # If the sum of digits of the substring is equal to its length, increment the count for the substring in the dictionary\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                substring_count[s[i:j+1]] += 1\n    \n    # Return the total count of all substrings in the dictionary\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of each substring with a given sum of digits\n    count_dict = defaultdict(int)\n    \n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each character from the current index to the end of the string\n        for j in range(i, len(s)):\n            # create a string with the current substring and convert it to a list of digits\n            sub_list = [int(d) for d in s[i:j+1]]\n            # calculate the sum of the digits in the substring\n            sub_sum = sum(sub_list)\n            # check if the sum is equal to the length of the substring\n            if sub_sum == len(sub_list):\n                # update the count in the dictionary\n                count_dict[sub_list] += 1\n    \n    # return the count of all substrings with a given sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the given sum\n    count = defaultdict(int)\n    \n    # Iterate through all possible substrings of length from 1 to n\n    n = len(s)\n    for i in range(1, n+1):\n        # Iterate through all possible substrings of length from 1 to i-1\n        for j in range(1, i+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[j-1:i])\n            # If the substring has the given sum, increment its count in the dictionary\n            if substring_sum == i:\n                count[substring_sum] += 1\n    \n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if s[i].isdigit():\n            dp[i] = 2 * dp[i-1]\n        else:\n            dp[i] = dp[i-1] + dp[i-2]\n    return dp[n-1]\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize an empty dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in s[i:i+len(str(len(s)))])\n\n        # Check if the substring_sum is present in the count_dict\n        if substring_sum in count_dict:\n            # Increment the count by 1\n            count_dict[substring_sum] += 1\n        else:\n            # Add the substring_sum to the count_dict with a count of 1\n            count_dict[substring_sum] = 1\n\n    # Return the total count of substrings\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i, char in enumerate(s):\n        if char.isdigit():\n            digit_count[int(char)] += 1\n    \n    count = 0\n    for i, char in enumerate(s):\n        if char.isdigit():\n            for j in range(1, digit_count[int(char)] + 1):\n                count += 1\n    \n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf') # initialize smallest as infinity\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return smallest_num(xs[1:]) if xs[0] < smallest_num(xs[1:]) else smallest_num(xs[1:])"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the tuple list\n    sorted_list = sorted(test_list)\n\n    # Initialize variables\n    max_diff = 0\n    prev_diff = 0\n\n    # Loop through the list\n    for i in range(1, len(sorted_list)):\n        curr_diff = sorted_list[i][1] - sorted_list[i-1][1]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n            prev_diff = curr_diff\n        elif curr_diff < prev_diff:\n            return \"No maximum difference found\"\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables\n    max_diff = 0\n\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through the remaining tuples in the list\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the tuples\n            diff = abs(test_list[i][0] - test_list[j][0])\n            # update the maximum difference if needed\n            if diff > max_diff:\n                max_diff = diff\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = set()\n    max_diff = float('-inf')\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            pairs.add((test_list[i], test_list[j]))\n            if j - i > max_diff:\n                max_diff = j - i\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort()\n    return pairs[-1][0] - pairs[0][0]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, test_list[j][1]-test_list[i][1])\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize maximum difference to be 0\n    max_diff = 0\n\n    # Loop through the list and compare adjacent pairs\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1] - test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    # create a dictionary to store the subject and its corresponding marks\n    marks = {}\n    for i in range(len(subjectmarks)):\n        name, subject, mark = subjectmarks[i]\n        if subject not in marks:\n            marks[subject] = []\n        marks[subject].append((name, mark))\n\n    # sort the dictionary by the values in the second element of the tuples\n    sorted_marks = sorted(marks.items(), key=lambda x: sum([y[1] for y in x[1]]))\n\n    # print the sorted dictionary\n    for subject in sorted_marks:\n        print(subject)\n        for name, mark in subject[1]:\n            print(name, mark)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sorting the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list, current_list=None, current_sum=0):\n    if current_list is None:\n        current_list = []\n\n    if not data_list:\n        return current_sum\n\n    current_list.append(data_list.pop(0))\n    current_sum += current_list[-1]\n\n    return recursive_list_sum(data_list, current_list, current_sum)\n\ndef flatten_list(data_list):\n    return [item for sublist in data_list for item in sublist]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            flat_list.extend(recursive_list_sum(item))\n        return flat_list\n    else:\n        return [data_list]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list\n\ndef flatten_list(data_list):\n    '''\n    Flatten a list using recursion.\n    '''\n    return recursive_list_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result += flatten_list(item)\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    sum_of_flat_list = sum(flattened_list)\n    return sum_of_flat_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # check if the input list is empty\n    if not data_list:\n        return 0\n    \n    # check if the input list has only one element\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # recursively sum the first element of the list\n    first_element = recursive_list_sum(data_list[:1])\n    \n    # recursively sum the remaining elements of the list\n    remaining_elements = recursive_list_sum(data_list[1:])\n    \n    # sum the first and remaining elements\n    return first_element + remaining_elements"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the head of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum([item for sublist in data_list for item in sublist])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list\n    if not data_list:\n        return 0\n    # Recursive case: add the current element to the sum of the next level\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # If the input list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    # Otherwise, sum the first element and recursively call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of numbers as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def count_ways(n):\n        # Base case\n        if n == 0:\n            return 1\n        \n        # Recursive case\n        return n * count_ways(n-1)\n    \n    # Call the recursive function and return its value\n    return count_ways(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * bell_number(n-1) + bell_number(n-2))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize an array to store the number of ways to partition Bell numbers\n    ways = [0] * (n + 1)\n    \n    # Base case: if n is 0 or 1, there is only 1 way to partition the set of Bell numbers\n    ways[0] = 1\n    ways[1] = 1\n    \n    # Fill the array recursively\n    for i in range(2, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 2]\n        \n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1] + [0] * (n - 1)\n    count = 0\n    \n    for i in range(2, n + 1):\n        count += bell_numbers[i - 1] * (n - i + 1)\n        bell_numbers[i - 1] = 0\n    \n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def partition(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return partition(n-1, k-1) + partition(n-1, k)\n    \n    bell = [[1]*n for _ in range(n+1)]\n    \n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return partition(n, k=n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n):\n        if n < 2:\n            return 1\n        else:\n            return n * partition(n-1)\n\n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize the count variable to 0\n    count = 0\n    # loop from 0 to n\n    for i in range(n+1):\n        # if the current number is a Bell number, increment the count\n        if i == bell_number(i):\n            count += 1\n    # return the final count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n\n    # Initialize the variables\n    ways = 0\n    count = 0\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    for i in range(n + 1):\n        for j in range(i + 1):\n            for k in range(j + 1):\n                for l in range(k + 1):\n                    for m in range(l + 1):\n                        for n in range(m + 1):\n                            for o in range(n + 1):\n                                for p in range(o + 1):\n                                    ways += 1\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    # Initialize variables\n    dp = [0] * (n+1)\n    dp[0] = 1\n    \n    for i in range(1, n+1):\n        # Find the number of ways to partition the first i elements\n        ways = 0\n        for j in range(i):\n            # If j is equal to 0, then there is one way to partition the first j elements\n            if j == 0:\n                ways += dp[j]\n            # If j is odd, then there is one way to partition the first (j+1) elements\n            elif j % 2 == 1:\n                ways += dp[j-1]\n            # If j is even, then there are two ways to partition the first (j/2) elements\n            else:\n                ways += dp[j//2]\n        # Update the array\n        dp[i] = ways\n    \n    return dp[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is empty or not\n    if len(A) == 0: \n        return True\n\n    # check if all elements are same\n    elif len(A) == 1: \n        return True\n\n    # check if array is monotonic\n    elif A[0] < A[1] < A[2] <... < A[n-2] < A[n-1]:\n        return True\n\n    # check if array is not monotonic\n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    n = len(A)\n    for i in range(n - 1):\n        if A[i] >= A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    A.sort() # sort the array in non-decreasing order \n    n = len(A) \n    for i in range(n-1): \n        if A[i] >= A[i+1]: # check if the next element is greater than the current element \n            return False\n    return True "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] < A[1] and A[1] < A[2]:\n        return True\n    elif A[len(A)-1] < A[len(A)-2] and A[len(A)-2] < A[len(A)-3]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    for i in range(n):\n        if A[i] > A[i+1]:\n            return False\n        if i < n-1 and A[i] < A[i+2]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize the maximum value and minimum value\n    max_val = float('-inf')\n    min_val = float('inf')\n\n    # Traverse the array and update the max and min values\n    for i in range(len(A)):\n        if A[i] > max_val:\n            max_val = A[i]\n        elif A[i] < min_val:\n            min_val = A[i]\n\n    # Check if the array is monotonic or not\n    if max_val >= min_val:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] < A[1]:\n        return all(A[i] >= A[i+1] for i in range(len(A)-1))\n    else:\n        return all(A[i] <= A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True \n    \n    # Check for monotonicity in the first half\n    if A[0] < A[1]: \n        for i in range(1, len(A)//2): \n            if A[i] > A[i-1]: \n                return False\n        return True\n    \n    # Check for monotonicity in the second half\n    elif A[len(A)//2] > A[len(A)//2-1]: \n        for i in range(len(A)//2, len(A)): \n            if A[i] < A[i-1]: \n                return False\n        return True\n    \n    # If no monotonicity found, return True\n    else: \n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    # Check if all elements are same\n    if len(A) == 1:\n        return True\n    \n    # Check if all elements are same or in ascending order\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    \n    # Check if all elements are same or in descending order\n    elif A[0] >= A[1]:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True\n    \n    # If the code reaches here, it means the array contains mixed elements\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    if len(l) >= len(s):\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if l is a sublist of s\n    if s in l:\n        return True\n    # If l is not a sublist of s, check if s is a sublist of l\n    for i in l:\n        if i in s:\n            return True\n    # If s is not a sublist of l, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(s in t for t in l)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    for i in range(len(l)):\n        if s[0] == l[i]:\n            if is_sublist(l[i+1:], s[1:]):\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        sub_list = l[i:i+len(s)]\n        if sub_list == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks whether a list contains the given sublist or not.\n    \"\"\"\n    # Check if the sublist is empty\n    if len(s) == 0:\n        return True\n\n    # Traverse through the list and check if it contains the sublist\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    # If the sublist is not found, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return l[0] in s or is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes in two lists, l and s, and checks whether s is a sublist of l.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lengths = []\n    for i in Input:\n        lengths.append(len(i))\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function will take a list of tuples as input and return True if all the tuples have equal length, else False.\n    \"\"\"\n    # Create a dictionary to keep track of the length of each tuple\n    lengths = {}\n    \n    # Loop through the list of tuples\n    for tup in Input:\n        # Get the length of the current tuple\n        length = len(tup)\n        \n        # Check if the length is already in the dictionary\n        if length in lengths:\n            # If it is, update the count for that length\n            lengths[length] += 1\n        else:\n            # If not, add the length as a key and set its value to 1\n            lengths[length] = 1\n    \n    # Check if all the lengths are equal\n    for length in lengths.values():\n        if length!= 1:\n            return False\n    \n    # If all the lengths are equal, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through all the tuples in the input list\n    for tuple_1 in Input:\n        # If any tuple in the list has a length different from all the other tuples, return False\n        if len(tuple_1)!= len(Input[0]):\n            return False\n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in Input):\n        return False\n    \n    # Get the length of the first tuple\n    first_length = len(Input[0])\n    \n    # Check if all the tuples in the list have equal length\n    for i in range(1, len(Input)):\n        if len(Input[i])!= first_length:\n            return False\n    \n    # If all the checks pass, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    # iterate through the input list and check if all the tuples have the same length\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # List of tuples\n    tuples_list = []\n    # Adding tuples to the list\n    for i in range(len(Input)):\n        tuples_list.append(tuple(Input[i]))\n\n    # Initializing a variable to keep track of the count of tuples with equal length\n    count = 0\n    # Looping through the list of tuples\n    for i in range(len(tuples_list)):\n        # Checking if the length of the current tuple is equal to the length of the first tuple\n        if len(tuples_list[i]) == len(tuples_list[0]):\n            # Incrementing the count if the length is equal\n            count += 1\n        else:\n            # If the length is not equal, we break out of the loop\n            break\n    # Returning the value of count indicating whether all tuples have equal length or not\n    return count"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    i = 1\n    while swapped:\n        swapped = False\n        for j in range(0, n - i):\n            if nums[j] > nums[j + i]:\n                nums[j], nums[j + i] = nums[j + i], nums[j]\n                swapped = True\n        i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n\n    # initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(gap, n):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        gap = min(gap, n//2)\n        \n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        gap = max(1, int(gap*1.3))\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n\n    while gap!= 1:\n        # find the next gap\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        # reduce the gap size\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n//2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        gap = int(gap * 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if n is a perfect square\n    if n == int(n**0.5)**2: \n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # if n is less than or equal to 0, it cannot be represented as the difference of two squares\n    if n <= 0: \n        return False\n\n    # find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # check if the square root is an integer\n    if sqrt_n!= int(sqrt_n): \n        return False\n\n    # find the difference between the squares of the square root and n\n    diff = (sqrt_n ** 2) - n\n\n    # check if the difference is a square number\n    if int(diff ** 0.5) ** 2 == diff: \n        return True\n    else: \n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number can be represented as the difference of two squares\n    if (n**2) - n == n:\n        print(n, \"can be represented as the difference of two squares.\")\n    else:\n        print(n, \"cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number is a power of 2\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    \n    # check if the given number is a power of 4\n    if n % 4 == 0:\n        return True\n\n    # check if the given number is a power of 16\n    if n % 16 == 0:\n        return True\n\n    # check if the given number is a power of 64\n    if n % 64 == 0:\n        return True\n\n    # check if the given number is a power of 256\n    if n % 256 == 0:\n        return True\n\n    # check if the given number is a power of 1024\n    if n % 1024 == 0:\n        return True\n\n    # check if the given number is a power of 8192\n    if n % 8192 == 0:\n        return True\n\n    # check if the given number is a power of 32768\n    if n % 32768 == 0:\n        return True\n\n    # check if the given number is a power of 65536\n    if n % 65536 == 0:\n        return True\n\n    # check if the given number is a power of 131072\n    if n % 131072 == 0:\n        return True\n\n    # check if the given number is a power of 524288\n    if n % 524288 == 0:\n        return True\n\n    # check if the given number is a power of 2147483648\n    if n % 2147483648 == 0:\n        return True\n\n    # if none of the above conditions are met, then the number cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return \"Number cannot be represented as the difference of two squares\"\n    elif n == 0:\n        return \"0 cannot be represented as the difference of two squares\"\n    else:\n        a = int(n**0.5)\n        b = n - a**2\n        if b == a**2:\n            return \"The given number can be represented as the difference of two squares\"\n        else:\n            return \"The given number cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    def is_square(num):\n        \"\"\"\n        A helper function to check whether a given number is a square or not.\n        \"\"\"\n        return num**0.5 == int(num**0.5)\n\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0 and is_square(i) and is_square(n//i):\n            return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Function to find the square root of a number\n    def sqrt(n):\n        return int(n**0.5)\n\n    # Function to find the sum of squares of digits in the given number\n    def sum_squares(n):\n        digits = [int(digit) for digit in str(n)]\n        return sum([digit**2 for digit in digits])\n\n    # Function to check whether the given number can be represented as the difference of two squares or not\n    def is_diff(n):\n        root1 = sqrt(n)\n        root2 = sqrt(sum_squares(root1))\n        return root1 == root2\n\n    # Check whether the given number can be represented as the difference of two squares or not\n    if is_diff(n):\n        print(f\"{n} can be represented as the difference of two squares\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if i*i == n:\n            return True\n        elif i*i > n:\n            break\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if the given number is a perfect square\n    is_perfect = lambda x: x == int(x**0.5)**2\n\n    # check if the given number is the difference of two squares\n    def is_diff_of_squares(x):\n        return (x - int(x**0.5)**2)**2 == x**2\n\n    # check if the given number can be represented as the difference of two squares\n    if is_perfect(n) or is_diff_of_squares(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the colors and patterns have the same length\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a set to store the patterns seen so far\n    seen_patterns = set()\n\n    # Loop through the colors and patterns\n    for color, pattern in zip(colors, patterns):\n        # Check if the pattern is in the set of seen patterns\n        if pattern not in seen_patterns:\n            # If it's not, add it to the set and continue with the next color\n            seen_patterns.add(pattern)\n        else:\n            # If it is, check if the color is the same as the previous color\n            if color!= seen_patterns.pop():\n                # If it's not, return False\n                return False\n\n    # If all colors and patterns have been used, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create an empty dictionary to store the count of each pattern\n    pattern_count = {}\n    # Initialize the count of each pattern to zero\n    for pattern in patterns:\n        pattern_count[pattern] = 0\n\n    # Iterate over the colors and count the number of patterns in each sequence\n    for color in colors:\n        for pattern in patterns:\n            if color == pattern:\n                pattern_count[pattern] += 1\n\n    # Check if all patterns have been counted at least once\n    for count in pattern_count.values():\n        if count == 0:\n            return False\n\n    # If all patterns have been counted at least once, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = [0] * 10\n    \n    for color in colors:\n        color_count[color] += 1\n    \n    for pattern in patterns:\n        if pattern == 'R':\n            if color_count[0] == 0:\n                return False\n            color_count[0] -= 1\n        elif pattern == 'G':\n            if color_count[1] == 0:\n                return False\n            color_count[1] -= 1\n        elif pattern == 'B':\n            if color_count[2] == 0:\n                return False\n            color_count[2] -= 1\n        elif pattern == 'Y':\n            if color_count[3] == 0:\n                return False\n            color_count[3] -= 1\n        elif pattern == 'M':\n            if color_count[4] == 0:\n                return False\n            color_count[4] -= 1\n        elif pattern == 'C':\n            if color_count[5] == 0:\n                return False\n            color_count[5] -= 1\n        elif pattern == 'W':\n            if color_count[6] == 0:\n                return False\n            color_count[6] -= 1\n        elif pattern == 'O':\n            if color_count[7] == 0:\n                return False\n            color_count[7] -= 1\n        elif pattern == 'K':\n            if color_count[8] == 0:\n                return False\n            color_count[8] -= 1\n        elif pattern == 'T':\n            if color_count[9] == 0:\n                return False\n            color_count[9] -= 1\n        \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n-1):\n        if colors[i]!= colors[i+1] or colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    count = 0\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            count += 1\n    if count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Define the sequence of patterns\n    sequences = {\n        (1, 2, 3): \"RGB\",\n        (3, 2, 1): \"BRG\",\n        (1, 3, 2): \"GRB\",\n        (2, 3, 1): \"GBR\",\n        (3, 1, 2): \"RGB\",\n        (2, 1, 3): \"BRG\",\n        (1, 2, 1): \"BRG\"\n    }\n    \n    # Check if the sequence of colors matches the sequence of patterns\n    for i in range(len(colors)):\n        if colors[i] not in sequences.keys():\n            return False\n        if colors[i]!= sequences[patterns[i]]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(patterns)\n    if len(colors) < n:\n        return False\n    \n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the number of colors matches the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Iterate over the patterns array and check if each pattern appears in the colors list in the same order\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n        else:\n            colors.remove(pattern)\n\n    # If we get here, all patterns have been found in the colors list in the same order\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n    for i in range(n):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples which have all elements divisible by k\n    result = []\n    # Loop through each tuple in the given list of tuples\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(i % K == 0 for i in tup):\n            # Add the tuple to the result list if it satisfies the condition\n            result.append(tup)\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the result\n    result = []\n\n    # loop through the given list of tuples\n    for tup in test_list:\n        # check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # if all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    # create an empty set to store the tuples\n    result_set = set()\n\n    # loop through each tuple in the test list\n    for tup in test_list:\n        # check if all elements in the tuple are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # if all elements are divisible by K, add the tuple to the result set\n            result_set.add(tup)\n\n    # return the result set\n    return result_set"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        is_divisible = True\n        for num in tup:\n            if num % K!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    # Create a set of all elements in the list of tuples\n    elements = set([element for sublist in test_list for element in sublist])\n    # Create a set of all divisible elements from K\n    divisible_elements = set(i for i in range(K, 2 * K + 1, K))\n    # Find all tuples where all elements are divisible by K\n    result = []\n    for sublist in test_list:\n        for i in range(len(sublist)):\n            if sublist[i] in divisible_elements:\n                divisible_elements.remove(sublist[i])\n            else:\n                break\n        if not divisible_elements:\n            result.append(tuple(sublist))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    return [(x, y) for x, y in test_list if all(x % K == 0 for x in y)]"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            temp = True\n            for k in range(len(test_list[i])):\n                if test_list[i][k] % K!= 0 or test_list[j][k] % K!= 0:\n                    temp = False\n                    break\n            if temp:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if sum(tup) % K == 0:\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    This function checks whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    # Check if the number is divisible by 11 using modulo operator\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as an argument and returns True if it is divisible by 11 and False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    This function takes a string s as input and returns True if the length of the word is odd, False otherwise.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word + \" is an odd length word.\")\n        else:\n            print(word + \" is an even length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n    return \"The length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string by whitespace to get a list of words\n    words = s.split()\n    # iterate through the words and check if the length is odd\n    for word in words:\n        if len(word) % 2!= 0:\n            # if the length is odd, return True\n            return True\n    # if we make it through the loop without finding a word with odd length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.lower()\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even length\")\n        else:\n            print(f\"{word} is odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word + \" is odd length\")\n        else:\n            print(word + \" is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split(' ') #split the string into words\n    for w in word: #iterate over each word\n        if len(w) % 2 == 0: #check if length is even\n            print(w, \"is an even length word.\")\n        else:\n            print(w, \"is an odd length word.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n\n    # Loop through all possible values of a, b, c, and d\n    for i in range(1, n + 1):\n        # Calculate the sum of the first i terms of the sequence\n        s = sum([a * a * a * a, b * b * b * b, c * c * c * c, d * d * d * d])\n\n        # Increase the values of a, b, c, and d based on the sum of the previous terms\n        a = 1 + s\n        b = 1 + a\n        c = 1 + b\n        d = 1 + c\n\n    # Return the nth tetrahedral number\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(n):\n        t += 4*i*i*i\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 5\n    else:\n        return 4*tetrahedral_number(n-1) - 6*tetrahedral_number(n-2) + 6*tetrahedral_number(n-3) + 5*tetrahedral_number(n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n-1) + 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedral_helper(n, prev_num, current_num):\n        if n == 0:\n            return prev_num\n        else:\n            return tetrahedral_helper(n-1, current_num, prev_num + current_num)\n\n    return tetrahedral_helper(n, 0, 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return (2*n-1)*(2*n-2)*(2*n-3)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the first tetrahedral number\n    tn = 0\n\n    # Loop through each number in the sequence\n    for i in range(1, n+1):\n        # Calculate the number of inversions for the current number\n        inversions = 0\n        for j in range(1, i+1):\n            inversions += (j + i) * (i - j) // 2\n        # Update the tetrahedral number if the current number is greater\n        if i % 4 == 0 and tn < inversions:\n            tn = inversions\n\n    # Return the nth tetrahedral number\n    return tn"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    return 4*n*(n-1)*(n-2)*(n-3) // (6*n-6)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    # Initialize the tetrahedral numbers to 0\n    tn1 = tn2 = tn3 = 0\n    \n    # Calculate the sum of the three smallest positive integers that are congruent to 6 mod 12\n    for i in range(1, 10):\n        if i % 2 == 0:\n            tn1 += i\n        elif i % 3 == 0:\n            tn2 += i\n        elif i % 4 == 0:\n            tn3 += i\n    \n    # Return the nth tetrahedral number\n    return n*6 + tn1 + tn2 + tn3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Formula for volume of a sphere: V = (4/3)pi r^3\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function finds the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3)*math.pi*(r**3)\n    return vol\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize variable to store the character\n    char = ''\n    # loop through all the characters in the string\n    for i in range(len(strr)):\n        # add the ASCII value of the current character modulo 26 to the character variable\n        char += chr((ord(strr[i]) + 97) % 26 + 97)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for i in range(len(strr)):\n        ascii_sum += ord(strr[i])\n    char_code = (ascii_sum % 26) + 65\n    char = chr(char_code)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize a variable to hold the ASCII value of the first character\n    char_value = ord(strr[0])\n    \n    # Loop through the remaining characters in the string\n    for i in range(1, len(strr)):\n        # Add the ASCII value of the current character to the previous value modulo 26\n        char_value = (char_value + ord(strr[i])) % 26\n    \n    # Convert the ASCII value to the corresponding character\n    char = chr(char_value)\n    \n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return ascii_value % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = ord('a')\n    char = ''\n    for char_ in strr:\n        ascii_value += ord(char_)\n        char += chr(ascii_value % 26 + ord('a'))\n        ascii_value %= 26\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0  \n    for i in strr:  \n        ascii_sum += ord(i)  \n    return chr((ascii_sum % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return result % 26"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the Newman conway sequence.\n    \"\"\"\n    if n < 1:\n        print(\"Please enter a positive integer greater than or equal to 1.\")\n        return None\n\n    num = 1\n    for i in range(n - 1):\n        num = 4 * num + 1\n\n    return num\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[-1] + sequence[-2] - 1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sequence.append(2 * sequence[i-1])\n        else:\n            sequence.append(sequence[i-1] + 1)\n        i += 1\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * (n + 1)\n    sequence[1] = 1\n    sequence[2] = 1\n    \n    for i in range(3, n + 1):\n        sequence[i] = sequence[i-1] + sequence[i-2]\n    \n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a = 0\n    for i in range(n):\n        a = (3 * a + 1) % 256\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 1\n    elif n % 2 == 0: \n        return sequence(n//2) + sequence(n//2)\n    else: \n        return 3 - sequence(n//2) - sequence(n//2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with 0\n    sequence = [0]\n    \n    # iterate over the sequence until we have n numbers\n    for i in range(1, n+1):\n        # add 2 to the last number in the sequence\n        sequence.append(sequence[-1]+2)\n    \n    # return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    shell_area = (4/3) * math.pi * r**3 - 4 * math.pi * r**2\n    total_area = surface_area + shell_area\n    return total_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*(r**3)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the volume of the sphere\n    volume = 4/3 * math.pi * r ** 3\n    \n    # calculate the surface area of the sphere\n    surface_area = 4 * math.pi * r ** 2\n    \n    # print the results\n    print(\"The volume of the sphere is:\", volume)\n    print(\"The surface area of the sphere is:\", surface_area)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere.\n    It takes a radius as an input and returns the surface area.\n    '''\n\n    # Calculate the surface area using the formula\n    surface_area = (4/3) * math.pi * r**3\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # The first centered hexagonal number is 1\n    if n == 1:\n        return 1\n    else:\n        # Starting from 2, calculate the nth centered hexagonal number\n        # by adding n-1 centered hexagonal numbers\n        first = 1\n        second = 1\n        for i in range(2, n):\n            third = first + second\n            first = second\n            second = third\n        return third"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (1 + 4 * n - 6 * n**2)) / 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the number of terms to generate\n    num_terms = 2*n + 1\n    \n    # Initialize the list of terms\n    terms = [1]\n    \n    # Loop through the number of terms to generate\n    for i in range(2, num_terms, 2):\n        terms.append(terms[i-1] + terms[i-2])\n    \n    # Return the nth term in the list\n    return terms[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(a, b, c, d):\n        return (a + b + c + d) / 2\n\n    if n % 2 == 0:\n        return centered_hexagonal_number_helper(1, 1, 3, 2)\n    else:\n        return centered_hexagonal_number_helper(1, 1, 2, 3)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Function to calculate the centered hexagonal number\n    def centered_hex(n):\n        # Initialize variables for the centered hexagonal number\n        c_hex = 1\n        hex_sum = 0\n        # Calculate the centered hexagonal number\n        for i in range(n):\n            hex_sum += i*(2*i + 1)\n        # Return the centered hexagonal number\n        return hex_sum\n    \n    # Calculate the centered hexagonal number using the function\n    centered_hex_n = centered_hex(n)\n    \n    # Print the centered hexagonal number\n    print(centered_hex_n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n-1)*(2*n-1)//6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # initialize the counter\n    count = 0\n\n    # loop through each row\n    for i in range(1, n+1):\n\n        # initialize the current row\n        row = []\n\n        # loop through each column\n        for j in range(1, 2*i+1):\n\n            # add the center hexagonal number to the row\n            if j == 1 or j == 2*i:\n                row.append(count)\n\n            # increment the counter\n            count += 1\n\n        # print the row\n        print(row)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Base case: n = 0, 1, 2, 3, 4, 5\n    if n in [0, 1, 2, 3, 4, 5]:\n        return n\n    # Recursive case: n = 6, 7, 8, 9, 10,...\n    else:\n        return centered_hexagonal_number(n - 6) + centered_hexagonal_number(n - 10) + 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Find the sum of squares of odd numbers from 1 to n\n    odd_sum = n * (n + 1) * (2 * n + 1)\n    \n    # Find the number of even squares\n    even_squares = n * (n + 1) // 2\n    \n    # Return the sum of the two sums\n    return odd_sum + even_squares"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        merged_dict[key] = dict1.get(key, dict2.get(key, dict3.get(key)))\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a new dictionary with the merged values.\n    The keys and values of the dictionaries are merged into the new dictionary, with duplicate keys overwritten.\n    '''\n    # Create a new dictionary to store the merged values\n    merged_dict = {}\n    # Iterate through the three dictionaries\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1: first dictionary to be merged\n    - dict2: second dictionary to be merged\n    - dict3: third dictionary to be merged\n\n    Returns:\n    - merged_dict: merged dictionary containing all values from the input dictionaries\n    \"\"\"\n    # Merge the three dictionaries using the union operator\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    # Convert the merged dictionary to a set to remove duplicates and get unique keys\n    unique_keys = set(merged_dict.keys())\n    # Create a new dictionary with unique keys and values from the merged dictionary\n    new_dict = {key: merged_dict[key] for key in unique_keys}\n    return new_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # use collections.Counter to count frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for elem in list1:\n        freq[elem] += 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    # Use a set to remove duplicates from the list\n    unique_list = set(list1)\n    # Loop through the unique elements in the list\n    for element in unique_list:\n        # Use the count function from the collections module to get the frequency of the element\n        freq_dict[element] = collections.Counter(list1).get(element, 0)\n    # Return the dictionary with the frequency of each element\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Iterate through the list and update the frequency dictionary\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int) # create a defaultdict to store the frequency\n    for i in lst:\n        freq[i] += 1 # increment the frequency count for each element in the list\n    return freq # return the dictionary containing the frequency count of each element"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Iterate through each element in the list\n    for elem in list1:\n        # Check if the element is already in the dictionary, if not, add it with a frequency of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[elem] += 1\n\n    # Return the dictionary containing the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    min_diff = float('inf')\n    for i in range(N):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n    return N - min_diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(N)\n    min_diff = float('inf')\n    for i in range(1, n+1):\n        if abs(i - n) < min_diff:\n            min_diff = abs(i - n)\n    return i - min_diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = min(N)\n    smallest_index = N.index(smallest)\n    closest = smallest\n    for i in range(smallest_index):\n        if N[i] > smallest:\n            closest = N[i]\n            break\n    for i in range(smallest_index+1, len(N)):\n        if N[i] < closest:\n            closest = N[i]\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        for i in range(2, int(N**0.5)+1):\n            if i*i > N:\n                return i-1\n            elif N%i == 0:\n                return i-1\n        return N"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    else:\n        return min(N-1, 1000000)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n    for i in range(N):\n        if i >= N // 2:\n            # If i is greater than N // 2, then we need to find the closest smaller number\n            if abs(i - N // 2) < abs(i - smallest):\n                closest = smallest\n                smallest = i\n            elif abs(i - N // 2) < abs(closest - N // 2):\n                closest = i\n        else:\n            # If i is less than or equal to N // 2, then we only need to find the smallest number\n            if i < smallest:\n                smallest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    \n    closest = N\n    smallest = 1\n    \n    while smallest <= N:\n        mid = (smallest + closest) // 2\n        \n        if mid < N:\n            closest = mid\n        else:\n            smallest = mid\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = []\n    for i in range(1, N+1):\n        nums.append(i)\n    return min(nums, key=lambda x: abs(N-x))"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_diff = float('inf')\n    min_num = float('inf')\n    for i in range(1, N):\n        diff = abs(N-i)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = i\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = N\n    smallest_diff = abs(N - smallest)\n    \n    # Loop through numbers from 1 to N\n    for num in range(2, N):\n        # Calculate the difference between the number and N\n        diff = abs(num - N)\n        \n        # If the difference is smaller than the current smallest difference, update the smallest and smallest_diff\n        if diff < smallest_diff:\n            smallest = num\n            smallest_diff = diff\n    \n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize the length variable\n    length = 0\n    # Iterate over the list of words\n    for word in list1:\n        # Check if the length of the current word is greater than the current length\n        if len(word) > length:\n            # Update the length variable\n            length = len(word)\n    # Return the length of the longest word\n    return length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    longest_word = ''\n    \n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n    \n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    Args:\n    - str1: str\n        The string to search in the list of string values.\n    - sub_str: str\n        The substring to search for in str1.\n\n    Returns:\n    - bool: True if str1 contains sub_str, False otherwise.\n    \"\"\"\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments - a string `str1` and a string `sub_str`. \n    The function returns True if the string `sub_str` is present in the list of strings `str1`, \n    else it returns False.\n    '''\n    \n    # Split the list of strings into individual strings\n    str1 = str1.split()\n    \n    # Loop through each string in the list and check if `sub_str` is present as a substring\n    for s in str1:\n        if s in sub_str:\n            return True\n    \n    # If the loop completes without finding any occurrences of `sub_str`, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # check if the given string is present in the list of strings\n    if str1 in sub_str:\n        print(\"The string '{}' is present in the list of strings.\".format(str1))\n    else:\n        print(\"The string '{}' is not present in the list of strings.\".format(str1))"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if sub_str not in str1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_undulating(n-1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n < 0:\n        return \"The number is negative\"\n    elif n == 0:\n        return \"The number is zero\"\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return \"The number is not undulating\"\n        return \"The number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        # If it is, it is undulating\n        return True\n    else:\n        # If it isn't, it is not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer n as input and returns True if it is undulating and False otherwise.\n    An undulating number is a number whose digits alternate between increasing and decreasing. \n    For example, 123456 is an undulating number because the first three digits alternate between increasing \n    and decreasing, while the next three digits alternate between decreasing and increasing. \n    '''\n    num_str = str(n)\n    for i in range(len(num_str)):\n        if num_str[i] == num_str[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n >= 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        i = 1\n        while i <= n:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n    minimum = len(test_list)\n    minimum_index = -1\n    \n    for i, tup in enumerate(test_list):\n        if tup[1] < test_list[minimum][1]:\n            minimum = i\n    \n    return minimum"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list based on the second value (index 1) using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: itemgetter(1, i)(test_list))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list based on the second element of each tuple using the itemgetter function\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_minimum(test_list):\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sorting the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # returning the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = None\n    for sub_list in lst:\n        if min_length is None or len(sub_list) < min_length:\n            min_length = len(sub_list)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])   # initialize the minimum length to the length of the first list\n    for i in range(1, len(lst)):  # iterate through the remaining lists\n        if len(lst[i]) < min_length:  # check if the length of the current list is less than the current minimum\n            min_length = len(lst[i])  # update the minimum length to the current length\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    \n    # create a variable to hold the length of the smallest list\n    min_length = float('inf')\n    \n    # loop through each sublist in the main list\n    for sublist in lst:\n        \n        # check if the length of the current sublist is less than the current minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    # return the length of the smallest sublist found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list. \n    '''\n\n    # Initialize min_length as the length of the first list in the list of lists\n    min_length = len(lst[0])\n\n    # Loop through each list in the list of lists\n    for i in range(len(lst)):\n        # Find the length of the current list\n        current_length = len(lst[i])\n        # Update min_length if current_length is smaller than min_length\n        if current_length < min_length:\n            min_length = current_length\n\n    # Return min_length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000 # initialize the variable to a very large value to make sure we find the smallest element\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    This function finds the number of divisors of a given integer n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of the given integer.\n    A divisor of an integer n is an integer d such that there exists an integer m such that n/d is a multiple of m.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as an argument and returns the number of divisors of the given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    This function finds the number of divisors of a given integer n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        for sub_item in item:\n            if sub_item in frequency_dict:\n                frequency_dict[sub_item] += 1\n            else:\n                frequency_dict[sub_item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for elem in lst:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            freq_dict = frequency_lists(item)\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                freq_dict[subitem] = freq_dict.get(subitem, 0) + 1\n        else:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    frequency = {}\n\n    # flatten the list of lists into a single list\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # loop through the flattened list and update the frequency dictionary\n    for item in flattened_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n\n    # return the frequency dictionary\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for element in item:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for item in list1:\n        # Check if the element is a list\n        if isinstance(item, list):\n            # If it is, recursively call the function to find the frequency of the list elements\n            frequency_lists(item)\n        else:\n            # If it is not a list, add it to the frequency dictionary with a value of 1\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        elif item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary equivalent\n    binary_str = \"\"\n    \n    # loop while n is greater than 0\n    while n > 0:\n        # get the remainder of n when divided by 2\n        remainder = n % 2\n        \n        # add the remainder to the binary string\n        binary_str = str(remainder) + binary_str\n        \n        # divide n by 2 and round down to get the next integer\n        n = n // 2\n    \n    # return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        rem = n % 2 \n        binary = str(rem) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal number to binary number and store it in a string\n    binary = bin(n)[2:]\n    \n    # Check if binary number is already a string of 0s and 1s\n    if binary == str(0) * len(bin(n)[2:]):\n        return \"0\"\n    \n    # Add leading zeros to the binary number\n    binary = \"0\" * (len(bin(n)[2:]) - len(binary)) + binary\n    \n    # Return the binary number\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        rem = n % 2\n        binary = str(rem) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert decimal to binary\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    # Remove leading zeros\n    while binary[0] == '0':\n        binary = binary[1:]\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert the decimal number to a binary string\n    binary = bin(n)[2:]\n    # Remove leading zeros from the binary string\n    binary = ''.join(filter(str.isdigit, binary))\n    # Reverse the binary string\n    binary = binary[::-1]\n    # Convert the binary string to a string\n    binary = ''.join([str(int(bit)) for bit in binary])\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Check if the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input should be a non-negative integer\")\n\n    # Initialize the result string\n    result = \"\"\n\n    # Convert the decimal number to binary recursively\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        result = str(remainder) + result\n\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the decimal number to binary using a loop\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n\n    # Remove the leading zeros from the binary string\n    while binary[0] == '0':\n        binary = binary[1:]\n\n    # Convert the binary string to a string\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Reverse the number\n    reverse_num = int(str(num)[::-1])\n\n    # Add 1 to the reverse number\n    reverse_num += 1\n\n    # Check if the reverse number is a palindrome\n    if str(reverse_num) == str(reverse_num)[::-1]:\n        return reverse_num\n\n    # If the reverse number is not a palindrome, find the next smallest palindrome\n    else:\n        # Initialize the smallest palindrome\n        smallest_palindrome = num\n\n        # Loop through the numbers from num to reverse_num (inclusive)\n        for i in range(num, reverse_num + 1):\n            # Check if the current number is a palindrome\n            if str(i) == str(i)[::-1]:\n                # Check if the current number is smaller than the smallest palindrome found so far\n                if i < smallest_palindrome:\n                    smallest_palindrome = i\n\n        return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = [int(digit) for digit in str(num)]\n    n = len(digits)\n    for i in range(n):\n        for j in range(i+1, n):\n            digits[i], digits[j] = digits[j], digits[i]\n            palindrome = int(''.join(map(str, digits)))\n            if palindrome >= num:\n                return palindrome\n            digits[i], digits[j] = digits[j], digits[i]\n    return -1\n\nif __name__ == \"__main__\":\n    try:\n        num = int(input(\"Enter an integer: \"))\n        if num < 0:\n            raise ValueError(\"Number should be non-negative.\")\n        result = next_smallest_palindrome(num)\n        print(\"The next smallest palindrome of\", num, \"is\", result)\n    except ValueError as e:\n        print(str(e))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    if num < 10:\n        return 10\n    digit_count = 0\n    for i in str(num):\n        digit_count += 1\n    if digit_count == 1:\n        return 10\n    factorial = 1\n    for i in range(1, digit_count):\n        factorial *= 10\n    smallest_palindrome = 10 * factorial\n    for i in range(2, factorial):\n        if (i * smallest_palindrome) % num == 1:\n            return (i * smallest_palindrome) // num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        return num\n    \n    # Convert the number to a string and reverse it\n    str_num = str(num)[::-1]\n    str_num = str_num[::-1]\n    \n    # Find the smallest palindrome greater than the number\n    for i in range(10**len(str_num)):\n        # Convert the reversed number to an integer and add the starting digit\n        new_num = int(str_num) + i\n        # Convert the integer back to a string and check if it is a palindrome\n        if str(new_num)[::-1] == str(new_num)[::-1]:\n            return new_num\n    \n    # If no palindrome was found, return None\n    return None\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 10\n    else:\n        prev_num = sys.maxsize # initialize a very large number to be the largest possible palindrome\n        for i in range(10, 100):\n            if num - i > prev_num:\n                prev_num = num - i\n        return prev_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = str(num)\n    palindrome = \"\"\n    reverse = \"\"\n    for i in range(len(n)):\n        reverse = reverse + n[i]\n    for i in range(len(reverse)):\n        palindrome = palindrome + reverse[i]\n    palindrome = int(palindrome)\n    if palindrome < 10:\n        return 10\n    elif palindrome > 999999999:\n        return 999999999\n    else:\n        return palindrome + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num % 2 == 0:\n        num = num + 1\n    else:\n        num = num * 2\n    \n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num + 1):\n        return num + 1\n    else:\n        return next_smallest_palindrome(num + 1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # convert integer to string\n    num_str = str(num)\n    \n    # reverse string\n    num_str = num_str[::-1]\n    \n    # initialize variables\n    count = 0\n    i = 0\n    \n    # iterate through digits in string\n    while i < len(num_str):\n        # check if digit is odd\n        if int(num_str[i]) % 2 == 1:\n            count += 1\n        # increment digit index\n        i += 1\n    \n    # if odd number of digits, then add 1\n    if count % 2 == 1:\n        num_str += '1'\n    \n    # convert string back to integer\n    next_num = int(num_str)\n    \n    # increment integer until it's a palindrome\n    while next_num!= num:\n        next_num += 1\n        if str(next_num) == str(next_num)[::-1]:\n            break\n    \n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # find the length of the number\n    num_len = len(num_str)\n    # initialize a variable to store the current palindrome\n    curr_palindrome = int(num_str)\n    # loop through all possible permutations of the number\n    for perm in itertools.permutations(num_str):\n        # convert the permutation to an integer\n        perm_int = int(''.join(perm))\n        # check if the permutation is a palindrome\n        if perm_int == curr_palindrome:\n            # check if the permutation is the smallest palindrome\n            if int(''.join(sorted(perm))) == perm_int:\n                # check if the permutation is greater than the current palindrome\n                if perm_int > num:\n                    # return the permutation\n                    return perm_int"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array has less than k elements\n    if len(arr) < k:\n        raise ValueError(\"Array must have at least k elements\")\n    # Initialize variables for first and last indices\n    first = 1\n    last = len(arr)\n    # Initialize variable for count\n    count = 1\n    # Loop while the count is less than k\n    while count < k:\n        # If the count is less than half of the total number of elements\n        if count < len(arr):\n            # Increment first index\n            first += 1\n        # If the count is greater than half of the total number of elements\n        else:\n            # Decrement last index\n            last -= 1\n        # Increment count by the difference between first and last indices\n        count = last - first\n    # Return the kth element\n    return arr[first-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr or k < 1 or k > len(arr):\n        return None\n\n    left = 1\n    right = len(arr)\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if k == mid:\n            return arr[k - 1]\n        elif k < mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    if n == 1:\n        return arr[0]\n    if k % 2 == 0:\n        mid = n // 2\n        left_half = kth_element(arr[:mid], k)\n        right_half = kth_element(arr[mid:], k)\n        return min(left_half, right_half)\n    else:\n        mid = (n + 1) // 2\n        left_half = kth_element(arr[:mid], k)\n        right_half = kth_element(arr[mid:], k)\n        return min(left_half, right_half)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert k to 0-based indexing\n    k -= 1\n    \n    # If k is greater than or equal to the length of the array, return None\n    if k >= len(arr):\n        return None\n    \n    # Find the index of the pivot element\n    pivot = arr[len(arr) // 2]\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        # Find the index of the element that is greater than the pivot\n        while arr[left] < pivot:\n            left += 1\n            \n        # Find the index of the element that is less than the pivot\n        while arr[right] > pivot:\n            right -= 1\n            \n        # If the found indices are the same, return the element\n        if left <= right:\n            return arr[left]\n        \n        # If the left index is greater than the right index, swap the elements and repeat the process\n        arr[left], arr[right] = arr[right], arr[left]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    # Find the median of the array\n    left = 1\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid == k:\n            return arr[k-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If the array is odd, return the kth element\n    return arr[left-1] if left > k else None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Converts a snake case string to camel case string.\n\n    Args:\n    word (str): A snake case string.\n\n    Returns:\n    str: A camel case string.\n    \"\"\"\n    # Convert the first letter to uppercase and the rest to lowercase\n    camel_case = word[0].upper() + word[1:].replace('_', '').lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert the snake case string to list of words\n    snake_words = word.split('_')\n    \n    # capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in snake_words]\n    \n    # join the capitalized words with an underscore\n    camel_case = '_'.join(camel_words)\n    \n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    word_list = word.split('_')\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case += word_list[i].lower()\n        else:\n            camel_case += word_list[i][0].upper() + word_list[i][1:].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Args:\n    word (str): The input string in snake case.\n\n    Returns:\n    The input string in camel case.\n    \"\"\"\n    # Convert the input string to a list of words\n    words = word.split(\"_\")\n    # Convert the first letter of each word to uppercase\n    words[0] = words[0].capitalize()\n    # Join the words back into a string\n    camel_case = \"\".join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word and join the words with underscores\n    return ''.join(word.capitalize() for word in words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    camel_case = words[0].capitalize()\n    # Concatenate the capitalized words with a capitalized first letter\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].upper()\n        else:\n            camel_word += word[i].lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for char in word:\n        if char.isupper():\n            camel_word += char\n        else:\n            camel_word += char.capitalize()\n    return camel_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m // (m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row with 1\n    row = [1]\n\n    # Initialize the first column with 1\n    col = [1]\n\n    # Initialize the first diagonal with 1\n    diag = [1]\n\n    # Fill the rest of the matrix diagonally\n    for i in range(1, n):\n        row.append(row[i-1] + col[i-1])\n        col.append(row[i-1] + col[i-1])\n        diag.append(row[i-1] + diag[i-1])\n\n    # Return the result of the diagonal\n    return diag[m-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    elif m == 0:\n        return 1\n    else:\n        return (eulerian_num(n-1, m) + eulerian_num(n, m-1)) % 1000000007"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the variables for the Eulerian number\n    a = 0\n    b = 1\n\n    # Loop through n-1 times to find the Eulerian number\n    for i in range(n-1): \n        # Update the values of a and b for the next iteration\n        a, b = b, a+b\n\n    # Return the Eulerian number for n and m\n    return (a*m**n)/(b-a)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Check if n is a positive integer and m is a positive integer\n    if not (isinstance(n, int) and isinstance(m, int) and n > 0 and m > 0):\n        return \"Please enter positive integers for n and m.\"\n\n    # Initialize the variables for the Eulerian number\n    a = 0\n    b = 1\n    c = 1\n\n    # Calculate the first n terms of the sequence\n    for i in range(1, n+1):\n        a = a + b + c\n        b = b + a\n        c = c + b\n\n    # Calculate the Eulerian number a(n, m) by substituting in the values of n, m\n    return a * m // (n + m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the list of lists representing the graph\n    graph = [[0] * m for _ in range(n)]\n\n    # Fill the graph with edges\n    for i in range(n):\n        for j in range(m):\n            if i > 0 and graph[i-1][j] == 1:\n                graph[i][j] = 1\n            elif j > 0 and graph[i][j-1] == 1:\n                graph[i][j] = 1\n            else:\n                graph[i][j] = 0\n\n    # Calculate the number of cycles in the graph\n    cycles = 0\n    for i in range(n):\n        for j in range(m):\n            if graph[i][j] == 1:\n                if i < n-1 and graph[i+1][j] == 1:\n                    cycles += 1\n                elif j < m-1 and graph[i][j+1] == 1:\n                    cycles += 1\n\n    # Calculate the number of paths in the graph\n    paths = 0\n    for i in range(n):\n        for j in range(m):\n            if graph[i][j] == 1:\n                paths += 1\n\n    # Calculate the Eulerian number a(n, m)\n    eulerian_num = (paths * cycles) % (10**9 + 7)\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # initialize the list of paths\n    paths = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # initialize the value of the Eulerian number to 1\n    a = 1\n\n    # fill the paths list with paths\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                paths[i][j] = 1\n            elif i == 0:\n                paths[i][j] = paths[i][j - 1]\n            elif j == 0:\n                paths[i][j] = paths[i - 1][j]\n            else:\n                paths[i][j] = paths[i - 1][j] + paths[i][j - 1]\n\n    # return the value of the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == j:\n                a = 1\n                if i > 1:\n                    a = a * eulerian_num(i - 1, m)\n                if j > 1:\n                    a = a * eulerian_num(n, j - 1)\n                return a\n            else:\n                a = 0\n    return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first two rows and columns of the matrix with 1\n    a = [[1, 0], [0, 1]]\n    # Initialize the remaining rows and columns with 0\n    for i in range(2, n+1): \n        a.append([0]*(m+1))\n    # Initialize the last column of the matrix with 1\n    a.append([1, 0])\n    # Initialize the first row of the matrix with 1\n    a[0][0] = 1\n    \n    # Fill the remaining matrix using the Eulerian formula\n    for i in range(2, n+1): \n        for j in range(1, m+1): \n            if i % 2 == 0: \n                a[i][j] = (a[i-2][j] + a[i-2][j+1]) % 2\n            else: \n                a[i][j] = (a[i-2][j+1] + a[i-2][j]) % 2\n    \n    # Return the value in the last row and column of the matrix\n    return a[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of paths from (0,0) to (n-1, m-1) using dynamic programming\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[1][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n    # Return the value of a(n, m) from the calculated dynamic programming table\n    return dp[n][m]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i in range(len(input_list)):\n        input_list[i].sort()\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = list(test_list) # convert the list to a mutable list\n    test_tup += tuple(test_list) # add the list to the tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new list and append the given list to it\n    new_list = test_list[:]\n    # convert the new list to a tuple\n    new_tup = tuple(new_list)\n    # add the new tuple to the given tuple\n    test_tup = test_tup + (new_tup,)\n    # return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert lists to tuples\n    test_list_tup = tuple(test_list)\n    test_tup_list = list(test_tup)\n\n    # Append list to tuple\n    test_tup_list.extend(test_list_tup)\n\n    # Convert tuple back to list\n    return tuple(test_tup_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append test_list to test_tup\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Add the list to the tuple\n    test_tup = test_tup + test_list\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Using list comprehension to append test_list to test_tup\n    test_tup = tuple(test_tup + test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merges three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n            \n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one\n    merged_list = num1 + num2 + num3\n    # Sort the merged list\n    sorted_list = heapq.nsmallest(len(merged_list), merged_list)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # initialize an empty list to hold the merged list\n    merged_list = []\n\n    # create a heap from each list and merge them using heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    while heapq.heappop(num1) is not None and heapq.heappop(num2) is not None:\n        # add the smallest value from each heap to the merged list\n        merged_list.append(min(heapq.heappop(num1), heapq.heappop(num2)))\n\n    # add any remaining values from the first heap to the merged list\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n\n    # add any remaining values from the second heap to the merged list\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Convert the combined list to a min heap\n    min_heap = []\n    for num in combined_list:\n        heapq.heappush(min_heap, num)\n    \n    # Convert the min heap to a sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Initialize the result list\n    result = []\n    \n    # Use the heapq module to merge the lists\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    # Iterate over the merged lists\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            result.append(heapq.heappop(num1))\n        else:\n            result.append(heapq.heappop(num2))\n            \n    # Add any remaining elements from the last list\n    result.extend(num1)\n    result.extend(num2)\n    result.extend(num3)\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create a list of lists to store the three input lists\n    lists = [num1, num2, num3]\n\n    # Merge the three lists into a single sorted list using heapq\n    while len(lists) > 1:\n        sorted_list = []\n        for i in range(len(lists)):\n            if i == 0:\n                sorted_list += lists[i]\n                heapq.heapify(sorted_list)\n            elif i == 1:\n                while sorted_list and sorted_list[0] < lists[i][0]:\n                    heapq.heappop(sorted_list)\n                sorted_list += lists[i]\n                heapq.heapify(sorted_list)\n            else:\n                while sorted_list and sorted_list[0] < lists[i][0]:\n                    heapq.heappop(sorted_list)\n                sorted_list += lists[i]\n                heapq.heapify(sorted_list)\n        lists = [sorted_list]\n\n    return lists[0]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Sort the combined list in ascending order\n    sorted_list = heapq.nsmallest(len(combined_list), combined_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create empty list to hold merged sorted list\n    merged_list = []\n\n    # Iterate over each list and add elements to merged list\n    i = j = 0\n    while i < len(num1) and j < len(num2) and j < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            heapq.heappush(merged_list, num1[i])\n            i += 1\n        elif num2[j] < num3[k]:\n            heapq.heappush(merged_list, num2[j])\n            j += 1\n        else:\n            heapq.heappush(merged_list, num3[k])\n            k += 1\n\n    # Add remaining elements from each list to merged list\n    while i < len(num1):\n        heapq.heappush(merged_list, num1[i])\n        i += 1\n    while j < len(num2):\n        heapq.heappush(merged_list, num2[j])\n        j += 1\n    while k < len(num3):\n        heapq.heappush(merged_list, num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge num1 and num2 into a single list\n    sorted_list = num1 + num2\n    # merge sorted_list and num3 into a single list\n    sorted_list.extend(num3)\n    # sort the list\n    heapq.heapify(sorted_list)\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # create a new list with all elements from num1, num2, and num3\n    merged_list = sorted(num1 + num2 + num3)\n    \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize an empty list to store the rotated binary string\n    rotated_binary_string = []\n    \n    # Loop through the given number of times\n    for i in range(n):\n        # Convert the input string to a binary string\n        binary_string = bin(int(s, 2))[2:]\n        \n        # Append the last digit of the binary string to the front of the string\n        rotated_binary_string.append(binary_string[-1])\n        \n        # Remove the last digit of the binary string from the end of the string\n        binary_string = binary_string[:-1]\n        \n        # Convert the binary string to an integer and add it to the total count\n        total_count += int(binary_string, 2)\n    \n    # Return the total count of odd values\n    return total_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the input string into a binary string\n    binary_str = bin(int(s, 2))[2:]\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop n times\n    for i in range(n):\n        # Reverse the binary string\n        binary_str = binary_str[::-1]\n\n        # Loop through the binary string and check if the current character is odd\n        for j in binary_str:\n            if int(j) % 2!= 0:\n                count += 1\n\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # function to rotate binary string by n positions\n    def rotate(s):\n        return s[-n:] + s[:-n]\n\n    # find the length of the binary string\n    n = len(s)\n    # initialize count as 0\n    count = 0\n\n    # loop through all possible rotations of binary string\n    for i in range(2**n):\n        # rotate the binary string and check if the last digit is odd\n        if s[n-1]!= rotate(s)[n-1]:\n            count += 1\n\n    # return count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to list of digits\n    binary = [int(i) for i in s]\n    # rotate the list of digits\n    rotated = binary[n:] + binary[:n]\n    # count the number of odd digits in the rotated list\n    count = sum(1 for digit in rotated if digit % 2!= 0)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of odd values after rotating a binary string the given number of times.\n    \"\"\"\n\n    binary_string = s\n    count = 0\n\n    # loop n times\n    for i in range(n):\n        # split binary string into list of digits\n        binary_list = [int(digit) for digit in list(binary_string)]\n        # reverse list of digits\n        binary_list = binary_list[::-1]\n        # join list of digits back into binary string\n        binary_string = ''.join(str(digit) for digit in binary_list)\n\n        # check if binary string has odd length\n        if len(binary_string) % 2 == 0:\n            # count number of even digits\n            count += len(binary_string) // 2\n        else:\n            # count number of odd digits\n            count += len(binary_string) // 2 + 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize a variable to count the odd numbers\n    count = 0\n\n    # convert the binary string to a list of digits\n    binary_list = [int(x) for x in list(s)]\n\n    # rotate the list of digits n times and store the result in a new list\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n\n    # iterate through the rotated list to find the odd numbers\n    for num in rotated_list:\n        if num % 2 == 1:\n            count += 1\n\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1] # reverse the string\n        if '1' in s:\n            count += s.count('1') # count the number of 1's in the reversed string\n        else:\n            count += len(s) # if no 1's, add the length of the string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[::-1] + s\n    for i in s:\n        if int(i) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert binary string to a list of digits\n    binary_list = [int(digit) for digit in s]\n    # rotate the list n times\n    rotated_list = binary_list[n:] + binary_list[:n]\n    # count the number of odd digits in the rotated list\n    count = 0\n    for digit in rotated_list:\n        if digit % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to a list of characters\n    binary_list = [c for c in s]\n    # Initialize a variable to count the number of odd values\n    count = 0\n    # Iterate through the list of characters and check if each character is odd\n    for char in binary_list:\n        if int(char) % 2!= 0:\n            count += 1\n    # Return the number of odd values after rotating the string n times\n    return count % n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # set to store common elements\n    common = []\n    # loop through the nested lists\n    for lst in nestedlist:\n        # loop through the elements of the current list\n        for ele in lst:\n            # check if the element is already in the common list\n            if ele in common:\n                # if it is, then it is common\n                common.append(ele)\n            # if it is not in the common list, then check if it is in any of the other lists\n            else:\n                for lst2 in nestedlist:\n                    if ele in lst2 and ele not in common:\n                        common.append(ele)\n    # return the common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        if len(nestedlist[i]) == 0:\n            continue\n        for j in range(len(nestedlist)):\n            if i == j:\n                continue\n            if len(nestedlist[j]) == 0:\n                continue\n            for k in nestedlist[i]:\n                if k in nestedlist[j] and k not in common:\n                    common.append(k)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common = set()\n    \n    # Loop through each nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the set if it's already in it\n            if element in common:\n                common.remove(element)\n            else:\n                common.add(element)\n                \n    # Convert the set back to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # create a set of common elements from the inner lists\n    common = set()\n    for innerlist in nestedlist:\n        common.update(innerlist)\n\n    # create a set of common elements from the outer lists\n    outerlist = set()\n    for item in nestedlist:\n        outerlist.update(item)\n\n    # find the common elements in both sets\n    common_elements = list(common.intersection(outerlist))\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty dictionary to store the common elements\n    common_elements = {}\n\n    # Loop through each list in the nested list\n    for item in nestedlist:\n\n        # Loop through each element in the current list\n        for nested_item in item:\n\n            # If the nested element is already in the dictionary, increment its count\n            if nested_item in common_elements:\n                common_elements[nested_item] += 1\n            # If the nested element is not in the dictionary, add it with a count of 1\n            else:\n                common_elements[nested_item] = 1\n\n    # Create a list of common elements from the dictionary\n    common_list = []\n    for item, count in common_elements.items():\n        if count == len(nestedlist):\n            common_list.append(item)\n\n    # Return the list of common elements\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # find the first common element in the lists\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                return [nestedlist[i]]\n    # if no common elements are found, return an empty list\n    return []"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns the list of common elements.\n    '''\n    \n    # create an empty dictionary to store the count of each element\n    count_dict = {}\n    \n    # loop through each element in the nested list\n    for item in nestedlist:\n        # check if the element is a string\n        if isinstance(item, str):\n            # if it is, check if the element is already in the dictionary\n            if item in count_dict:\n                # if it is, increment its count in the dictionary\n                count_dict[item] += 1\n            else:\n                # if not, add it to the dictionary with a count of 1\n                count_dict[item] = 1\n        else:\n            # if the element is not a string, loop through its elements\n            for subitem in item:\n                # check if the element is a string\n                if isinstance(subitem, str):\n                    # if it is, check if the element is already in the dictionary\n                    if subitem in count_dict:\n                        # if it is, increment its count in the dictionary\n                        count_dict[subitem] += 1\n                    else:\n                        # if not, add it to the dictionary with a count of 1\n                        count_dict[subitem] = 1\n                \n    # create an empty set to store the common elements\n    common_set = set()\n    \n    # loop through the keys in the dictionary and add them to the set if they have a count of 2 or more\n    for key in count_dict:\n        if count_dict[key] >= 2:\n            common_set.add(key)\n            \n    # return the list of common elements\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        for elem in lst:\n            if elem not in common_elements:\n                common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize empty list to store common elements\n    common_elements = []\n    \n    # Iterate through all the lists in the nested list\n    for sublist in nestedlist:\n        # Check if the current sublist is not empty\n        if sublist:\n            # Initialize an empty set to store unique elements in the sublist\n            unique_elements = set()\n            # Iterate through the elements in the sublist\n            for element in sublist:\n                # Add the element to the unique set only if it is not already in the set\n                if element not in unique_elements:\n                    unique_elements.add(element)\n            # Convert the unique set back to a list and append it to the common elements list\n            common_elements.append(list(unique_elements))\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n                break\n\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if not i:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in list1:\n        if dit:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Initializing an empty list to store the result\n    result = []\n\n    # Iterating over each dictionary in the list\n    for item in list1:\n\n        # Initializing a flag variable to keep track of whether all dictionaries in the list are empty or not\n        flag = True\n\n        # Iterating over each key-value pair in the dictionary\n        for key, value in item.items():\n\n            # Checking if the value is not None or not\n            if value is not None:\n                flag = False\n                break\n\n        # Appending the result to the result list only if all dictionaries in the list are empty or not\n        if flag:\n            result.append(item)\n\n    # Returning the result list\n    return result"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    all_empty = True\n    for d in list1:\n        if d:\n            all_empty = False\n            break\n    return all_empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_val = 0\n    for num in nums:\n        int_val = int_val * 10 + num\n    return int_val"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple to list\n    nums_list = list(nums)\n    # Convert list to integer and return it\n    return int(''.join(str(x) for x in nums_list))"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Use a generator expression to create a single integer by summing up the positive integers in the tuple\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert tuple of integers into a string of integers separated by commas\n    str_nums = ', '.join(str(num) for num in nums)\n    \n    # Convert string of integers into an integer\n    result = int(str_nums)\n    \n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                element = float(element)\n        for i, j in enumerate(row):\n            row[i] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        try:\n            float_item = float(item)\n            float_list.append(float_item)\n        except ValueError:\n            pass\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float(test_list[i][j])\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                pass # skip non-float elements\n            else:\n                # replace non-float elements with their converted float value\n                row[row.index(item)] = float(item)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float, complex)):\n                element = float(element)\n                sublist[sublist.index(element)] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n                new_list.append(float(item))\n            except ValueError:\n                pass\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for subitem in item:\n            try:\n                float(subitem)\n            except ValueError:\n                try:\n                    float(str(subitem).strip())\n                except ValueError:\n                    pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    # split the string on the space character and return the resulting list of strings\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character\n    words = string.split()\n    # return the list of words\n    return words"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # loop through the array\n    for num in arr:\n        # if the number is already in the dictionary, increment its frequency by 1\n        if num in freq:\n            freq[num] += 1\n        # if the number is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n\n    # loop through the dictionary and find the element with a frequency of 1\n    for num, count in freq.items():\n        if count == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to keep track of the first index of the element\n    first_index = -1\n\n    # Initialize a variable to keep track of the frequency of the element\n    frequency = 1\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is the same as the previous element, increment the frequency\n        if arr[i] == arr[i-1]:\n            frequency += 1\n        else:\n            # If the current element has a frequency of 1, update the first index and frequency\n            if frequency == 1:\n                first_index = i\n                frequency = 1\n            # If the current element has a frequency greater than 1, reset the first index and frequency\n            else:\n                first_index = -1\n                frequency = 1\n\n    # If the element has a frequency of 1, return the element at the first index\n    if frequency == 1:\n        return arr[first_index]\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize variables to store count and last element\n    count = 0\n    last = -1\n    # Traverse through the array\n    for i in range(n):\n        # If element is already present, increment count\n        if arr[i] == last:\n            count += 1\n            # If count becomes 2, return the last element\n            if count == 2:\n                return last\n        else:\n            # Update last element and count to 1\n            last = arr[i]\n            count = 1\n    # If the loop completes without returning, then the element is not present in the array\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    # create a hash table to keep track of the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # loop through the hash table and find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return \"No element appears only once in the array\"\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            return arr[i]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            return unique_element\n        else:\n            unique_element = arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once in the array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and return the element that appears only once\n    for num, freq in freq.items():\n        if freq == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the dictionary to store the frequency of each element\n    freq = {}\n    # Initialize a variable to store the result\n    result = None\n\n    # Loop through the array\n    for num in arr:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if num not in freq:\n            freq[num] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[num] += 1\n\n    # Loop through the dictionary and find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            result = num\n            break\n\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i][0]) * abs(lst[j][0]) > max_product:\n                max_product = abs(lst[i][0]) * abs(lst[j][0])\n            if abs(lst[i][1]) * abs(lst[j][1]) > max_product:\n                max_product = abs(lst[i][1]) * abs(lst[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (abs(list1[i][0] * list1[j][0]) > max_product):\n                max_product = abs(list1[i][0] * list1[j][0])\n            if (abs(list1[i][1] * list1[j][1]) > max_product):\n                max_product = abs(list1[i][1] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')  # initialize maximum product to negative infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i] * list1[j])\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_product_pair = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if current_product > max_product:\n                max_product = current_product\n                max_product_pair = (list1[i], list1[j])\n    return max_product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > max_abs_product:\n                max_abs_product = abs(product)\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][1] * list1[j][0]) > max_product:\n                max_product = abs(list1[i][1] * list1[j][0])\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a dictionary to store the factors of each number\n    factors = {}\n    for num in range(2, limit + 1):\n        factors[num] = []\n        # find the factors of each number\n        for i in range(2, num):\n            if (num % i) == 0:\n                factors[num].append(i)\n                factors[i].append(num)\n    # create a list of the amicable numbers\n    amicable = []\n    # loop through each number and check if it's an amicable number\n    for num in range(2, limit + 1):\n        if len(factors[num]) == 2 and num!= factors[num][0] and num!= factors[num][1]:\n            # if it's an amicable number, add it to the list\n            amicable.append(num)\n    # sum all the amicable numbers\n    total = sum(amicable)\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable_number(n):\n    '''\n    This function takes a number as input and returns True if it is amicable, False otherwise.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_amicable_number(n // 2)\n\ndef sum_amicable_numbers(limit):\n    '''\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to that limit.\n    '''\n    total = 0\n    for i in range(1, limit):\n        if is_amicable_number(i):\n            total += i\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num) and num!= sum:\n            sum += num\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of numbers from 1 to the limit\n    numbers = list(range(1, limit+1))\n    \n    # iterate over the numbers and check if they are amicable\n    amicable_sum = 0\n    for num in numbers:\n        # check if the number is divisible by any number in the list\n        for other_num in numbers:\n            if num!= other_num and num % other_num == 0:\n                # if the number is amicable, add it to the sum\n                amicable_sum += num\n                break\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if num == sum_of_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(num):\n    '''\n    Calculate the sum of all divisors of a specified number.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit value and returns the sum of all amicable numbers from 1 to the limit value.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(2, limit + 1):\n        if i in amicable_numbers:\n            continue\n        for j in range(2, limit + 1):\n            if j in amicable_numbers:\n                continue\n            if i + j == limit and i!= j:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n                break\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables for sum and count of amicable numbers\n    sum_of_amicable_numbers = 0\n    count_amicable_numbers = 0\n    \n    # Loop through all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        is_amicable = True\n        for j in range(1, i):\n            if i % j == 0:\n                is_amicable = False\n                break\n        if is_amicable:\n            sum_of_amicable_numbers += i\n            count_amicable_numbers += 1\n            \n    # Return the sum of all amicable numbers\n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        if i == sum_of_divisors(i):\n            amicable_sum += i\n    return amicable_sum\n\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Calculate the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisor_sum += i\n    return n + divisor_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    sum = 0\n    for num in range(1, limit):\n        if is_prime(num) and is_prime(sum_of_divisors(num)):\n            sum += num\n    return sum\n\ndef sum_of_divisors(num):\n    divisor_sum = 1\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a dictionary to store the sum of each pair of numbers\n    amicable_sum_dict = {}\n\n    # Loop through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if i is an amicable number\n        if i < limit and i!= 1:\n            # Calculate the sum of i and its factors\n            amicable_sum = i + sum(set(range(1, i)) - {1})\n\n            # Check if amicable_sum is already in the dictionary\n            if amicable_sum not in amicable_sum_dict:\n                # If not, add it to the dictionary and check if it's amicable with 1\n                if i!= amicable_sum and amicable_sum in amicable_sum_dict:\n                    # If it is, add the sum to the sum of all amicable numbers\n                    amicable_sum_dict[amicable_sum] += 2\n                else:\n                    # If it's not, just add it as a new key in the dictionary\n                    amicable_sum_dict[amicable_sum] = 1\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_sum_dict.keys())\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = cmath.phase(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    Parameters:\n    a: float\n        The real part of the complex number.\n    b: float\n        The imaginary part of the complex number.\n\n    Returns:\n    float\n        The angle of the complex number in radians.\n\n    \"\"\"\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Get the angle of a complex number using the cmath module.\n\n    Parameters:\n    a (float): The real part of the complex number.\n    b (float): The imaginary part of the complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle of the complex number in degrees.\n    '''\n    angle = cmath.phase(a+b)\n    return round(angle*180/cmath.pi)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        if b > 0:\n            return 90\n        elif b < 0:\n            return 270\n    elif b == 0:\n        if a > 0:\n            return 0\n        elif a < 0:\n            return 180\n    else:\n        angle = cmath.phase(complex(a, b))\n        return cmath.degrees(angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    count = [0] * 2  # count[0] will store the number of 0s, count[1] will store the number of 1s\n\n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(count[0] - count[1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # initialize a dictionary to store the count of 0s and 1s in each substring\n    count = {}\n    max_diff = 0\n    \n    # loop through each substring of the binary string\n    for i in range(len(string)):\n        substring = string[i:]\n        \n        # loop through each character in the substring\n        for j in range(len(substring)):\n            # if the character is a 0, increment the count of 0s\n            if substring[j] == '0':\n                count[substring[:j+1]] = count.get(substring[:j+1], 0) + 1\n            # if the character is a 1, increment the count of 1s\n            else:\n                count[substring[:j+1]] = count.get(substring[:j+1], 0) - 1\n                \n        # find the maximum difference between the count of 0s and count of 1s in the substring\n        diff = abs(count.get('0', 0)) - abs(count.get('1', 0))\n        max_diff = max(max_diff, diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = max(dp[i + 1][j] + 1, dp[i][j - 1] + 1)\n\n    max_diff = 0\n    for i in range(n):\n        max_diff = max(max_diff, dp[0][i] + dp[i][n - 1])\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables for 0s and 1s\n    count_0 = 0\n    count_1 = 0\n\n    # Initialize variables for maximum difference\n    max_diff = 0\n\n    # Loop through each character in the string\n    for char in string:\n        # Check if the character is a 0\n        if char == '0':\n            count_0 += 1\n            count_1 -= 1\n        else:\n            count_1 += 1\n            count_0 -= 1\n\n        # Update the maximum difference\n        diff = count_0 - count_1\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    curr_diff = 0\n    \n    for i in range(1, n):\n        if string[i] == string[i-1]:\n            curr_diff += 1\n        else:\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n            curr_diff = 1\n            \n    if curr_diff > max_diff:\n        max_diff = curr_diff\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Convert the string to a list of binary digits\n    digits = [int(d) for d in string]\n\n    # Initialize a variable to keep track of the length of the longest substring\n    max_length = 0\n\n    # Loop through all possible substrings of the digits\n    for i in range(1, len(digits)):\n        # Find the length of the substring by subtracting the index from the length of the digits\n        substring_length = len(digits) - i\n        # Initialize a variable to keep track of the number of 0s and 1s in the substring\n        count_0s = count_1s = 0\n\n        # Loop through the digits in the substring\n        for j in range(i):\n            # Increment the count of 0s if the digit is 0\n            if digits[j] == 0:\n                count_0s += 1\n            # Increment the count of 1s if the digit is 1\n            else:\n                count_1s += 1\n\n        # Update the maximum length if the current substring is longer\n        if substring_length > max_length:\n            max_length = substring_length\n\n    # Return the maximum difference\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    # Initialize the counters for 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Initialize the maximum difference\n    max_diff = 0\n\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the zero counter\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one counter\n        else:\n            one_count += 1\n\n        # Calculate the difference between the zero and one counts\n        diff = abs(zero_count - one_count)\n\n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zeros = count_ones = 0\n    \n    # iterate through each character in the string\n    for char in string:\n        # count the number of 0s and 1s in the character\n        if char == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n        \n        # check if the difference between the number of 0s and 1s is greater than the current maximum difference\n        if abs(count_zeros - count_ones) > max_diff:\n            max_diff = abs(count_zeros - count_ones)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    max_diff = 0\n    prev_zero_count = 0\n    prev_one_count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            prev_zero_count += 1\n            prev_one_count = 0\n        else:\n            if prev_zero_count == 0:\n                prev_one_count += 1\n            else:\n                max_diff = max(max_diff, prev_zero_count - prev_one_count)\n            prev_zero_count = 0\n            prev_one_count = 1\n    if prev_zero_count > 0:\n        max_diff = max(max_diff, prev_zero_count - prev_one_count)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find the sum of common divisors of two given numbers\n    def common_divisors_sum(a, b):\n        divisors_list = []\n        # finding all common divisors of a and b\n        for i in range(1, a+1):\n            if a % i == 0 and b % i == 0:\n                divisors_list.append(i)\n        # calculating the sum of common divisors of a and b\n        return sum(divisors_list)\n    \n    # calling the function to find the sum of common divisors of a and b\n    return common_divisors_sum(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers a and b and returns their sum of their common divisors.\n    \"\"\"\n    # Initialize variables to store the sum of common divisors and a list of their divisors\n    divisors_sum = 0\n    divisors = []\n\n    # Find the divisors of both numbers\n    divisors.extend(set(divisors_of(a)))\n    divisors.extend(set(divisors_of(b)))\n\n    # Iterate over the divisors and add their sum to the sum of common divisors\n    for divisor in divisors:\n        divisors_sum += divisor\n\n    return divisors_sum\n\ndef divisors_of(n):\n    \"\"\"\n    This function takes an integer n and returns a list of its divisors.\n    \"\"\"\n    # Initialize a list to store the divisors\n    divisors = []\n\n    # Check if n is less than 2\n    if n < 2:\n        return []\n\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        divisors.append(2)\n        n //= 2\n\n    # Check odd divisors up to the square root of n\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            divisors.append(n)\n            n = (n * 3) + 1\n\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    # Finding all common divisors of the two given numbers\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisors.append(i)\n    return sum(a, divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two integer arguments and returns the sum of their common divisors.\n\n    Parameters:\n    a (int): First number to be checked for common divisors.\n    b (int): Second number to be checked for common divisors.\n\n    Returns:\n    int: The sum of common divisors of the two given numbers.\n    \"\"\"\n\n    def common_divisors(num):\n        \"\"\"\n        This function returns a list of the common divisors of a given number.\n\n        Parameters:\n        num (int): A number to find its common divisors.\n\n        Returns:\n        list: A list of the common divisors of the given number.\n        \"\"\"\n        divisors = []\n        i = 1\n        while i * i <= num:\n            if num % i:\n                i += 1\n            else:\n                num //= i\n                divisors.append(i)\n        if num > 1:\n            divisors.append(num)\n        return divisors\n\n    def check_common_divisors(a, b):\n        \"\"\"\n        This function checks if a and b have any common divisors.\n\n        Parameters:\n        a (int): First number to be checked for common divisors.\n        b (int): Second number to be checked for common divisors.\n\n        Returns:\n        bool: True if there is a common divisor, False otherwise.\n        \"\"\"\n        div_a = common_divisors(a)\n        div_b = common_divisors(b)\n        return len(set(div_a) & set(div_b)) > 0\n\n    if check_common_divisors(a, b):\n        div_a = common_divisors(a)\n        div_b = common_divisors(b)\n        return sum(div_a) + sum(div_b) - sum(div_a & div_b)\n    else:\n        return \"There are no common divisors.\""
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_common_divisors(12, 30))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        '''\n        This function finds the greatest common divisor of two numbers.\n        '''\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        '''\n        This function finds the lowest common multiple of two numbers.\n        '''\n        return a * b // gcd(a, b)\n\n    # Find the largest common divisor and its corresponding lcm\n    ld = gcd(a, b)\n    lc = lcm(a, b)\n\n    # Count the number of common divisors\n    count = 0\n    for i in range(1, ld+1):\n        if i % ld == 0 and i % lc == 0:\n            count += 1\n\n    # Calculate the sum of common divisors\n    result = sum(range(1, count+1))\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    Returns a list of all common divisors of a and b.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return divisors\n\n\ndef sum(a, b):\n    \"\"\"\n    Returns the sum of all common divisors of a and b.\n    \"\"\"\n    divisors = common_divisors(a, b)\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    print(sum(12, 24))  # Output: 20\n    print(sum(24, 12))  # Output: 20\n    print(sum(48, 120))  # Output: 240\n    print(sum(15, 30))  # Output: 15"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # find the set of divisors of a\n    divisors_a = set(divisor for divisor in range(1, a + 1) if a % divisor == 0)\n\n    # find the set of divisors of b\n    divisors_b = set(divisor for divisor in range(1, b + 1) if b % divisor == 0)\n\n    # find the intersection of the two sets\n    common_divisors = divisors_a.intersection(divisors_b)\n\n    # return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # Function to find common divisors\n    def common_divisors(num):\n        divisors = []\n        for i in range(1,num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    # Finding the common divisors of a and b\n    div_a = common_divisors(a)\n    div_b = common_divisors(b)\n    \n    # Finding the sum of common divisors\n    sum_div = []\n    for i in range(max(div_a)+1):\n        if i in div_a and i in div_b:\n            sum_div.append(i)\n    \n    return sum(sum_div)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        # extract the least significant digit of x and y\n        carry = x & y\n        # update x and y by left shifting one of them and adding the carry\n        x = x ^ y\n        y = carry << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        temp = y\n        y = x % y\n        x = temp\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    carry = 0\n    while y > 0:\n        temp = x & y\n        result = result ^ temp\n        carry = carry ^ x ^ y\n        x = temp\n        y = y >> 1\n    if carry:\n        result = result ^ carry\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Given a list of words and an integer n, returns a list of words that are longer than n characters.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    This function takes a list of words and returns a list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # convert the string into a list of words\n    words = str.split()\n    \n    # loop through each word in the list\n    for word in words:\n        # check if the length of the word is greater than n\n        if len(word) > n:\n            # print the word\n            print(word)"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all the elements are unique\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n\n    # Calculate the sum of all elements in the matrix\n    total_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the diagonals is equal to the total sum\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == total_sum:\n        return True\n    elif my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0] == total_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    # Define the magic square\n    magic_square = [[5, 3, 4], [1, 8, 7], [6, 2, 9]]\n\n    # Check if the matrix is equal to the magic square\n    if my_matrix == magic_square:\n        return \"The matrix is a magic square.\"\n    else:\n        return \"The matrix is not a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # First, check if the matrix has the same dimensions as a magic square\n    if len(my_matrix)!= len(set(my_matrix)):\n        return False\n\n    # Check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        for j in range(i + 1):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n\n    # Check if the matrix has non-decreasing values\n    for i in range(len(my_matrix) - 1):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j] > my_matrix[i + 1][j]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize a list of lists to store the magic square.\n    magic_square = []\n    \n    # Calculate the sum of the diagonal elements.\n    diagonal_sum = sum([row[i] for i in range(len(my_matrix))])\n    \n    # Check if the sum of the diagonal elements is equal to the sum of the row and column sums.\n    if diagonal_sum == sum([sum(row) for row in my_matrix]) and diagonal_sum == sum([sum(col) for col in zip(*my_matrix)]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if all rows have the same length\n    if all(len(row) == n for row in my_matrix):\n        # Check if all elements in each row are unique\n        for row in my_matrix:\n            if len(row)!= len(set(row)):\n                return False\n        # Check if all elements in the matrix are unique\n        if len(set(sum(row, []) for row in my_matrix))!= n**2:\n            return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal\n    diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        diagonal_sum += my_matrix[i][i]\n    \n    # Calculate the sum of the first row\n    first_row_sum = 0\n    for i in range(len(my_matrix[0])):\n        first_row_sum += my_matrix[0][i]\n    \n    # Calculate the sum of the second column\n    second_column_sum = 0\n    for i in range(len(my_matrix)):\n        second_column_sum += my_matrix[i][1]\n    \n    # Calculate the sum of the third diagonal\n    third_diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        third_diagonal_sum += my_matrix[i][len(my_matrix)-i-1]\n    \n    # Check if all of the sums are equal\n    if diagonal_sum == first_row_sum == second_column_sum == third_diagonal_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(row) for row in zip(*my_matrix)]\n\n    # Check if the sums are equal\n    if row_sums == col_sums:\n        # Check if all elements in the matrix are equal\n        if all(sum(row) == row[i] for row in my_matrix for i in range(len(row))):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if all(row_sums) == 15 and all(col_sums) == 15 and diag_sum == 15:\n        return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # check if the matrix has 10 elements\n    if len(my_matrix)!= 10:\n        return False\n\n    # check if each row, column, and diagonal is unique\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return False\n\n    for i in range(len(my_matrix)):\n        if i == len(my_matrix) - i - 1:\n            for j in range(len(my_matrix[i])):\n                if j == len(my_matrix[i]) - j - 1:\n                    if my_matrix[i][j]!= 1:\n                        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check for magic numbers in each row\n    for row in my_matrix:\n        row_sum = sum(row)\n        for num in row:\n            if num!= row_sum:\n                return False\n\n    # Check for magic numbers in each column\n    for col in range(len(my_matrix[0])):\n        col_sum = sum([row[col] for row in my_matrix])\n        for row in my_matrix:\n            if row[col]!= col_sum:\n                return False\n\n    # Check for magic numbers in the main diagonal\n    diagonal_sum = sum([row[i] for i in range(len(my_matrix))])\n    for num in my_matrix[0]:\n        if num!= diagonal_sum:\n            return False\n\n    # Check for magic numbers in the reverse diagonal\n    diagonal_sum = sum([row[-1-i] for i in range(len(my_matrix))])\n    for num in my_matrix[-1][::-1]:\n        if num!= diagonal_sum:\n            return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Initialize a dictionary to keep track of the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the highest frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n        \n    max_freq = max(freq_dict.values())\n    \n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = num\n            break\n\n    # Return the maximum frequency item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_freq:\n            max_item = item\n\n    # Return the item with maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return ''.join(filter(lambda x: x in vowels, str1[::-1]))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    # split the string into individual characters\n    str1 = list(str1)\n    # initialize an empty list to hold the reversed vowels\n    vowels_reversed = []\n    # iterate through each character in the string\n    for i in range(len(str1)):\n        # if the current character is a vowel, add it to the vowels_reversed list\n        if str1[i] in vowels:\n            vowels_reversed.append(str1[i])\n    # join the reversed vowels back into a string and return it\n    return ''.join(vowels_reversed[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result = result + str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(string):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_string = ''\n    for char in string:\n        if char.lower() in vowels:\n            reversed_string = char + reversed_string\n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels_set:\n            new_str = char + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str_vowels = [char for char in str1 if char in vowels]\n    str_no_vowels = [char for char in str1 if char not in vowels]\n    vowel_reverse = str_vowels[::-1]\n    no_vowel_reverse = str_no_vowels[::-1]\n    return vowel_reverse + no_vowel_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    str2 = \"\"\n    for char in str1[::-1]:\n        if char in vowels:\n            str2 += char\n    return str2"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string_tuple = []\n    for item in tup1:\n        string_tuple.append(str(item))\n    return tuple(string_tuple)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for i in range(len(tup1)):\n        string += str(tup1[i])\n        if i!= len(tup1)-1:\n            string += \", \"\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n\n    # Iterate through the list of numbers\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # If it is, add it to the sum of negative numbers\n            neg_sum += num\n\n    # Return the sum of negative numbers\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # initialize the sum of negative numbers as zero\n    sum_negative = 0\n    \n    # iterate over the list of numbers\n    for num in nums:\n        # if the number is negative, add it to the sum\n        if num < 0:\n            sum_negative += num\n            \n    # return the sum of negative numbers\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2) + 2*hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * hexagonal_num(n-1) - (n-1) * hexagonal_num(n-2)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (2*n-1)**2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5*n*n - 3*n) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 0\n    b = 1\n    c = 0\n    for i in range(n):\n        print(a, end=' ')\n        a, b, c = b, 2*a+b, c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the value of the hexagonal number to 1\n    hex_num = 1\n\n    # Loop n times and add the hexagonal number to the value\n    for i in range(1, n + 1):\n        hex_num += i * (2 * i - 1)\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    def helper(a, b, n):\n        if n == 0:\n            return 0\n        else:\n            return a * 6 + b + helper(a + 1, b + 1, n - 1)\n\n    return helper(1, 1, n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n + 1) * ((2 * n) + 1) // 3"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    return 2 * n - 1"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize the count of zeros and non-zeros\n    zero_count = array('i', [0])\n    non_zero_count = array('i', [0])\n\n    # Loop through the array\n    for num in nums:\n        # If the number is zero, increment the count of zeros\n        if num == 0:\n            zero_count.itemset(0, zero_count.item(0) + 1)\n        # Otherwise, increment the count of non-zeros\n        else:\n            non_zero_count.itemset(0, non_zero_count.item(0) + 1)\n\n    # Calculate the ratio of zeros to non-zeros\n    zero_to_non_zero_ratio = zero_count.item(0) / non_zero_count.item(0)\n\n    # Return the ratio\n    return zero_to_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize counters\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio\n    if zero_count + non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / (zero_count + non_zero_count)\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    non_zeros = array('i', [0]*len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            non_zeros[non_zeros.index(num)] += 1\n\n    non_zero_count = len(non_zeros)\n    zero_count = len(zeros)\n\n    if non_zero_count == 0:\n        return 0\n\n    return round(zero_count/non_zero_count, 4)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_ones = len(nums)\n    \n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n    \n    if num_ones == 0:\n        return 0\n    \n    return num_zeroes / num_ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))  # create an array of integers to store the count of zeroes and non-zeroes\n\n    for num in nums:\n        if num == 0:\n            count[0] += 1  # increment the count of zeroes\n        else:\n            count[1] += 1  # increment the count of non-zeroes\n\n    if count[1] == 0:\n        return 0  # if there are no non-zeroes, the ratio is zero\n\n    return count[0] / count[1]  # return the ratio of zeroes to non-zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i')\n    non_zero_count = array('i')\n    \n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            non_zero_count.append(1)\n    \n    if len(zero_count) == 0:\n        return 0\n    \n    ratio = sum(zero_count) / sum(non_zero_count)\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if zero_count == 0:\n        return 0\n    else:\n        return non_zero_count/zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i')  # create an integer array to store the count of zeros\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)  # increment the count of zeros if the number is zero\n        else:\n            zero_count.append(0)  # increment the count of non-zeros if the number is non-zero\n    non_zero_count = len(nums) - sum(zero_count)  # compute the count of non-zero elements\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count_zero = 0\n    count_non_zero = 0\n    for num in arr:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero / count_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        nums (list): List of integers.\n\n    Returns:\n        float: Ratio of zeroes to non-zeroes.\n\n    \"\"\"\n\n    # Create a new array to store the non-zeroes in the original array\n    non_zeroes = array('i')\n\n    # Loop through the original array and add each non-zero value to the new array\n    for num in nums:\n        if num!= 0:\n            non_zeroes.append(num)\n\n    # Calculate the length of the non-zeroes array\n    length = len(non_zeroes)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = length / len(nums)\n\n    return zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a set to store the non-zero powers of 2\n    powers_of_two = set()\n    \n    # Loop through the number from 1 to n\n    for i in range(1, n+1):\n        # Check if i can be represented as sum of non-zero powers of 2\n        if i == 2**(i-1):\n            powers_of_two.add(i)\n        else:\n            for j in range(2**(i-1), 2**i):\n                powers_of_two.add(j)\n    \n    # Check if the given number is a sum of powers of 2\n    if sum(powers_of_two) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is power of 2 or not\n    if n == 0:\n        return False\n    if n & (n-1) == 0:\n        return True\n    # Check if the given number can be represented as sum of non-zero powers of 2 or not\n    # If the given number is not a power of 2, then it can only be represented as sum of non-zero powers of 2\n    power_of_two = 1\n    while power_of_two <= n:\n        if power_of_two * 2 <= n:\n            if n % power_of_two == 0:\n                n -= power_of_two\n            else:\n                return False\n        else:\n            return True\n        power_of_two *= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # To check whether a number is a power of 2\n    def is_power_of_two(num):\n        return num & (num - 1) == 0\n\n    # Check if n is a power of 2\n    if is_power_of_two(n):\n        return True\n    else:\n        # Check if any power of 2 can be added to n\n        for i in range(1, 32):\n            if is_power_of_two(2**i):\n                if n % (2**i) == 0:\n                    return False\n        # If no power of 2 can be added, then n cannot be represented as sum of powers of 2\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # check if n is a power of 2\n    if (n & (n-1)) == 0:\n        return True\n    else:\n        # check if the sum of powers of 2 from 2 to sqrt(n) is less than n\n        sqrt_n = int(n**0.5) + 1\n        for i in range(2, sqrt_n+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 0:\n        return False\n\n    # Finding the sum of powers of 2\n    sum_powers_of_2 = 0\n    while n > 0:\n        if n & 1:\n            sum_powers_of_2 += n\n        n >>= 1\n\n    return sum_powers_of_2 == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n == i**2:\n                    return True\n                elif i*i == n:\n                    return True\n                elif n % (i*i) == 0:\n                    return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: # base case\n        return True\n    elif n < 0: # negative number\n        return False\n    else:\n        count = 0\n        power = 1\n        while power <= n:\n            if power == 1:\n                break\n            if n % power == 0:\n                n -= power\n            else:\n                power = 2 # move to next power of 2\n        if n == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check if the given number is greater than 2\n    if n < 3:\n        return False\n\n    # Check if the given number is a sum of powers of 2\n    sum_of_powers = 0\n    while n > 0:\n        if n % 2 == 0:\n            sum_of_powers += 1\n            n //= 2\n        else:\n            sum_of_powers += 2\n            n -= 1\n\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_power_of_two(x):\n        '''\n        Helper function to check if a given number is a power of 2.\n        '''\n        return x and (x & (x - 1)) == 0\n\n    def sum_of_powers_of_two(x):\n        '''\n        Helper function to sum the non-zero powers of 2 of a given number.\n        '''\n        power_of_two = 1\n        result = 0\n        while power_of_two <= x:\n            if x >= power_of_two:\n                result += x // power_of_two\n            power_of_two <<= 1\n        return result\n\n    if not is_power_of_two(n):\n        return False\n    return sum_of_powers_of_two(n) == n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for calculating circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # Formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r #pi is a mathematical constant representing the mathematical value of pi\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2 * 3.14 * r"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened numbers\n    flattened = set()\n\n    # Loop through each element of the list\n    for item in test_list:\n        # If the element is a list, recursively flatten it and add its elements to the flattened set\n        if isinstance(item, list):\n            flattened.update(extract_singly(item))\n        # Otherwise, add the element to the flattened set\n        else:\n            flattened.add(item)\n\n    # Return the flattened set as a list\n    return list(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        flat_list.extend(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for element in sublist:\n            flat_list.append(element)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(head):\n    \"\"\"\n    Given a linked list, return a set of unique numbers in a singly linked list.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_nums = set()\n    \n    # Create a dummy node to traverse the linked list\n    dummy_node = ListNode(0)\n    dummy_node.next = head\n    \n    # Traverse the linked list\n    curr_node = head\n    while curr_node:\n        # If the current node is not None, add its value to the set of unique numbers\n        if curr_node.val not in unique_nums:\n            unique_nums.add(curr_node.val)\n        # Move to the next node in the linked list\n        curr_node = curr_node.next\n    \n    # Create a new linked list containing the unique numbers in the set\n    new_head = ListNode(0)\n    prev_node = new_head\n    for num in unique_nums:\n        curr_node = dummy_node\n        while curr_node.val!= num:\n            curr_node = curr_node.next\n        # Create a new node with the number\n        new_node = ListNode(num)\n        # Insert the new node after the current node\n        prev_node.next = new_node\n        prev_node = new_node\n    return new_head"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list += sublist\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return set(result)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Create a copy of the input list to avoid modifying the original list\n    nums_copy = nums.copy()\n    n = len(nums)\n\n    # Create a helper function to reverse the first k elements of the list\n    def reverse(k):\n        for i in range(k, n):\n            nums_copy[i], nums_copy[k-1] = nums_copy[k-1], nums_copy[i]\n            k -= 1\n\n    # Sort the list by repeatedly reversing the first k elements and then the next k elements and so on\n    for k in range(n-1, 0, -1):\n        reverse(k)\n\n        # If the reversed list is already sorted, we can break out of the loop\n        if nums_copy == nums:\n            break\n\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Traverse through all elements of the list\n    for i in range(n):\n        # Find the maximum element in the remaining unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the current element with the maximum element found so far\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # create a list of numbers from 1 to n\n    pancake = [i for i in range(1, n+1)]\n    # create a function to swap the elements of nums and pancake\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n        pancake[i], pancake[j] = pancake[j], pancake[i]\n    # loop through the pancake and swap elements that are out of order\n    for i in range(n):\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx!= i:\n            swap(i, max_idx)\n    # reverse the order of the pancake to get the sorted list\n    sorted_nums = nums[::-1]\n    # reverse the sorted list to get the original order of the pancake\n    sorted_pancake = pancake[::-1]\n    return sorted_nums, sorted_pancake"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the current element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Reverse the list from i+1 to the end\n        reverse(nums, i+1, n)\n\ndef reverse(nums, start, end):\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    \n    # Find the maximum element in the list\n    max_elem = max(nums)\n    \n    # Create a list of booleans to represent which elements are sorted\n    sorted_list = [False] * n\n    \n    # Create a list to store the sorted elements\n    sorted_nums = []\n    \n    # Sort the elements in decreasing order of their index\n    for i in range(n):\n        # Find the index of the maximum element\n        max_index = nums.index(max_elem)\n        \n        # Sort the elements in decreasing order of their index\n        nums.insert(i, nums.pop(max_index))\n        \n        # Mark the element as sorted\n        sorted_list[i] = True\n        \n        # Update the maximum element\n        max_elem = max(nums)\n        \n        # Create a sorted list\n        sorted_nums = nums.copy()\n    \n    # Return the sorted list\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    def sort(arr):\n        n = len(arr)\n        for i in range(n):\n            max_index = i\n            for j in range(i+1, n):\n                if arr[j] > arr[max_index]:\n                    max_index = j\n            arr[i], arr[max_index] = arr[max_index], arr[i]\n        return arr\n    \n    def reverse(arr):\n        n = len(arr)\n        for i in range(n//2):\n            arr[i], arr[n-1-i] = arr[n-1-i], arr[i]\n        return arr\n    \n    arr = nums[:]\n    reverse(arr)\n    sorted_arr = sort(arr)\n    reverse(sorted_arr)\n    return sorted_arr"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Build an array of the same size as the original array\n    # The array will be used to sort the pancake\n    pancakes = [0] * n\n\n    # Initialize the first pancake to the length of the array\n    pancakes[0] = n\n\n    # Starting from the second pancake, calculate the pancake size for each pancake\n    for i in range(1, n):\n        # Calculate the pancake size for the ith pancake\n        pancakes[i] = 1\n        while pancakes[i] < n and nums[pancakes[i]-1] >= nums[n-pancakes[i]]:\n            pancakes[i] += 1\n\n        # Reverse the pancake\n        for j in range(i, pancakes[i]):\n            pancakes[j], pancakes[i-j] = pancakes[i-j], pancakes[j]\n\n    # Sort the array of pancakes\n    for i in range(n-1, 0, -1):\n        # Calculate the index of the next pancake to be sorted\n        j = pancakes[i] - 1\n\n        # Swap the current element with the element in the next pancake\n        nums[i-1], nums[j] = nums[j], nums[i-1]\n\n        # Move the last pancake one place to the left to complete the sort\n        for k in range(i-1, 0, -1):\n            if pancakes[k] == i:\n                pancakes[k] -= 1\n                break\n            pancakes[k] = pancakes[k+1]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n\n    The pancake sort algorithm is a variation of bubble sort that works by\n    starting with a list of n elements and repeatedly swapping adjacent\n    elements if they are in the wrong order until the list is sorted.\n\n    This function takes a list of integers as input and returns the sorted list.\n    \"\"\"\n\n    # Initialize variables for the size of the list and the swapping count\n    n = len(nums)\n    swaps = 0\n\n    # Loop through the list and repeatedly swap adjacent elements until no more swaps are needed\n    while swaps < n - 1:\n        # Find the smallest unsorted element\n        min_index = 0\n        for i in range(1, n):\n            if nums[i] < nums[min_index]:\n                min_index = i\n\n        # Swap the smallest unsorted element with the last element\n        nums[min_index], nums[n-1] = nums[n-1], nums[min_index]\n\n        # Update the swapping count and decrement the size of the list\n        swaps += 1\n        n -= 1\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Loop through each element\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the last element of the unsorted part of the array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to reverse a list\n    def reverse_list(lst):\n        return lst[::-1]\n\n    # Helper function to calculate the pancake sequence\n    def pancake_sequence(n):\n        return [n - i - 1 for i in range(n)]\n\n    # Helper function to reverse the pancake sequence\n    def reverse_pancake_sequence(ps):\n        return [n - i for i, n in enumerate(ps)]\n\n    # Helper function to swap elements in the list\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    # Helper function to calculate the next greater element in the list\n    def next_greater_element(lst, i):\n        for j in range(i + 1, len(lst)):\n            if lst[j] > lst[i]:\n                return lst[j]\n        return float('-inf')\n\n    # Helper function to calculate the next smaller element in the list\n    def next_smaller_element(lst, i):\n        for j in range(i - 1, -1, -1):\n            if lst[j] < lst[i]:\n                return lst[j]\n        return float('inf')\n\n    # Helper function to reverse the elements of the list using the pancake sequence\n    def reverse_using_pancake_sequence(lst, ps):\n        for i in range(len(lst)):\n            j = ps[i]\n            if j >= 0:\n                swap(lst, i, j)\n\n    # Helper function to pancake sort the list using the pancake sequence\n    def pancake_sort_using_pancake_sequence(lst, ps):\n        while len(ps) > 1:\n            # Reverse the list using the pancake sequence\n            reverse_using_pancake_sequence(lst, ps)\n\n            # Calculate the next greater element in the list\n            for i, x in enumerate(lst):\n                lst[i] = next_greater_element(lst, i)\n\n            # Calculate the next smaller element in the list\n            for i, x in reversed(list(enumerate(lst))):\n                lst[i] = next_smaller_element(lst, i)\n\n            # Reverse the pancake sequence\n            ps = reverse_pancake_sequence(ps)\n\n    # Sort the list using the pancake sequence\n    pancake_sort_using_pancake_sequence(nums, pancake_sequence(len(nums)))\n\n    # Return the sorted list\n    return lst"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the count of items that are identical in the same position of the three lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input, and returns the count of items that are identical in the same position of the three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if type(item) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = abs(arr[-1] - arr[0])\n    for i in range(1, len(arr) - 1):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize maximum difference variable\n    max_diff = float('-inf')\n    \n    # Iterate over the array and calculate the absolute difference between each pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Check if the equation is valid\n    if a == 0 or b == 0:\n        return None\n\n    # Initialize x and y\n    x = y = 0\n\n    # Initialize the error and iteration count\n    error = 1\n    count = 0\n\n    # Newton-Raphson method\n    while abs(error) > 0.0001 and count < 100:\n        x_prev = x\n        y_prev = y\n        x = x_prev - (a * x_prev + b * y_prev) / (a ** 2 + b ** 2)\n        y = y_prev - (a * x_prev + b * y_prev) / a\n\n        error = abs(x - x_prev)\n\n        count += 1\n\n    # Check if a solution exists\n    if abs(x - n) < 0.0001:\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    disc = b**2 - 4*a*n\n    \n    # check if the discriminant is negative or zero\n    if disc < 0:\n        return None\n    \n    # calculate the two roots of the discriminant\n    root1 = (-b + disc**0.5) / (2*a)\n    root2 = (-b - disc**0.5) / (2*a)\n    \n    # check if both roots are integers\n    if not root1.is_integer() or not root2.is_integer():\n        return None\n    \n    # return the solution as a tuple\n    return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if there is a solution\n    if discriminant > 0:\n        # Find the roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Check if both roots are integers\n        if int(root1) == int(root2) and int(root1)!= 0 and int(root2)!= 0:\n            return (int(root1), int(root2))\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Try all possible combinations of x and y values\n    for x in range(-100, 101):\n        for y in range(-100, 101):\n            if a*x + b*y == n:\n                return (x, y)\n    \n    # No solution found\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # check if discriminant is positive\n    if discriminant > 0:\n        # calculate the two solutions\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        \n        # check if both solutions are integers\n        if isinstance(x1, int) and isinstance(x2, int):\n            # return the solutions as a tuple\n            return (x1, x2)\n    else:\n        # discriminant is negative, so no solution exists\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    else:\n        y = -b / a\n        x = n / a\n        if a*x + b*y == n:\n            return (int(x), int(y))\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return (n // b, n % b)\n    else:\n        d = gcd(a, b)\n        x = (b * (n // d) - n) // a\n        y = (a * x - n) // b\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    elif a == 1:\n        if b == 0:\n            return None\n        else:\n            x = -n / b\n            y = 0\n            return (x, y)\n    else:\n        x1 = -n / b\n        x2 = (n - b**2) / (2 * a)\n        if x1 == x2:\n            y1 = 0\n            y2 = 0\n        elif x1 < x2:\n            y1 = 0\n            y2 = x2 - x1\n        else:\n            y1 = x1 - x2\n            y2 = 0\n        return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, c):\n    # use extended Euclidean algorithm to find coefficients\n    d = b**2 - 4*a*c\n    if d < 0:\n        return None\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, 100):\n        for y in range(1, 100):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate over list1 to remove the elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [num for num in list1 if num not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n    \"\"\"\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    list1 = list(set(list1) - set(list2))\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum_series(n-1) + 2*sum_series(n-2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return sum_series(n // 2) * 2\n    else:\n        s = 0\n        for i in range(n // 2):\n            s += n - 2 * i\n        return s + 2 * n - 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([n - 2*i for i in range(n // 2)])"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_val = 0\n    for i in range(n // 2):\n        sum_val += n - 2*i\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([n - 2*i for i in range(n // 2)])"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return n - 1\n    else:\n        sum = 0\n        for i in range(0, n//2):\n            sum += n - 2*i\n        return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s / 2 * (tan((pi / l) * i) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (tan(pi/l) * s**2) / (1 + tan(pi/l)**2)\n    return area * s"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the length of a side of the polygon\n    side = s / l\n\n    # Calculate the area of the polygon using the formula for the area of a triangle\n    area = (l * s * (s - 2 * tan(pi / l)) / 6)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter of the polygon\n    sp = (s*2 + l*2) / (2*pi)\n    # calculate the area of the polygon using the formula\n    area = (sp * (sp-s) * tan(pi/l)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2)*((180/pi)**(0.5))/((2*i+1)**2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area * s"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of the polygon\n    area = (s * l) / 2\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * (s - 2 * l + 1)) / (6 * math.factorial(l))\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # check if i is a divisor of n\n        if n % i == 0:\n            # add i to the sum of its divisors\n            divisor_sum = i + math.gcd(n, i)\n            # check if divisor_sum is equal to n\n            if divisor_sum == n:\n                # if it is, return True\n                return True\n    # if no integer divides n, return False\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(map(int, math.factorize(n)))\n    # Calculate the sum of the divisors of the other number\n    other_div_sum = sum(map(int, math.factorize(n * 2)))\n    # Compare the sums\n    return div_sum == other_div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1: \n        return True\n    \n    sum_of_divisors = 0\n    divisor = 2\n    \n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            sum_of_divisors += divisor\n            n //= divisor\n        else:\n            divisor += 1\n            \n    sum_of_divisors += n\n    \n    return sum_of_divisors == n * (n+1) // 2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Calculate the sum of the divisors of n\n    divisor_sum = sum(range(1, int(math.sqrt(n))+1))\n\n    # Calculate the sum of the divisors of n - 1\n    divisor_sum_n_minus_1 = sum(range(1, n))\n\n    # Check if the two sum are equal\n    if divisor_sum == divisor_sum_n_minus_1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i!= n/i:\n                return False\n            else:\n                return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Use a loop to find all the divisors of n\n    divs = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n\n    # Calculate the sum of the divisors of n\n    div_sum = sum(divs)\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        print(\"The sum of the divisors of {} are the same as {}.\".format(n, div_sum))\n    else:\n        print(\"The sum of the divisors of {} are not the same as {}.\".format(n, div_sum))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def sum_divisors(num):\n        divisors = set()\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.add(i)\n                if i!= num // i:\n                    divisors.add(num // i)\n        return divisors\n\n    a = sum_divisors(n)\n    b = sum_divisors(n+1)\n    if len(a) == len(b):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_of_divisors += i + n // i\n    if sum_of_divisors == 2 * n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Function to get the list of all divisors of a number\n    def get_divisors(num):\n        divisors = []\n        i = 1\n        while i * i <= num:\n            if num % i:\n                i += 1\n            else:\n                num //= i\n                divisors.append(i)\n        if num > 1:\n            divisors.append(num)\n        return divisors\n\n    # Function to check if the sum of divisors is the same\n    def check_sum(num1, num2):\n        div1 = get_divisors(num1)\n        div2 = get_divisors(num2)\n        return sum(div1) == sum(div2)\n\n    # Main function\n    if check_sum(28, 42):\n        print(\"The sum of the divisors of 28 and 42 are the same.\")\n    else:\n        print(\"The sum of the divisors of 28 and 42 are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Finding the sum of divisors of n using math.factorial() function \n    divisor_sum = sum(math.factorial(i) for i in range(1, int(n**0.5) + 1))\n    \n    # Checking if divisor_sum is equal to n \n    if divisor_sum == n: \n        return True \n    else: \n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in str1:\n        if char.lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char in alphabet:\n            index = alphabet.index(char)\n            if str1[index] == char.lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    # Create a dictionary to store the count of characters at each position\n    char_count = {}\n    # Loop through each character in the string\n    for i in range(26):\n        # Get the character at the current position\n        char = chr(i+ord('a'))\n        # Check if the character is already in the dictionary\n        if char in char_count:\n            # If it is, increment its count\n            char_count[char] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            char_count[char] = 1\n    # Loop through each character in the string again\n    for char in str1:\n        # Check if the character is in the dictionary\n        if char in char_count:\n            # If it is, decrement its count and add it to the total count\n            char_count[char] -= 1\n            total_count += char_count[char]\n    # Return the total count\n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(i+97))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # Create an empty dictionary to store the character positions\n    char_positions = {}\n    # Loop over the characters in the string\n    for i, c in enumerate(str1):\n        # If the character is a letter, add its position to the dictionary\n        if c.isalpha():\n            char_positions[c] = i\n    # Initialize the count to zero\n    count = 0\n    # Loop over the characters in the English alphabet\n    for i, c in enumerate('abcdefghijklmnopqrstuvwxyz'):\n        # If the character is already in the dictionary, increment the count\n        if c in char_positions:\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes in a string as input and counts the number of characters that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Initialize a dictionary to store the frequency of each character in the English alphabet\n    freq_dict = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # Iterate through each character in the input string\n    for char in str1:\n        \n        # If the character is in the English alphabet, increment its frequency in the dictionary\n        if char in freq_dict:\n            freq_dict[char] += 1\n            \n    # Return the sum of the frequency of each character\n    return sum(freq_dict.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(26):\n        if str1.lower() == english_alphabet[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    count = 0\n    for i in range(26):\n        char = chr(ord('a') + i)\n        count += str1.lower().count(char)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == alphabet[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    english_alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for char in str1:\n        if char.lower() in english_alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    # initialize two variables to keep track of the even and odd numbers\n    even = 0\n    odd = 0\n    # loop through each number in the list\n    for num in A: \n        # if the number is even, add it to the even count\n        if num % 2 == 0: \n            even += 1\n        # if the number is odd, add it to the odd count\n        else: \n            odd += 1\n    # return the total number of even pairs\n    return even // 2"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] % 2 == 0!= A[j] % 2: \n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    # Find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is less than 2\n    if n < 2:\n        return 2**0\n    \n    # loop through all powers of 2 until n is reached\n    for i in range(1, 32):\n        if 2**i >= n:\n            return 2**i\n    \n    # if n is greater than all powers of 2, n itself is the next power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Initialize a variable to store the result\n    result = 1\n\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n\n    # Iterate over the bits in the binary representation\n    for i in binary:\n        # If the bit is 0, double the result\n        if i == '0':\n            result *= 2\n        # If the bit is 1, stop iterating\n        else:\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer n as input and returns the next power of 2\n    greater than or equal to n.\n    '''\n    n -= 1 # To make the calculation easier\n    n |= (n >> 1) # Bitwise OR with binary 1 followed by zeros\n    n |= (n >> 2) # Bitwise OR with binary 1 followed by ones\n    n |= (n >> 4) # Bitwise OR with binary 1 followed by twos\n    n |= (n >> 8) # Bitwise OR with binary 1 followed by threes\n    n |= (n >> 16) # Bitwise OR with binary 1 followed by fourteens\n    n += 1 # To make the calculation easier\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # find the power of 2 nearest to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Set a counter variable to 0\n    count = 0\n    \n    # Loop while n is not a power of 2\n    while n & 1 == 0:\n        # Increment the counter\n        count += 1\n        \n        # Check if the next power of 2 is greater than n\n        n >>= 1\n    \n    # Return the next power of 2\n    return 1 << count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # If n is already a power of 2, then return n\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Args:\n        n (int): A positive integer.\n\n    Returns:\n        int: The next smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is already a power of 2, return n itself.\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the next smallest power of 2 by repeatedly doubling n.\n    while n & (n - 1)!= 0:\n        n <<= 1\n\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n > 1:\n        n >>= 1\n    return 1 << n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two arguments: a list a and a number x. It then counts the number of times x occurs in a.\n    '''\n\n    count = 0\n\n    for i in a:\n        if i == x:\n            count += 1\n\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(lst, num):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, num):\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through the list from index m to index n\n    for i in range(m, n+1):\n\n        # check if the number at index i is in the list\n        if i in list1:\n\n            # add the number to the sum variable\n            sum += i\n\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    This function takes a list and two indices (m and n) as input and returns the sum of numbers in the list within the range [m, n].\n    \"\"\"\n    return sum(lst[i] for i in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    return sum(list1[i] for i in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i]\n    return sum_list"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * a * math.sin(math.pi / 5)\n    return circumference\n\nprint(perimeter_pentagon(5)) # Output: 31.86895585435147\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # calculate the semi-perimeter of the pentagon\n    s = 5/4 * a\n    \n    # convert the semi-perimeter to inches\n    inches = math.pi * a\n    \n    # calculate the circumference of the pentagon\n    circumference = 2 * s\n    \n    # convert the circumference to inches\n    circumference_inches = circumference * inches\n    \n    return circumference_inches"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    s = math.sqrt(3) * a\n    perimeter = 5 * (s + s + s) / 2\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of a side of the pentagon\n    side_length = 5 * math.sqrt(3) / 2\n    \n    # Calculate the number of sides of the pentagon\n    n_sides = 5\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = (n_sides * side_length) + (2 * n_sides)\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (5*a**2)/2\n    return math.sqrt(s)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    This function takes a value of the length of a side of a regular pentagon and returns the perimeter of the pentagon.\n    \"\"\"\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1:i+3] == 'td':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i-1] == 't' and s[i-2] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if not isinstance(element, data_type):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a list to store the data types of all elements in the tuple\n    data_types = []\n\n    # Iterate through all elements in the tuple\n    for element in test_tuple:\n        # Append the data type of the current element to the list\n        data_types.append(type(element).__name__)\n\n    # Check if all elements have same data type\n    if len(set(data_types)) == 1:\n        print(\"All elements have same data type.\")\n    else:\n        print(\"All elements have different data types.\")"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    \n    for i in test_tuple:\n        if type(i)!= first_element:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for element in test_tuple:\n        types.append(type(element))\n    if len(set(types)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the first element of the tuple\n    first_element = type(test_tuple[0])\n    # loop through all the other elements in the tuple\n    for i in range(1, len(test_tuple)):\n        # check if the current element is of the same data type as the first element\n        if type(test_tuple[i])!= first_element:\n            return False\n    # if all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = None\n    for item in test_tuple:\n        if data_type is None:\n            data_type = type(item)\n        elif data_type!= type(item):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        for i in range(1, len(test_tuple)):\n            if not isinstance(test_tuple[i], type(test_tuple[0])):\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # get the type of the first element of the tuple\n    data_type = type(test_tuple[0])\n\n    # iterate over the tuple and check if the data type of each element matches the first element\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n\n    # if all elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 1:\n        return True\n    else:\n        first_element = type(test_tuple[0])\n        for element in test_tuple[1:]:\n            if type(element)!= first_element:\n                return False\n        return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # initialize variables\n    count = 0\n    majority_count = 0\n\n    # loop through the array and count the occurrences of the element\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n        # if the count reaches the half of the length, increment the majority count\n        if count == n/2:\n            majority_count += 1\n            count = 0\n\n    # if the majority count is greater than n/2, return True\n    if majority_count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Iterate through the array and update the frequency of each element\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Check if the majority element is in the dictionary with frequency more than n/2\n    for i in freq:\n        if freq[i] > n // 2:\n            return True\n    \n    # If the majority element is not in the dictionary, it must be a minority element\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables to keep track of count and index of current element\n    count = 1\n    index = 0\n\n    # Loop through array until we find the target element\n    while index < n:\n        if arr[index] == x:\n            count += 1\n        else:\n            count -= 1\n\n        if count == 0:\n            return True\n        index += 1\n\n    # If we make it through the entire array without finding the target element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Find the index of the element x\n    index = arr.index(x)\n\n    # Initialize the count of x to zero\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n\n        # If the element at the current index is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n\n        # If the count exceeds n/2, return True\n        if count > n//2:\n            return True\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count to 0 and majority_count to 0\n    count = 0\n    majority_count = 0\n\n    # Traverse the array\n    for i in range(n):\n        # If current element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n        # If count becomes n/2, increment majority_count\n        elif count == n // 2:\n            majority_count += 1\n            count = 0\n\n    # If count is still not 0 after traversing the entire array, then x is not the majority element\n    if count!= 0:\n        return False\n\n    # If majority_count is equal to n/2, then x is the majority element\n    return majority_count == n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n: \n        n &= (n - 1) # clear the least significant set bit \n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n!= 0: \n        n = n & (n-1) \n        count += 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1 \n        n //= 2\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_string += str[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Create a new string without the odd index values\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = [0] * len(str) # Create a list of zeros of the same length as the string\n    for i, char in enumerate(str): # Loop through the string and populate the list with odd index values\n        if i % 2!= 0: # If the index is odd, set the corresponding value to 1\n            odd_values[i] = 1\n    return ''.join([char for i, char in enumerate(str) if odd_values[i] == 0]) # Join the remaining characters with an empty string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c): \n    \"\"\"\n    This function takes three numbers as inputs and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function finds the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    for i in range(l, r + 1):\n        if n & (1 << i)!= (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        return True\n\n    bit_set = 0\n    for i in range(l, r+1):\n        bit_set |= (1 << i)\n\n    if bit_set!= n - 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n        n (int): A positive integer.\n        l (int): Lower limit of the given range.\n        r (int): Upper limit of the given range.\n\n    Returns:\n        bool: True if all the bits are unset in the given range, else False.\n    \"\"\"\n    # Iterate through the range of bits from l to r\n    for i in range(l, r + 1):\n        # Check if the i-th bit is set\n        if (n & (1 << i))!= 0:\n            # If it is set, return False\n            return False\n    # If all bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to keep track of the number of unset bits in the range\n    unset_bits = 0\n    # Iterate through each bit in the range\n    for i in range(l,r+1):\n        # If the bit is set, decrement the unset_bits variable\n        if n & (1<<i):\n            unset_bits -= 1\n        else:\n            # If the bit is not set, increment the unset_bits variable\n            unset_bits += 1\n    # Check if the unset_bits variable is greater than or equal to 0\n    if unset_bits >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # We will iterate over all possible binary numbers between l and r\n    for i in range(l, r+1):\n        # We will convert the binary number to an integer and check if all the bits are set or not\n        if bin(i)[2:].count('1')!= n:\n            # If there are any unset bits, we will return False\n            return False\n    # If we reach here, it means all bits are set in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n        n (int): integer value of the number\n        l (int): lower limit of the range\n        r (int): upper limit of the range\n\n    Returns:\n        bool: True if all the bits are set in the given range, False otherwise\n    \"\"\"\n    # Initialize count variable to 0\n    count = 0\n    # Loop through each bit position from l to r (inclusive)\n    for i in range(l, r+1):\n        # Check if the bit at position i is set or not\n        if (n & (1 << i))!= 0:\n            # If the bit is set, increment the count by 1\n            count += 1\n    # If the count is equal to the number of bits in the number, then all the bits are set in the given range\n    if count == (r-l+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        temp = bin(i)[2:]\n        count += temp.count('1')\n    if count == len(bin(n-1)[2:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range from bit string to binary string\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n\n    # Convert the given number to binary string\n    binary_n = bin(n)[2:]\n\n    # Convert the binary range to a list of binary strings\n    binary_range = [binary_l, binary_r]\n\n    # Count the number of bits set in each binary string\n    count_l = binary_n.count('1')\n    count_r = binary_n.count('1', r)\n\n    # Check if the count of bits set in left and right binary strings are same\n    if count_l == count_r:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to store the result of the function\n    result = True\n\n    # Iterate over each bit position from left to right\n    for i in range(l, r+1):\n        # Check if the current bit is set in the given number\n        if ((n >> i) & 1) == 1:\n            # If the current bit is set, return False immediately\n            return False\n\n    # If all the bits are unset, return True\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n        n: An integer representing the bit mask of the range.\n        l: An integer representing the leftmost bit of the range.\n        r: An integer representing the rightmost bit of the range.\n\n    Returns:\n        A boolean value indicating whether all the bits in the given range are set or unset.\n    \"\"\"\n    mask = 2**r - 1  # Calculate the mask for the given range\n    n &= mask  # Remove the leftmost r-l+1 bits from n\n    return n == 0  # Check if n is equal to 0"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables for positive and negative elements\n    positive_arr = []\n    negative_arr = []\n    \n    # Iterate through the array and append positive and negative elements to their respective arrays\n    for num in arr:\n        if num > 0:\n            positive_arr.append(num)\n        else:\n            negative_arr.append(num)\n    \n    # Merge the positive and negative arrays in ascending order\n    sorted_arr = positive_arr + negative_arr\n    \n    # Rearrange the first n elements of the sorted array to preserve the relative order\n    first_n_arr = sorted_arr[:n]\n    rest_arr = sorted_arr[n:]\n    \n    # Combine the first n elements with the rest of the array\n    result_arr = first_n_arr + rest_arr\n    \n    # Return the result array\n    return result_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a new array to store the re-arranged elements\n    re_arr = []\n\n    # Iterate through the input array\n    for i in range(n):\n        # If the current element is negative, append it to the start of the new array\n        if arr[i] < 0:\n            re_arr.insert(0, arr[i])\n        else:\n            re_arr.append(arr[i])\n\n    # Add the remaining elements of the original array to the end of the new array\n    for i in range(n, len(arr)):\n        re_arr.append(arr[i])\n\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Find the largest and smallest elements in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Find the range of the array (i.e., the difference between the largest and smallest values)\n    range_val = max_val - min_val\n\n    # Loop over the first n elements of the array\n    for i in range(n):\n        # Calculate the index of the first element to swap with the current index\n        first_index = ((i + min_val) % range_val) + min_val\n\n        # Find the smallest index that is larger than the current index and is within the first n elements\n        for j in range(n):\n            if j!= i:\n                if first_index < arr[j]:\n                    first_index = arr[j]\n\n        # Swap the first element with the current element\n        arr[i], arr[first_index] = arr[first_index], arr[i]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two pointers, one for positive elements and one for negative elements\n    i = 0\n    j = 0\n    \n    # Iterate over the input array\n    while i < n:\n        # If the current element is positive\n        if arr[i] >= 0:\n            # Move the positive pointer to the next position\n            i += 1\n        # If the current element is negative\n        else:\n            # Swap the elements at the positive and negative pointers\n            arr[i], arr[j] = arr[j], arr[i]\n            # Move the positive and negative pointers to the next positions\n            i += 1\n            j += 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables for negative and positive elements\n    neg = []\n    pos = []\n    \n    # iterate through the array and add negative and positive elements to their respective lists\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    # concatenate the two lists into a single list, and sort it in descending order\n    arr_sorted = sorted(neg + pos, reverse=True)\n    \n    # re-arrange the first n elements of the original array to match the sorted order\n    arr_sorted = arr_sorted[:n] + arr[:n] + arr_sorted[n:]\n    \n    # return the modified array\n    return arr_sorted"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Separate the negative and positive elements\n    neg_arr = [x for x in arr if x < 0]\n    pos_arr = [x for x in arr if x >= 0]\n\n    # Combine the negative and positive elements in a new array\n    combined_arr = neg_arr + pos_arr\n\n    # Remove the first n elements from the combined array\n    for i in range(n):\n        combined_arr.pop(0)\n\n    # Return the final combined array\n    return combined_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Helper function to swap elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Initialize two pointers to keep track of the first and last non-negative elements\n    i = 0\n    j = n - 1\n\n    # Iterate through the array from both ends\n    while i < j:\n        # If the current element is negative, swap it with the next element\n        if arr[i] < 0:\n            swap(arr, i, j)\n            i += 1\n        # If the current element is positive, increment the pointer to the next element\n        elif arr[i] > 0:\n            i += 1\n        # If the current element is zero, increment the pointer to the next element\n        else:\n            i += 1\n\n        # If the current element is negative, swap it with the previous element\n        if arr[j] < 0:\n            swap(arr, i, j)\n            j -= 1\n        # If the current element is positive, decrement the pointer to the previous element\n        elif arr[j] > 0:\n            j -= 1\n        # If the current element is zero, decrement the pointer to the previous element\n        else:\n            j -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, count the number of negative and positive elements in the array\n    neg_count = 0\n    pos_count = 0\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # If the array is already in the required format, return it\n    if neg_count <= pos_count:\n        return arr\n    \n    # Calculate the ratio of negative elements to positive elements\n    neg_to_pos_ratio = neg_count / pos_count\n    \n    # If the ratio is less than 1, reverse the array and insert negative elements first\n    if neg_to_pos_ratio < 1:\n        for i in range(n):\n            if arr[i] < 0:\n                arr.insert(i, arr[i])\n            else:\n                arr.insert(i, 0)\n        return arr\n    \n    # If the ratio is greater than 1, reverse the array and insert positive elements first\n    else:\n        for i in range(n):\n            if arr[i] > 0:\n                arr.insert(i, arr[i])\n            else:\n                arr.insert(i, 0)\n        return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    negative.sort()\n    positive.sort(reverse=True)\n    \n    result = negative + positive\n    \n    return result[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists to store negative and positive elements\n    neg = []\n    pos = []\n    \n    # Loop through the given array and append elements to their respective lists\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    \n    # Combine the lists and sort them in ascending order\n    arr = neg + pos\n    arr.sort()\n    \n    # Return the final array with first n elements\n    return arr[:n]"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a min-heap\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap, num)\n\n    # Extract the n largest numbers from the min-heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a max heap to keep track of the n largest items\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, list1.pop(0))\n    \n    # Add the remaining items to the max heap\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        \n    # Extract and return the n largest items from the max heap\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min-heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1.pop(0)) # pop the smallest element and push it to the heap\n    # push the remaining elements of the list into the heap\n    for i in range(n, len(list1)):\n        heapq.heappush(heap, list1[i])\n    # return the top n elements from the heap\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # create a min heap of size n and fill it with the largest n elements of the list\n    max_heap = []\n    for num in list1[:n]:\n        heapq.heappush(max_heap, -num)\n    # add the remaining elements of the list to the min heap\n    for num in list1[n:]:\n        heapq.heappush(max_heap, -num)\n    # extract and return the n largest elements from the min heap\n    return [-num for num in heapq.nlargest(n, max_heap)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # create a min-heap with the first n elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # fill up the heap with the remaining elements of the list\n    for i in range(n, len(list1)):\n        if list1[i] > heapq.heappop(heap):\n            heapq.heappush(heap, list1[i])\n    \n    # return the heap\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    A = 2 * math.pi * (r ** 2) + (2 * math.pi * r * h)\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2*r*h # formula for lateral surface area\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Find the lateral surface area of the cylinder using the formula:\n    # lateral surface area = (2*pi*r**2 + 2*pi*r*h)\n    # where pi is the mathematical constant pi\n    pi = 3.141592653589793\n    lateral_surface_area = (2*pi*r**2 + 2*pi*r*h)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h  # formula for lateral surface area\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (2*3.14*r**2)+(2*3.14*r*h)+(2*3.14*h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate lateral surface area of a cylinder using formula\n    lateral_surface_area = 2*3.14159*r*h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    \n    area = math.pi * (r**2 + h**2)\n    lateral_surface = 2 * area\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Args:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n\n    Returns:\n    float: lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * (r ** 2 + h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculating the lateral surface area of the cylinder\n    lateral_surface_area = 2*pi*(r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # cube the side length to find its volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l ** 3\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    # Initialize an empty string to hold the result\n    result = ''\n    \n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append a 1 to the result\n        if int(bit) % 2 == 0:\n            result += '1'\n        # Otherwise, append a 0 to the result\n        else:\n            result += '0'\n    \n    # Convert the result to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through each bit in the binary representation of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) == 0:\n            result += 2**(len(bin(n)[2:]) - int(bit))\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # convert the number to binary string\n    binary = bin(n)[2:]\n    # create a new binary string by setting the even bits to 1\n    new_binary = ''.join([1 if i % 2 == 0 else 0 for i in range(len(binary))])\n    # convert the new binary string back to an integer\n    new_num = int(new_binary, 2)\n    return new_num"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the set bits\n    even_bits = []\n\n    # Iterate over the bits of the number and check if they are even\n    for i in range(len(bin(n)[2:])):\n        if bin(n)[2:].count('1') % 2 == 0:\n            even_bits.append(bin(n)[2:].count('1') // 2)\n\n    # Convert the list to a binary string and return it\n    return ''.join(['1' if i % 2 == 0 else '0' for i in even_bits])"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through each bit of the given number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & 1 == 0:\n            # Set the current bit of the result to 1\n            result |= 1 << i\n        # Shift the current number to the right by one bit\n        n = n >> 1\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n & 1 == 0:\n        even_bits = 0\n        while n > 0:\n            if n & 1 == 0:\n                even_bits |= 1\n            n >>= 1\n        return even_bits\n    else:\n        return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for i in range(32):\n        if (n >> i) & 1 == 0:\n            even_bits |= (1 << i)\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1) & 1"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize result variable\n    result = 0\n    \n    # Iterate over each bit of the input number\n    for i in range(8): \n        # If the i-th bit is even, set the corresponding bit in the result variable\n        if (n & (1 << i))!= 0: \n            result |= 1 << i\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    while n!= 0:\n        bit = n & 1\n        n = n >> 1\n        if bit == 0:\n            result = result | bit\n        else:\n            result = result | 1 << (bit - 1)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter function to count occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Use the Counter class to count the occurrences of each tuple\n    count_dict = Counter(unique_tuples)\n    \n    # Convert the Counter object to a dictionary\n    result_dict = dict(count_dict)\n    \n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object to count the occurrences of each unique tuple in the list\n    counter = Counter(test_list)\n\n    # create a dictionary to map each unique tuple to its count in the list\n    result_dict = {}\n\n    # iterate over the Counter object and add each unique tuple to the result_dict with its count as the value\n    for item in counter.elements():\n        result_dict[item] = counter[item]\n\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(tuple(x) for x in test_list)\n    count_dict = {}\n    \n    for unique_tuple in unique_tuples:\n        count = sum(1 for x in test_list if x == unique_tuple)\n        count_dict[unique_tuple] = count\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    for i in test_list:\n        unique_tuples.add(i)\n    freq_dict = {}\n    for i in unique_tuples:\n        freq_dict[i] = test_list.count(i)\n    return freq_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    count_dict = {}\n    for tup in test_list:\n        count_dict[tup] = count_dict.get(tup, 0) + 1\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str) - 1):\n        count += len(str[i:i+2]) - 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substr = str[i:j+1]\n            if substr:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.append(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Parameters:\n    str: str - a given string\n\n    Returns:\n    int - the number of non-empty substrings of the given string\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            substrings.append(str[i:j])\n    return len(substrings) - len(set(substrings))"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the count of non-empty substrings.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the number of possible sequences for each element of the sequence\n    sequence_counts = [0] * (m + 1)\n    \n    # Fill in the list with the number of possible sequences for each element of the sequence\n    for i in range(1, n + 1):\n        sequence_counts[i] = 1  # start with the first element\n        \n        for j in range(1, min(i * 2, m) + 1):\n            sequence_counts[i] += sequence_counts[j - 1]  # add the number of sequences with j - 1 elements\n        \n    return sequence_counts[n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Create a list of the first n elements in the sequence\n    sequence = [1] * n\n    \n    # Initialize the count of sequences\n    count = 1\n    \n    # Calculate the starting element\n    start_element = 2 * sequence[-1]\n    \n    # Iterate until the count reaches m\n    while count <= m:\n        \n        # Check if the current element is within the required range\n        if start_element >= 2 * sequence[-1] and start_element <= m:\n            \n            # Increment the count\n            count += 1\n            \n            # Create a new element in the sequence\n            new_element = start_element\n            \n            # Iterate over the sequence and increment all elements that are less than or equal to twice the current element\n            for i in range(n-1,-1,-1):\n                if sequence[i] <= 2 * sequence[i+1]:\n                    sequence[i] += 1\n                else:\n                    break\n            \n            # Add the new element to the end of the sequence\n            sequence.append(new_element)\n            \n            # Update the starting element for the next iteration\n            start_element = new_element\n            \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(n):\n        count += m // n + 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2 or n < 1:\n        return 0\n    elif m == 2 * n:\n        return 1\n    else:\n        count = 0\n        for i in range(2, m+1):\n            count += get_total_number_of_sequences(i, n-1)\n        return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            if i >= 2 * j <= m:\n                total += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    sequence_count = 0\n    current_element = 2\n    while current_element <= m:\n        if current_element >= 2 * sequence_count and current_element <= m:\n            sequence_count += 1\n        current_element += 1\n    return sequence_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Base case: if n is zero, there is only one sequence of length zero\n    if n == 0:\n        return 1\n    # Base case: if m is zero, there is only one sequence of length n\n    if m == 0:\n        return 0\n    # Base case: if m is equal to n, there is only one sequence\n    if m == n:\n        return 1\n    # Base case: if m is one less than n, there is only one sequence of length n\n    if m < n:\n        return get_total_number_of_sequences(m, n-1)\n    # Initialize variables to keep track of the current sequence and the total number of sequences\n    current_sequence = 1\n    total_sequences = 0\n    # Loop through all possible values of m and n\n    for i in range(2, m+1):\n        for j in range(2, n+1):\n            # Check if i is greater than or equal to twice the previous element but less than or equal to m\n            if i >= 2*j and i <= m:\n                # If so, add the current sequence to the total number of sequences and reset the current sequence\n                total_sequences += current_sequence\n                current_sequence = 1\n    # Add the last sequence to the total number of sequences\n    total_sequences += current_sequence\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Helper function to check if a number is valid\n    def is_valid_number(num):\n        if num < 0:\n            return False\n        if num == 0:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Helper function to calculate the sum of all numbers between a and b\n    def sum_range(a, b):\n        return (b * (b + 1)) // 2\n    \n    # Calculate the total number of sequences\n    count = 0\n    prev_num = 0\n    for num in range(m, n + 1):\n        if is_valid_number(num) and num >= prev_num + 2 and num <= m:\n            count += sum_range(prev_num + 2, num)\n        prev_num = num\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    prev_element = 0\n    \n    for i in range(m):\n        if prev_element + i + 1 <= m:\n            total_sequences += get_number_of_sequences(m, n, prev_element + i + 1)\n        if prev_element + 2 * i + 1 <= m:\n            total_sequences += get_number_of_sequences(m, n, prev_element + 2 * i + 1)\n            \n    return total_sequences\n\ndef get_number_of_sequences(m, n, element):\n    if element == 1:\n        return 1\n    \n    total_sequences = 0\n    for i in range(1, n+1):\n        if element >= 2 * i and element <= m:\n            total_sequences += get_number_of_sequences(m, n, element - i)\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the number of possible sequences to 0\n    count = 0\n    # Initialize the list of elements to the first n elements of the sequence\n    elements = [i for i in range(2, n+1)]\n    # Iterate over the remaining elements\n    for i in range(n):\n        # Remove the first element from the list\n        first_element = elements.pop(0)\n        # Add the first element to the list twice as large\n        elements.insert(0, 2*first_element)\n        # Add the number of remaining elements\n        elements.insert(0, len(elements)-1)\n        # Add the number of elements to the count\n        count += len(elements)\n    # Return the total count of possible sequences\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # append the elements of the second list to the first list\n    list1.extend(list2)\n    \n    # remove the last element of the first list\n    list1.pop()"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()  # remove the last element of the first list\n    list1.extend(list2)  # add the elements of the second list to the first list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    # Check if the lengths of the lists are equal\n    if len(list1)!= len(list2):\n        raise ValueError('Lists must be of equal length.')\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # append the elements of list2 to list1\n    list1 += list2\n    # remove the last element of list1\n    list1.pop()\n    # return the updated list1\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    # Get the length of the first list\n    length = len(list1)\n\n    # Loop through the first list\n    for i in range(length-1, -1, -1):\n        # Replace the last element of the first list with the elements of the second list\n        list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of the second list is greater than 0\n    if len(list2) > 0:\n        # Remove the last element from the first list\n        list1.pop()\n        # Append the elements of the second list to the first list\n        list1.extend(list2)\n    else:\n        print(\"Error: second list cannot be empty\")"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n\n    # Initialize count variable to zero\n    count = 0\n\n    # Loop through each character in the string\n    for char in str1:\n        # Increment the count variable by 1 for each character\n        count += 1\n\n    # Return the count variable as the result\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrtN = math.sqrt(N)\n    i = int(sqrtN)\n    while i * i <= N:\n        i -= 1\n    i += 1\n    while i * i > N:\n        i += 1\n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square number greater than N.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    sqrt_N += 1e-12\n    sqrt_N = int(sqrt_N)\n\n    while True:\n        sqrt_N += 1\n        square = sqrt_N * sqrt_N\n\n        if square > N:\n            return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N += 1 # incrementing by 1 to get the next perfect square greater than sqrt(N)\n    return sqrt_N**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Returns the next perfect square greater than a given number.\n    \"\"\"\n    # check if the input is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # initialize the next perfect square\n    next_square = 0\n    \n    # iterate until we find a square greater than N\n    while next_square**2 <= N:\n        next_square += 1\n    \n    # return the next square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    \n    # If N is a perfect square, then the next perfect square is N+1\n    if sqrt_N**2 == N:\n        return sqrt_N + 1\n    \n    # If N is not a perfect square, then we can increment N until we find the next perfect square\n    while True:\n        N += 1\n        sqrt_N = int(math.sqrt(N))\n        if sqrt_N**2 == N:\n            return sqrt_N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    square = int(math.sqrt(N))\n    while True:\n        square += 1\n        if math.isqrt(square*square) == math.isqrt(N):\n            break\n    return square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Define the function to check if a number is a perfect square\n    def is_perfect_square(n): \n        if n <= 0: \n            return False\n        sqrt_n = int(math.sqrt(n))\n        return sqrt_n * sqrt_n == n\n\n    # Define the function to find the next perfect square greater than N\n    def next_square(N):\n        if N <= 0:\n            return 1\n        sqrt_N = int(math.sqrt(N))\n        i = sqrt_N\n        while i*i <= N:\n            i += 1\n        return i*i\n\n    # Find the next perfect square greater than N\n    next_N = next_square(N)\n\n    # Check if the next perfect square is greater than N\n    if N >= next_N:\n        return next_N\n    else:\n        return next_Perfect_Square(next_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    left, right = 0, N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid*mid > N:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 2\n    else:\n        i = int(math.sqrt(N))\n        while True:\n            if i*i == N:\n                return i*i\n            elif i*i > N:\n                return i*i - 1\n            i += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        sqrt_N = math.sqrt(N)\n        if int(sqrt_N) * int(sqrt_N) == N:\n            next_sqrt_N = int(sqrt_N) + 1\n            break\n    return next_sqrt_N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # first sort the array in non-increasing order\n    arr.sort()\n\n    # initialize two pointers, one for each direction, for the beginning and end of the subsequence\n    max_sum_left = arr[0]\n    max_sum_right = arr[n - 1]\n    max_sum_cross = 0\n\n    # loop through the array and calculate the maximum sum for each direction\n    for i in range(1, n - 1):\n        if arr[i] < arr[i - 1]:\n            max_sum_left = max(max_sum_left + arr[i], arr[i])\n            max_sum_cross = max(max_sum_cross, max_sum_left)\n        else:\n            max_sum_right = max(max_sum_right + arr[i], arr[i])\n            max_sum_cross = max(max_sum_cross, max_sum_right)\n\n    # return the maximum sum of the crossing subsequence\n    return max_sum_cross"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    # Check if array is empty or has only one element\n    if len(arr) == 0 or len(arr) == 1:\n        return arr[0]\n\n    # Initialize variables\n    max_sum_i = max_sum_ip1 = arr[0]\n    max_sum_i_ip1 = max_sum_ip1_ip1 = 0\n\n    # Loop through array\n    for i in range(1, len(arr)):\n        # Check if current element is increasing or decreasing\n        if arr[i] >= arr[i-1]:\n            # If increasing, update variables for maximum sum\n            max_sum_i = max(max_sum_i, arr[i])\n            max_sum_ip1 = max(max_sum_ip1, max_sum_i_ip1 + arr[i])\n        else:\n            # If decreasing, update variables for maximum sum\n            max_sum_i_ip1 = max(max_sum_i_ip1, arr[i])\n            max_sum_ip1_ip1 = max(max_sum_ip1_ip1, max_sum_i + arr[i])\n\n        # Update maximum sum for the entire array\n        max_sum_i = max(max_sum_i, max_sum_i_ip1)\n        max_sum_ip1 = max(max_sum_ip1, max_sum_ip1_ip1)\n\n    return max_sum_i"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return None\n\n    # Initialize variables for sum of increasing subsequence and sum of decreasing subsequence\n    inc_sum = 0\n    dec_sum = 0\n\n    # Initialize variables for current increasing and decreasing subsequence\n    inc_seq = [arr[0]]\n    dec_seq = [arr[n - 1]]\n\n    # Loop through the array\n    for i in range(1, n):\n        # If the current element is increasing, add it to the current increasing subsequence and update the sum of the increasing subsequence\n        if arr[i] > inc_seq[-1]:\n            inc_seq.append(arr[i])\n            inc_sum += arr[i]\n        # If the current element is decreasing, add it to the current decreasing subsequence and update the sum of the decreasing subsequence\n        elif arr[i] < dec_seq[-1]:\n            dec_seq.append(arr[i])\n            dec_sum += arr[i]\n        # If the current element is neither increasing nor decreasing, update the sum of the increasing and decreasing subsequences\n        else:\n            inc_seq.append(arr[i])\n            inc_sum += arr[i]\n            dec_seq.append(arr[i])\n            dec_sum += arr[i]\n\n    # If the last element in the array is increasing, add it to the increasing subsequence\n    if inc_seq[-1] > dec_seq[-1]:\n        inc_seq.append(inc_seq[-1])\n        inc_sum += inc_seq[-1]\n    # If the last element in the array is decreasing, add it to the decreasing subsequence\n    else:\n        dec_seq.append(dec_seq[-1])\n        dec_sum += dec_seq[-1]\n\n    # Return the maximum sum of the bitonic subsequence\n    return max(inc_sum, dec_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # find the maximum subsequence ending at i\n    def max_subseq_ending_at_i(i):\n        max_sum_ending_at_i = 0\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_sum_ending_at_i = max(max_sum_ending_at_i, arr[i] + max_subseq_ending_at_i(j))\n        return max_sum_ending_at_i\n\n    # find the maximum subsequence ending at i and the maximum sum\n    max_subseq_ending_at_0 = max_subseq_ending_at_i(0)\n    max_sum_ending_at_0 = max_subseq_ending_at_0\n\n    # find the maximum subsequence ending at i and the maximum sum ending at j\n    for i in range(1, n):\n        max_subseq_ending_at_i = max(max_subseq_ending_at_i, arr[i] + max_sum_ending_at_0)\n        max_sum_ending_at_i = max(max_sum_ending_at_i, max_sum_ending_at_0 + arr[i])\n\n    return max_sum_ending_at_i"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    max_sum = arr[0]\n    min_sum = arr[0]\n    max_bitonic = arr[0]\n    min_bitonic = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        if arr[i] >= arr[i-1]:\n            # If the current element is increasing, update the max and min sums\n            if arr[i] > max_sum:\n                max_sum = arr[i]\n                max_bitonic = arr[i]\n            if arr[i] < min_sum:\n                min_sum = arr[i]\n                min_bitonic = arr[i]\n        else:\n            # If the current element is decreasing, update the max and min sums\n            if arr[i] > max_sum:\n                max_sum = arr[i]\n                max_bitonic = arr[i]\n            if arr[i] < min_sum:\n                min_sum = arr[i]\n                min_bitonic = arr[i]\n                \n    # Return the maximum sum of a bitonic subsequence\n    return max_bitonic + min_bitonic"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Check if the array is bitonic\n    increasing = True\n    decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            if increasing:\n                increasing = False\n            else:\n                decreasing = True\n                break\n            \n    if increasing:\n        return max(arr) - min(arr)\n    elif decreasing:\n        return max(arr) - min(arr)\n    else:\n        return 0"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    max_sum = float('-inf')\n    prev_sum = 0\n    \n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            curr_sum = prev_sum + arr[i]\n        elif arr[i] > arr[i-1]:\n            curr_sum = prev_sum - arr[i]\n        else:\n            curr_sum = prev_sum\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        prev_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n    max_sum = float('-inf')\n    for i in range(1, n+1):\n        if i == 1:\n            dp[i] = arr[0]\n        elif i % 2 == 0:\n            dp[i] = max(dp[i-1], dp[i-2] + arr[i-1])\n        else:\n            dp[i] = max(dp[i-1], dp[i-2] - arr[i-1])\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n\n    # If the array is empty, return 0\n    if n == 0:\n        return 0\n\n    # If the array has only one element, return that element\n    if n == 1:\n        return arr[0]\n\n    # If the array has two elements, return the maximum of the two elements\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    # Initialize two pointers to the first and last elements of the array\n    i = 0\n    j = n - 1\n\n    # Initialize two variables to keep track of the maximum sum of a subsequence that is increasing and decreasing, respectively\n    max_increasing = arr[i]\n    max_decreasing = arr[j]\n\n    # Loop through the array and update the maximum sum of a subsequence that is increasing and decreasing\n    for k in range(1, n - 1):\n        if arr[k] > arr[k - 1]:\n            if arr[k] > max_increasing:\n                max_increasing = arr[k]\n        else:\n            if arr[k] > max_decreasing:\n                max_decreasing = arr[k]\n\n    # Return the maximum of the maximum sum of a subsequence that is increasing and decreasing\n    return max(max_increasing, max_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Finding the first decreasing index\n    decreasing_index = None\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            decreasing_index = i\n            break\n    \n    # Finding the last increasing index\n    increasing_index = None\n    for i in range(decreasing_index, -1, -1):\n        if arr[i] <= arr[i+1]:\n            increasing_index = i\n            break\n    \n    # If there are no increasing and no decreasing elements in the array, return 0\n    if increasing_index is None and decreasing_index is None:\n        return 0\n    \n    # Finding the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(increasing_index, decreasing_index+1):\n        max_sum += arr[i]\n    \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number / x\n    \n    while abs(x - y) > 1e-10:\n        x = (x + y) / 2\n        y = number / x\n    \n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2.0\n    y = x + (number / x) / 2.0\n    while y * y > number:\n        x = y\n        y = x + (number / x) / 2.0\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize a counter and a guess\n    i = 0\n    guess = number / 2\n    # iterate until the guess is within the desired precision\n    while abs(guess**2 - number) > 0.001:\n        i += 1\n        guess = (guess + number / guess) / 2\n    # return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    Args:\n        number (float): the number to compute the square root of.\n\n    Returns:\n        float: the square root of the input number.\n\n    Examples:\n        >>> babylonian_squareroot(4)\n        2.0\n        >>> babylonian_squareroot(9)\n        3.0\n    \"\"\"\n    x = 0\n    y = number\n    while y > x:\n        x = y\n        y = (x + number / x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    x_prev = 0\n    x = 1\n    prev_x = 0\n\n    # Check if number is negative\n    if number < 0:\n        x_prev = 0.5\n        x = 1.5\n        prev_x = 0.5\n    else:\n        x_prev = -0.5\n        x = -1.5\n        prev_x = -0.5\n\n    # Iterate until the difference between x and x_prev is less than a tolerance\n    while abs(x - x_prev) > 1e-15:\n        x_prev = x\n        x = 0.5 * (x + number / x)\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"The square root of a negative number is not defined.\"\n    elif number == 0:\n        return 0\n    else:\n        low = 1\n        high = number\n        guess = (low + high) / 2\n        while abs(guess**2 - number) >= 0.00001:\n            if guess**2 < number:\n                low = guess\n            else:\n                high = guess\n            guess = (low + high) / 2\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes the square root of a number using the babylonian method.\n    \"\"\"\n    # initialize variables\n    guess = 1\n    x = number / guess\n    max_iterations = 100\n\n    # iterate until the difference between the previous and current guesses is less than a tolerance level\n    while abs(guess - x) > 0.00001:\n        guess = (guess + x / guess) / 2\n        x = number / guess\n\n        # limit the number of iterations to 100\n        if max_iterations == 0:\n            print(\"Maximum iterations reached\")\n            return None\n        max_iterations -= 1\n\n    # return the last guess as the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    prev_guess = number / 2\n    guess = prev_guess + 1\n    next_guess = 0\n    \n    # Loop until the difference between the guesses is less than a tolerance\n    while abs(guess**2 - number) > 0.001:\n        # Compute the next guess\n        next_guess = prev_guess - ((guess**2 - number) / (2*guess))\n        # Update the previous guess\n        prev_guess = guess\n        # Update the guess\n        guess = next_guess\n    \n    # Return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x1 = 0\n    x2 = number\n    x0 = 0\n    count = 0\n    while abs(x2 - x1) > 0.0001:\n        x0 = x1\n        x1 = x2\n        x2 = (x1 + x0) / 2\n        count += 1\n    print(\"The square root of\", number, \"is\", x2)\n    print(\"The number of iterations required for the square root is\", count)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    Args:\n        number (int): The number whose square root is to be found.\n\n    Returns:\n        float: The square root of the input number.\n    \"\"\"\n\n    # Find the starting point for the iteration\n    x_start = number / 2\n    x = x_start\n\n    # Initialize the iteration counter\n    i = 1\n\n    # Keep track of the number of iterations needed to get an accurate result\n    max_iterations = 0\n\n    while True:\n        # Compute the square of the current x\n        square_of_x = x * x\n\n        # Check if the square of the current x is greater than or equal to the input number\n        if square_of_x >= number:\n            # Compute the next x value using the babylonian method\n            x = (x_start + number / x_start) / 2\n\n            # Update the number of iterations needed to get an accurate result\n            max_iterations = max(max_iterations, i)\n\n            # Check if the difference between the current x and the input number is small enough\n            if abs(x - number) < 0.001:\n                # Return the result\n                return x, max_iterations\n\n            i += 1\n        else:\n            # Compute the next x value using the babylonian method\n            x = (x_start + number / x_start) / 2\n\n            # Update the number of iterations needed to get an accurate result\n            max_iterations = max(max_iterations, i)\n\n            # Check if the difference between the current x and the input number is small enough\n            if abs(x - number) < 0.001:\n                # Return the result\n                return x, max_iterations\n\n            i += 1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize the table with zeros\n    table = [[0] * n for _ in range(n)]\n    # Fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i] == str[j]:\n                table[i][j] = table[i-1][j-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    # Return the length of the LPS ending at the last character\n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(string):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n    n = len(string)\n    if n == 0:\n        return 0\n    \n    # Create a table to store the length of the longest palindromic subsequence ending at each index\n    table = [[0] * n for _ in range(n)]\n    \n    # Initialize the longest palindromic subsequence ending at index 0\n    for i in range(n):\n        table[i][i] = 1\n    \n    # Fill the table in the following way:\n    # For each index j, consider all the indices i such that 0 <= i < j <= n-1\n    for j in range(1, n):\n        for i in range(j):\n            if string[i] == string[j]:\n                # If the characters at i and j are equal, then the length of the longest palindromic subsequence\n                # ending at indices i and j can be obtained by expanding the longest palindromic subsequence\n                # ending at indices i and j-1 and appending the character at j to it\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                # Otherwise, the length of the longest palindromic subsequence ending at indices i and j can only be\n                # obtained by expanding the longest palindromic subsequence ending at index i and appending the\n                # character at j to it or by expanding the longest palindromic subsequence ending at index j and appending\n                # the character at i to it. We choose the longer of these options.\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    \n    # Return the length of the longest palindromic subsequence ending at index n-1\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence for every substring of length i\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # Initialize the first row and column to 0\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill in the table using dynamic programming\n    for i in range(1, n):\n        for j in range(i):\n            if str[j] == str[i]:\n                table[j][i] = table[j+1][i-1] + 2\n            else:\n                table[j][i] = max(table[j+1][i], table[j][i-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    max_len = 1\n    \n    # Create a 2D table to store the length of palindromic subsequences of substring of length i.\n    # Initialize the first row and column of the table with 1.\n    dp = [[1 for _ in range(n+1)] for _ in range(n+1)]\n\n    # Fill the table in bottom-up manner.\n    for i in range(n):\n        for j in range(i+1):\n            if str[i] == str[j]:\n                dp[i+1][j+1] = dp[i][j] + 2\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n\n        # Update the maximum length if necessary.\n        if dp[i+1][n] > max_len:\n            max_len = dp[i+1][n]\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in it.\n    \"\"\"\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n\n    # Create a 2D table to store the lengths of longest palindromic subsequences of all substrings of s\n    table = [[0 for j in range(n)] for i in range(n)]\n\n    # Base cases\n    table[0][0] = 1\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            table[i][i] = 2\n        else:\n            table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i][j - 1], table[i + 1][j])\n\n    return table[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each position\n    t = [[0 for j in range(n)] for i in range(n)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                t[i][j] = 1\n            elif str[i] == str[j]:\n                t[i][j] = t[i+1][j-1] + 2\n            else:\n                t[i][j] = max(t[i+1][j], t[i][j-1])\n\n    # Return the length of the longest palindromic subsequence ending at position n-1\n    return t[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize two variables for the longest palindromic subsequence length and the starting index of the longest palindromic subsequence\n    max_len = 1\n    start = 0\n    \n    # Iterate through the string\n    for i in range(n):\n        # Check if the current character is the same as the previous character\n        if str[i] == str[i-max_len]:\n            # If it is, check if the length of the subsequence is greater than max_len and if it is, update max_len and start\n            max_len += 1\n            if max_len > max_len - start:\n                start = i - max_len + 1\n        # If the current character is not the same as the previous character, check if the length of the subsequence is greater than max_len and if it is, update max_len and start\n        else:\n            # If the length of the subsequence is greater than max_len, update max_len and start\n            if max_len > max_len - start:\n                max_len = max_len - start + 1\n                start = i - max_len + 1\n    \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    # Create a 2D table to store the length of longest palindromic subsequence ending at each index\n    lps_table = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the first row and column of the table\n    for i in range(len(str)):\n        lps_table[i][i] = 1\n\n    # Fill the rest of the table using dynamic programming\n    for length in range(2, len(str)):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i + 1][j - 1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i][j - 1], lps_table[i + 1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return lps_table[0][len(str) - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each position in the string\n    table = [[0]*n for i in range(n)]\n    # Initialize the table with 1s\n    for i in range(n):\n        table[i][i] = 1\n    # Find the length of the longest palindromic subsequence ending at each position in the string using dynamic programming\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    # Return the length of the longest palindromic subsequence ending at the first position in the string\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    n = len(str)\n    # Create a 2D array to store the length of LPS for every substring\n    lps_table = [[0] * n for i in range(n)]\n    # Initialize the length of LPS to 0 for all substrings\n    for i in range(n):\n        lps_table[i][i] = 1\n    # Fill the LPS table using KMP algorithm\n    for i in range(1, n):\n        j = 0\n        while j < i and str[i]!= str[j]:\n            j = lps_table[j][i-j-1]\n        if str[i] == str[j]:\n            j += 1\n        lps_table[i][i] = j\n    # Find the length of the longest palindromic subsequence\n    max_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1] == str[i:j+1][::-1] and lps_table[i][j] > max_length:\n                max_length = lps_table[i][j]\n    return max_length"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (1/n + 1/n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 / (2 * n)) * harmonic_sum(n - 1) + (1 / (2 * n - 1)) * harmonic_sum(n - 2)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n-1))/(2*(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the harmonic sum of n-1.\n    \"\"\"\n    return (n * (n-1)) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n - 1)) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += 1/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1 using a loop\n    harmonic_sum = 1\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    \n    # Return the harmonic sum of n-1\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store the elements of array_nums1\n    set1 = set(array_nums1)\n    # Create a set to store the elements of array_nums2\n    set2 = set(array_nums2)\n    # Find the intersection of the two sets and store it in a list\n    intersection = list(set1.intersection(set2))\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # Create a set of all the elements in both arrays\n    set_intersection = set(array_nums1) & set(array_nums2)\n    \n    # Convert the set back to a list and return it\n    return list(set_intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # creating a set from array_nums1 to remove duplicates\n    set_nums1 = set(array_nums1)\n\n    # creating a new set to store the intersection of the two sets\n    intersection = set()\n\n    # iterating through array_nums2 and adding elements to the intersection set if they are in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.add(num)\n\n    # returning the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty set to store the intersection of the two arrays\n    intersection = set()\n    \n    # Iterate through both arrays\n    for num in array_nums1:\n        # Check if the current number is present in array_nums2\n        if num in array_nums2:\n            # Add the number to the intersection set\n            intersection.add(num)\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Combine the two arrays and remove duplicates using a set\n    combined_array = set(array_nums1 + array_nums2)\n    # Filter the combined array to keep only the common elements\n    intersection = list(filter(lambda x: x in array_nums1 and x in array_nums2, combined_array))\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert both arrays to sets to remove duplicates\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_arr = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_arr:\n            intersection_arr.append(num)\n    return intersection_arr"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n\n    # Create a set from the first array to find unique values\n    set_array1 = set(array_nums1)\n\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Iterate through the second array and append the values that are also present in the first array\n    for num in array_nums2:\n        if num in set_array1:\n            intersection.append(num)\n\n    # Return the intersection of the two arrays\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n\n    count = 0 \n    for item in tup: \n        if item == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count "
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.append(element)\n    new_list.append(list[-1])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Create a new list to store the modified elements\n    new_list = []\n    \n    # Loop through the original list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        new_list.insert(i,element)\n        # Append the original element to the new list\n        new_list.append(list[i])\n    \n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list[:-1] + [list[-1]]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real, imag = cmath.rect(number)\n        angle = cmath.phase(number)\n        polar_number = (real**2 + imag**2)**0.5, angle\n        result.append(polar_number)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # loop through each complex number in the list\n    for num in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag\n        \n        # calculate the polar angle using the cmath module\n        angle = cmath.phase(num)\n        \n        # calculate the magnitude of the complex number\n        magnitude = abs(num)\n        \n        # print the polar coordinates of the complex number\n        print(\"{:.2f} + {:.2f}i ({:.2f}\u00b0)\".format(real, imag, angle * 180/cmath.pi))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # loop through each number in the list\n    for number in numbers:\n        # check if the number is a complex number\n        if isinstance(number, complex):\n            # convert the number to polar coordinates\n            r = abs(number)\n            theta = cmath.phase(number)\n            \n            # print the polar coordinates\n            print(f\"{number} is {r} with an angle of {theta} radians.\")\n        else:\n            # print the original number\n            print(f\"{number} is not a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for num in numbers:\n        complex_number = complex(num[0], num[1])\n        complex_numbers.append(complex_number)\n    \n    polar_coordinates = []\n    for complex_number in complex_numbers:\n        r = abs(complex_number)\n        theta = cmath.phase(complex_number)\n        polar_coordinates.append((r, theta))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers and converts them to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of polar coordinates.\n    The polar coordinates are represented as tuples with the angle in degrees and magnitude in real part.\n    \"\"\"\n    result = []\n    for number in numbers:\n        angle = cmath.phase(number) * 180.0 / cmath.pi\n        magnitude = abs(number)\n        result.append((angle, magnitude))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar.append((r, theta))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        polar_coordinates.append((real, imag))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            real = number.real\n            imag = number.imag\n            if imag == 0:\n                angle = 0\n            else:\n                angle = cmath.phase(number)\n            print(f\"{real} + {imag}j = ({real} | {imag}\u00b0)\")\n        else:\n            print(f\"{number} is not a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        polar_coordinates.append((real, imag))\n\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations of length n with replacement\n    combos = list(combinations_with_replacement(l, n))\n    # create a list of tuples for each combination\n    tuples = []\n    for combo in combos:\n        # create a tuple from the elements in the combination\n        tup = tuple(combo)\n        # add the tuple to the list of tuples\n        tuples.append(tup)\n    return tuples"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations of length n with repetition\n    for i in range(1, len(l)+1):\n        for comb in combinations_with_replacement(l, i):\n            yield tuple(comb)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Create a list of all possible combinations\n    all_combinations = combinations_with_replacement(l, n)\n\n    # Convert each combination to a tuple\n    combinations_list = list(all_combinations)\n\n    return combinations_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)-n+1):\n        comb = tuple(l[i:i+n])\n        if comb not in combs:\n            combs.append(comb)\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations with repetition\n    combos = combinations_with_replacement(l, n)\n\n    # Create a list with tuples for each combination\n    result = list(combos)\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes a positive integer as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number as input and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return (b, a)\n\nprint(swap_numbers(10, 20)) # Output: (20, 10)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples have different lengths\")\n    \n    # convert the tuples to lists to avoid errors in comparison operations\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    # compare the elements of the tuples and find the maximum\n    max_value = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_value = test_tup1[i]\n            break\n        elif test_tup1[i] < test_tup2[i]:\n            max_value = test_tup2[i]\n            break\n    \n    # return the maximum value\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple = test_tup1\n        else:\n            max_tuple = test_tup2\n    \n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert both tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # Find the index of the maximum value in each list\n    max_index1 = max_index2 = 0\n    for i in range(len(tup1_list)):\n        if tup1_list[i] > tup2_list[i]:\n            max_index1 = i\n        else:\n            max_index2 = i\n\n    # Swap the values in the lists to maximize the tuple\n    if max_index1 > max_index2:\n        tup1_list[max_index1], tup1_list[max_index2] = tup1_list[max_index2], tup1_list[max_index1]\n        tup2_list[max_index1], tup2_list[max_index2] = tup2_list[max_index2], tup2_list[max_index1]\n    else:\n        tup1_list[max_index2], tup1_list[max_index1] = tup1_list[max_index1], tup1_list[max_index2]\n        tup2_list[max_index2], tup2_list[max_index1] = tup2_list[max_index1], tup2_list[max_index2]\n\n    # Convert the lists back to tuples and return the result\n    return tuple(tup1_list), tuple(tup2_list)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1\n            elif test_tup1[i] < test_tup2[i]:\n                return test_tup2\n            else:\n                continue"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = test_tup1 if test_tup1 > test_tup2 else test_tup2\n    print(f\"The maximum of the two tuples is: {max_tuple}\")"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # If the first tuple has more elements, return it\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n\n    # If the second tuple has more elements, return it\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n\n    # If the two tuples have the same number of elements, return the tuple with the maximum value\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    count = 0\n    while count < n:\n        if is_prime(p):\n            count += 1\n        p += 1\n    return p - 1\n\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 2\n    b = 3\n    count = 0\n    \n    while count < n:\n        if a % 2 == 0:\n            count += 1\n            b = a + 2\n        else:\n            count += 1\n            a = a + 2\n        \n        if count == n:\n            return b"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 1\n    while True:\n        prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            break\n        i += 1\n    if n == 1:\n        return i\n    else:\n        return newman_prime(n-1)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through all numbers from 2 to n\n    for i in range(2, n + 1):\n        # Check if i is a newman\u2013shanks\u2013williams prime number\n        if is_prime(i) and is_newman_prime(i):\n            count += 1\n\n        # If we have found the nth newman\u2013shanks\u2013williams prime number, return it\n        if count == n:\n            return i\n\n    # If we have not found the nth newman\u2013shanks\u2013williams prime number, return None\n    return None\n\ndef is_prime(num):\n    \"\"\"\n    Check if a given number is prime.\n    \"\"\"\n    # If the number is less than 2, it is not prime\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the number is greater than the square root of the number, it is prime\n    return True\n\ndef is_newman_prime(num):\n    \"\"\"\n    Check if a given number is a newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Check if the number is divisible by 3\n    if num % 3 == 0:\n        return False\n\n    # Check if the number is divisible by 5\n    if num % 5 == 0:\n        return False\n\n    # Check if the number is divisible by 7\n    if num % 7 == 0:\n        return False\n\n    # Check if the number is divisible by 11\n    if num % 11 == 0:\n        return False\n\n    # Check if the number is divisible by 13\n    if num % 13 == 0:\n        return False\n\n    # Check if the number is divisible by 17\n    if num % 17 == 0:\n        return False\n\n    # Check if the number is divisible by 19\n    if num % 19 == 0:\n        return False\n\n    # Check if the number is divisible by 23\n    if num % 23 == 0:\n        return False\n\n    # Check if the number is divisible by 29\n    if num % 29 == 0:\n        return False\n\n    # Check if the number is divisible by 31\n    if num % 31 == 0:\n        return False\n\n    # Check if the number is divisible by 37\n    if num % 37 == 0:\n        return False\n\n    # If none of the above conditions are met, the number is a newman\u2013shanks\u2013williams prime number\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize a list to store the prime numbers found so far\n    primes = []\n\n    # Check each number from 2 to n\n    for i in range(2, n+1):\n        # Check if i is a prime number\n        if is_prime(i):\n            # If it is, add it to the list of primes found so far\n            primes.append(i)\n\n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize the first prime number\n    prime = 2\n\n    # Initialize the number of primes found so far\n    count = 0\n\n    # Loop through all numbers from 3 to n-1\n    for i in range(3, n+1):\n\n        # Check if i is a newman-shanks-williams prime number\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime = i\n            count += 1\n\n            # If the number of primes found so far is equal to n, break the loop\n            if count == n:\n                break\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    prime = True\n\n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n\n        # Check if i is a newman-shanks-williams prime\n        if is_newman_prime(i):\n\n            # Check if i is a prime\n            if is_prime(i):\n\n                # Increment count if i is prime\n                count += 1\n\n            # Check if the count equals n\n            if count == n:\n\n                # Return i as the nth newman-shanks-williams prime\n                return i\n\n        # Reset count if i is not a newman-shanks-williams prime\n        else:\n            count = 0\n\n    # If the loop completes without finding the nth newman-shanks-williams prime, return None\n    return None\n\ndef is_newman_prime(num):\n    '''\n    Check if a number is a newman-shanks-williams prime.\n    '''\n\n    # Check if the number is divisible by any number other than 1 and itself\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # If the number is divisible by any number other than 1 and itself, it is a newman-shanks-williams prime\n    return True\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number other than 1 and itself\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # If the number is divisible by any number other than 1 and itself, it is not a prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize variables\n    i = 2\n    primes = []\n    count = 0\n\n    # check if the input is valid\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n\n    # check if the input is already a prime number\n    if is_prime(n):\n        print(\"The input number is already a prime number.\")\n        return\n\n    # generate newman\u2013shanks\u2013williams prime numbers\n    while count < n:\n        if is_prime(i) and is_prime(i*i) and is_prime(i*i*i):\n            primes.append(i)\n            count += 1\n        i += 1\n\n    # print the result\n    if count == n:\n        print(\"The\", n, \"newman\u2013shanks\u2013williams prime number is:\", primes)\n    else:\n        print(\"Invalid input. Please enter a number less than\", i)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # First, check if n is 1 or 2\n    if n <= 2:\n        return 2\n    \n    # Initialize variables\n    count = 1\n    max_count = 1\n    prime = 3\n    \n    # Loop until we have found n newman\u2013shanks\u2013williams primes\n    while count < n:\n        # Check if the current prime is prime\n        if is_prime(prime):\n            # If it is, check if it's the nth prime\n            if count == n-1:\n                return prime\n            # If it's not, increment the count and check if the next prime should be added\n            else:\n                count += 1\n        # If the current prime is not prime, check if it's the next prime\n        else:\n            prime += 2\n    \n    # If we get here, n newman\u2013shanks\u2013williams primes have not been found\n    return None\n\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime using trial division.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Define the prime numbers up to the nth power of 2\n    primes = [2]\n    p = 3\n    while p**2 <= n:\n        if p in primes:\n            primes.append(p**2)\n        p += 2\n\n    # Calculate the index of the nth power of 2\n    index = 0\n    while index < len(primes):\n        if primes[index] == n:\n            break\n        index += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return primes[index]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n\n    # Create a new tuple to store the result\n    result_tup = []\n\n    # Loop through the elements of the input tuples and perform the division\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], (int, float)) and isinstance(test_tup2[i], (int, float)):\n            result_tup.append(test_tup1[i] / test_tup2[i])\n        elif isinstance(test_tup1[i], (int, float)) and isinstance(test_tup2[i], str):\n            result_tup.append(test_tup1[i] / float(test_tup2[i]))\n        elif isinstance(test_tup1[i], str) and isinstance(test_tup2[i], (int, float)):\n            result_tup.append(float(test_tup1[i]) / test_tup2[i])\n        elif isinstance(test_tup1[i], str) and isinstance(test_tup2[i], str):\n            try:\n                result_tup.append(float(test_tup1[i]) / float(test_tup2[i]))\n            except:\n                raise ValueError('The two input tuples contain elements of different types.')\n        else:\n            raise ValueError('The two input tuples contain elements of different types.')\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length\")\n        return\n    \n    # perform element-wise division operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] /= test_tup2[i]\n    \n    # return the resultant tuple\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same number of elements.')\n    \n    # Divide each element of the tuples element-wise\n    division_result = []\n    for i in range(len(test_tup1)):\n        division_result.append(test_tup1[i] / test_tup2[i])\n        \n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths\")\n        return\n    \n    # Perform element-wise division\n    result_tup = tuple(x1 / x2 for x1, x2 in zip(test_tup1, test_tup2))\n    \n    # Return the result as a tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two input tuples should be equal.\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] == 0:\n                print(\"Cannot divide by zero!\")\n                return None\n            else:\n                test_tup1[i] = test_tup1[i] / test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the two tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have equal length.\")\n    \n    # perform element-wise division across the tuples\n    result = [num1/num2 for num1, num2 in zip(test_tup1, test_tup2)]\n    \n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in the two tuples does not match.\")\n        return\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 and test_tup2[i] == 0:\n            result_tup.append(0)\n        else:\n            result_tup.append(test_tup1[i]/test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if both tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # Perform element-wise division on the tuples\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_length = len(list1)\n    half_way = list1_length // 2\n\n    if L > half_way:\n        list1_part = list1[:half_way]\n        list2_part = list1[half_way:]\n    else:\n        list2_part = list1[:L]\n        list1_part = list1[L:]\n\n    return (list1_part, list2_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the given list should be greater than or equal to L\")\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"List too short to split into two parts\")\n    else:\n        mid = len(list1) // 2\n        return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return ([list1[:L]], [list1[L:]])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Given a list `lst` and an integer `L`, split the list into two parts such that the length of the first part is `L`.\n    Return the resulting lists in a tuple.\n    \"\"\"\n    if len(lst) <= L:\n        return (lst, [])\n    else:\n        return (lst[:L], lst[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is less than or equal to zero\n    if L <= 0:\n        return None\n    \n    # Initialize two empty lists to hold the first part and the second part of the list\n    part1 = []\n    part2 = []\n    \n    # Loop through the given list and add each element to the appropriate list\n    for i in range(len(list1)):\n        if i < L:\n            part1.append(list1[i])\n        else:\n            part2.append(list1[i])\n    \n    # Return the resulting lists as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Check if the given list is not empty\n    if not list1:\n        return None\n    \n    # Find the length of the first part of the list\n    part1_len = len(list1) // 2\n    \n    # Split the list into two parts\n    part1 = list1[:part1_len]\n    part2 = list1[part1_len:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(lst)\n    if n <= L:\n        return (lst, [])\n    elif n % L == 0:\n        return (lst[:L], lst[L:])\n    else:\n        return (lst[:L], lst[L:L+1])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to store the first part of the list\n    first_part = []\n\n    # Loop through the list until we have added L elements to the first part\n    while len(first_part) < L:\n        # Add the first element of the list to the first part\n        first_part.append(list1.pop(0))\n\n    # Create an empty list to store the second part of the list\n    second_part = []\n\n    # Loop through the list again until we have added all the remaining elements to the second part\n    while len(second_part) < len(list1):\n        # Add the next element of the list to the second part\n        second_part.append(list1.pop(0))\n\n    # Return a tuple containing the two parts of the list\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1) // 2\n    return (list1[:half], list1[half:])"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(height_inches):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    \n    :param height_inches: the height of the dog in inches\n    :type height_inches: int\n    \n    :return: the age of the dog in dog's years\n    :rtype: int\n    \"\"\"\n    # convert the height from inches to centimeters\n    height_cm = height_inches * 2.54\n    \n    # calculate the dog's age in dog's years\n    age_dogs = height_cm / 14\n    \n    # round the age to the nearest whole number and return it\n    return int(age_dogs)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7/4"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = 7 * h_age\n    return dogs_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = (21 - h_age) * 12\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 * h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7\n    if h_age < 3:\n        years = 2\n    elif h_age < 6:\n        years = 3\n    else:\n        years = 5\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dogs = h_age / 7\n    return age_in_dogs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dog_years = 7 * h_age\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    result = []\n    for i in range(step):\n        result.append(S[i*n:(i+1)*n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S) // step\n    return [S[i:i+n] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to hold the resulting lists\n    result = []\n    # loop through the list until we reach the end\n    for i in range(0, len(S), step):\n        # create a new list with the current slice of the original list\n        sublist = S[i:i+step]\n        # add the sublist to the result list\n        result.append(sublist)\n    # return the resulting list of lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to hold the resulting lists\n    result = []\n    # Loop through each element of the input list\n    for i in range(0, len(S), step):\n        # Append the current slice of the input list to the result list\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the input list, splitting it every nth element\n    for i in range(0, len(S), step):\n        # Create a new list with the split element\n        new_list = S[i:i+step]\n        # Add the new list to the result list\n        result.append(new_list)\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Create a list to store the resulting lists\n    result = []\n    \n    # Iterate through the list and split it for every nth element\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    \n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the volume of the cube\n    volume = l**3\n    \n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = 2*l**2 + 6*l + 12\n    \n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    # calculate the area of the six faces of the cube\n    area_faces = (l ** 2) * 6\n    \n    # calculate the area of the sides of the cube\n    area_sides = l ** 2 * 12\n    \n    # calculate the total area of the cube\n    total_area = area_faces + area_sides\n    \n    # return the total area of the cube\n    return total_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        raise ValueError('n should be a positive integer.')\n\n    # initialize variables\n    sum = 0\n    i = 1\n\n    # loop through odd numbers up to n\n    while i <= n:\n        sum += i**2  # add the square of the current number to the sum\n        i += 2  # increment the counter by 2 since we only want odd numbers\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize a variable to store the sum of squares\n    sum_squares = 0\n\n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of each odd number to the sum of squares\n        sum_squares += i*i\n\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # calculate square of odd number\n        square = i**2\n        # add square to sum\n        sum += square\n    # return sum of squares\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n % 2 == 0:\n        n += 1  # add 1 to ensure odd number of squares\n\n    sum_of_squares = 0\n    for i in range(1, n, 2):\n        sum_of_squares += i ** 2\n\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(1, 2*n+1, 2):\n        sum += i*i\n        count += 1\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 1\n    while count <= n:\n        sum_of_squares += count ** 2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        return None\n    else:\n        # First row of stars\n        star_row = \"*\" * (2 * n - 1)\n        # Second row of stars\n        second_star_row = \"*\" * (2 * n - 1)\n        # Third row of stars\n        third_star_row = \"*\" * (2 * n - 2)\n        # Return the final row of stars\n        return f\"{star_row}\\n{second_star_row}\\n{third_star_row}\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variable to hold result\n    result = 0\n    \n    # loop through each digit of n and multiply it by its position (n-i)\n    for i in range(1, n+1):\n        result += n - i\n    \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # calculate the number of rows and columns needed\n    num_rows = 1\n    num_cols = 1\n    while num_rows <= n:\n        num_rows += 1\n        num_cols += 1\n\n    # print the stars\n    for row in range(1, num_rows + 1):\n        for col in range(1, num_cols + 1):\n            if (row <= n // num_cols) and (col <= n // num_rows):\n                print(\"*\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        print(\"n must be a positive integer.\")\n    elif n == 1:\n        print(\"*\")\n    else:\n        print(\"*\" * (n - 1) + \"*\")"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += i\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 0\n    count = 0\n    # Loop through the number of stars required\n    while count < n:\n        # Add a star to the number\n        num = num + 1\n        # Increment the count of stars\n        count = count + 1\n    # Return the number of stars required\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n\n    # Initialize the first two numbers\n    a = 1\n    b = 1\n\n    # Loop through the numbers until the nth number is reached\n    for i in range(2, n+1):\n\n        # Calculate the next number using the formula a + b\n        next_num = a + b\n\n        # Update a and b for the next iteration\n        a = b\n        b = next_num\n\n    # Return the nth number as the result\n    return a"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return \"*****\"\n    else:\n        return \" \" * (n - 1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 0:\n        return \"There is no 0th star number.\"\n    elif n == 1:\n        return \"There is only 1 star number: 2\"\n    elif n == 2:\n        return \"There are 2 star numbers: 2, 1\"\n    else:\n        # compute the previous two star numbers\n        prev_prev_num = n - 1\n        prev_num = n - 2\n        # compute the current star number\n        current_num = n * 2\n        # return the star number string\n        return f\"There are {n} star numbers: {prev_prev_num}, {prev_num}, {current_num}\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n\nk = input(\"Enter a character: \")\nprint(\"The ASCII value of\", k, \"is:\", ascii_value(k))"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its integer representation\n    k = ord(k)\n    # Return the ascii value\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # ASCII value of all characters from 33 to 126 (inclusive)\n    ascii_dict = {chr(i): i for i in range(33, 127)}\n    # Return the ascii value of the character k\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n        if count == len(arr) // 2:\n            break\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_indices = []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_indices.append(i)\n\n    return even_sum, even_indices"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):  \n        if arr[i] % 2 == 0:  \n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes in a list of numbers and returns the sum of the even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_count = 0\n    even_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            even_count += 1\n            even_index = i\n    \n    if even_count == 0:\n        print(\"No even numbers found.\")\n        return\n    \n    print(\"Sum of even numbers at even positions:\", sum)\n    print(\"Number of even numbers at even positions:\", even_count)\n    print(\"Index of the first even number at even positions:\", even_index)\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_evens = 0\n    for i in range(2, n+1):\n        sum_of_evens += i**5\n        if i % 2 == 0:\n            sum_of_evens -= i**5\n    return sum_of_evens"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    i = 2\n\n    while i <= n:\n        if i**5 % 2 == 0:\n            sum += i\n        i += 2\n\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer `n` and returns the sum of the first `n` even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers raised to the fifth power.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**5\n        i += 1\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for item in test_list:\n        rear = item[len(item)-1]\n        result_list.append(rear)\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[1] for tuple in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # iterate through the first tuple and subtract the corresponding elements of the second tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n\n    # Iterate over the elements of the tuples and perform the subtraction\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    # Create an empty list to store the result\n    result = []\n\n    # Iterate over the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return\n    \n    # Initialize a new tuple to store the result\n    result_tup = []\n    \n    # Iterate over the first tuple and subtract the corresponding element of the second tuple\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            print(f\"The {i+1}th element of the first tuple is {test_tup1[i]} and the {i+1}th element of the second tuple is {test_tup2[i]}.\")\n            print(f\"The result of subtracting the elements of the first tuple by the elements of the second tuple with the same index is {test_tup1[i] - test_tup2[i]}.\")"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return 0\n    \n    # Calculate the first two binomial coefficients\n    binomial_coeff_1 = 1\n    binomial_coeff_2 = 2\n    \n    # Calculate the sum of even index binomial coefficients\n    even_binomial_sum = 0\n    for i in range(2, n+1, 2):\n        even_binomial_sum += math.comb(n, i) * binomial_coeff_1 * binomial_coeff_2\n        binomial_coeff_2, binomial_coeff_1 = binomial_coeff_1, binomial_coeff_2 + binomial_coeff_1\n    \n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            coeff_sum += math.comb(n, i-1)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        raise ValueError('n must be a non-negative integer')\n    if n == 0:\n        return 0\n\n    # Use the formula for even binomial coefficients to calculate the sum\n    # of even index binomial coefficients\n    even_binomial_coeff_sum = 0\n    for i in range(2, n+1):\n        even_binomial_coeff_sum += math.factorial(2*i-1) // math.factorial(2*i-2)\n\n    return even_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients\n    sum_even_binomial_coeffs = 0\n    \n    # Loop through the even indices of the binomial coefficients\n    for i in range(0, n+1, 2):\n        # Compute the binomial coefficient for the current even index\n        coeff = math.comb(n, i)\n        \n        # If the current even index is even, add it to the sum\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += coeff\n    \n    # Return the sum of even index binomial coefficients\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even binomial coefficients to zero\n    even_sum = 0\n    \n    # Loop through all possible values of k from 0 to n\n    for k in range(n+1):\n        # Calculate the even index binomial coefficient\n        even_coeff = math.comb(n, k)\n        \n        # If the index is even, add its coefficient to the sum\n        if k % 2 == 0:\n            even_sum += even_coeff\n    \n    # Return the sum of even binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            result += math.comb(n, i)\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    # initialize sum to 0\n    total = 0\n    # loop through all numbers from 0 to n\n    for i in range(n+1):\n        # calculate the binomial coefficient of i and n-i using math.comb() function\n        coeff = math.comb(n, i)\n        # check if the coefficient is even\n        if i % 2 == 0:\n            total += coeff\n    # return the sum of even index binomial coefficients\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize sum to 0\n    coeff_sum = 0\n\n    # Iterate through all integers from 0 to n-1\n    for i in range(0, n+1):\n        # Calculate the even index binomial coefficient and add to the sum\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            coeff_sum += coeff\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize sum to zero\n    coeff_sum = 0\n\n    # Loop through odd indices of binomial coefficients\n    for i in range(1, n+1, 2):\n        # Calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        # Check if the coefficient is even\n        if coeff % 2 == 0:\n            # Add the even coefficient to the sum\n            coeff_sum += coeff\n\n    # Return the sum of even coefficients\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize a counter variable to keep track of the number of terms.\n    count = 0\n    # Initialize a variable to store the sum of even index binomial coefficients.\n    even_sum = 0\n    # Loop through each term of the binomial coefficient sum.\n    for i in range(2, n+1):\n        # Check if the current term is even.\n        if i % 2 == 0:\n            # If it is, add it to the sum.\n            even_sum += math.comb(n, i)\n            # Increment the counter.\n            count += 1\n    # Return the sum of even index binomial coefficients.\n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14*r**2*h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 3.14159 * r**2  # formula to find the area of a cylinder\n    volume = area * h  # formula to find the volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2 * h) # Formula for volume of a cylinder using formula of Pythagoras' theorem."
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = 3.14*r*r*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume using the formula V = pi*r^2*h\n    V = 3.1415926535 * (r**2) * (h)\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    \"\"\"\n    volume = (1/3) * 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if n is less than 1 or greater than 28\n    if n < 1 or n > 28:\n        return False\n    \n    # Calculate the sum of the first n odd numbers\n    decagonal_sum = 0\n    for i in range(1, n+1, 2):\n        decagonal_sum += i\n    \n    # Return the sum of the first n odd numbers\n    return decagonal_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    def decagonal_helper(n, a, b):\n        if n == 1:\n            return a\n        else:\n            return decagonal_helper(n-1, b, a+b)\n\n    return decagonal_helper(n, 1, 1)\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Check if n is a positive integer\n    if n <= 0: \n        return False\n\n    # Initialize variables\n    sum_of_squares = 0\n    decagonal_number = 1\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n\n        # Add the square of the current number to the sum of squares\n        sum_of_squares += i*i\n\n        # Update the decagonal number\n        decagonal_number += 2*i\n\n    # Check if the sum of squares is equal to the decagonal number\n    if sum_of_squares == decagonal_number: \n        return True\n    else: \n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = [1]\n    for i in range(2, n+1):\n        decagonal_numbers.append(3*i-1)\n    return decagonal_numbers[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Define the first decagonal number\n    first_decagonal = 1\n    # Define the number of rows in the pyramid\n    rows = int(n / 2)\n    # Define the starting number of the row\n    start_num = 1\n    # Define the sum of the squares of the numbers in each row\n    sum_squares = 0\n\n    # Iterate through each row and add the sum of squares of the numbers in the row to the sum\n    for i in range(rows):\n        # Iterate through each number in the row\n        for j in range(start_num, start_num + 2 * i + 1):\n            # Add the square of the number to the sum of squares\n            sum_squares += j ** 2\n        # Increment the starting number of the next row\n        start_num += 2 * i + 1\n\n    # Return the nth decagonal number\n    return first_decagonal + (n - 1) * (sum_squares + 2 * first_decagonal)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    decagonal_num = 0\n\n    for i in range(1, n+1):\n        decagonal_num = (i * (3 * i - 1)) // 2\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first decagonal number\n    decagonal_num = 1\n    # Loop through each row and column\n    for i in range(n):\n        # Loop through each column\n        for j in range(i+1):\n            # Add the product of the row and column to the current decagonal number\n            decagonal_num += i * (2*i-1)\n            # If the row is equal to the column, add the product of the row and column to the current decagonal number\n            if i == j:\n                decagonal_num += i * (2*i-1)\n    # Return the current decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"n must be a positive integer.\"\n\n    decagonal_num = 0\n    for i in range(n):\n        decagonal_num += (4*i**2) - (i**2) + 1\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # The number of squares required to reach the nth decagonal number\n    num_squares = 4 * n - 3\n    \n    # Check if the number of squares is a perfect square\n    if num_squares ** 0.5!= int(num_squares ** 0.5):\n        return False\n    \n    # Find the square root of the number of squares\n    square_root = int(num_squares ** 0.5)\n    \n    # Check if the square root is a perfect square\n    if square_root ** 2!= num_squares:\n        return False\n    \n    # The nth decagonal number is the sum of the squares of the squares\n    return 2 * (n - 1) + 4 * (square_root - 1) ** 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Using formula: 2n^2 - 1 = 0\n    # For n>=1, n^2 - 1 = 0\n    # For n>=2, 2n^2 - 1 = 0\n    # Therefore, n = \u221a(8(2n^2 - 1))\n    root_num = (8*(2*n*n - 1))**(1/2)\n    return int(root_num)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    \n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Check if the list is empty or not\n    if not test_list:\n        return True\n\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # If the length of the unique set is equal to the length of the original list, then all the elements are unique\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list of integers and returns True if all the elements in the list are unique, else False.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements of the list are unique and False otherwise.\n    \"\"\"\n    test_set = set(test_list)\n    return len(test_list) == len(test_set)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # iterate over each element in the list\n    for element in test_list:\n        # if the element is already in the set, it's not unique\n        if element in unique_set:\n            return False\n        # otherwise, add the element to the set\n        else:\n            unique_set.add(element)\n\n    # if we've iterated over the entire list and haven't found any duplicates, all elements are unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, and False otherwise.\n    '''\n    unique_list = set(test_list)\n    return len(test_list) == len(unique_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n\n    Args:\n    nums1 (list): The first list to be subtracted.\n    nums2 (list): The second list to be subtracted.\n\n    Returns:\n    list: The result of subtracting the two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(min(len(nums1), len(nums2))):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and subtracts the corresponding element-wise values and returns the result.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The lists must have the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length.\")\n        return\n    else:\n        return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n\n    # Initialize a new list to store the difference\n    result = []\n\n    # Loop through the lists and subtract the elements\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length.\")\n        return\n\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # initialize a dictionary to count the frequency of each digit\n    freq = {str(i): n.count(str(i)) for i in range(10)}\n    \n    # iterate over the digits in the integer\n    for digit in str(n):\n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if freq[digit] < digit:\n            return False\n    \n    # if the loop completes without returning False, then the frequency of each digit in the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # convert the integer to a string\n    s = str(n)\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    # loop through each digit in the string\n    for digit in s:\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, initialize its frequency to 1\n        else:\n            freq[digit] = 1\n    # loop through each digit in the string again\n    for digit in s:\n        # if the frequency of the digit in the dictionary is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n    # if no return statement was executed, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Create a dictionary to store the frequency of each digit\n    freq_dict = {}\n\n    # Loop through each character in the string and update the frequency count\n    for char in num_str:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Loop through the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in freq_dict.items():\n        if freq > digit:\n            return False\n\n    # If all digits have a frequency less than or equal to their value, return True\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for digit in str(n):\n        freq = str(n).count(digit)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself, else it returns False.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(len(freq)):\n        if freq[i] > 1:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = [0] * 10\n    for digit in str(n):\n        frequency[int(digit)] += 1\n    for i in range(10):\n        if frequency[i] > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    \n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # Check if the digit is already in the dictionary\n        if digit in freq:\n            # Increment the frequency count by 1\n            freq[digit] += 1\n        else:\n            # Add the digit to the dictionary with a frequency count of 1\n            freq[digit] = 1\n    \n    # Iterate through the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        # If the frequency is greater than the digit, return False\n        if freq[digit] > digit:\n            return False\n    \n    # If no digit has a frequency greater than the digit, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Check if the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    for digit in frequency:\n        if frequency[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Check if the integer is positive or negative\n    if n < 0:\n        return False\n\n    # Calculate the frequency of each digit\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if the list is empty\n    if len(lst) == 0:\n        return True\n    \n    # Check if the first element of the list is equal to the given element\n    if lst[0] == element:\n        # Check if all the remaining elements are equal to the given element\n        for i in range(1, len(lst)):\n            if lst[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    if all(i == element for i in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) > 1:\n        for item in list:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        for item in list[1:]:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[0] == element):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a([bB]){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        print('The pattern was found in the text.')\n    else:\n        print('The pattern was not found in the text.')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){1,2}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)(?:b{2,3}){1}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\w{2,3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize max_sum to the first element of the array\n    max_sum = a[0]\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through the array\n    for i in range(1, n):\n        # Add the current element to sum\n        sum += a[i]\n        # If sum is greater than max_sum, update max_sum\n        if sum > max_sum:\n            max_sum = sum\n        # If sum is less than 0, reset sum to 0\n        elif sum < 0:\n            sum = 0\n    # Iterate through the array again and repeat the last k times\n    for i in range(k-1, 0, -1):\n        sum = 0\n        # Repeat the last k times\n        for j in range(n):\n            if j < i:\n                sum += a[j]\n            else:\n                sum += a[j]\n                # If the sum is greater than max_sum, update max_sum\n                if sum > max_sum:\n                    max_sum = sum\n        # Reset sum to the last element of the modified array\n        sum = a[-1]\n    # Return the largest sum of a contiguous array in the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the largest sum and start index\n    max_sum = float('-inf')\n    start_index = 0\n\n    # Repeat the array k times to form the modified array\n    modified_array = a * k\n    print(\"Modified array:\", modified_array)\n\n    # Traverse the modified array and find the largest sum of a contiguous subarray\n    for i in range(k, n):\n        current_sum = sum(modified_array[start_index:i+1])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n\n    # Return the maximum sum of the original array and the modified array\n    return max_sum, modified_array[start_index:]"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_subarray = []\n    for i in range(k):\n        a.extend(a)\n    for i in range(k, n):\n        current_sum = a[i]\n        for j in range(i-k+1):\n            current_sum -= a[j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_subarray = a[j:i+1]\n    return max_sum, max_subarray"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    if k > n: \n        return 0\n    \n    # Create a new list with k copies of the original array\n    arr = a * k\n    \n    # Initialize the maximum sum to the minimum value possible\n    max_sum = float('-inf')\n    \n    # Initialize two pointers, i and j, to 0\n    i, j = 0, 0\n    \n    # Keep track of the maximum sum ending at index i and index j\n    max_ending_at_i = float('-inf')\n    max_ending_at_j = float('-inf')\n    \n    # Traverse through the array, starting from index 0\n    while j < n:\n        # Update the maximum sum ending at index j\n        max_ending_at_j = max(max_ending_at_j + arr[j], arr[j])\n        # Update the maximum sum ending at index i\n        max_ending_at_i = max(max_ending_at_i + arr[i], max_ending_at_j)\n        # Update the maximum sum found so far\n        max_sum = max(max_sum, max_ending_at_i)\n        # Move the pointers one position to the right\n        j += 1\n        # Move the pointer i to the left if the sum at index i is greater than the sum at index i+1\n        while j < n and arr[i] <= arr[i+1]:\n            i += 1\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = sum(a[:n])\n\n    # loop through all possible indices and values of k\n    for i in range(n, n + k):\n        # add the current value to the sum\n        current_sum += a[i]\n\n        # if the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum becomes negative, reset the current sum and move to the next index\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def repeat_array(arr, k):\n        return [arr[0]] * k + arr + [arr[-1]] * k\n    \n    def modified_array(arr, k):\n        return repeat_array(arr, k) + arr[:-k]\n    \n    modified_arr = modified_array(a, k)\n    max_sum = max(modified_arr)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # create a modified array with k copies of the original array\n    modified_array = [0] * k\n    for i in range(k):\n        modified_array[i] = a\n\n    # calculate the sum of the modified array\n    modified_array_sum = sum(modified_array)\n\n    # initialize variables for the maximum subarray sum and its start and end indices\n    max_subarray_sum = modified_array_sum\n    start_index = 0\n    end_index = 0\n\n    # loop through the modified array and find the maximum subarray sum\n    for i in range(1, n):\n        # update the start index to the next element after the current element\n        start_index = i - k + 1\n\n        # update the end index to the end of the array\n        end_index = i\n\n        # calculate the sum of the current subarray\n        subarray_sum = sum(modified_array[start_index:end_index+1])\n\n        # update the maximum subarray sum if necessary\n        if subarray_sum > max_subarray_sum:\n            max_subarray_sum = subarray_sum\n            max_subarray_start_index = start_index\n            max_subarray_end_index = end_index\n\n    # return the maximum subarray sum and its start and end indices\n    return max_subarray_sum, max_subarray_start_index, max_subarray_end_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Check if the array is empty\n    if n == 0:\n        return 0\n\n    # Initialize the maximum sum to the first element of the array\n    max_sum = a[0]\n\n    # Loop through the array and calculate the sum of the subarrays\n    for i in range(1, n):\n        # Calculate the sum of the subarray ending at index i\n        curr_sum = a[i]\n        for j in range(1, k+1):\n            curr_sum += a[i+j]\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new list of the given array repeated k times\n    a_repeated = a * k\n\n    # initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # iterate through the new list and calculate the current sum\n    for num in a_repeated:\n        current_sum += num\n\n        # if the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a = a * k # repeat the given array k times\n    a_sum = sum(a) # calculate the sum of the modified array\n    max_sum = float('-inf') # initialize the maximum sum to negative infinity\n    current_sum = 0 # initialize the current sum to zero\n    \n    for i in range(n): # iterate over the modified array\n        current_sum += a[i] # add the next element to the current sum\n        max_sum = max(max_sum, current_sum) # update the maximum sum if necessary\n        \n        if current_sum < 0: # if the current sum becomes negative, reset it to zero\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i ** 2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    sum = 0\n    i = 2\n    while count < n:\n        if i % 2 == 0:\n            sum += i ** 2\n            count += 1\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0  \n    for i in range(2, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    # Initializing the sum variable to zero\n    sum = 0\n    # Iterating through the even natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        # Calculating the square of the even natural number\n        square = i**2\n        # Adding the square to the sum variable\n        sum += square\n    # Returning the sum of squares of even natural numbers from 2 to n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        square = i*i\n        sum_squares += square\n        count += 1\n        if count == n:\n            break\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    count = 0\n    even_sum = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            even_sum += count ** 2\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize the sum variable\n    sum_of_squares = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the even natural number to the sum\n        sum_of_squares += i**2\n    \n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        length = len(sublist)\n        if length not in max_lengths:\n            max_lengths.append(length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length of each list in list1\n    max_lengths = []\n    \n    # Iterate through each sublist in list1\n    for sublist in list1:\n        # Find the length of the current sublist\n        length = len(sublist)\n        \n        # If the length of the current sublist is greater than the current maximum length, update max_lengths\n        if length > max_lengths[-1]:\n            max_lengths.append(length)\n    \n    # Return the maximum length of each sublist in list1\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum length list\n    max_length_list = []\n    # loop through each element in the input list\n    for element in list1:\n        # if the length of the current element is greater than the length of the current maximum length list, update the maximum length list\n        if len(element) > len(max_length_list):\n            max_length_list = element\n    # return the maximum length list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > len(max_lengths) or len(lst) == len(max_lengths):\n            max_lengths = lst\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths, default=0):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(lst):\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize an empty list to store the maximum length lists\n    max_lengths = []\n    \n    # Iterate through each list in the input list\n    for lst in list1:\n        # Initialize a variable to store the current length of the list\n        current_length = 0\n        \n        # Iterate through each element in the list\n        for elem in lst:\n            # Add 1 to the current length each time an element is added\n            current_length += 1\n            \n            # If the current length is greater than the maximum length, update the maximum length\n            if current_length > max_length:\n                max_length = current_length\n                \n        # Append the current maximum length to the list of maximum lengths\n        max_lengths.append(max_length)\n    \n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # find the length of the longest list in the list\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    # return the list of maximum length\n    return [i for j in list1 for i in j]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        sublist_lengths = [len(elem) for elem in sublist]\n        max_length_sublist = max(sublist_lengths)\n        max_lengths.append(max_length_sublist)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the number of ways to paint the fence\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Fill the first row and column with 1\n    for i in range(1, n+1):\n        dp[i][1] = 1\n    \n    # Fill the rest of the rows and columns using recursive formula\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            \n    # Return the last element of the last row (i.e., the number of ways to paint the fence)\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize the number of ways to 1\n    num_ways = 1\n\n    # For each color\n    for i in range(1, k+1):\n\n        # If there is at most 2 adjacent posts with the same color, then multiply the number of ways of painting the fence for the remaining posts\n        if i <= n:\n            num_ways *= (i*(i-1)) // 2\n\n    return num_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0] * (k + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n    for j in range(2, k + 1):\n        dp[1][j] = 1\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2] + dp[i - 1][j - 3]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    def backtrack(start, end):\n        if start > end:\n            return 1\n        \n        if board[start] == board[end]:\n            return backtrack(start + 1, end - 1)\n        \n        color = board[start]\n        count = 0\n        for i in range(start + 1, end):\n            if board[i] == color:\n                count += backtrack(i + 1, end)\n        \n        return count\n\n    board = ['' for _ in range(n)]\n    count = backtrack(0, n - 1)\n\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    def helper(n, k, colors, current_color, count):\n        if count > 2 * k:\n            return\n        \n        if current_color == k:\n            count += 1\n            if count > 2 * k:\n                return\n            colors.append(current_color)\n            helper(n, k, colors, current_color + 1, count)\n            colors.pop()\n            helper(n, k, colors, current_color + 1, count)\n        \n        if current_color < k:\n            helper(n, k, colors, current_color + 1, count)\n            \n    colors = []\n    helper(n, k, colors, 0, 0)\n    return len(colors)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if k == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if k == 1:\n            return 1\n        else:\n            return 2\n\n    fence = [0] * k\n\n    fence[0] = 1\n    fence[1] = 1\n\n    for i in range(2, n):\n        fence[i % k] += fence[(i - 1) % k]\n\n    return fence[-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the count variable\n    count = 0\n    \n    # Check for special cases of n=1, n=2, and n=3\n    if n == 1:\n        count = 1\n    elif n == 2:\n        count = 2\n    elif n == 3:\n        count = 4\n    \n    # If n is greater than 3, use dynamic programming to calculate the count\n    else:\n        # Initialize a 2D array to store the count of ways for different combinations of adjacent posts with different colors\n        dp = [[0] * (k+1) for i in range(n+1)]\n        \n        # Initialize the first row and column\n        for i in range(1, n+1):\n            dp[i][1] = 1\n        \n        # Fill in the rest of the array using dynamic programming\n        for i in range(2, n+1):\n            for j in range(1, k+1):\n                if i == 2:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        \n        # Add the last row and column to get the total count\n        count = dp[n][k]\n    \n    # Return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i <= j:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k <= 2:\n        return 1\n    \n    memo = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == 1:\n                memo[i][j] = 1\n            elif j == 1:\n                memo[i][j] = 1\n            elif i == 2 and j == 1:\n                memo[i][j] = 1\n            else:\n                memo[i][j] = (memo[i - 1][j - 1] + memo[i - 2][j]) % 1000000007\n    \n    return memo[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # initializing the count variable to 0\n    count = 0\n\n    # initializing the array to keep track of the colors used in each post\n    colors = [0] * n\n\n    # iterating through the colors and painting the fence\n    for i in range(k):\n        count += count_no_of_ways(n-1, k-1)\n\n    # iterating through the colors and checking if the colors are different for adjacent posts\n    for i in range(n):\n        if colors[i] == colors[i+1]:\n            count -= 1\n\n    # returning the count\n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m   # // is the integer division operator in Python\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n//m\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if quotient * m == n:\n        return quotient\n    else:\n        return quotient + 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Cannot divide by zero\"\n    else:\n        quotient = n // m\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n // m\n    return result"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2  # half of the base\n    c = math.sqrt(s**2 - w**2)  # distance from hypotenuse to the right triangle\n    third_side = s * math.sin(math.radians(60)) + c  # find the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_1 = w**2 + h**2\n    side_2 = math.sqrt((w**2)*(h**2))\n    side_3 = math.sqrt((w**2)*(h**2)) + (w*h)\n    print(\"The third side of the right angled triangle is:\", side_3)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w+h)**0.5\n    return w*math.sqrt(3)/2"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the length of the two sides of a right angled triangle\n    and returns the length of the third side.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(w**2 + (h/2)**2)\n    c = math.sqrt(h**2 + (w/2)**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_a = math.sqrt(w ** 2 + h ** 2)\n    side_c = w / 2\n    side_b = (side_a ** 2 - side_c ** 2) ** 0.5\n\n    return side_b"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Find the maximum value in the list using a loop\n    max_val = listval[0]\n    for num in listval:\n        if num > max_val:\n            max_val = num\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Find the maximum value in the list\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function takes a list as input and returns the maximum value in the list.\n    \"\"\"\n    max_val = listval[0] # initialize max_val with first element of the list\n    for i in range(1, len(listval)): # iterate through the rest of the list\n        if listval[i] > max_val: # if the current element is greater than max_val\n            max_val = listval[i] # update max_val with the current element\n    return max_val # return max_val as the result"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value to None\n    max_val = None\n\n    # iterate through the list and check if current value is greater than max value\n    for value in listval:\n        if max_val is None or value > max_val:\n            max_val = value\n\n    # return the max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize variables for maximum value and current value\n    max_val = float('-inf')\n    curr_val = listval[0]\n\n    # Iterate over each value in the list\n    for i in range(1, len(listval)):\n        # If the current value is greater than the maximum value, update the maximum value\n        if listval[i] > max_val:\n            max_val = listval[i]\n            # If the current value is equal to the maximum value, compare it with the next value\n            elif listval[i] == max_val:\n                if listval[i] < curr_val:\n                    curr_val = listval[i]\n\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    elif isinstance(listval[0], int):\n        return max(listval)\n    elif isinstance(listval[0], float):\n        return max(listval)\n    elif isinstance(listval[0], str):\n        return max(listval)\n    else:\n        raise TypeError(\"Invalid data type\")"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum_of_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_of_div += i\n    return sum_of_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n\n    # Sort the array\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                inversions += n-j-1\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion count is the number of pairs of elements in the array that are in the wrong order.\n    '''\n    # Sort the array in ascending order\n    arr = sorted(arr)\n    # Initialize the inversion count variable\n    inv_count = 0\n    # Traverse the sorted array\n    for i in range(len(arr)):\n        # Compare adjacent elements and count the inversions\n        if i > 0 and arr[i] < arr[i-1]:\n            inv_count += i - 1\n        if i < len(arr)-1 and arr[i] > arr[i+1]:\n            inv_count += len(arr) - i - 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n\n    # Function to count inversions\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge(left, right):\n        i = j = 0\n        inv_count = 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    # Sort the array\n    sorted_arr = merge_sort(arr)\n\n    # Count inversions\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the number of inversions in it.\n    \"\"\"\n    # Sort the array using merge sort algorithm\n    def merge_sort(arr): \n        if len(arr) > 1: \n            mid = len(arr) // 2 \n            left_half = arr[:mid] \n            right_half = arr[mid:] \n\n            # Sort the left and right halves recursively \n            merge_sort(left_half) \n            merge_sort(right_half) \n\n            # Merge the sorted left and right halves back into arr \n            i = j = k = 0\n            while i < len(left_half) and j < len(right_half): \n                if left_half[i] <= right_half[j]: \n                    arr[k] = left_half[i] \n                    i += 1 \n                else: \n                    arr[k] = right_half[j] \n                    j += 1 \n                k += 1 \n\n            while i < len(left_half): \n                arr[k] = left_half[i] \n                i += 1 \n                k += 1 \n\n            while j < len(right_half): \n                arr[k] = right_half[j] \n                j += 1 \n                k += 1 \n\n    merge_sort(arr)\n\n    # Count the number of inversions in the sorted array using two pointers\n    left, right = 0, len(arr) - 1\n    inv_count = 0\n    while left < right:\n        if arr[left] > arr[right]:\n            inv_count += right - left\n            left += 1\n        else:\n            right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Iterate through the array and count inversions\n    for i in range(1, n):\n        left, right = 0, i\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] > arr[i]:\n                inv_count += right - mid\n                right = mid\n            else:\n                left = mid + 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # One-based indexing\n    for i in range(1, n):\n        # Start from the second element\n        j = i\n        while j > 0 and arr[j] <= arr[j-1]:\n            # Move the pointer to the left until the current element is smaller than the previous element\n            j -= 1\n        # Move the pointer to the right until the current element is larger than the previous element\n        while j < n and arr[j] >= arr[j-1]:\n            # Move the pointer to the right until the current element is larger than the previous element\n            j += 1\n        # Swap the current element with the element that is just to its right\n        arr[j-1], arr[i-1] = arr[i-1], arr[j-1]\n    # Count the number of inversions\n    inv_count = 0\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            inv_count += (n-i)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions present in the array.\n    Inversions are considered as swapping two elements of the array which results in a larger sorted sub-array.\n    The function uses the merge sort algorithm to sort the array and then calculates the number of inversions in the sorted array.\n    '''\n\n    # Helper function to merge two sorted sub-arrays\n    def merge(arr, l, m, r):\n        n1 = m - l + 1\n        n2 = r - m\n\n        L = [0] * n1\n        R = [0] * n2\n\n        for i in range(0, n1):\n            L[i] = arr[l + i]\n\n        for j in range(0, n2):\n            R[j] = arr[m + 1 + j]\n\n        i = 0\n        j = 0\n        k = l\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    # Helper function to sort the array using merge sort algorithm\n    def merge_sort(arr, l, r):\n        if l < r:\n            m = l + (r - l) // 2\n            merge_sort(arr, l, m)\n            merge_sort(arr, m + 1, r)\n            merge(arr, l, m, r)\n\n    # Sort the array using merge sort\n    merge_sort(arr, 0, len(arr) - 1)\n\n    # Count the number of inversions in the sorted array\n    inv_count = 0\n    n = len(arr)\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inv_count += n - i - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Calculate the count of inversions using the counting sort algorithm \n    count = [0] * (n+1) \n    for i in range(n): \n        count[arr[i]] += 1 \n    inv_count = 0 \n    for i in range(1, n+1): \n        inv_count += count[i] - count[i-1] \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function counts the number of inversions in an array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Divide the array into two halves\n    mid = n // 2\n    left_inv_count = get_Inv_Count(arr[:mid])\n    right_inv_count = get_Inv_Count(arr[mid:])\n    \n    # Calculate the inversion count using merge sort\n    inv_count = merge_sort(arr, mid, n - 1)\n    \n    # Combine the inversion counts\n    return left_inv_count + right_inv_count + inv_count\n\n\ndef merge_sort(arr, low, high):\n    '''\n    This function sorts the array using merge sort.\n    '''\n    if low < high:\n        # Divide the array into two halves\n        mid = (low + high) // 2\n        \n        # Sort the left half\n        merge_sort(arr, low, mid)\n        \n        # Sort the right half\n        merge_sort(arr, mid + 1, high)\n        \n        # Merge the sorted halves\n        i = low\n        j = mid + 1\n        inv_count = 0\n        k = low\n        \n        while i <= mid and j <= high:\n            if arr[i] <= arr[j]:\n                arr[k] = arr[i]\n                i += 1\n            else:\n                arr[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        \n        while i <= mid:\n            arr[k] = arr[i]\n            i += 1\n            k += 1\n        \n        while j <= high:\n            arr[k] = arr[j]\n            j += 1\n            k += 1\n            \n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a flattened version of the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if type(element) == list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the maximum aggregate for each customer\n    max_agg = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for cust, amt in stdata:\n        # Calculate the maximum aggregate for the current customer\n        max_agg[cust] = max(max_agg[cust], amt)\n    \n    # Return the maximum aggregate for each customer\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for t in stdata:\n        for i, j in t:\n            max_dict[i] = max(max_dict[i], j)\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_aggs = defaultdict(int)\n    \n    # Iterate over the list of transactions\n    for tid, agg in stdata:\n        # Add the aggregate to the max_aggs dictionary\n        max_aggs[tid] += agg\n    \n    # Find the maximum aggregate across all transactions\n    max_agg = max(max_aggs.values())\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for i in item:\n            max_dict[i] += item[i]\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    for item in stdata:\n        for i in range(len(item)):\n            max_sum[i] = max(max_sum[i], item[i])\n    max_aggr = 0\n    for i in range(len(max_sum)):\n        max_aggr += max_sum[i]\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the number of units in each store\n    store_dict = defaultdict(int)\n\n    # Iterate over the list of tuples and update the store_dict\n    for item, unit in stdata:\n        store_dict[item] += unit\n\n    # Find the maximum aggregate from the store_dict\n    max_agg = max(store_dict.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for sale in stdata:\n        max_agg[sale[1]] += sale[0]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Define a dictionary to store the maximum aggregate for each state\n    max_agg_dict = defaultdict(lambda: 0)\n\n    # Iterate over the list of tuples\n    for state, amount in stdata:\n        # Update the maximum aggregate for the current state\n        max_agg_dict[state] = max(max_agg_dict[state], amount)\n\n    # Iterate over the dictionary and find the maximum aggregate\n    max_agg = 0\n    for state, agg in max_agg_dict.items():\n        max_agg = max(max_agg, agg)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the frequency of each product\n    freq_dict = defaultdict(int)\n    for item in stdata:\n        freq_dict[item[1]] += 1\n\n    # Calculate the maximum frequency of each product\n    max_freq = max(freq_dict.values())\n\n    # Calculate the maximum aggregate from the list of tuples\n    max_agg = 0\n    for item in stdata:\n        if freq_dict[item[1]] == max_freq:\n            max_agg += item[0]\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n\n    # Create a defaultdict to store the total aggregate for each customer\n    customer_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Extract the customer and the total amount for the transaction\n        customer = item[0]\n        amount = item[1]\n\n        # Update the total aggregate for the customer\n        customer_agg[customer] += amount\n\n    # Initialize the maximum aggregate with the smallest possible integer\n    max_agg = float('-inf')\n\n    # Iterate through the customer_agg dictionary\n    for total in customer_agg.values():\n        # Check if the current total is greater than the current maximum\n        if total > max_agg:\n            max_agg = total\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sequence = bin(i)[2:].zfill(n)\n        if int(sequence[:n]) == int(sequence[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum_a = 0\n        sum_b = 0\n        for j in range(n):\n            if i & (1<<j):\n                sum_a += 1\n            else:\n                sum_b += 1\n        if sum_a == sum_b:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n+1)):\n        first_n_bits = bin(i)[2:n+2]\n        last_n_bits = bin(i)[-n:]\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2 ** n):\n        sum_first = 0\n        sum_last = 0\n        for j in range(n):\n            if i & (1 << j):\n                sum_first += 1\n            else:\n                sum_last += 1\n        if sum_first == sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bit_sum = 0\n        for j in range(n):\n            bit_sum += i % 2\n            i //= 2\n        if bit_sum == (1 << n) - 1:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        first_sum = sum([int(digit) for digit in bin(i)[2:].zfill(n)])\n        last_sum = sum([int(digit) for digit in bin(i)[-n:].zfill(n)])\n        if first_sum == last_sum:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        if i == sum(int(x) for x in bin(i)[2:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        sum_first_n = 0\n        sum_last_n = 0\n        for j in range(n):\n            sum_first_n += (i >> j) & 1\n            sum_last_n += (i >> (n-1-j)) & 1\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1)):\n        s = sum(int(i[j]) for j in range(n))\n        if i & (1 << (n-1)):\n            s += sum(int(i[j]) for j in range(n))\n        count += 1\n    return count\n\nprint(count_binary_seq(5)) # Output: 168"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        first_bits = i // (2**(n-1))\n        last_bits = i % (2**(n-1))\n        if first_bits == last_bits:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize the depth to 1\n    depth = 1\n    # Recursively iterate through the dictionary, incrementing the depth for each key\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n    # Return the depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = dict_depth(v) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # If the dictionary is empty, return 0\n    if not d:\n        return 0\n\n    # Initialize the depth to 0\n    depth = 0\n\n    # Recursively call the function for each key-value pair in the dictionary\n    for key, value in d.items():\n        # If the value is a dictionary, recursively call the function on it\n        if isinstance(value, dict):\n            new_depth = dict_depth(value)\n            if new_depth > depth:\n                depth = new_depth\n        # If the value is a list, recursively call the function on each element in the list\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    new_depth = dict_depth(item)\n                    if new_depth > depth:\n                        depth = new_depth\n\n    # Return the final depth\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges of rotations and the index to find the element at after rotations.\n    It returns the element at the given index after rotations.\n    '''\n\n    # Check if the index is valid\n    if index < 0 or index >= len(arr):\n        return None\n\n    # Calculate the index after the rotations\n    rot_index = index + rotations\n\n    # Calculate the range of the rotations\n    rot_range = ranges[index]\n\n    # Calculate the element at the index after rotations\n    if rot_index >= len(arr):\n        return arr[rot_index - len(arr)]\n    else:\n        return arr[rot_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize a list to store the elements in the final array\n    final_arr = []\n\n    # Initialize the current index to the first element in the original array\n    current_index = 0\n\n    # Iterate through the rotations\n    for i in range(rotations):\n        # Add the current element to the final array\n        final_arr.append(arr[current_index])\n\n        # Update the current index based on the rotation range\n        current_index = (current_index + ranges[i]) % len(arr)\n\n    # Add the last element to the final array\n    final_arr.append(arr[current_index])\n\n    # Return the element at the given index in the final array\n    return final_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # find the element at the given index after rotations\n    element = arr[index]\n    # calculate the index of the element after rotations\n    rotated_index = index + rotations\n    # if the rotated_index is out of bounds, wrap around\n    if rotated_index >= len(arr):\n        rotated_index = rotated_index % len(arr)\n    # find the element at the rotated index\n    rotated_element = arr[rotated_index]\n    # find the range of the rotated element\n    range_start = ranges[rotated_element]\n    range_end = ranges[rotated_element+1] - 1\n    # find the element in the range\n    for i in range(range_start, range_end+1):\n        if arr[i] == element:\n            return i"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a Python function to find an element at a given index after a given number of rotations.\n    \"\"\"\n    # Calculate the number of elements to skip before finding the element at the given index\n    skip = sum(range(1, len(ranges) + 1))\n\n    # Calculate the number of elements to skip after rotating the array\n    after_rot = rotations * (len(ranges) - 1)\n\n    # Calculate the final index of the element we want to find\n    final_index = (index - skip + after_rot) % len(arr)\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the range of values for the current element\n    current_range = ranges[index]\n\n    # Apply rotations to the current range\n    for _ in range(rotations):\n        # Find the midpoint of the current range\n        midpoint = (current_range[0] + current_range[1]) // 2\n\n        # Swap the midpoint and the end of the range\n        current_range = (current_range[0], midpoint) if midpoint < current_range[1] else (midpoint, current_range[1])\n\n    # Calculate the final index of the element after rotations\n    final_index = index + rotations\n\n    # Find the element at the final index\n    result = arr[final_index]\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # Calculate the cumulative sum of rotations for each range\n    cumulative_sum = [0]\n    for i in range(1,len(ranges)+1):\n        cumulative_sum.append(cumulative_sum[-1]+ranges[i-1])\n    \n    # Calculate the final index for each range\n    final_index = [0]\n    for i in range(len(ranges)):\n        final_index.append(cumulative_sum[i]+rotations[i]-1)\n    \n    # Find the element at the given index\n    element = arr[final_index[index-1]]\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of rotation ranges and a number of rotations, and returns the element at the given index after rotating the array.\n    '''\n    # initialize the element to be returned to its original value\n    result = arr[index]\n    # rotate the array by the given number of rotations\n    for i in range(rotations):\n        # find the range index of the current rotation\n        range_index = (index + i) % len(ranges)\n        # find the range of the current rotation\n        range_start, range_end = ranges[range_index]\n        # find the element at the current index in the range\n        current_element = arr[range_start:range_end]\n        # rotate the current element by the given number of rotations\n        for j in range(i):\n            temp = current_element[0]\n            for k in range(len(current_element) - 1):\n                current_element[k] = current_element[k+1]\n            current_element[-1] = temp\n        # update the element at the current index with the rotated element\n        arr[range_start:range_end] = current_element\n    # return the rotated element\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Find the number of rotations required to reach the given index\n    for i in range(rotations):\n        n = index\n        for j in range(len(ranges)):\n            n -= ranges[j]\n            if n < 0:\n                n += len(ranges[j])\n        index = n\n    \n    # Find the element at the final index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    \n    for i in range(len(ranges)) :\n        # Calculate the rotation index\n        rotation_index = (index + rotations[i]) % len(ranges[i])\n        \n        # If the rotation index is within the range of the current range\n        if rotation_index >= len(ranges[i]) - ranges[i][index] :\n            \n            # Calculate the actual index after the rotation\n            actual_index = rotation_index - len(ranges[i]) + index\n            \n            # If the actual index is within the range of the current range\n            if actual_index >= 0 and actual_index < len(ranges[i]) :\n                \n                # Return the element at the actual index\n                return arr[actual_index]\n    \n    # If the element is not found after rotating\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the element at the given index\n    element = arr[index]\n\n    # Perform the required rotations\n    for i in range(rotations):\n        # Calculate the new index after the rotation\n        new_index = (index + i) % len(arr)\n\n        # Find the element at the new index\n        new_element = arr[new_index]\n\n        # Swap the elements\n        arr[index], arr[new_index] = arr[new_index], arr[index]\n\n    # Find the element at the final index\n    final_index = (index + rotations) % len(arr)\n    final_element = arr[final_index]\n\n    # Return the final element\n    return final_element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'^p\\w+'\n\n    # Find all words that match the pattern using the re.findall() function\n    matched_words = re.findall(pattern, words)\n\n    # Return the first two words that match the pattern\n    if len(matched_words) >= 2:\n        return matched_words[:2]\n    else:\n        return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return \"No two words starting with 'p' in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    pattern = re.compile(pattern)\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    match = re.search(pattern, words)\n    if match:\n        return match.group(), match.group()[2:]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    match = pattern.search(words)\n\n    if match:\n        return [match.group(), words.split()[match.start() - 1]]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    match = re.search(pattern, words)\n    if match:\n        words_list = words.split()\n        return words_list[words_list.index(match.group())+1:words_list.index(match.group())+3]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    words = filter(lambda x: re.match(pattern, x), words)\n    if len(words) > 1:\n        return list(words)[0], list(words)[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    result = []\n    for word in words:\n        match = pattern.search(word)\n        if match:\n            result.append(word)\n    if len(result) < 2:\n        return None\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = pattern.findall(words)\n\n    if not matches:\n        return \"No words starting with 'p' were found.\"\n    elif len(matches) == 1:\n        return \"One word starting with 'p' was found: {}\".format(matches[0])\n    else:\n        return \"Two words starting with 'p' were found: {} and {}\".format(matches[0], matches[1])"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i], words[i+1]\n    return None, None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n\n    if index == k:\n        return a[k]\n\n    # Initialize the result and the maximum sum found so far\n    result = 0\n    max_sum = float('-inf')\n\n    # Traverse the array from index to n-1\n    for i in range(index, n):\n        # If the current element is greater than or equal to k, add the current element to the result and check if it's greater than the maximum sum found so far\n        if a[i] >= k:\n            result += a[i]\n            if result > max_sum:\n                max_sum = result\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes a list a and its size n, the index i where the maximum sum of increasing subsequence should be found, and the kth element after i. It returns the maximum sum of increasing subsequence from prefix until ith index and also including the kth element.\n    \"\"\"\n    # Check if k is greater than or equal to i\n    if k < index:\n        return 0\n\n    # Initialize variables\n    prefix_sum = [0] * n\n    max_sum = 0\n\n    # Calculate prefix sum array\n    for i in range(1, n):\n        prefix_sum[i] = a[i] + prefix_sum[i-1]\n\n    # Initialize dp array\n    dp = [0] * (n-1)\n\n    # Calculate dp array\n    for i in range(1, n-1):\n        # Find the maximum value of dp[j] where j < i\n        max_val = dp[i-1]\n\n        # If the next element is greater than k, then update max_val\n        if a[i] >= k:\n            max_val = max(max_val, prefix_sum[i] - prefix_sum[i-1])\n\n        # Update dp[i]\n        dp[i] = max_val + a[i]\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including the kth element\n    return dp[index-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize an array to store the sum of increasing subsequences for each index\n    dp = [0] * (n + 1)\n    # Initialize the sum of increasing subsequences from prefix to index as 0\n    dp[index] = 0\n    \n    # Loop through all indexes from 0 to n-1\n    for i in range(index):\n        # If the given kth element is after the current index, update the sum of increasing subsequences from prefix to current index\n        if k > i:\n            dp[i] = dp[i] + a[i]\n        # If the given kth element is not after the current index, update the sum of increasing subsequences from prefix to current index as the max of dp[i] + a[i] and the sum of increasing subsequences from prefix to index - 1\n        else:\n            dp[i] = max(dp[i] + a[i], dp[i - 1])\n    \n    # Return the maximum sum of increasing subsequence from prefix to index k\n    return dp[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize a list to store the maximum sum for each prefix\n    prefix_max = [0] * (n + 1)\n    \n    # Initialize a list to store the maximum sum for each prefix and its corresponding index\n    prefix_max_index = [(0, -1)] * (n + 1)\n    \n    # Initialize the maximum sum for the prefix 0 as 0\n    prefix_max[0] = 0\n    \n    # Initialize the maximum sum for the prefix 0 as -1 and its corresponding index as -1\n    prefix_max_index[0] = (0, -1)\n    \n    # Traverse through the array from prefix 1 to prefix n\n    for i in range(1, n + 1):\n        # If the prefix i is greater than k, add its value and its index to the list of maximum sum and index for each prefix\n        if a[i - 1] <= a[k - 1]:\n            prefix_max[i] = prefix_max[i - 1] + a[i - 1]\n            prefix_max_index[i] = (prefix_max[i], i - 1)\n        else:\n            prefix_max[i] = prefix_max[i - 1]\n            prefix_max_index[i] = prefix_max_index[i - 1]\n    \n    # Initialize a list to store the maximum sum of increasing subsequence and its index\n    max_sum = [0] * (n + 1)\n    max_sum_index = [-1] * (n + 1)\n    \n    # Traverse through the array from index to n\n    for i in range(index, n + 1):\n        # If the sum of the current prefix and the given kth element is greater than or equal to the maximum sum of increasing subsequence till now, update the maximum sum and its index\n        if prefix_max[i] + a[i - 1] >= prefix_max[max_sum_index[index]] + a[i - 1]:\n            max_sum[i] = prefix_max[i] + a[i - 1]\n            max_sum_index[i] = prefix_max_index[i][1]\n        # Otherwise, update the maximum sum and its index as the maximum sum of increasing subsequence till now and the current index\n        else:\n            max_sum[i] = prefix_max[max_sum_index[index]] + a[i - 1]\n            max_sum_index[i] = index\n    \n    # Return the maximum sum of increasing subsequence and its index\n    return max_sum, max_sum_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    if index == 0:\n        return 0\n    \n    # Initialize the maximum sum and the maximum sum ending at index 0\n    max_sum = float('-inf')\n    max_sum_ending_at_index_0 = float('-inf')\n    \n    # Initialize the current sum and the sum ending at index 0\n    current_sum = 0\n    current_sum_ending_at_index_0 = 0\n    \n    # Initialize the current index\n    current_index = 0\n    \n    # Iterate through all the elements from index 0 to index i\n    for i in range(1, index + 1):\n        # Calculate the sum ending at index i\n        if a[i - 1] <= a[k - 1]:\n            current_sum_ending_at_index_0 += a[i - 1]\n            current_sum += a[i - 1]\n        else:\n            current_sum_ending_at_index_0 = a[i - 1]\n            current_sum = a[i - 1]\n        \n        # Update the maximum sum and the maximum sum ending at index 0 if the current sum ending at index i is greater\n        if current_sum_ending_at_index_0 > max_sum_ending_at_index_0:\n            max_sum_ending_at_index_0 = current_sum_ending_at_index_0\n            max_sum = current_sum\n        \n        # Update the current index\n        current_index = i\n    \n    # Return the maximum sum ending at index i\n    return max_sum_ending_at_index_0"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0 or k < index:\n        return a[0]\n\n    if k == index:\n        return max(a[k], a[k-1]) + a[k]\n\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index-1, k)\n\n    # k is less than index, so it's impossible to reach it\n    return 0"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0, []\n    if a[index] < a[k]:\n        return 0, []\n    \n    # include the current element in the sum\n    include_sum = a[index] + max_sum_increasing_subseq(a, n, index+1, k)[0]\n    \n    # exclude the current element in the sum\n    exclude_sum = max_sum_increasing_subseq(a, n, index+1, k)[0]\n    \n    # choose the maximum between include and exclude sum\n    max_sum = max(include_sum, exclude_sum)\n    \n    # append the current element to the subsequence\n    subseq = max_sum_increasing_subseq(a, n, index+1, k)[1]\n    subseq.append(a[index])\n    \n    return max_sum, subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return float('-inf')\n    \n    if index == k:\n        return a[index]\n    \n    prefix_sum = [0] * n\n    \n    for i in range(index):\n        prefix_sum[i] = max(prefix_sum[i], prefix_sum[i+1])\n    \n    prefix_sum[index] = a[index]\n    \n    for i in range(index+1, k):\n        prefix_sum[i] = max(prefix_sum[i], prefix_sum[i-1] + a[i])\n    \n    max_sum = max(prefix_sum[index] + a[k], max_sum_increasing_subseq(a, n, index+1, k))\n    \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    if a[index] >= a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == 0:\n        return 0, 0\n    elif index == n:\n        return 0, a[index-1]\n    else:\n        max_sum, max_end = max_sum_increasing_subseq(a, n, index-1, k)\n        if k < n and k > index:\n            max_sum += a[k]\n            max_end = a[k]\n        return max_sum, max_end"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i]))\n    for i in range(m,m+n):\n        col.append(tuplex[i-m])\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Split the tuple into two parts based on the input parameters m and n\n    first_part = new_tuplex[:m]\n    second_part = new_tuplex[m:]\n    \n    # Combine the two parts into a new tuple\n    colon = first_part + (second_part[n-1], second_part[n], second_part[n+1])\n    \n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the given tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # calculate the number of colon elements\n    num_colons = (n-1)//2\n\n    # get the index of the last element in the colon\n    colon_index = m - num_colons - 1\n\n    # shift the elements to the right by the number of colon elements\n    for i in range(m-1, colon_index, -1):\n        new_tuplex[i+num_colons] = new_tuplex[i]\n\n    # reverse the colon elements\n    new_tuplex[:num_colons] = tuple(reversed(new_tuplex[:num_colons]))\n\n    # shift the elements to the left by the number of colon elements\n    for i in range(colon_index, m-1):\n        new_tuplex[i-num_colons] = new_tuplex[i]\n\n    # return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[1:] + (new_tuplex[0],)\n    for j in range(n):\n        new_tuplex += (new_tuplex[-1],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the tuple to avoid modifying the original\n    tuplex_copy = deepcopy(tuplex)\n    # find the length of the colon\n    colon_length = len(tuplex_copy) // m * n\n    # create a list to store the colon\n    colon = []\n    # iterate over the tuples in the colon\n    for i in range(colon_length):\n        # extract a sublist of the original tuple\n        sublist = tuplex_copy[i*m:i*m+n]\n        # append the sublist to the colon\n        colon.append(sublist)\n    # return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex = new_tuplex[:i] + (new_tuplex[i],) + new_tuplex[i+1:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            if j < m-1:\n                row.append(tuplex[i][j])\n            else:\n                row.append(deepcopy(tuplex[i][j]))\n        colon.append(row)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            if i == 0:\n                row.append((tuplex[0][j], tuplex[1][j]))\n            elif i == m-1:\n                row.append((tuplex[m-1][j], tuplex[m][j]))\n            else:\n                row.append((tuplex[i][j], tuplex[i-1][j]))\n        result.append(row)\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        col = []\n        for j in range(n):\n            col.append(deepcopy(tuplex[i*n+j]))\n        colon.append(tuple(col))\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(n):\n        new_tuplex = new_tuplex + (i,)\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create a list to store the products\n    products = []\n\n    # iterate through the two input lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # find the largest product for this combination\n            product = nums1[i] * nums2[j]\n            # add it to the list of products\n            products.append(product)\n\n    # sort the list of products in descending order\n    products.sort(reverse=True)\n\n    # return the N largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # initialize the result list with zeros\n    result = [0] * N\n    \n    # iterate through the sorted lists\n    for i in range(N):\n        # initialize the maximum product as the first element of the sorted lists\n        max_product = nums1[i] * nums2[i]\n        \n        # iterate through the rest of the elements in the two lists\n        for j in range(i+1, N):\n            # update the maximum product if the next element in the list is greater\n            if nums1[j] > max_product:\n                max_product = nums1[j] * nums2[j]\n            \n            # update the result list with the maximum product and the next element of the list\n            result[i] = max_product\n            result[j] = nums1[j] * nums2[j]\n    \n    # return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    max_product_indices = []\n    for i in range(N):\n        product1 = nums1[i] * nums1[i+1] *... * nums1[i+N-1]\n        product2 = nums2[i] * nums2[i+1] *... * nums2[i+N-1]\n        if product1 > max_product:\n            max_product = product1\n            max_product_indices = [i]\n        elif product1 == max_product:\n            max_product_indices.append(i)\n        if product2 > max_product:\n            max_product = product2\n            max_product_indices = [i]\n        elif product2 == max_product:\n            max_product_indices.append(i)\n    return max_product_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_products = []\n    for i in range(N):\n        if i < len(nums1) and i < len(nums2):\n            largest_product = nums1[i] * nums2[i]\n            largest_products.append(largest_product)\n        elif i < len(nums1):\n            largest_product = nums1[i] * nums2[i]\n            largest_products.append(largest_product)\n        else:\n            largest_product = nums1[i] * nums2[i]\n            largest_products.append(largest_product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the maximum product to zero\n    max_product = 0\n    \n    # Loop through the first list\n    for i in range(len(nums1)):\n        # Initialize the product to zero\n        product = 1\n        \n        # Loop through the second list\n        for j in range(len(nums2)):\n            # Calculate the product of the current factor from each list\n            current_product = nums1[i] * nums2[j]\n            \n            # If the product is greater than the maximum product, update the maximum product\n            if current_product > product:\n                product = current_product\n                \n            # If the current product is greater than the maximum product, update the maximum product and reset the product to zero\n            if product > max_product:\n                max_product = product\n                product = 1\n                \n            # If the maximum number of products has been found, stop the loop\n            if max_product == N:\n                break\n                \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function takes two lists of numbers as input and returns the specified number of largest products \n    from two given lists, selecting one factor from each list.\n    \"\"\"\n\n    # Sort the input lists in descending order of their first element\n    nums1.sort(key=lambda x: x[0], reverse=True)\n    nums2.sort(key=lambda x: x[0], reverse=True)\n\n    # Initialize two variables to store the largest products\n    largest_product1 = float('-inf')\n    largest_product2 = float('-inf')\n\n    # Iterate over the input lists and update the largest products as required\n    for i in range(N):\n        largest_product1 = max(largest_product1, nums1[i][1] * nums1[i+1][1])\n        largest_product2 = max(largest_product2, nums2[i][1] * nums2[i+1][1])\n\n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must have the same length.\"\n    max_products = []\n    for i in range(N):\n        max_products.append(max(nums1[i], nums2[i]))\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to keep track of the largest products found so far\n    largest_product1 = float('-inf')\n    largest_product2 = float('-inf')\n    largest_product3 = float('-inf')\n    largest_product4 = float('-inf')\n\n    # Loop through the given lists and find the largest N products\n    for num1 in nums1:\n        for num2 in nums2:\n            product1 = num1 * num2\n            product2 = num2 * num1\n            product3 = num1\n            product4 = num2\n            # Update the largest products if necessary\n            if product1 > largest_product1:\n                largest_product1 = product1\n            if product2 > largest_product2:\n                largest_product2 = product2\n            if product3 > largest_product3:\n                largest_product3 = product3\n            if product4 > largest_product4:\n                largest_product4 = product4\n            # If we've found the desired number of products, break out of the loop\n            if N == 4:\n                break\n\n    # Return the largest products found\n    return largest_product1, largest_product2, largest_product3, largest_product4"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum product\n    max_product = float('-inf')\n\n    # Iterate through the first N elements in each list and find the maximum product\n    for i in range(N):\n        # Find the product of the ith element of the first list and the jth element of the second list\n        product1 = nums1[i] * nums2[i]\n\n        # Update the maximum product if the product is greater than the current maximum product\n        max_product = max(max_product, product1)\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the maximum product from nums1 and nums2\n    max_product = max(nums1[0] * nums2[0], nums1[0] * nums2[-1], nums1[-1] * nums2[0], nums1[-1] * nums2[-1])\n\n    # initialize variables to keep track of the largest products found so far\n    largest_products = [max_product] * N\n\n    # iterate through the indices of nums1 and nums2 and update the largest products as needed\n    for i in range(N):\n        for j in range(i+1, N):\n            # find the product of the two selected factors and update the largest products if the current product is larger\n            current_product = nums1[i] * nums2[j]\n            if current_product > largest_products[i]:\n                largest_products[i] = current_product\n            if current_product > largest_products[j]:\n                largest_products[j] = current_product\n\n    # return the largest products\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n\nprint(maximum(5,7)) # Output: 7"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns their maximum value.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the maximum of those two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Convert the list to a tuple\n    char_tuple = tuple(char_list)\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(str1)\n    # Convert the list to a tuple of characters\n    str_tuple = tuple(str_list)\n    return str_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given number n.\n    '''\n    # Convert the binary representation of n to a list of bits.\n    n_bits = [int(digit) for digit in bin(n)[2:]]\n    \n    # Set the leftmost unset bit to 1.\n    for i in range(len(n_bits)):\n        if n_bits[i] == 0:\n            n_bits[i] = 1\n            break\n    \n    # Convert the list of bits back to an integer.\n    n_new = int(''.join(str(bit) for bit in n_bits), 2)\n    \n    # Return the updated integer.\n    return n_new"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit in a given integer n.\n    \"\"\"\n    bit = 1\n    while (bit & n) == 0:\n        bit <<= 1\n    return bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Get the number of 1's in the binary representation of n\n    count = bin(n).count('1')\n    # Set the leftmost unset bit to 1\n    n |= 1 << count\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize leftmost unset bit index to -1\n    leftmost_unset_bit_index = -1\n\n    # Iterate through each bit in n\n    for i in range(31, -1, -1):\n\n        # If the current bit is 0, set leftmost_unset_bit_index to i\n        if (n & (1 << i)) == 0:\n            leftmost_unset_bit_index = i\n            break\n\n    # If leftmost_unset_bit_index is still -1, there is no unset bit\n    if leftmost_unset_bit_index == -1:\n        print(\"There is no unset bit in this number.\")\n    else:\n        # Set the leftmost unset bit\n        n = n | (1 << leftmost_unset_bit_index)\n        print(\"The new number with the left most unset bit set is:\", n)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Sets the left most unset bit of a given integer.\n\n    Args:\n    n (int): An integer for which the left most unset bit needs to be set.\n\n    Returns:\n    int: The updated integer with the left most unset bit set.\n    \"\"\"\n    # Find the length of the binary representation of n\n    length = len(bin(n)[2:])\n\n    # Initialize a mask of all 1's with the length of the binary representation\n    mask = (1 << length) - 1\n\n    # XOR the mask with n and return the result\n    return n ^ mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer n as input and returns an integer with the leftmost unset bit set to 1.\n    '''\n\n    # Initialize count of unset bits\n    unset_bits = 0\n\n    # Iterate through the binary representation of n\n    for i in range(32):\n        bit = (n >> i) & 1  # Get the i-th bit of n\n\n        # If the bit is 0, increment unset_bits\n        if bit == 0:\n            unset_bits += 1\n\n        # If unset_bits is greater than or equal to the number of bits in n, return n\n        if unset_bits >= 32:\n            return n\n\n        # If unset_bits is less than 32, set the leftmost unset bit to 1 and return the modified integer\n        n = (n | (1 << i)) & ((1 << 32) - 1)  # Set the i-th bit to 1 and return the modified integer\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n\n    Input: An integer n.\n\n    Output: The integer n with the left most unset bit set to 1.\n\n    Example:\n\n    Input: n = 15\n\n    Output: 16\n\n    Explanation:\n\n    The left most unset bit in 15 is bit 2.\n\n    There are 3 options:\n\n    Option 1: Set bit 2 to 1. 15 becomes 16.\n\n    Option 2: Set bit 1 to 1. 15 becomes 32.\n\n    Option 3: Set bit 3 to 1. 15 becomes 31.\n\n    In this example, Option 2 is chosen as it sets the left most unset bit.\n\n    Therefore, the function returns 16.\n    '''\n\n    # If the input number is 0, return 0.\n    if n == 0:\n        return 0\n\n    # Initialize a variable to count the number of set bits.\n    count = 0\n\n    # Iterate through all the bits in the input number.\n    while n > 0:\n        n &= (n - 1)  # Clear the least significant set bit.\n        count += 1\n\n    # If the input number is already a power of 2, return it.\n    if count == 1:\n        return n\n\n    # If the input number is not a power of 2, return the leftmost unset bit.\n    return 1 << (count - 1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the leftmost unset bit of a given number.\n    \"\"\"\n    # Initialize the leftmost unset bit as 1\n    unset_bit = 1\n    # Find the power of 2 to the left of the unset bit\n    left_most_unset_bit = 0\n    while unset_bit <= n:\n        left_most_unset_bit += 1\n        unset_bit <<= 1\n    \n    # Set the leftmost unset bit in the given number\n    n |= (1 << (left_most_unset_bit - 1))\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given integer n.\n    \"\"\"\n    # Convert the integer to binary and check if the last bit is set to 1\n    if n & 1 == 1:\n        # If the last bit is set to 1, then set the left most unset bit to 0\n        n = n ^ 1 << n.bit_length()\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # loop through each bit in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # if the i-th bit is 1, unset it and return the updated n\n        if bin(n)[2:].count('1') > i:\n            return n ^ (1 << i)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone as arguments\n    and returns the volume of the cone.\n    '''\n\n    # Calculate the volume of the cone using Heron's formula\n    V = (1/3) * math.pi * r**2 * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2) * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    # calculate the volume of the cone using the formula V = 1/3 * pi * r^2 * h\n    volume = (1/3) * math.pi * (r ** 2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone using the formula: V = (1/3) \u03c0 r\u00b2 h\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with radius r and height h.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius of the cone and its height as input and returns the volume of the cone.\n    '''\n    v = math.pi * r * r * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    V = (1/3) * math.pi * r * r * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    # Base case: If n is already a power of 2, return n\n    if n & (n-1) == 0:\n        return n\n\n    # Recursive case: Divide n by 2 and call the function on the quotient\n    return highest_Power_of_2(n//2)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n >>= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0: \n        return None  # base case for negative or zero input\n\n    # binary search for the highest power of 2 that is less than or equal to n\n    left = 0\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid * mid <= n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to be 1\n    highest = 1\n\n    # Loop through all possible powers of 2\n    for i in range(2, int(n**0.5)+1): \n        # If the current power is less than or equal to the input n, update the highest power of 2\n        if i <= n: \n            highest = i\n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0: \n        return None\n    else: \n        power = 0\n        while (n > 1): \n            n = n >> 1\n            power += 1\n        return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    # Base case\n    if n == 1: \n        return 1\n    else: \n        # Find the highest power of 2 that is less than or equal to n/2\n        power = highest_Power_of_2(n/2)\n        # Return the power multiplied by 2 if n is odd or n/2 if n is even\n        if n % 2 == 0: \n            return power*2\n        else: \n            return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    power_of_2 = 1 #initialize power_of_2 to 1\n    \n    while power_of_2 <= n: #keep looping until power_of_2 is greater than n\n        power_of_2 *= 2 #double power_of_2 until it is greater than n\n        \n    return power_of_2 - 1 #return the power of 2 that is less than or equal to n\n    "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to be less than n\n    highest = 1\n    while highest <= n:\n        # Check if the highest power of 2 is less than or equal to n\n        if highest <= n:\n            # Check if the next power of 2 is greater than n\n            if highest * 2 > n:\n                # If the next power of 2 is greater than n, set the highest power of 2 to n\n                highest = n\n            # If the next power of 2 is less than or equal to n, increase the highest power of 2\n            else:\n                highest = highest * 2\n    # Return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    lucas = [2, 1]\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 1 or n == 0:\n        return 2\n    else:\n        return (4*find_lucas(n-1) - find_lucas(n-2)) // 2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n as input and returns then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2)) % 10**9"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [0, 2]  # first two numbers of the series\n    for i in range(2, n):  # iterate from 2 to n\n        lucas.append(lucas[i-1] + lucas[i-2])  # compute the next number in the series\n    return lucas[n-1]  # return the nth number of the series"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        lucas = 1\n        prev_lucas = 1\n        for i in range(3, n + 1):\n            lucas = lucas + prev_lucas\n            prev_lucas = lucas - prev_lucas\n        return lucas"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_ (list): A list of elements.\n    string (str): A string that will be applied to each element of the list.\n\n    Returns:\n    A new list containing the elements of the input list with the format string applied to each element.\n    \"\"\"\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        *args: A variable number of lists to be converted.\n\n    Returns:\n        A list of nested dictionaries.\n    \"\"\"\n    result = []\n    for arg in args:\n        if isinstance(arg, list):\n            temp = {}\n            for item in arg:\n                if isinstance(item, tuple):\n                    temp[item[0]] = item[1]\n                else:\n                    temp[item] = None\n            result.append(temp)\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        inner_dict = {}\n        for j in range(len(l2)):\n            inner_dict[l2[j]] = l3[i][j]\n        result.append(inner_dict)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        d = {}\n        d['name'] = l1[i]\n        d['age'] = l2[i]\n        d['city'] = l3[i]\n        result.append(d)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the final result\n    result = {}\n    # loop through each list and add each element to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    # return the final dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    \n    # loop through each list\n    for i in range(len(l1)):\n        # create a new dictionary for each list\n        dict_i = {}\n        for j in range(len(l2)):\n            # add key-value pair to the nested dictionary\n            dict_i[l2[j]] = l3[j][i]\n        # add the nested dictionary to the result dictionary\n        result[l1[i]] = dict_i\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # initialize an empty dictionary to store the nested dictionaries\n    nested_dict = {}\n    \n    # iterate through the three lists\n    for i in range(len(l1)):\n        # create a key for each list in the dictionary\n        key = f\"list{i+1}\"\n        # add a value to the dictionary with the key and the list item\n        nested_dict[key] = l1[i]\n    \n    for i in range(len(l2)):\n        # create a key for each list in the dictionary\n        key = f\"list{i+len(l1)+1}\"\n        # add a value to the dictionary with the key and the list item\n        nested_dict[key] = l2[i]\n    \n    for i in range(len(l3)):\n        # create a key for each list in the dictionary\n        key = f\"list{i+len(l1)+len(l2)+1}\"\n        # add a value to the dictionary with the key and the list item\n        nested_dict[key] = l3[i]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define an empty dictionary to store the nested dictionary\n    d = {}\n    \n    # Loop through each list and add its elements to the nested dictionary\n    for i in l1:\n        d[i] = {j: l3[l2.index(i)] for j in l2}\n        \n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    - l1: A list of strings.\n    - l2: A list of integers.\n    - l3: A list of dictionaries.\n\n    Returns:\n    - A nested dictionary that contains the values of all the lists.\n\n    Example:\n    >>> l1 = ['a', 'b', 'c']\n    >>> l2 = [1, 2, 3]\n    >>> l3 = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]\n    >>> convert_list_dictionary(l1, l2, l3)\n    {'a': 1, 'b': 2, 'c': 3, 'Alice': {'name': 'Alice', 'age': 25}, 'Bob': {'name': 'Bob', 'age': 30}}\n    \"\"\"\n\n    result = {}\n\n    for i, elem in enumerate(l1):\n        result[elem] = l2[i]\n\n    for i, elem in enumerate(l3):\n        for key, value in elem.items():\n            if key not in result:\n                result[key] = {}\n            result[key][l1[i]] = value\n\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return n\n        else:\n            return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    \n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        max1 = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        max2 = get_max_sum(n-1)\n        return max(max1, max2)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n <= 5:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nn = 10\nprint(get_max_sum(n))"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return []\n    else:\n        max_length = 0\n        max_list = []\n        for item in input_list:\n            if len(item) > max_length:\n                max_length = len(item)\n                max_list = [item]\n            elif len(item) == max_length:\n                max_list.append(item)\n        return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = [len(i) for i in input_list]\n    max_length = max(lengths)\n    max_list = [i for i in input_list if len(i) == max_length]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = item\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set of the tuples\n    test_set = set(test_tup)\n    # If the length of the set is equal to the length of the tuple, then all the elements are distinct\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set from the input tuple\n    unique_set = set(test_tup)\n\n    # check if the length of the set is equal to the length of the input tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        else:\n            seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        # if the length is equal, it means there are no duplicates, so return True\n        return True\n    else:\n        # otherwise, return False\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_set = set(test_tup)\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    # Use set() to convert the tuple to a set to remove duplicates\n    unique_elements = set(test_tup)\n    # Check if the length of the set is the same as the length of the original tuple\n    return len(test_tup) == len(unique_elements)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    If there are no non-repeated characters, the function returns None.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # find the first character with a frequency of 1\n    for char, freq in freq_dict.items():\n        if freq == 1:\n            return char\n\n    # if all characters have a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    first_non_repeating_char = None\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n        if first_non_repeating_char is None or char_count[char] < char_count[first_non_repeating_char]:\n            first_non_repeating_char = char\n    return first_non_repeating_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            del char_dict[char]\n        else:\n            char_dict[char] = True\n    return ''.join(char_dict.keys())"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # iterate through the frequency dictionary to find the first non-repeated character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    Args:\n    str1 (str): The input string.\n\n    Returns:\n    str: The first non-repeated character in the input string.\n\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # loop through the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    return bool(match)"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # Check if the string matches the regex pattern\n    if re.match(regex, string):\n        # Check if the first and last character of the string are equal\n        if string[0] == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # use regular expressions to match the pattern\n    match = re.match(regex, string)\n\n    # if there is a match, return True\n    if match:\n        return True\n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import statistics\n\ndef median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return statistics.median([a, b, c])"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Calculate the absolute difference between the three numbers\n    diff_a = abs(a - b)\n    diff_b = abs(b - c)\n    diff_c = abs(c - a)\n\n    # Sort the absolute differences in ascending order\n    sorted_diffs = sorted([diff_a, diff_b, diff_c])\n\n    # Calculate the median\n    if sorted_diffs[1] < sorted_diffs[2]:\n        median = (sorted_diffs[1] + sorted_diffs[2]) / 2\n    else:\n        median = (sorted_diffs[1] + sorted_diffs[0]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2] + sorted_numbers[len(sorted_numbers) // 2 - 1]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the array\n    length = len(sorted_numbers)\n\n    # Determine the median based on the length of the array\n    if length % 2 == 0:\n        # If the length is even, the median is the average of the two middle numbers\n        mid1 = sorted_numbers[length // 2 - 1]\n        mid2 = sorted_numbers[length // 2]\n        median = (mid1 + mid2) / 2\n    else:\n        # If the length is odd, the median is the middle number\n        mid = sorted_numbers[length // 2]\n        median = mid\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import random\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n\ndef quick_select(arr, low, high, k):\n    if low == high:\n        return arr[low]\n\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quick_select(arr, low, pivot_index - 1, k)\n    else:\n        return quick_select(arr, pivot_index + 1, high, k)\n\ndef median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    k = len(sorted_numbers) // 2\n    median = quick_select(sorted_numbers, 0, k - 1, k)\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    # Determine the size of the list\n    size = len(sorted_list)\n    # Determine the middle index of the list\n    middle_index = size // 2\n    # If the size is even, the median is the average of the two middle elements\n    if size % 2 == 0:\n        median = (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    # If the size is odd, the median is the middle element\n    else:\n        median = sorted_list[middle_index]\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        return numbers[n // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = [a, b, c]\n    nums.sort()\n\n    # Determine the median\n    n = len(nums)\n    if n % 2 == 0:\n        # Find the average of the two middle numbers\n        median = (nums[n//2-1] + nums[n//2]) / 2\n    else:\n        # Otherwise, simply return the middle number\n        median = nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2-1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(d) for n in nums for d in str(n)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        \n        # Compute the sum of digits for the current number\n        num_sum = sum(digits)\n        \n        # Add the sum of digits for the current number to the sum of digits for all numbers\n        sum_digits += num_sum\n    \n    # Return the sum of digits for all numbers\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        # Convert the string to a list of digits\n        num_list = list(num_str)\n        # Compute the sum of the digits\n        digit_sum = sum(int(digit) for digit in num_list)\n        # Add the sum to the total sum\n        total_sum += digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        if type(num) == int:\n            total_sum += sum([int(d) for d in str(num)])\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        # convert the number to a string and then convert it to a list of digits\n        digits = [int(d) for d in str(num)]\n        # add up the digits in the list\n        sum_digits += sum(digits)\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # create an empty list to store the sums of digits\n    digit_sums = []\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into its individual digits\n        digits = list(str(num))\n        \n        # loop through each digit and add it to the sum of digits\n        digit_sum = 0\n        for digit in digits:\n            digit_sum += int(digit)\n        \n        # append the sum of digits to the list of digit sums\n        digit_sums.append(digit_sum)\n    \n    # return the list of digit sums\n    return digit_sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and convert each character to an integer\n        digit_sum = sum(int(digit) for digit in str(num))\n        # Add the digit sum to the total\n        total += digit_sum\n    \n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x^y for x,y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # convert tuples to lists for arithmetic operations\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    \n    # iterate through the elements of the lists and perform the bitwise xor operation\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] ^ lst2[i])\n        \n    # convert the result back to a tuple\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n        \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_sum = 0\n    \n    for i in range(len(test_tup1)):\n        xor_sum = xor_sum ^ test_tup1[i] ^ test_tup2[i]\n    \n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Using a for loop to iterate over each element in the tuples\n    for i in range(len(test_tup1)):\n        # Performing the bitwise xor operation on each element and storing the result in a new tuple\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(sorted(item)) not in freq_dict:\n            freq_dict[tuple(sorted(item))] = 1\n        else:\n            freq_dict[tuple(sorted(item))] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for item in test_list:\n        if tuple(item) not in unique_list:\n            unique_list.append(tuple(item))\n    return len(unique_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n    # Iterate through the list of tuples\n    for item in test_list:\n        # If the current tuple is already in the set, increment its count\n        if item in unique_tuples:\n            unique_tuples[item] += 1\n        # If the current tuple is not in the set, add it with a count of 1\n        else:\n            unique_tuples.add(item)\n    # Return the number of unique tuples in the list\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Extract the frequency of unique tuples in a list.\n    \"\"\"\n    # create an empty set to store unique tuples\n    unique_tuples = set()\n    \n    # loop through the list and add each tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the number of unique tuples.\n    \"\"\"\n\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its frequency by 1\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[tup] = 1\n    \n    # Calculate the number of unique tuples in the dictionary and return it\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= tuple or type(test_tup2[i])!= tuple:\n            return None\n        result.append(tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i])))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Loop through the tuples\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Checking if the length of the first tuple is same as the second tuple\n    if len(test_tup1) == len(test_tup2):\n        # Checking if the tuples contain only integer and float values\n        if all(isinstance(x, (int, float)) for x in test_tup1) and all(isinstance(x, (int, float)) for x in test_tup2):\n            # Checking if the tuples contain the same number of elements\n            if len(set(test_tup1)) == len(set(test_tup2)):\n                # Performing index wise addition of tuple elements in the given two nested tuples\n                result_tup = tuple(x+y for x, y in zip(test_tup1, test_tup2))\n                return result_tup\n            else:\n                print(\"Error: The tuples contain different number of elements\")\n        else:\n            print(\"Error: The tuples contain non-integer and non-float values\")\n    else:\n        print(\"Error: The first tuple has a different length than the second tuple\")"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the resultant tuple\n    result_tup = ()\n    # iterate over the index of the first tuple\n    for i in range(len(test_tup1)):\n        # get the corresponding element of the first tuple\n        elem1 = test_tup1[i]\n        # iterate over the index of the second tuple\n        for j in range(len(test_tup2)):\n            # get the corresponding element of the second tuple\n            elem2 = test_tup2[j]\n            # add the elements of the first and second tuple at the current index\n            result_tup += (elem1 + elem2,)\n    # return the resultant tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of first tuple should be same as second tuple.\")\n        return\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n    Args:\n        test_tup1 (tuple): first nested tuple to be added\n        test_tup2 (tuple): second nested tuple to be added\n\n    Returns:\n        tuple: tuple containing the index wise addition of the two input tuples\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their minimum value.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n\nprint(minimum(5, 10))  # Output: 5\nprint(minimum(10, 5))  # Output: 5\nprint(minimum(5, 5))   # Output: 5"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuple1)): \n        if tuplex == tuple1[i]: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(f'{tuplex} is present in {tuple1}') \n    else: \n        print(f'{tuplex} is not present in {tuple1}') "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    This function takes in two tuples and checks if the first element exists within the second tuple.\n\n    Parameters:\n    tuplex (tuple): The first tuple to search in.\n    tuple1 (tuple): The second tuple to search for the first element in.\n\n    Returns:\n    bool: True if the first element exists within the second tuple, False otherwise.\n    \"\"\"\n    if tuplex[0] in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two parameters, tuplex and tuple1. It checks if an element exists in the tuple1. If it does, it returns True, otherwise it returns False.\n    '''\n    for element in tuple1: \n        if element == tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = 0\n    for i in range(1, x+1):\n        parity += i\n    return parity % 2 == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2!= 0:\n        return 'Odd'\n    else:\n        return 'Even'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The number is even.\" \n    else: \n        return \"The number is odd.\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns a boolean value indicating whether the parity of the number is odd or even.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    if x % 2 == 0: \n        return False \n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the number is even\n    if x % 2 == 0:\n        # if the number is even, return odd\n        return \"The parity of the number is odd.\"\n    # if the number is odd, return even\n    else:\n        return \"The parity of the number is even.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Create a list of digits of the number\n    digits = [int(d) for d in str(n)]\n    # Find the last digit in the list\n    last_digit = digits[-1]\n    # Create a new list with digits of the number except for the last digit\n    digits = digits[:-1]\n    # Find the index of the last digit in the list\n    index_last_digit = digits.index(last_digit)\n    # Find the largest digit in the list\n    largest_digit = max(digits)\n    # Swap the largest digit with the last digit\n    digits[index_last_digit], digits[-1] = digits[-1], largest_digit\n    # Convert the list of digits back to a number\n    next_bigger_number = int(''.join(str(d) for d in digits))\n    return next_bigger_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    num_str = str(n)\n    \n    # Reverse the order of digits in the string\n    num_str = num_str[::-1]\n    \n    # Count the number of digits in the string\n    num_digits = len(num_str)\n    \n    # Initialize the new number string with zeros\n    new_num_str = '0' * num_digits\n    \n    # Iterate through the digits in the string\n    for i in range(num_digits):\n        # Check if the current digit is 9\n        if num_str[i] == '9':\n            # If the previous digit is 9, increment it by 1\n            if i > 0 and num_str[i-1] == '9':\n                new_num_str[i] = str(int(num_str[i]) + 1)\n            # If the previous digit is not 9, increment it by 1\n            else:\n                new_num_str[i] = str(int(num_str[i]) + 1)\n        # If the current digit is not 9, set it to 0\n        else:\n            new_num_str[i] = '0'\n    \n    # Convert the new number string to an integer and return it\n    return int(new_num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n\n    # Initialize variables for the digits of the number\n    ones_digit = int(num_str[0])\n    tens_digit = int(num_str[1])\n    hundreds_digit = int(num_str[2])\n    thousands_digit = int(num_str[3])\n    #...and the rest of the digits\n\n    # Check if the number has more than 1 digit\n    if len(num_str) > 1:\n        # Get the number of digits in the number excluding the ones and tens\n        num_of_digits = len(num_str) - 1\n\n        # Create a list to store the digits in reverse order\n        digits_list = [ones_digit, tens_digit, hundreds_digit, thousands_digit]\n        for i in range(4, num_of_digits):\n            digits_list.append(int(num_str[i]))\n\n        # Sort the digits in the list in descending order\n        digits_list.sort(reverse=True)\n\n        # Combine the digits in the list in reverse order into a string and convert it back to an integer\n        new_num = int(''.join(str(x) for x in digits_list))\n\n    # Check if the number has fewer than 10 digits\n    elif len(num_str) == 1:\n        # Initialize the new number with the ones digit\n        new_num = ones_digit\n\n    # If the number has fewer than 1 digit, create the next smaller number by rearranging the digits\n    else:\n        # Get the number of digits in the number\n        num_of_digits = len(num_str)\n\n        # Create a list to store the digits in reverse order\n        digits_list = [ones_digit, tens_digit, hundreds_digit, thousands_digit]\n        for i in range(4, num_of_digits):\n            digits_list.append(int(num_str[i]))\n\n        # Sort the digits in the list in descending order\n        digits_list.sort(reverse=True)\n\n        # Combine the digits in the list in reverse order into a string and convert it back to an integer\n        new_num = int(''.join(str(x) for x in digits_list))\n\n    # Return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    length = len(digits)\n    new_digits = []\n    for i in range(length-1, -1, -1):\n        new_digits.append(digits[i])\n        new_digits.append(digits[length-i-1])\n    return int(''.join(new_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    def get_digits(number):\n        \"\"\"\n        Return a list of the digits of a given number.\n        \"\"\"\n        return [int(digit) for digit in str(number)]\n\n    def get_digits_per_group(number, group_size):\n        \"\"\"\n        Return a list of the digits of a given number, divided into groups of the specified size.\n        \"\"\"\n        digits = get_digits(number)\n        groups = [digits[i:i + group_size] for i in range(0, len(digits), group_size)]\n        return groups\n\n    def is_greater(group1, group2):\n        \"\"\"\n        Check if the digits of two groups are in descending order.\n        \"\"\"\n        for i in range(len(group1)):\n            if group1[i] < group2[i]:\n                return False\n        return True\n\n    def rearrange_digits(number):\n        \"\"\"\n        Rearrange the digits of a given number in descending order.\n        \"\"\"\n        digits = get_digits(number)\n        groups = get_digits_per_group(number, 9)\n        result = []\n        for group in groups:\n            greater_groups = [group for group in groups if group!= group and is_greater(group, group)]\n            if greater_groups:\n                result.append(max(greater_groups, key=lambda x: get_digits(x)))\n            result.append(group)\n        return int(''.join(str(digit) for digit in result))\n\n    return rearrange_digits(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n    # Reverse the string to get the digits in descending order\n    digits = num_str[::-1]\n    # Count the number of 0s in the digits\n    count_0s = digits.count('0')\n    # Count the number of 1s in the digits\n    count_1s = digits.count('1')\n    # If there are an even number of 1s and 0s, then all digits are 0s\n    if count_1s % 2 == 0 and count_0s % 2 == 0:\n        return '0'\n    # Otherwise, rearrange the digits to get the next bigger number\n    else:\n        # If there are an odd number of 1s, add 1 to the count of 1s\n        if count_1s % 2 == 1:\n            count_1s += 1\n        # If there are an even number of 1s, subtract 1 from the count of 0s\n        if count_0s % 2 == 0:\n            count_0s -= 1\n        # Count the number of 0s and 1s in the digits\n        if count_0s == 0:\n            digits = digits.replace('0', '1')\n        elif count_1s == 0:\n            digits = digits.replace('1', '0')\n        else:\n            digits = digits.replace('0', '1').replace('1', '0')\n        # Convert the digits back to an integer and return it\n        return int(digits)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    def is_valid(number):\n        \"\"\"\n        Helper function to check if a number is valid or not.\n        \"\"\"\n        digits = [int(digit) for digit in str(number)]\n        digits.sort(reverse=True)\n        return digits == digits[::-1]\n\n    next_bigger = n\n    while not is_valid(next_bigger):\n        next_bigger += 1\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the input number to a string\n    num = str(n)\n    # create a list of the digits of the input number\n    digits = list(map(int, num))\n    # sort the list of digits in ascending order\n    digits.sort()\n    # find the position of the largest digit\n    max_pos = digits.index(max(digits))\n    # reverse the list of digits\n    digits = digits[::-1]\n    # add 1 to the largest digit position and create a string from the reversed list of digits\n    next_num = str(int(''.join(map(str, digits[max_pos + 1:])) + 1))\n    # convert the next number to an integer and return it\n    return int(next_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    s = str(n)\n\n    # Initialize variables to store the largest and second largest digits\n    largest = float('-inf')\n    second_largest = float('-inf')\n\n    # Iterate through the string and check if the current digit is greater than the largest\n    for digit in s:\n        if int(digit) > largest:\n            second_largest = largest\n            largest = int(digit)\n        elif int(digit) > second_largest and int(digit)!= largest:\n            second_largest = int(digit)\n\n    # Check if the largest and second largest digits are the same\n    if largest == second_largest:\n        # If they are the same, find the next bigger digit\n        for i in range(10):\n            if int(str(n)[-1]) < i:\n                next_bigger = i\n                break\n        # Convert the next bigger digit to a string and append it to the end of the original string\n        next_bigger_str = str(next_bigger)\n        s += next_bigger_str\n\n    # Convert the string back to an integer and return it\n    return int(s)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Helper function to rearrange the digits of a given number\n    def rearrange(num):\n        if num == 0:\n            return '0'\n        else:\n            # Helper function to return the rearranged digits of a number\n            def rearrange_helper(num, temp):\n                if num == 0:\n                    return temp\n                else:\n                    # Divide the number by 10 and take the remainder\n                    digit = num % 10\n                    # Append the remainder to the temp array\n                    temp.append(digit)\n                    # Recursively call the helper function with the integer part of the number and the temp array\n                    return rearrange_helper(num//10, temp)\n            # Return the rearranged digits of the given number\n            return rearrange_helper(num, [])\n\n    # Check if the given number is negative\n    if n < 0:\n        # Take the absolute value of the number\n        n = abs(n)\n        # Add 1 to the number to get the next smaller number\n        n += 1\n    else:\n        # Get the digits of the number\n        digits = list(str(n))\n        # Reverse the digits\n        digits.reverse()\n        # Rearrange the digits\n        rearranged_digits = rearrange(int(''.join(digits)))\n        # Convert the rearranged digits to an integer\n        rearranged_n = int(''.join(rearranged_digits))\n        # Add 1 to the rearranged number to get the next smaller number\n        rearranged_n += 1\n        # Check if the rearranged number is negative\n        if rearranged_n < 0:\n            # Take the absolute value of the rearranged number\n            rearranged_n = abs(rearranged_n)\n            # Subtract 1 from the rearranged number to get the next bigger number\n            rearranged_n -= 1\n        # Convert the rearranged number to a string\n        rearranged_str = str(rearranged_n)\n    # Return the rearranged number\n    return rearranged_n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the result list\n    result = []\n\n    # Use a min heap to store the minimum numbers in the second array\n    min_heap = []\n\n    # Initialize the first pointer of the two arrays\n    i = 0\n    j = 0\n\n    # Keep adding pairs to the result list until we have k pairs\n    while len(result) < k:\n        # Check if the current pair is smaller than the smallest number in the second heap\n        if nums2[j] <= min_heap[0] or (len(min_heap) == 0 and nums2[j] < nums1[i]):\n            # If it is, add it to the result list and update the heap\n            pair = (nums1[i], nums2[j])\n            result.append(pair)\n            min_heapq.heappushpop(min_heap, nums2[j])\n\n            # Move the pointers to find the next smallest pair\n            i += 1\n            j = 0\n        else:\n            # If it's not, move the pointer to the next smaller number in the second array\n            j += 1\n\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pq) < k:\n                heapq.heappush(pq, (num1, num2))\n            elif pq[0][0] > num1 or pq[0][1] > num2:\n                heapq.heappop(pq)\n                heapq.heappush(pq, (num1, num2))\n    result = []\n    while pq:\n        result.append(heapq.heappop(pq))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n            if len(pairs) == k:\n                break\n    pairs.sort()\n    result = []\n    for pair in pairs:\n        if result and result[-1][0] == pair[0]:\n            continue\n        result.append(pair)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Sort both arrays in increasing order\n    nums1.sort()\n    nums2.sort()\n\n    # Create a min heap of size k\n    min_heap = []\n\n    # Initialize the pointers of two pointers\n    i, j = 0, 0\n\n    # Loop until k pairs are found\n    while len(min_heap) < k:\n        # Add the smaller element of both arrays to the heap\n        if i == len(nums1) or (j < len(nums2) and nums1[i] + nums2[j] < nums1[i]):\n            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            i += 1\n        else:\n            heapq.heappush(min_heap, (nums2[j], nums1[i]))\n            j += 1\n\n    # Extract the k pairs from the heap\n    pairs = []\n    while len(min_heap) > 0:\n        pair = heapq.heappop(min_heap)\n        pairs.append((pair[1], pair[0]))\n\n    # Reverse the pairs and return them\n    return pairs[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # create a min-heap to store the smallest elements\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # initialize the result list\n    result = []\n    \n    # iterate through the second array and pop the smallest elements from the min-heap\n    for num in nums2:\n        smallest = heapq.heappop(min_heap)\n        \n        # if the current element is greater than the smallest element in the min-heap, then it's a valid pair\n        if num > smallest:\n            result.append((smallest, num))\n            \n            # add the current element to the min-heap\n            heapq.heappush(min_heap, num)\n            \n        # if there are more elements in the min-heap than k, then we need to remove the smallest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n            \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the lists into sets for O(1) lookups\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Create a min heap of size k to store the smallest pairs\n    min_heap = []\n\n    # Iterate over the lists and add the smallest elements to the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            # If the current pair of elements is already in the heap, skip it\n            if (num1, num2) in min_heap:\n                continue\n            # If the heap is full, remove the smallest element from the heap\n            if len(min_heap) == k:\n                heapq.heappop(min_heap)\n            # Add the current pair to the heap\n            heapq.heappush(min_heap, (num1, num2))\n\n    # Return the k smallest pairs\n    return [heapq.heappop(min_heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap1, heap2 = [], []\n    minheap = []\n\n    for num in nums1:\n        heapq.heappush(heap1, (-num, -1))\n\n    for num in nums2:\n        while len(minheap) < k and heap1:\n            pair = heapq.heappop(heap1)\n            if pair[1]!= -1:\n                heapq.heappush(minheap, pair)\n        if minheap:\n            pair = heapq.heappop(minheap)\n            pair = (-pair[0], nums2.index(pair[0]), pair[1])\n            heapq.heappush(heap2, pair)\n\n    return [pair[2] for pair in heap2]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the k smallest elements\n    min_heap = []\n    \n    # Iterate through both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add (num1, num2) to the min heap\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            \n            # If the size of the heap is greater than k, remove the smallest element and add the new element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    \n    # Extract the k smallest elements from the min heap\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(min_heap)[1])\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n\n    min_heap = []\n\n    for num in nums1:\n        heapq.heappush(min_heap, (-num, len(nums1) - nums2.index(num)))\n\n    result = []\n\n    while len(result) < k:\n        pair = -heapq.heappop(min_heap)\n        if not result or pair[1]!= result[-1][1]:\n            result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k elements\n    min_heap = []\n    for i in range(len(nums1)):\n        # Add each number to the min heap\n        heapq.heappush(min_heap, (-nums1[i], i))\n        # Keep track of the number of pairs found so far\n        count = len(min_heap)\n        # If we have found enough pairs, return them\n        if count == k:\n            return heapq.nsmallest(k, min_heap)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Sort the list of tuples in ascending order\n    list1.sort()\n\n    # Initialize variables to store the minimum product and the minimum value\n    min_product = float('inf')\n    min_value = float('inf')\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(list1)-1):\n        # Calculate the product of the pair of tuples and store it in a variable\n        product = list1[i][0] * list1[i+1][1]\n\n        # If the product is smaller than the current minimum product, update the minimum product and the minimum value\n        if product < min_product:\n            min_product = product\n            min_value = list1[i][0]\n\n    # Return the minimum product and the minimum value\n    return min_product, min_value"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # Loop through each tuple within the list\n    for i in range(len(list1)):\n        \n        # Loop through each tuple within the list again\n        for j in range(len(list1)):\n            \n            # Check if the product of the current tuples is less than the minimum product\n            if (list1[i][0] * list1[j][1]) < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    min_product = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < minimum_product:\n                minimum_product = product\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the pairs of tuples.\n    '''\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples and check if it's smaller than the current minimum product\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous values as input and returns the minimum value in the list.\n    '''\n    if not listval:\n        return None\n\n    min_value = listval[0]\n\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Initialize the minimum value to the first element in the list\n    min_val = listval[0]\n\n    # Loop through the rest of the list and compare each element to the minimum value\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = float('inf') # initialize minimum value to infinity\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = float('inf')  # set initial minimum value to positive infinity\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first value in the list\n    min_val = listval[0]\n\n    # Iterate over the rest of the list and compare each value to the current minimum\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if min_val > listval[i]:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first element in the list\n    min_value = listval[0]\n    \n    # Loop through the list, comparing each element to the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    \n    # Return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize min_val with the first element of the list\n    min_val = listval[0]\n    \n    # iterate over the rest of the list and update min_val if a smaller element is found\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # replace underscores with spaces and capitalize the first letter\n    words = re.findall(r'_(.)?', word)\n    camel_words = []\n    for word in words:\n        if word:\n            camel_word = word.lower()\n            camel_words.append(camel_word)\n    camel_word = ''.join(camel_words)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word into words\n    words = word.split('_')\n\n    # Initialize a new camel case string\n    camel_case_word = \"\"\n\n    # Capitalize the first letter of each word\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_word += words[i].capitalize()\n        else:\n            camel_case_word += words[i]\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case string to camel case string\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_case)\n    return camel_case.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the snake case to camel case\n    camel_case = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n    # Capitalize the first letter\n    camel_case = camel_case.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Convert the snake case string to camel case string using regular expressions\n    camel_case_word = re.sub(r'(_\\w)', lambda x: x.group(1).upper(), word)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # Convert first letter to upper case\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_case)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the given word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Capitalize the first letter of each word and join the words into a camel case string\n    camel_case = ''.join(word.capitalize() for word in words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(\\B[a-z])'\n    result = re.sub(pattern, lambda x: x.group(0).upper(), word)\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_case += word[i]\n        elif word[i].islower():\n            camel_case += \"_\" + word[i].lower()\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_indices = []\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            odd_indices.append(i)\n    for i in reversed(odd_indices):\n        del l[i]\n    return l"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input list is a list of tuples\n    if not isinstance(list1, list) or not all(isinstance(i, tuple) for i in list1):\n        raise ValueError(\"Input list must be a list of tuples\")\n    \n    # Check if the nth element exists in the list\n    if n < 1 or n > len(list1):\n        raise ValueError(\"n must be a positive integer less than or equal to the length of the input list\")\n    \n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1][1]\n        return nth_element\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        # check if the index of the tuple is equal to the nth element\n        if i == n - 1:\n            # return the nth element of the tuple\n            return list1[i]\n    # if the index of the nth element is not found, return None\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        raise ValueError(\"The length of the list is less than the n value.\")\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n\n    Parameters:\n    list1 (list): List of tuples.\n    n (int): Index of the element to extract (starting from 0).\n\n    Returns:\n    The nth element from the given list.\n    '''\n    return list1[n][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty or not\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0]\n    \n    # Find the position of the nth element in the list\n    position = 0\n    for i in range(len(list1)):\n        if list1[i][1] == n:\n            position = i\n            break\n    \n    # If the position is not found, return None\n    if position == len(list1):\n        return None\n    \n    # Return the nth element from the list\n    return list1[position][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1]\n        return nth_element\n    except IndexError:\n        return \"Element not found!\""
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in list1 exists in list2, False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in another sequence or not.\n\n    Args:\n        list1 (list): A sequence of values\n        list2 (list): A sequence of values\n\n    Returns:\n        bool: True if any value in list1 exists in list2, else False.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n\n    # Create a set of unique values in list1\n    set1 = set(list1)\n\n    # Loop through list2 and check if any value exists in set1\n    for value in list2:\n        if value in set1:\n            return True\n\n    # If no value exists, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # check if both lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # create a boolean list to store the existence of each value in list1\n    exists = [False] * len(list1)\n\n    # iterate over the values in list2 and mark their positions in list1 as True\n    for i, value in enumerate(list2):\n        if value in list1:\n            exists[list1.index(value)] = True\n\n    # check if any value in list1 has been found in list2\n    for value in list1:\n        if exists[list1.index(value)]:\n            return True\n\n    # if no value was found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and checks whether any value in the first sequence exists in the second sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes in two lists and checks whether there is any value in the first list that is also in the second list or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            print(value, \"exists in both lists.\")\n        else:\n            print(value, \"does not exist in the second list.\")"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    # Initialize variables to store the maximum and minimum products\n    max_product = float('-inf')\n    min_product = float('inf')\n    # Iterate over the array and calculate the maximum and minimum products\n    for num in arr:\n        if num > max_product:\n            max_product = num\n        elif num < min_product:\n            min_product = num\n    # Return the pair with the highest product\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initialize two variables for the maximum product and minimum product\n    max_product = arr[0]\n    min_product = arr[0]\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Update the maximum product if the current element is greater than the maximum product\n        if arr[i] > max_product:\n            max_product = arr[i]\n        \n        # Update the minimum product if the current element is less than the minimum product\n        if arr[i] < min_product:\n            min_product = arr[i]\n            \n    # Return the pair with the maximum product\n    return max_product, min_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the indices of the two \n    elements in the array with the highest product.\n    '''\n\n    # Initialize variables to store the maximum product and the indices of the two elements\n    max_product = arr[0] * arr[1]\n    max_indices = (0, 1)\n\n    # Iterate through the array\n    for i in range(2, len(arr)):\n\n        # Calculate the product of the current element and the maximum product\n        product = arr[i] * max_product\n\n        # If the current product is greater than the maximum product, update the maximum product and its indices\n        if product > max_product:\n            max_product = product\n            max_indices = (i - 1, i)\n\n        # Otherwise, if the current product is not greater than the maximum product, check if the product is greater than the maximum product of the remaining array\n        elif product > max_product / arr[i]:\n            max_product = product\n            max_indices = (i - 1, i)\n\n    # Return the indices of the two elements with the highest product\n    return max_indices"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest product.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Find the product of the first and last element in the array\n    product_first_last = arr[-1] * arr[0]\n\n    # Find the product of the first and second last elements in the array\n    product_first_second_last = arr[-2] * arr[-1]\n\n    # Compare the two products and return the pair with the highest product\n    if product_first_last >= product_first_second_last:\n        return (arr[0], arr[-1])\n    else:\n        return (arr[-1], arr[0])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        elif num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return (max1 * max2, max1 * min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns the pair of integers with the highest product.\n    '''\n\n    # Sorting the array in ascending order\n    arr.sort()\n\n    # Finding the maximum product\n    max_product = arr[-1] * arr[0]\n\n    # Finding the pair with maximum product\n    max_pair = (arr[-1], arr[0])\n\n    # Finding the second pair with maximum product\n    for i in range(len(arr)-1):\n        product = arr[i] * arr[i+1]\n        if product > max_product:\n            max_product = product\n            max_pair = (arr[i], arr[i+1])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    # Initialize variables\n    max1 = arr[0]\n    min1 = arr[0]\n    max2 = arr[1]\n    min2 = arr[1]\n\n    # Iterate through the array\n    for i in range(2, len(arr)):\n        # Update max1 and min1 if arr[i] is greater than max1\n        if arr[i] > max1:\n            max1 = arr[i]\n            min1 = min(min1, arr[i])\n\n        # Update max2 and min2 if arr[i] is greater than max2\n        elif arr[i] > max2:\n            max2 = arr[i]\n            min2 = min(min2, arr[i])\n\n        # Update max1 and min1 if arr[i] is less than min1\n        elif arr[i] < min1:\n            max1 = max(max1, arr[i])\n            min1 = arr[i]\n\n        # Update max2 and min2 if arr[i] is less than min2\n        else:\n            max2 = max(max2, arr[i])\n            min2 = arr[i]\n\n    # Return the pair with the highest product\n    return max(max1 * max2, max2 * min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    This function takes in an array of integers as input and returns the pair with the highest product.\n    If there is a tie, it returns the pair with the smallest value.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max1 = arr[i]\n            max2 = max1 * min2\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min1 = arr[i]\n            min2 = min1 * max2\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n    return (max1, max2) if max1 * max2 > min1 * min2 else (min1, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    # Initialize maximum product and two indices of the pair\n    max_product = arr[0] * arr[1]\n    index1 = 0\n    index2 = 1\n    \n    # Loop through the array\n    for i in range(2, len(arr)): \n        # Calculate the product of the current element and the other two elements\n        product = arr[i] * arr[i - 1]\n        \n        # Update the maximum product if the current product is greater than the maximum product\n        if product > max_product: \n            max_product = product\n            index1 = i - 1\n            index2 = i\n            \n    # Return the indices of the pair with the maximum product\n    return index1, index2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elem = None\n    for i in Input:\n        if not common_elem or common_elem[0] == i[0]:\n            common_elem = i\n    return common_elem\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for item in Input:\n        if len(set(item[0])) > 1:\n            common_elements.append(item[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = set()\n    for item in Input:\n        for i in range(len(item)):\n            common_elements.add(item[i])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the counts of each unique element in the list\n    count_dict = {}\n\n    # Iterate through each tuple in the list\n    for item in Input:\n        # Get the first element of the tuple\n        first_element = item[0]\n\n        # If the element is not in the dictionary, add it with a count of 1\n        if first_element not in count_dict:\n            count_dict[first_element] = 1\n        # Otherwise, increment the count of the element in the dictionary\n        else:\n            count_dict[first_element] += 1\n\n    # Create a list of tuples containing the unique elements and their counts\n    output_list = []\n    for element, count in count_dict.items():\n        output_list.append((element, count))\n\n    # Sort the list of tuples by the element value in ascending order\n    output_list.sort(key=lambda x: x[0])\n\n    # Return the first element of the first tuple in the sorted list\n    return output_list[0][0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = set()\n    for tup in Input:\n        common_elements.add(tup[0])\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Find common first element in a list of tuples.\n    \"\"\"\n    common_elements = []\n    for tup in Input:\n        first_element = tup[0]\n        if first_element not in common_elements:\n            common_elements.append(first_element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store the common first elements and their corresponding tuples\n    common_dict = {}\n    \n    # Iterate through the input list of tuples\n    for tup in Input:\n        # Get the first element of the tuple\n        first = tup[0]\n        \n        # If the first element is not already in the dictionary, add the tuple to the dictionary with a count of 1\n        if first not in common_dict:\n            common_dict[first] = [tup]\n        # If the first element is already in the dictionary, increment the count by 1 and append the tuple to the list\n        else:\n            common_dict[first].append(tup)\n    \n    # Find the most common element in the dictionary and its corresponding tuple(s)\n    most_common_elem = max(common_dict, key=common_dict.get)\n    most_common_count = common_dict[most_common_elem]\n    \n    # Return the most common element and its corresponding tuple(s)\n    return most_common_elem, most_common_count"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = set()\n\n    for tup in Input:\n        if tup[0] not in common_elements:\n            common_elements.add(tup[0])\n\n    return common_elements\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize a set to keep track of unique elements\n    unique_elements = set()\n    \n    # loop through the list of tuples\n    for tup in Input:\n        # extract the first element of the tuple\n        first_element = tup[0]\n        \n        # add the first element to the set of unique elements\n        unique_elements.add(first_element)\n    \n    # return the set of unique elements as a list\n    return list(unique_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a set to keep track of seen elements\n    seen = set()\n    # iterate through the input list of tuples\n    for t in Input:\n        # get the first element of the tuple\n        first = t[0]\n        # if it's not in the set of seen elements, add it and continue\n        if first not in seen:\n            seen.add(first)\n            continue\n        # if it is in the set of seen elements, find the common elements\n        common = []\n        for i in range(1, len(t)):\n            if t[i] == first:\n                common.append(i)\n        # print the common elements for this tuple\n        print(\"Common elements for tuple:\", t)\n        print(\"Common elements:\", common)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    max_element = lst[0]\n    for i in range(1, len(lst)):\n        if len(str(lst[i])) > len(str(max_element)):\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element of the list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Calculate the total sum\n    total_sum = sum([round(num) for num in list1])\n    \n    # Multiply the total sum by the length of the list\n    result = total_sum * len(list1)\n    \n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round each number in the list\n    rounded_list = [round(num) for num in list1]\n    \n    # Calculate the total sum of the rounded list\n    total_sum = sum(rounded_list)\n    \n    # Multiply the total sum by the length of the list to get the total sum multiplied by the length of the list\n    result = total_sum * len(list1)\n    \n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(num) for num in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(x) for x in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(x) for x in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum*len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for number in list1:\n        rounded_number = round(number)\n        total_sum += rounded_number\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        cube = i**3\n        sum += cube\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    sum_of_cubes = 0\n\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initializing a variable to store the cube sum\n    cube_sum = 0\n    \n    # Looping from 1 to n\n    for i in range(1, n+1): \n        # Checking if the number is even\n        if i % 2 == 0: \n            # Adding the cube of the even number to the cube sum\n            cube_sum += i*i*i\n    \n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        sum += num**3\n        count += 1\n        num += 2\n    \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    # iterate n times\n    for i in range(n):\n        # add cube of i to sum\n        sum += i**3\n    # return sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialising the sum to 0\n    sum = 0\n\n    # looping through the first n even natural numbers\n    for i in range(1, n+1):\n        # calculating the cube of i\n        cube_i = i ** 3\n        # adding the cube of i to the sum\n        sum += cube_i\n\n    # returning the sum of cubes of even natural numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 1\n    \n    while i <= n:\n        cube_sum += i ** 3\n        i += 1\n    \n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initializing sum variable\n    sum_of_cubes = 0\n    \n    # loop for n even natural numbers\n    for i in range(2, n+1, 2):\n        # adding the cube of current even natural number to sum_of_cubes\n        sum_of_cubes += i**3\n        \n    return sum_of_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    This function takes a tuple and concatenates each element by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \"+\"\n    result = \"\"\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    result = result[:-1]\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): Tuple to be concatenated.\n    delimiter (str, optional): Delimiter to be used for concatenating. Defaults to''.\n\n    Returns:\n    str: Concatenated string of elements from the tuple.\n    \"\"\"\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = []\n    for element in test_tup:\n        result.append(str(element))\n    return delimiter.join(result)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple as input and concatenates each element of the tuple with the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0  \n    for i in range(1, n+1):  \n        total += i*i*i  \n    return total/n  \n  \n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables to 0\n    sum = count = 0\n\n    # loop through first n numbers\n    for i in range(n):\n        # calculate the cube of the current number\n        cube = i ** 3\n\n        # add the cube to the sum and increment the count\n        sum += cube\n        count += 1\n\n    # calculate the average of cubes and return it\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # Base case\n    if n == 0:  \n        return 0\n    \n    # Recursive case\n    else:  \n        return find_Average_Of_Cube(n-1) + (n*n*n)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += i**3\n    avg = total/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", avg)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    print(\"The average of cubes of the first {} natural numbers is {}\".format(n, average_of_cubes))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    \n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize the sum of cubes to 0\n    sum_of_cubes = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n\n        # Calculate the cube of the current number and add it to the sum of cubes\n        sum_of_cubes += i**3\n\n    # Calculate the average of cubes and return it\n    return sum_of_cubes / n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_values = []\n    for i in range(len(test_tuple)):\n        extracted_values.append(test_tuple[i][-1])\n    return extracted_values"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for element in test_tuple:\n        rear_index.append(element[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_elements = []\n    for i in range(len(test_tuple)):\n        extracted_elements.append(test_tuple[i][-1])\n    return extracted_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [string[-1] for string in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple([test_tuple[i][-1] for i in range(len(test_tuple))])"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_indices = []\n    for index, item in enumerate(test_tuple):\n        if isinstance(item, str):\n            rear_indices.append(len(item) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for string in test_tuple:\n        rear_index_list.append(string[-1])\n    return rear_index_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    This function takes a list of lists and a target element and returns the number of sublists\n    that contain the target element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n\n    Args:\n        nums (list): A list of numbers to filter.\n\n    Returns:\n        list: A list of odd numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern to match the date format in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use the re.search() function to find all matches of the pattern in the input string\n    match = re.search(pattern, dt)\n    # check if there are any matches, if not return the original input string\n    if match:\n        # extract the matched substring from the input string\n        date_str = match.group(0)\n        # convert the date string from yyyy-mm-dd format to dd-mm-yyyy format\n        new_date_str = '-'.join(date_str.split('-')[::-1])\n        # return the new date string in dd-mm-yyyy format\n        return new_date_str\n    else:\n        # return the original input string if there are no matches\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # convert date string to datetime object\n    import datetime\n    date_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n\n    # convert datetime object to new format\n    new_dt = date_obj.strftime('%d-%m-%Y')\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # define regex pattern for input format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match regex pattern to input string\n    match = re.match(pattern, dt)\n\n    # if match is found, convert to dd-mm-yyyy format\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n\n    # if no match is found, return original input string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dd_mm_yyyy_pattern = r'(\\d{2})-(\\d{2})-(\\d{4})'\n\n    match = re.search(yyyy_mm_dd_pattern, dt)\n    if match:\n        yyyy = match.group(1)\n        mm = match.group(2)\n        dd = match.group(3)\n        yyyy_mm_dd = f'{yyyy}-{mm}-{dd}'\n        return yyyy_mm_dd\n\n    match = re.search(dd_mm_yyyy_pattern, dt)\n    if match:\n        dd = match.group(1)\n        mm = match.group(2)\n        yyyy = match.group(3)\n        dd_mm_yyyy = f'{dd}-{mm}-{yyyy}'\n        return dd_mm_yyyy\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # replace '-' with '/'\n    dt = re.sub(r'(-)', '/', dt)\n    # split date and time\n    date_time = dt.split(' ')\n    # extract date part\n    date_part = date_time[0]\n    # replace '-' with '/' and extract month and day parts\n    date_parts = date_part.split('-')\n    month = date_parts[1]\n    day = date_parts[2]\n    # extract year part\n    year_part = date_time[1]\n    # convert date parts to dd-mm-yyyy format\n    date_format = day + '-' + month + '-' + year_part\n    return date_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = r'^\\d{4}-\\d{2}-\\d{2}$'\n    dd_mm_yyyy = r'^\\d{2}-\\d{2}-\\d{4}$'\n\n    if re.match(yyyy_mm_dd, dt):\n        return dt.replace('-', '/')\n    elif re.match(dd_mm_yyyy, dt):\n        return dt.replace('/', '-')\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the re.sub() function to replace the yyyy-mm-dd format with dd-mm-yyyy format\n    new_dt = re.sub(pattern, lambda m: m.group(0)[6:4] + '-' + m.group(0)[4:2] + '-' + m.group(0)[2:0], dt)\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching date formats\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # search for the pattern in the input string\n    match = re.search(pattern, dt)\n    \n    # check if the pattern is found\n    if match:\n        # extract the matched groups from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        \n        # convert the date to dd-mm-yyyy format\n        formatted_date = f'{day}-{month}-{year}'\n        \n        return formatted_date\n    else:\n        # if the pattern is not found, return the input date\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match the pattern and extract the groups of numbers\n    match = re.match(pattern, dt)\n\n    if match:\n        # extract the groups of numbers\n        year, month, day = match.groups()\n        # format the date in dd-mm-yyyy format\n        dt_new = f'{day}-{month}-{year}'\n        # return the new date\n        return dt_new\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        \n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n\n    while h < n//3:\n        h = 3 * h + 1\n\n    while h >= 1:\n        for i in range(h, n):\n            for j in range(i, n, h):\n                key = my_list[j]\n                temp = my_list[j - h]\n                while j - h >= 0 and key < temp:\n                    my_list[j] = temp\n                    j -= h\n                    temp = my_list[j - h]\n                my_list[j] = key\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Define the gap sequence\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        \n        # Iterate through the array with a gap\n        for i in range(gap, len(my_list)):\n            \n            # Move elements of the array to their correct position\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        \n        # Decrease the gap size\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # get the length of the list\n    n = len(my_list)\n    \n    # the gap is the increment at each iteration\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            # move the element to its correct position\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # shrink the gap by a factor of 2\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns a new tuple with the elementwise and of the two tuples.\n    '''\n    return tuple(elem1 and elem2 for elem1, elem2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # extract the length of the two tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n\n    # check if the two tuples have the same length\n    if length1!= length2:\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    # create an empty list to store the elementwise and tuples\n    and_list = []\n\n    # iterate over the elements of both tuples\n    for i in range(length1):\n        # perform the elementwise and operation between the corresponding elements of the tuples\n        and_element = test_tup1[i] & test_tup2[i]\n\n        # add the elementwise and element to the list of and elements\n        and_list.append(and_element)\n\n    # return the list of and elements as a tuple\n    return tuple(and_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and of the two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and of the two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    # Create a new empty list to store the elementwise and tuples\n    and_tuples_list = []\n    # Loop through the input tuples and extract the elementwise and tuples\n    for i in range(len(test_tup1)):\n        and_tuples_list.append((test_tup1[i] & test_tup2[i]))\n    # Return the elementwise and tuples as a tuple\n    return tuple(and_tuples_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples should have the same length.')\n    and_tuple = ()\n    for i in range(len(test_tup1)):\n        and_tuple += (test_tup1[i] & test_tup2[i],)\n    return and_tuple"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"There is no directrix.\"\n    elif d == 0:\n        x = -b/(2*a)\n        return f\"The directrix is {x}.\"\n    else:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        return f\"The directrix is between {x1} and {x2}.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"The parabola has no real roots.\")\n    else:\n        directrix = (-b - math.sqrt(discriminant)) / (2*a)\n        print(\"The directrix of the parabola is at x =\", directrix)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Formula for the directrix\n    directrix = (-b + (-b**2 + 4*a*c)**0.5) / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The equation has no real roots.\"\n    elif discriminant == 0:\n        x = (-b)/(2*a)\n        return f\"The directrix is {x}.\"\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The directrix is between {x1} and {x2}.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant of the quadratic equation\n    disc = b**2 - 4*a*c\n    # Check if the equation has a real root\n    if disc >= 0:\n        # Find the two real roots of the equation\n        root1 = (-b + disc**(1/2))/(2*a)\n        root2 = (-b - disc**(1/2))/(2*a)\n        # Return the two roots in a list\n        return [root1, root2]\n    else:\n        # Return an error message\n        return \"The equation has no real roots.\"\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"No real roots\")\n    elif discriminant == 0:\n        print(\"One real root\")\n        x1 = -b/(2*a)\n        print(\"The directrix is:\", x1)\n    else:\n        print(\"Two real roots\")\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is:\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n\n    if delta < 0:\n        return \"No real roots\"\n    elif delta == 0:\n        return (-b)/(2*a)\n    else:\n        return (-b + delta**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is negative\n    if disc < 0:\n        print(\"The directrix of the parabola is complex.\")\n        return\n    \n    # Calculate the two roots of the discriminant\n    root1 = (-b + disc**0.5)/(2*a)\n    root2 = (-b - disc**0.5)/(2*a)\n\n    # Sort the roots in ascending order\n    roots = sorted([root1, root2])\n\n    # Check if the roots form a right triangle\n    if roots[0]**2 + roots[1]**2 == c**2:\n        print(\"The directrix of the parabola is real and lies on one of the given axes.\")\n        return\n\n    # Calculate the angle between the x-axis and the directrix\n    angle = math.acos((roots[0]/roots[1])*math.sqrt((roots[0]**2 + roots[1]**2)/(c**2)))\n\n    # Convert the angle to degrees\n    angle = math.degrees(angle)\n\n    # Print the directrix angle and the roots of the parabola\n    print(\"The directrix of the parabola is real and lies on the line passing through the points (0,0), (\", roots[0], \", \", roots[1], \").\")\n    print(\"The angle between the x-axis and the directrix is\", angle, \"degrees.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is\", x1, \"or\", x2)\n    else:\n        print(\"The directrix is not defined\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant of the quadratic equation\n    disc = b**2 - 4*a*c\n\n    # If the discriminant is less than zero, then the directrix is imaginary\n    if disc < 0:\n        return \"The directrix is imaginary\"\n    # If the discriminant is zero, then the directrix is real\n    elif disc == 0:\n        return \"The directrix is real and equal to \" + str(-b/(2*a))\n    # If the discriminant is positive, then the directrix is real\n    else:\n        root = math.sqrt(disc)\n        return \"The directrix is real and between \" + str((-b + root)/(2*a)) + \" and \" + str((-b - root)/(2*a))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create sets for both lists to make the comparison faster\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if there is at least one common element\n    if set1 & set2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set from list1 to eliminate duplicates\n    list1_set = set(list1)\n    # loop through list2 and check if any elements are in the set\n    for element in list2:\n        if element in list1_set:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # loop through each element in both lists\n    for element in list1 + list2:\n        # check if element is in both lists\n        if element in list1 and element in list2:\n            # if element is in both lists, return True\n            return True\n    # if no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = set(list1) & set(list2)\n    return len(common_elements) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if the two lists have any elements\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    # Iterate through each element in the first list\n    for elem in list1:\n        # Check if the element is in the second list\n        if elem in list2:\n            # If it is, return True\n            return True\n    # If the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # loop through each element in the first list\n    for element in list1:\n        # check if the element is in the second list\n        if element in list2:\n            # if it is, return True\n            return True\n    # if no common element was found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for i in list1:\n        if i in list2:\n            common_elements.append(i)\n    if common_elements:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_length = (base1 + base2) / 2\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    area = 0.5 * base1 * base2 * math.sin(math.pi / 6)\n    trapezium_length = 2 * area * height\n\n    # Calculate the two lengths of the trapezium that make up the median\n    median1 = math.sqrt(base1 ** 2 + height ** 2)\n    median2 = math.sqrt(base2 ** 2 + height ** 2)\n\n    # Determine which length is longer and add the shorter length to the median\n    if trapezium_length > median1 + median2:\n        median_length = median1 + median2\n    else:\n        median_length = median2 + median1\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the semi-perimeter of the trapezium using the formula\n    semi_perimeter = 0.5 * (base1 + base2)\n    # Calculate the length of the trapezium using the formula\n    length = math.sqrt(semi_perimeter * (semi_perimeter - base1) * (semi_perimeter - base2))\n    # Calculate the median using the formula\n    median = 0.5 * (area + length)\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium using the trapezoidal rule.\n\n    Args:\n    base1: int - the length of the base of the first trapezium\n    base2: int - the length of the base of the second trapezium\n    height: int - the height of the trapezium\n\n    Returns:\n    float - the median length of the trapezium\n    '''\n\n    # Calculate the areas of the trapeziums\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the bases of the trapeziums\n    base1_half = 0.5 * base1\n    base2_half = 0.5 * base2\n\n    # Calculate the height of the trapeziums\n    height_half = 0.5 * height\n\n    # Calculate the areas of the trapeziums using the trapezoidal rule\n    area1_trapezoid = 0.5 * (base1 + base1_half) * height_half\n    area2_trapezoid = 0.5 * (base2 + base2_half) * height_half\n\n    # Calculate the area of the entire trapezium\n    area_trapezium = area1 + area2 + area1_trapezoid + area2_trapezoid\n\n    # Calculate the height of the trapezium using the trapezoidal rule\n    height_trapezium = 0.5 * (area_trapezium / (base1 + base2))\n\n    # Calculate the median length of the trapezium\n    median = 0.5 * (base1 + base2)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + 2 * height\n\n    # Calculate the length of the trapezium at the top and bottom\n    length_top = math.sqrt(2 * area / (perimeter * (perimeter - base1 * base2)))\n    length_bottom = math.sqrt(2 * area / (perimeter * (perimeter - base2 * base1)))\n\n    # Find the median length by taking the average of the two lengths\n    median_length = (length_top + length_bottom) / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Args:\n    base1 (float): the length of the first base of the trapezium\n    base2 (float): the length of the second base of the trapezium\n    height (float): the height of the trapezium\n\n    Returns:\n    float: the median length of the trapezium\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2)\n\n    # Calculate the difference between the perimeter and the area\n    difference = perimeter - area\n\n    # Calculate the area of the trapezium's base\n    base_area = 0.5 * base1 * base2 * height\n\n    # Calculate the height of the trapezium's base\n    base_height = 0.5 * difference / base_area\n\n    # Calculate the area of the trapezium's top\n    top_area = (base1 + base2) * base_height\n\n    # Calculate the area of the trapezium's bottom\n    bottom_area = (base1 + base2) * (height - base_height)\n\n    # Calculate the area of the trapezium\n    total_area = area + top_area + bottom_area\n\n    # Calculate the length of the trapezium's base\n    base_length = 0.5 * base_area / total_area\n\n    # Calculate the length of the trapezium's top\n    top_length = (base1 + base2) * base_height\n\n    # Calculate the length of the trapezium's bottom\n    bottom_length = (base1 + base2) * (height - base_height)\n\n    # Calculate the length of the trapezium\n    total_length = base_length + top_length + bottom_length\n\n    # Calculate the median length of the trapezium\n    median_length = total_length / 3\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium given the base and height of the base.\n    The function first calculates the areas of the trapeziums and then calculates the length of the trapeziums based on the formula:\n    length = 0.5 * base * height\n    The function then sorts the trapeziums based on the lengths and calculates the median based on the formula:\n    median = (sum of lengths) / number of trapeziums\n    '''\n\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    if area1 > area2:\n        area1, area2 = area2, area1\n\n    area_total = area1 + area2\n\n    if area_total % 2 == 0:\n        n = area_total // 2\n        num_trapeziums = 2\n        lengths = [0.5 * base1 * height, 0.5 * base2 * height]\n    else:\n        n = (area_total - 1) // 2\n        num_trapeziums = 1\n        lengths = [0.5 * base1 * height]\n\n    lengths.sort()\n    median = (lengths[n-1] + lengths[n]) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Find the length of each half of the trapezium\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n    \n    # Find the length of the first half of the trapezium\n    half_height1 = height / 2\n    \n    # Find the length of the second half of the trapezium\n    half_height2 = height / 2 - half_height1\n    \n    # Find the length of the third half of the trapezium\n    half_height3 = half_height1\n    \n    # Add the lengths of the first two halves\n    total_height = half_height1 + half_height2\n    \n    # Find the length of the fourth half of the trapezium\n    half_height4 = total_height - half_height3\n    \n    # Calculate the length of the trapezium using Heron's formula\n    trapezium_length = (half_base1 + half_base2 + half_height3 + half_height4) / 2\n    \n    # Return the median length of the trapezium\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    perimeter = 0.5 * base1 + 0.5 * base2\n    return perimeter / 2 + height / 2 - area / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    :param base1: Length of the first base of the trapezium.\n    :param base2: Length of the second base of the trapezium.\n    :param height: Height of the trapezium.\n    :return: The median length of the trapezium.\n    \"\"\"\n    area = 0.5 * (base1 + base2) * height\n\n    if area > 0:\n        length1 = base1 * 0.5\n        length2 = base2 * 0.5\n        length3 = height * 0.5\n\n        lengths = [length1, length2, length3]\n        lengths.sort()\n\n        if (area - length1) > (length2 - area):\n            return lengths[1]\n        else:\n            return lengths[0]\n    else:\n        return None"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(f'{number} is greater than {num}')\n            return\n    print(f'{number} is not greater than any element in the array')"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"The number {number} is greater than the element at index {i}.\")\n            return True\n    print(f\"The number {number} is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    if len(arr) == 0:\n        return False\n    elif number > arr[0]:\n        return True\n    else:\n        return check_greater(arr[1:], number)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(?=b+)')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    result = re.search(pattern, text)\n    if result:\n        return result.start()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return last_Digit(n//10) + n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # remove the first digit from the number\n    n = str(n)[1:]\n    # return the last digit\n    return n[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    # initializing an empty list to store negative numbers\n    neg_list = []\n    \n    # iterating over each element in the list\n    for num in list1:\n        # checking if the element is negative\n        if num < 0:\n            # adding negative numbers to the neg_list\n            neg_list.append(num)\n    \n    # returning the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a list of negative numbers in the given list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list containing only the negative numbers present in the input list.\n    '''\n    # create an empty list to store the negative numbers\n    neg_list = []\n\n    # iterate over the elements of the input list\n    for num in list1:\n        # if the number is negative, append it to the negative list\n        if num < 0:\n            neg_list.append(num)\n\n    # return the negative list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create an empty string to store the new string without odd characters\n    new_str = ''\n    # loop through each character in the original string\n    for char in str1:\n        # check if the character is odd and append it to the new string if it is\n        if char % 2!= 0:\n            new_str += char\n    # return the new string without odd characters\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the even characters\n    even_str = ''\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if it is odd, add it to the even string\n            even_str += char\n    # return the even string\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_str = ''\n    for char in str1:\n        if ord(char) % 2!= 0:\n            odd_str += char\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and returns the string with all odd characters removed.\n    \"\"\"\n    # Create an empty string to store the even characters\n    even_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd or not\n        if int(char) % 2 == 0:\n            # If it's even, append it to the even_str variable\n            even_str += char\n        else:\n            # If it's odd, do nothing (leave it in the even_str variable)\n            pass\n    \n    # Return the even_str variable as the output\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create an empty list to store odd characters\n    odd_chars = []\n    # iterate through the string\n    for char in str1:\n        # check if the character is odd\n        if int(char) % 2!= 0:\n            # append the odd character to the list\n            odd_chars.append(char)\n    # join the list of odd characters into a string\n    result = ''.join(odd_chars)\n    # return the result\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    str2 = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2!= 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] + test_list[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1:]:\n                count += 1\n            if (test_list[j][0], test_list[i][0]) in test_list[j][1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Initialize count variable\n    count = 0\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the tuples are bi-directional\n            if test_list[i] in test_list[j] and test_list[j] in test_list[i]:\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            if test_list[i] == test_list[i + j + 1] and test_list[i + j + 1] == test_list[i + len(test_list) - j - 2]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0] and test_list[j][1] == test_list[i][0]:\n                bidirectional_count += 1\n    \n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Initialize count variable\n    count = 0\n\n    # Iterate through the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[j][1]) in test_list[i][2:] and (test_list[i][1], test_list[j][1]) in test_list[j][2:]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Count the number of bidirectional tuple pairs in a list.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The number of bidirectional tuple pairs in the list.\n    '''\n\n    # Initialize two counters for counting the number of pairs\n    count_1 = 0\n    count_2 = 0\n\n    # Iterate over the list\n    for tup1, tup2 in test_list:\n        # Check if the elements are in the same order\n        if tup1[0] == tup2[1] and tup1[1] == tup2[0]:\n            count_1 += 1\n        elif tup1[0] == tup2[0] and tup1[1] == tup2[1]:\n            count_2 += 1\n\n    # Return the total count\n    return count_1 + count_2"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through each number in the list\n    for num in L:\n        # Check if the number is a multiple of 3\n        if num % 3 == 0:\n            # If it is, add it to the result string\n            result += str(num)\n    \n    # Return the result string as an integer\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] + multiple_to_single(L[1:])"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for i in L:\n        total *= i\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for num in L:\n        single = single * 10 + num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum = 0\n    for i in range(len(L)):\n        sum += L[i]\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize variable to store the result\n    result = 0\n    # loop through each element in the list\n    for num in L:\n        # multiply the current element with 10 to get the first digit\n        first_digit = num * 10\n        # subtract the first digit from the current number to get the last digit\n        last_digit = num - first_digit\n        # add the last digit to the result\n        result += last_digit\n    # return the result\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression to match adverbs\n    pattern = r'(?<![\\w\\d])(?<![\\w\\d\\s])(adv)(' + \\\n              r'(?!in|on|to|the|and|but|or)[\\w\\d\\s]*)(?![\\w\\d\\s])(?=[\\w\\d\\s]|$)'\n\n    # Find all the matches in the given sentence using the regular expression\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Initialize a dictionary to store the position of adverbs\n    adverbs = {}\n\n    # Iterate over the matches and add their positions to the dictionary\n    for match in matches:\n        adverb = match[0].lower()\n        position = match[1]\n        if adverb in adverbs:\n            adverbs[adverb].append(position)\n        else:\n            adverbs[adverb] = [position]\n\n    # Return the dictionary containing the positions of adverbs\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the pattern for adverbs\n    pattern = r'\\b(?:(?:no|not|not\\s*)|only|only\\s*)\\b'\n\n    # use the re.findall() method to find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # initialize an empty list to store the results\n    results = []\n\n    # iterate over the matches and append each adverb to the results list\n    for i, match in enumerate(matches):\n        adverb = match.lower()\n        position = text.lower().find(match.lower())\n\n        # check if the adverb is a complete word\n        if match.endswith('.'):\n            position += 1\n\n        # add the result to the results list\n        results.append((adverb, position))\n\n    return results"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define the regular expression pattern to find adverbs\n    adverb_pattern = re.compile(r'\\b(really|greatly|greatly|significantly|substantially|substantially|very|quite|much|quite|kindly|much|rather|quite|significantly|not|not|slightly|slightly|quite|rather|quite|slightly|slightly|quite|slightly|quite|slightly|slightly|quite|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slightly|quite|slightly|slight"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall('\\b\\w+\\b', text)\n    \n    # Check if there are any adverbs in the sentence\n    if adverbs:\n        # Find the position of the first adverb in the sentence\n        position = text.index(adverbs[0])\n        \n        # Print the position and the adverb\n        print(f\"The adverb '{adverbs[0]}' is at position {position}.\")\n    else:\n        print(\"There are no adverbs in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define the regular expression pattern for adverbs\n    adverb_pattern = r'\\b(also|also\\s+|also,\\s+|also:\\s+|also.\\s+|also!)\\b'\n\n    # Search for the adverb pattern in the text and return a list of tuples containing the adverb and its position\n    matches = re.findall(adverb_pattern, text)\n    if matches:\n        # Convert the list of matches to a list of tuples\n        adverbs = [(match[0], text.index(match[0])) for match in matches]\n        return adverbs\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Pattern to match adverbs\n    pattern = r'\\b([a-z]+)([.,!?])\\b'\n    # Find all matches in the given sentence\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n    # Iterate through all matches and extract the adverb and its position\n    for match in matches:\n        adverb = match[0].lower()\n        position = text.lower().index(match[0].lower())\n        # Add the adverb and its position to the list of adverbs\n        adverbs.append((adverb, position))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Regular expression pattern to find adverbs\n    pattern = r'\\b\\w+ed\\b|\\b\\w+ing\\b|\\b\\w+ly\\b|\\b\\w+s\\b|\\b\\w+ed\\b'\n    \n    # Find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    \n    # Iterate through all matches and extract the adverbs and their positions\n    for match in matches:\n        # Extract the word that is being adverbized\n        adverb = match.strip('edinglys')\n        \n        # Check if the adverb is already in the list\n        if adverb not in adverbs:\n            # If the adverb is not in the list, add it to the list and its position to the output list\n            adverbs.append((adverb, text.index(match)))\n            \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function finds the first adverb in a given sentence and returns a list of tuples, where each tuple contains the\n    adverb and its position in the sentence.\n    '''\n    \n    # Define a regular expression pattern for identifying adverbs\n    pattern = re.compile(r'\\b(\\w+)(?:st|nd|rd|th)\\b', re.IGNORECASE)\n    \n    # Find all matches for the pattern in the text\n    matches = pattern.findall(text)\n    \n    # Create a list of tuples, where each tuple contains the adverb and its position in the sentence\n    positions = []\n    for match in matches:\n        adverb = match[0]\n        position = int(match[1][-1])\n        positions.append((adverb, position))\n    \n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+\\b\\s*([a-z]*[vbd]|[a-z]*[nnp]|[a-z]*[rfl]|[a-z]*[jkl])\\s*', text)\n\n    # Print the adverbs and their positions\n    for adverb, index in adverbs:\n        print(f\"{adverb} found at position {index}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a given sentence and finds the first adverb and its position in that sentence.\n\n    Parameters:\n        text (str): A string containing the sentence\n\n    Returns:\n        adverb (str): The first adverb found in the sentence.\n        position (int): The position of the adverb in the sentence.\n    '''\n\n    # Use regular expressions to find all the adverbs\n    adverbs = re.findall(r'\\b\\w*ing\\b', text)\n\n    # If there are no adverbs, return None\n    if not adverbs:\n        return None, None\n\n    # Get the first adverb and its position\n    adverb, position = adverbs[0]\n\n    return adverb, int(position)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n\n    # Calculating the surface area of a cube using the formula s = 6 * l^2\n    s = 6 * l * l\n\n    # Returning the calculated surface area\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l  # formula for surface area of a cube\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * l**2 # surface area of cube\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2 + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i')\n    neg_count = array('i')\n\n    for num in nums:\n        if num > 0:\n            pos_count.append(num)\n        else:\n            neg_count.append(num)\n\n    pos_count.sort()\n    neg_count.sort()\n\n    if len(pos_count) > 0:\n        pos_ratio = float(len(pos_count)) / float(len(nums))\n    else:\n        pos_ratio = 0\n\n    if len(neg_count) > 0:\n        neg_ratio = float(len(neg_count)) / float(len(nums))\n    else:\n        neg_ratio = 0\n\n    return pos_ratio, neg_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_sum = 0\n    positive_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_sum += num\n            positive_count += 1\n\n    if positive_count == 0:\n        return 0.0\n\n    return positive_sum / positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_num = 0\n    for i in arr:\n        if i > 0:\n            positive_num += 1\n    \n    if positive_num == 0:\n        return 0\n    \n    else:\n        return positive_num / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the array to a list\n    nums_list = list(nums)\n\n    # Initialize two counters\n    pos_count = 0\n    neg_count = 0\n\n    # Loop through the list\n    for num in nums_list:\n\n        # If the number is positive, increment the positive counter\n        if num > 0:\n            pos_count += 1\n\n        # If the number is negative, increment the negative counter\n        elif num < 0:\n            neg_count += 1\n\n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums_list)\n\n    # Return the result\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize counters\n    pos = 0\n    neg = 0\n    \n    # Iterate through the array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            pos += 1\n        else:\n            neg += 1\n    \n    # Calculate and return the ration\n    return pos / (pos + neg)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list\n    nums_list = list(nums)\n    # Initialize two variables to count positive and negative numbers respectively\n    positive = 0\n    negative = 0\n    \n    # Iterate through the list and count the positive and negative numbers\n    for num in nums_list:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n    \n    # Calculate the ration of positive numbers\n    if positive > 0 and negative > 0:\n        ration = positive / (positive + negative)\n    elif positive == 0:\n        ration = 0\n    else:\n        ration = negative / positive\n    \n    # Return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Create an array to store positive numbers\n    positive_nums = array('i')\n\n    # Iterate through the array and add positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n\n    # Calculate the ration of positive numbers\n    positive_count = len(positive_nums) / len(nums)\n\n    # Return the ration\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(lst):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = lst[0]\n    for i in lst:\n        if i < 0 and i > max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -999999999\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    neg_list = [x for x in list1 if x < 0]\n    return max(neg_list) if neg_list else None"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = float('-inf') # initialize largest to negative infinity\n    for num in list1:\n        if num < 0:\n            if num > largest: # update largest if current num is larger\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')  # initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # Initialize the trimmed list with an empty list\n    trimmed_list = []\n    \n    # Loop through the given tuple list\n    for tup in test_list:\n        # Extract the first k elements of the tuple\n        first_k_elements = tup[:K]\n        \n        # Append the first k elements of the tuple to the trimmed list\n        trimmed_list.append(first_k_elements)\n    \n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(len(tup)):\n            if i < K:\n                trimmed_tup += (tup[i],)\n            else:\n                break\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    This function takes a list of tuples as input and trims each tuple by K in the list.\n    '''\n\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # Trim the element by K\n            if j >= K:\n                test_list[i][j] = ''\n\n    # Return the modified list of tuples\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][i:i+K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # initialize a counter for the number of elements in the tuple\n        count = 0\n        \n        # loop through each element in the tuple\n        for elem in tup:\n            # increment the count if the element is not equal to K\n            if elem!= K:\n                count += 1\n                \n        # if the count is greater than K, trim the tuple\n        if count > K:\n            trimmed_list.append(tup[:K])\n        # otherwise, add the original tuple to the list\n        else:\n            trimmed_list.append(tup)\n            \n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list\n    for tup in test_list:\n        # check if the length of the tuple is greater than k\n        if len(tup) > K:\n            # remove the elements from the tuple based on k\n            tup = tup[:K]\n        # add the trimmed tuple to the new list\n        new_list.append(tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[i] for i in range(len(tup)) if i % K!= 0)\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(x[i:i+K]) for x in test_list]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize a new tuple to store the multiplication result\n    multiplication_result = ()\n    \n    # iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # multiply the corresponding element of the first tuple with the corresponding element of the second tuple\n        multiplication_result += (test_tup1[i] * test_tup2[i],)\n    \n    # return the multiplication result as a new tuple\n    return multiplication_result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication = []\n    for i in range(len(test_tup1)):\n        multiplication.append(test_tup1[i] * test_tup2[i])\n    return multiplication"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize an empty tuple to store the result\n    result = ()\n\n    # loop through the elements of the first tuple and multiply each element with the corresponding element of the second tuple\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same number of elements.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        print(f\"{i}: {test_tup1[i]} * {test_tup2[i]} = {test_tup1[i] * test_tup2[i]}\")"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert the tuple to a set to remove duplicates\n    tup = set(tup)\n\n    # create a dictionary to store the count of each element of the tuple\n    count = {}\n\n    # iterate over the elements of the tuple and count the occurrences of each element in the list\n    for t in tup:\n        count[t] = tup.count(t)\n\n    # convert the dictionary to a list of tuples and sort them in descending order of count\n    result = sorted(count.items(), key=lambda x: x[1], reverse=True)\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #Counter class to count the occurrence of elements in list in a tuple\n    count = Counter(tup)\n    #loop through the list and count the occurrence of each element in the tuple\n    for element in lst:\n        count[element] += 1\n    #return the count dictionary\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the tuple to a list\n    tup = list(tup)\n    # count the occurrences of each element in the list\n    c = Counter(lst)\n    # create a new tuple with the counted occurrences\n    new_tup = tuple((tup[i], c[lst[i]]) for i in range(len(lst)))\n    return new_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    count = {}\n    \n    for num in tup:\n        count[num] = cnt[num]\n    \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # count the frequency of each element in the list\n    freq = Counter(lst)\n    \n    # iterate over each element in the tuple and count its frequency\n    count = 0\n    for t in tup:\n        if t in freq:\n            count += freq[t]\n            \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count = Counter(lst)\n    for item in count:\n        if item in tup:\n            count[item] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple `tup` and a list `lst` as input.\n    It returns a dictionary with keys as elements of the list and values as their respective counts in the tuple.\n    '''\n    count = Counter(tup)\n    return dict(count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a Counter object for the tuple \n    counter = Counter(tup) \n    # Use the Counter object to count the occurence of each element in the list \n    for i in lst: \n        counter[i] += 1 \n    # Return the final dictionary of the counted occurrences \n    return dict(counter) "
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num*num*num)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of Perrin numbers.\n\n    Args:\n        n (int): The number of terms to be calculated.\n\n    Returns:\n        int: The sum of Perrin numbers up to the nth term.\n    \"\"\"\n    perrin = [1]\n    for i in range(2, n+1):\n        perrin.append(3*perrin[i-1] - 1)\n    return sum(perrin)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**3 - 1) * i + 1\n    return sum\n\nn = int(input(\"Enter the number of terms: \"))\nprint(\"The sum of Perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 3, 5, 7, 9]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    A function to check whether a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef cal_sum(n):\n    '''\n    A function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = 1\n    sum = 0\n    while perrin_num < n:\n        if is_prime(perrin_num):\n            sum += perrin_num\n        perrin_num += 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # check if i is a perrin number\n        if i % 2 == 0:\n            # add i to sum and increment count\n            sum += i\n            count += 1\n\n    # return the sum of perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(i * (i+1))\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize variables\n    p = 1\n    p_sum = 0\n    p_n = 1\n\n    # Calculate the sum of perrin numbers\n    while p_n <= n:\n        p_sum += p\n        p = (p*2) + 1\n        p_n += 1\n\n    return p_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize the sum of perrin numbers to 0\n    sum = 0\n    \n    # loop through the range of n numbers\n    for i in range(n): \n        # calculate the perrin number and add it to the sum\n        sum += i ** 2\n    \n    # return the sum of perrin numbers\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    total = 0\n    for num in perrin_numbers[:n]:\n        total += num\n    return total"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a new list of strings of size specified.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts the specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string[:size])\n        else:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Define an empty list to store extracted strings\n    extracted_list = []\n    # Loop through the input list\n    for i in range(len(str_list)):\n        # Check if the length of the string at index i is less than the desired length l\n        if len(str_list[i]) < l:\n            # If the length is less than l, append the whole string to the extracted list\n            extracted_list.append(str_list[i])\n        else:\n            # If the length is greater than or equal to l, append a substring of length l to the extracted list\n            extracted_list.append(str_list[i][:l])\n    # Return the extracted list\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and the size of the strings as an argument.\n    It returns a list of strings of length l extracted from the original list.\n    '''\n    extracted_str_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_str_list.append(str_list[i])\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for s in str_list:\n        result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified size string from a list of string values.\n    \"\"\"\n    result = []\n    for s in str_list:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings of the specified size.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and returns a list of the specified size\n    of strings from the input list.\n    '''\n    return str_list[:size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for i in range(0, len(l), l):\n        extracted_str.append(' '.join(l[i:i+l]))\n    return extracted_str"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # define a regular expression pattern to match all whitespaces\n    pattern = r'\\s+'\n    # use the re.sub() method to remove all whitespaces from the string\n    text2 = re.sub(pattern, '', text1)\n    # return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regex to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define a regular expression pattern to match any whitespace character\n    pattern = re.compile(r'\\s+')\n    # Use the findall() method of the pattern to find all occurrences of whitespace in the string\n    matches = pattern.findall(text)\n    # Remove all whitespace characters from the string using the replace() method\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regex\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces using regular expression\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    # Calculate the profit\n    profit = sale_amount - actual_cost\n    \n    # Check if the profit is greater than 0\n    if profit > 0:\n        # Calculate the loss amount\n        loss = profit\n        \n        # Return the loss amount\n        return loss\n    else:\n        # Return 0 if the profit is 0\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return (actual_cost - sale_amount)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return sale_amount - actual_cost\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    loss = sale_amount - actual_cost\n    if loss <= 0:\n        return 0\n    else:\n        return loss"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through odd numbers starting from 3 and odd multiples of 3\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # check if the number is divisible by i\n        if n % i == 0:\n            # if it is, add it to the sum\n            sum += i\n    \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors.append(i)\n    sum_of_evens = sum(even_factors)\n    return sum_of_evens"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of that number.\n    '''\n    if n == 2:\n        return 0\n    else:\n        sum = 0\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                if i%2 == 0:\n                    sum += i\n        return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # check if the number is even\n    if n % 2 == 0:\n        # initialize a variable to store the sum of factors\n        sum_of_factors = 0\n\n        # loop through all even numbers from 2 to the square root of the given number\n        for i in range(2, int(math.sqrt(n)) + 1, 2):\n            # check if the given number is divisible by the current even number\n            if n % i == 0:\n                # add the current even number to the sum of factors\n                sum_of_factors += i\n\n        # return the sum of factors\n        return sum_of_factors\n    else:\n        # raise an error if the number is odd\n        raise ValueError(\"The number must be even.\")"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Check if the number is even\n    if n % 2 == 0:\n        print(\"Error: The number should be odd\")\n        return\n    \n    # Create a list of primes using the Sieve of Eratosthenes algorithm\n    isPrime = [True] * (n+1)\n    primes = []\n    p = 2\n    while p*p <= n:\n        if isPrime[p] == True:\n            primes.append(p)\n            for i in range(p*p, n+1, p):\n                isPrime[i] = False\n        p += 1\n    \n    # Find the sum of even factors of the given number\n    sum_of_factors = 0\n    for prime in primes:\n        if prime % 2 == 0:\n            if prime <= n//prime:\n                sum_of_factors += n//prime\n            else:\n                sum_of_factors += prime\n    \n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    sum = 0\n\n    # loop through all odd numbers up to sqrt(n)\n    for i in range(1, int(math.sqrt(n))+1):\n        # check if n is divisible by i\n        if n % i == 0:\n            # check if i is even\n            if i % 2 == 0:\n                # add i to the sum\n                sum += i\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_of_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_even_factors += i\n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and n%2 == 0:\n            evenFactors += i\n    return evenFactors\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Find all words containing 'z' and return them as a list\n    words = re.findall(r'\\b\\w*[zZ]\\w*\\b', text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern to match 'z' in a word\n    pattern = r'\\b[a-zA-Z]+\\b'\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w+z\\b') # matches words containing \"z\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z' in the given text.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    result = re.findall(pattern, text)\n    if len(result) > 0:\n        return result[0][0]\n    else:\n        return 'No word containing \"z\" was found.'"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2:\n            if is_leap_year(year2):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\ndef is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = {1: 31, 3: 31, 5: 31, 7: 31, 8: 30, 10: 31, 12: 31}\n    if monthnum2 in days:\n        if days[monthnum2] == 31:\n            return True\n    return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(monthnum) == 2:\n        monthnum = '0' + monthnum\n    if int(monthnum) <= 12:\n        if len(monthnum) == 1:\n            if int(monthnum) <= 9:\n                if int(monthnum) % 2 == 0:\n                    return '31'\n                else:\n                    return '30'\n            else:\n                if int(monthnum) % 2 == 0:\n                    return '31'\n                else:\n                    return '30'\n        else:\n            if int(monthnum) == 13:\n                return 'Invalid'\n            elif int(monthnum) % 2 == 0:\n                return '31'\n            else:\n                return '30'\n    else:\n        return 'Invalid'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        print(\"The given month number contains 31 days.\")\n    else:\n        print(\"The given month number does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 % 2 == 0 and monthnum2 % 100!= 0 or monthnum2 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31, 2: 28, 4: 30, 6: 30, 9: 30, 11: 30}\n    if monthnum2 in days_in_month:\n        if days_in_month[monthnum2] == 28 and (monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0)):\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if len(str(monthnum2)) == 2:\n        monthnum = int(monthnum2)\n        if monthnum == 2 and monthnum % 4 == 0 or monthnum % 100 == 0 and monthnum % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13):\n        return days[monthnum2 - 1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 % 2 == 0:\n            if monthnum2 == 2:\n                return True\n            elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                return True\n            else:\n                return False\n        else:\n            if monthnum2 == 2:\n                return False\n            elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [x[::-1] for x in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    # Initialize min_len and min_sublist variables\n    min_len = float('inf')\n    min_sublist = None\n    \n    # Iterate over all sublists in the input list\n    for i in range(len(lst)):\n        # Initialize current sublist length and its index\n        current_len = 1\n        current_index = i\n        \n        # Iterate over all elements in the current sublist\n        while current_index < len(lst) and lst[current_index] == lst[current_index-1]:\n            current_len += 1\n            current_index += 1\n        \n        # If current sublist length is less than minimum length, update min_len and min_sublist\n        if current_len < min_len:\n            min_len = current_len\n            min_sublist = lst[i:i+current_len]\n    \n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists.append(lst[i:j])\n    min_sublist = min(sublists, key=len)\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list lst as input and returns the sublist with the minimum length.\n    '''\n\n    # Initialize minimum sublist length and initialize a variable to store the sublist with minimum length\n    min_len = float('inf')\n    min_sublist = []\n\n    # Iterate through the list and check if the current sublist has a length smaller than minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize minimum length and its index to infinity\n    min_len = float('inf')\n    min_idx = 0\n\n    # iterate through the list of sublists\n    for i in range(len(lst)):\n        # check if the current sublist has a length less than the minimum length\n        if len(lst[i]) < min_len:\n            # update the minimum length and its index\n            min_len = len(lst[i])\n            min_idx = i\n\n    # return the sublist at the minimum index\n    return lst[min_idx]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(\"The area of the rectangle is\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes all uppercase substrings present in the string.\n    '''\n    pattern = r'[A-Z]'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to remove uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # Remove all uppercase substrings from the string\n    pattern = re.compile('[A-Z]+')\n    string = pattern.sub('', string)\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to remove uppercase substrings from string\n    pattern = re.compile(r'(?i)(?<=\\w)(\\p{Lu})(?=\\w)')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n    \n    # Find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Iterate through the matches and remove each one from the string\n    for match in matches:\n        str1 = re.sub(r'\\b'+match+r'\\b', '', str1)\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_uppercase(str1):\n    # create a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # find all uppercase substrings in the string using the regular expression\n    matches = pattern.findall(str1)\n\n    # remove all uppercase substrings from the string using a list comprehension\n    return ''.join([char for char in str1 if char not in matches])"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # iterate over all matches in the string using the pattern\n    for match in pattern.finditer(str1):\n        # replace the matched substring with an empty string\n        str1 = str1.replace(match.group(), '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Replace all uppercase substrings with empty string\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Loop through each word and remove any uppercase substrings\n    for i in range(len(words)):\n        if re.search('[A-Z]', words[i]):\n            # Remove any uppercase substrings in the current word\n            words[i] = re.sub('[A-Z]', '', words[i])\n    \n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the given string\n    matches = re.findall(r'[A-Z]+', str1)\n    # Remove all uppercase substrings from the string\n    new_str = re.sub(r'[A-Z]+', '', str1)\n    # Return the modified string\n    return new_str"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    # Loop through the sublists\n    for sublist in lst:\n        # If the sublist has only one element, return it\n        if len(sublist) == 1:\n            return sublist[0]\n        # If the sublist has multiple elements, return the first element\n        else:\n            return sublist[0]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the extracted elements\n    extracted = []\n    # Iterate over each sublist in the list\n    for sublist in lst:\n        # Check if the sublist is not empty\n        if sublist:\n            # Extract the first element of the sublist\n            element = sublist[0]\n            # Append the extracted element to the extracted list\n            extracted.append(element)\n    # Return the extracted list\n    return extracted"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        if isinstance(i, list):\n            res.append(Extract(i)[0])\n        else:\n            res.append(i)\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    # Define an empty list to store the first element of each sublist\n    first_elements = []\n    \n    # Iterate through each sublist in the input list\n    for sublist in lst:\n        # Check if the sublist is not empty\n        if sublist:\n            # Append the first element of the sublist to the first_elements list\n            first_elements.append(sublist[0])\n        else:\n            # If the sublist is empty, append None to the list\n            first_elements.append(None)\n            \n    # Return the first_elements list\n    return first_elements"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list to store the combinations\n    combinations = []\n    \n    # Iterate over each element of the list\n    for i in range(len(list1)):\n        # Create a list to store the remaining elements of the list\n        remaining_elements = list1[i:]\n        \n        # Iterate over each element of the remaining list\n        for j in range(len(remaining_elements)):\n            # Create a tuple of the current and remaining element\n            combination = (list1[i], remaining_elements[j])\n            \n            # Add the combination to the list of combinations\n            combinations.append(combination)\n            \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n\n    def backtrack(start, path, result):\n        if len(path) == len(list1):\n            result.append(path[:])\n            return\n\n        for i in range(start, len(list1)):\n            backtrack(i+1, path + [list1[i]], result)\n\n    result = []\n    backtrack(0, [], result)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in range(i):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i):\n            print(list1[j], end=' ')\n        print()"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create a list to store all combinations of the given list\n    combinations = []\n\n    # Loop through each element of the given list\n    for i in range(len(list1)):\n        # Create a list to store the remaining elements of the given list\n        remaining = list1[:i] + list1[i+1:]\n\n        # Loop through each element of the remaining list to create combinations\n        for j in range(len(remaining)):\n            # Combine the current element with the element at position j and append the combination to the combinations list\n            combination = [list1[i]] + remaining[:j] + remaining[j+1:]\n            combinations.append(combination)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through the list of elements\n    for i in range(len(list1)):\n        # Initialize an empty list to store the remaining elements\n        remaining_elements = list1.copy()\n        remaining_elements.pop(i)\n\n        # Find all possible combinations of remaining elements\n        for j in range(1, len(remaining_elements) + 1):\n            # Add the current element to the combination\n            combination = [list1[i]]\n\n            # Add the remaining elements to the combination\n            for k in range(j, len(remaining_elements) + 1):\n                combination.append(remaining_elements.pop(0))\n\n            # Add the combination to the list of combinations\n            combinations.append(combination)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize a variable to store all the combinations\n    combinations = []\n    # Create a list of all the indices of the elements in the list\n    indices = [i for i in range(len(list1))]\n\n    # Loop through the list of indices and for each index, loop through the remaining indices and add the combination to the list of combinations\n    for i in indices:\n        for j in range(i+1, len(list1)):\n            # Combine the two indices to form a combination\n            combination = [list1[i], list1[j]]\n            # Add the combination to the list of combinations\n            combinations.append(combination)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        elif current_product < 0:\n            current_product = arr[i]\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product*num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here = 1\n        else:\n            min_ending_here *= arr[i]\n            max_ending_here = 1\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    else:\n        return all(dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if i == 0:\n            first_value = dict[i]\n        elif dict[i]!= first_value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a list to store the values in the dictionary\n    values = []\n    # loop through the dictionary and add each value to the list\n    for value in dict.values():\n        values.append(value)\n    # check if all values in the list are same\n    if values.count(values[0]) == len(values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Loop through the dictionary\n    for value in dict.values():\n        # Check if all the values are same\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a set to keep track of the values\n    values = set()\n\n    # Iterate over the values in the dictionary\n    for value in dict.values():\n        # Add the value to the set\n        values.add(value)\n\n    # Check if all the values are same\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for i in range(n):\n        value = dict.get(i)\n        if value is None:\n            return False\n        for j in range(i+1, n):\n            if dict.get(j)!= value:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = set(dict.values())\n    if len(all_values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for val in dict.values():\n        if val!= dict[next(iter(dict))]:\n            count += 1\n        if count == n:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if n!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if isinstance(value, str) and not value.strip():\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] * arr[1], arr[0] * arr[1])\n    else:\n        dp = [[0] * (n+1) for _ in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, i+1):\n                dp[i][j] = max(dp[i-1][j-1] + arr[i-1] * arr[j-1], dp[i-1][j])\n        return dp[n][n]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    for i in range(1, len(arr)):\n        for j in range(i):\n            temp_product = arr[i] * arr[j]\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_val = arr[0]\n        min_val = arr[0]\n        for i in range(1, n):\n            if arr[i] < 0:\n                temp = max_val\n                max_val = max(min_val*arr[i], arr[i])\n                min_val = temp\n            elif arr[i] > 0:\n                temp = min_val\n                min_val = min(max_val*arr[i], arr[i])\n                max_val = temp\n        return max(max_val, min_val)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Initialize variables for maximum product and current subsequence\n    max_product = float('-inf')\n    curr_product = 1\n    \n    # Iterate through the array and calculate the maximum product and the current subsequence product\n    for num in arr:\n        curr_product = max(curr_product * num, num)\n        max_product = max(max_product, curr_product)\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    current_max = 1\n    for i in range(n):\n        if i == 0:\n            current_max = 1\n        elif i == n-1:\n            current_max = arr[i]\n        else:\n            current_max = max(arr[i], arr[i]*current_max, arr[i]*current_max*arr[i])\n        max_product = max(max_product, current_max)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize variables\n    max_prod = float('-inf')\n    curr_prod = 1\n    prev_num = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # If the current number is less than the previous number\n        if arr[i] < prev_num:\n            # If the current product is greater than the previous max product, update the max product\n            if curr_prod > max_prod:\n                max_prod = curr_prod\n            # Reset the current product\n            curr_prod = 1\n            # Update the previous number\n            prev_num = arr[i]\n        else:\n            # Update the current product\n            curr_prod *= arr[i]\n    \n    # If the last element is the maximum subsequence, update the max product\n    if curr_prod > max_prod:\n        max_prod = curr_prod\n    \n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        else:\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2], test_tup[2] + test_tup[3])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    tup_len = len(test_tup)\n    \n    # Initialize the sum of the pairwise additions\n    add_sum = 0\n    \n    # Loop through each pair of adjacent elements\n    for i in range(1, tup_len-1):\n        # Add the pairwise additions\n        add_sum += test_tup[i-1] + test_tup[i+1]\n    \n    # Return the sum of the pairwise additions\n    return add_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over the tuple using a for loop\n    for i in range(len(test_tup)-1):\n        # Add the current element and the next element to the sum variable\n        sum += test_tup[i] + test_tup[i+1]\n    # Return the sum\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pair_sum = 0\n    for i in range(len(test_tup)-1):\n        pair_sum += test_tup[i] + test_tup[i+1]\n    return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup)-1):\n            result.append(test_tup[i] + test_tup[i+1])\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = 0\n        for i in range(1, len(test_tup)):\n            result += test_tup[i] - test_tup[i-1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        total = test_tup[0]\n        for i in range(1, len(test_tup)-1):\n            total += test_tup[i+1]\n        return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    num_elems = len(test_tup)\n    if num_elems == 0:\n        return None\n    \n    first = test_tup[0]\n    if num_elems == 1:\n        return first\n    \n    second = test_tup[1]\n    third = test_tup[2]\n    if num_elems == 2:\n        return first + second\n    \n    fourth = test_tup[3]\n    if num_elems == 3:\n        return first + second + third\n    \n    # find the sum of the first four elements and the sum of the remaining elements\n    remaining_sum = sum(test_tup[4:])\n    return first + second + third + remaining_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    n = len(test_tup)\n    # Initialize an empty list to store the pairwise sums\n    pairwise_sums = []\n    # Loop through all possible pairs of neighboring elements\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Calculate the pairwise sum and add it to the list of pairwise sums\n            pairwise_sums.append(test_tup[i] + test_tup[j])\n    return pairwise_sums"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    total = 0\n    \n    for i in range(n):\n        if i == 0:\n            total += test_tup[1]\n        elif i == n-1:\n            total += test_tup[n-2]\n        else:\n            total += test_tup[i-1] + test_tup[i]\n            \n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    \"\"\"\n    This function takes in an array and a value n and returns the product of array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr: \n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input and returns the remainder of the array multiplication modulo n.\n    '''\n\n    # Initialize the result variable\n    result = 1\n\n    # Iterate over the array\n    for num in arr: \n        # Multiply the result with the current number modulo n\n        result = (result * num) % n\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Calculate the product of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number as input and returns the product of the array \n    multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Find the product of all the elements in the array\n    product = 1\n    for num in arr:\n        product *= num\n\n    # Find the product of all the elements in the array modulo n\n    modulo_product = product % n\n\n    # Return the modulo product\n    return modulo_product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1 \n    for i in range(len(arr)): \n        prod = (prod*arr[i]) % n \n    return prod "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # check if the list is empty\n    if not l: \n        return False\n\n    # initialize the first number\n    num1 = l[0]\n\n    # iterate through the list\n    for num2 in l[1:]: \n\n        # if the number is the same as the previous number, then return True\n        if num1 == num2: \n            return True\n\n        # if the number is not the same, then initialize the next number\n        else: \n            num1 = num2\n\n    # if we reach this point, then return False as the list contains no consecutive numbers\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0 \n    while i < len(l) - 1: \n        if l[i] + 1 == l[i+1]: \n            print(\"The list contains consecutive numbers\") \n            return True \n        i += 1 "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l) - 1): \n        if l[i] + 1 == l[i+1]: \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    # Initialize variables\n    start = None\n    end = None\n    consecutive = False\n    \n    # Iterate through the list\n    for num in l:\n        # If the number is the first one in the list\n        if start is None:\n            start = num\n            end = num\n            consecutive = True\n            continue\n        \n        # If the number is the same as the last number in the list\n        if num == end + 1:\n            consecutive = True\n            end = num\n            continue\n        \n        # If the number is not consecutive\n        if not consecutive:\n            return False\n        \n        # If the number is consecutive\n        if num!= end + 1:\n            return False\n    \n    # If all the numbers are consecutive\n    if consecutive:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    # Check if the list is empty or not\n    if not l:\n        return False\n    \n    # Initialize two pointers i and j\n    i = 0\n    j = 1\n    \n    # Iterate over the list\n    while j < len(l):\n        # If the current element is equal to the next element, increment i and j\n        if l[i] == l[j]:\n            i += 1\n            j += 1\n        else:\n            # If the current element is not equal to the next element, reset i and move to the next element of the list\n            i = 0\n            j += 1\n    \n    # If the loop completes, return True, otherwise, return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # check if the list is empty\n    if not l:\n        print(\"The list is empty.\")\n        return False\n    \n    # check if the first element is 0\n    if l[0] == 0:\n        print(\"The first element is 0. It cannot be a consecutive number.\")\n        return False\n    \n    # check if the list has only one element\n    if len(l) == 1:\n        print(\"The list has only one element. It cannot be a consecutive number.\")\n        return False\n    \n    # check if the list has only two elements\n    if len(l) == 2:\n        print(\"The list has only two elements. It cannot be a consecutive number.\")\n        return False\n    \n    # check if the difference between the first and last element is greater than 1\n    if abs(l[0] - l[-1]) > 1:\n        print(\"The difference between the first and last elements is greater than 1. It cannot be a consecutive number.\")\n        return False\n    \n    # check if the list contains consecutive numbers\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            print(\"The list contains consecutive numbers.\")\n            return True\n    \n    # if none of the above conditions are met, return False\n    print(\"The list does not contain consecutive numbers.\")\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list of numbers as input and returns True if all the numbers in the list are consecutive, False otherwise.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Creating a set of all elements from the two lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Finding the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Converting the intersection to a list of tuples\n    final_list = list(intersection)\n\n    return final_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert test_list1 and test_list2 to sets to remove duplicates\n    test_list1_set = set(test_list1)\n    test_list2_set = set(test_list2)\n\n    # find the intersection of test_list1_set and test_list2_set\n    intersection_set = test_list1_set.intersection(test_list2_set)\n\n    # convert the intersection set back to a tuple and return it\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert both list to sets to get their unique elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of both sets\n    intersection = set1.intersection(set2)\n    # convert the set back to a tuple list\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [x for x in test_list1 if x in test_list2]"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of unique elements in the first list\n    set1 = set(test_list1)\n\n    # Initialize an empty set to store the common elements\n    common_set = set()\n\n    # Iterate over the unique elements in the first list\n    for item in set1:\n        # Check if the item is also present in the second list\n        if item in test_list2:\n            # If it is, add it to the common set\n            common_set.add(item)\n\n    # Convert the common set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns the tuple intersection of elements.\n    \"\"\"\n    # initialize an empty list to store the common elements\n    common_elements = []\n    \n    # loop through each tuple in test_list1\n    for i in range(len(test_list1)):\n        # loop through each tuple in test_list2\n        for j in range(len(test_list2)):\n            # if the two tuples have the same elements, add it to common_elements\n            if test_list1[i] == test_list2[j]:\n                common_elements.append(test_list1[i])\n    \n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as inputs and returns a new tuple list containing the elements that are present in both lists irrespective of their order.\n    \"\"\"\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    # Iterate over the first list\n    for element in test_list1:\n        # Check if the element is present in the second list\n        if element in test_list2:\n            # If it is, add it to the common_elements list\n            common_elements.append(element)\n    # Return the common_elements list\n    return tuple(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Returns the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and keep only unique elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets using the symmetric_difference method\n    inter = set1.symmetric_difference(set2)\n\n    # Convert the intersection back to a list and return it\n    return list(inter)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of the elements in the first list\n    set1 = set(test_list1)\n    # Create a set of the elements in the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets using the & operator\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns the tuple intersection of the elements in the two lists irrespective of their order.\n    \"\"\"\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes a string, a character to be replaced and a new character as input, and returns the modified string with the replaced character.\n    \"\"\"\n    # check if the given character is already present in the string\n    if ch in str1:\n        # split the string into list of characters\n        str_list = list(str1)\n        # check if the character is at the beginning or the end of the string\n        if str_list.index(ch) == 0:\n            # if it's at the beginning, replace it with the new character\n            str_list[0] = newch\n        elif str_list.index(ch) == len(str_list) - 1:\n            # if it's at the end, replace it with the new character\n            str_list[-1] = newch\n        else:\n            # if it's somewhere in the middle, remove the character and add the new character\n            str_list[str_list.index(ch)] = newch\n        # join the list of characters back to a string and return it\n        return ''.join(str_list)\n    else:\n        # if the given character is not present, return the original string\n        return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the current character is the specified character\n        if str1[i] == ch:\n            # replace it with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n            # break out of the loop\n            break\n    # return the modified string\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Use a loop to replace all occurrences of the old character with the new character in the string\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the current character is the given character\n        if str1[i] == ch:\n            # replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a dictionary with sorted keys based on their values.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Create a Counter object from the dictionary\n    count_obj = Counter(dict1)\n    # Sort the counter object in descending order\n    sorted_count_obj = count_obj.most_common()\n    # Create a dictionary from the sorted counter object\n    sorted_dict = dict(sorted_count_obj)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object with the input dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Create a new dictionary with the sorted items\n    sorted_dict = {}\n    # Loop through the sorted items and add them to the new dictionary\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize two variables to store the sum of the smallest and largest value in the array\n    small_sum = float('inf')\n    large_sum = float('-inf')\n\n    # Iterate through the array and update the sum of the smallest and largest value\n    for num in nums:\n        if num < small_sum:\n            small_sum = num\n        if num > large_sum:\n            large_sum = num\n\n    # Return the sum of the smallest and largest value\n    return small_sum + large_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    # Initialize two variables to store the largest and smallest value in the array\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # Iterate through the array and update the largest and smallest value as required\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest value\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return \"Array must have at least two elements\"\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array as input and returns the sum of the largest and smallest values in the array.\n    '''\n    # Find the maximum value in the array\n    max_val = max(nums)\n    \n    # Find the minimum value in the array\n    min_val = min(nums)\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # calculate the sum of the largest and smallest values\n    sum_largest_smallest = largest + smallest\n    # return the sum\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    return string.lower() == string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # convert the given string to lower case\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether a given string is in lower case or not.\n    '''\n    string = string.lower()\n    if string == string.lower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case.\n    '''\n    lower_string = string.lower()\n    if lower_string == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # remove all lowercase substrings using regex\n    pattern = re.compile('[a-z]+')\n    str2 = pattern.sub('', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # find all lowercase substrings in the string using the regular expression pattern\n    matches = re.findall(pattern, str1)\n    # remove all lowercase substrings from the string\n    str2 = ''.join([char for char in str1 if char.isupper()])\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the string\n    lowercase_substrings = re.findall('[a-z]+', str1)\n\n    # Remove all lowercase substrings from the string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function removes all lowercase substrings from the given string.\n    \"\"\"\n    string = re.sub('[a-z]+', '', string)\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]+', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function removes lowercase substrings from a given string.\n    \"\"\"\n    # define a regular expression pattern for lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n\n    # find all lowercase substrings in the string\n    substrings = pattern.findall(string)\n\n    # loop through each substring and remove it from the string\n    for substring in substrings:\n        string = string.replace(substring, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Remove all lowercase substrings using regular expressions\n    pattern = re.compile(r'[^a-zA-Z]+')\n    str2 = pattern.sub('', str1)\n\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a regular expression to match lowercase substrings\n    lowercase_pattern = re.compile('[a-z]+')\n    # find all lowercase substrings in the given string\n    lowercase_substrings = lowercase_pattern.findall(str1)\n    # loop through each lowercase substring and remove it from the string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all lowercase substrings in the input string\n    substrings = pattern.findall(str1)\n    # Remove all lowercase substrings from the input string\n    new_str = re.sub(r'[a-z]+', '', str1)\n    # Return the new string without lowercase substrings\n    return new_str"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # check if the input is an integer or not\n    if type(n)!= int:\n        print(\"Input must be an integer.\")\n        return\n\n    # find the first digit of the number\n    first_digit = str(n)[0]\n\n    # print the first digit of the number\n    print(\"The first digit of\", n, \"is\", first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    This function takes a positive integer n as input and returns the first digit of the number.\n    '''\n    # convert the integer to a string\n    str_n = str(n)\n    # get the first character of the string\n    digit = str_n[0]\n    # return the first character of the string as an integer\n    return int(digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10 ** (len(str(n))-1)\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # check if the input is an integer\n    if type(n)!= int:\n        print(\"Input must be an integer!\")\n        return\n\n    # find the first digit of the input number using modulo operator\n    first_digit = n % 10\n\n    # print the first digit\n    print(\"The first digit of\", n, \"is\", first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function finds the first digit of a given number.\n\n    :param n: a positive integer\n    :return: the first digit of the input number\n    \"\"\"\n    # Convert the number to a string and take the first character\n    first_char = str(n)[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    return n // 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Initialize an empty list to store odd numbers\n    odd_list = []\n\n    # Iterate through the list\n    for num in list:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, append it to the odd_list\n            odd_list.append(num)\n\n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 1:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list: \n        if num % 2!= 0: \n            result.append(num)\n    return result "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 1:\n            result.append(num)\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of first n natural numbers\n    sum_of_cubes = (n * n * n * (n + 1)) // 6\n    # sum of first n natural numbers\n    sum_of_nums = n * (n + 1) // 2\n    # calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_nums\n    # return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(x**3 for x in range(n+1))\n    sum_natural = sum(range(n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of the first n natural numbers\n    cubes_sum = (n * (n + 1) * (2 * n + 1)) // 6\n    \n    # calculate the sum of the first n natural numbers\n    natural_sum = n * (n + 1) // 2\n    \n    # find the difference between the two sums\n    difference = cubes_sum - natural_sum\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([num**3 for num in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(x**3 for x in range(n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural_numbers = sum(range(n+1))\n\n    # Find the difference between the two sums\n    difference = sum_cubes - sum_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    # finding sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    # finding sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n    \n    # finding difference between sums of cubes and sums of natural numbers\n    difference = sum_of_cubes - sum_of_natural_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n\n    # calculate the sum of first n natural numbers\n    sum_of_numbers = sum(range(1,n+1))\n\n    # calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n\n    # return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # calculate the sum of the first n natural numbers\n    sum_natural_numbers = sum(range(1, n+1))\n\n    # return the difference between the two sums\n    return abs(sum_cubes - sum_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    sum_of_natural = sum(range(n))\n    return sum_of_natural - sum_of_cubes"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes a list A and an integer N as input and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(N):\n            xor ^= A[j] ^ A[i]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if ((A[i] ^ A[j]) & 1) == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair_count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                odd_pair_count += 1\n    return odd_pair_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) % 2!= 0 : \n                count += 1\n    return count "
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Given an array A of size N and a number N, return the number of odd pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Loop through the array A\n    for i in range(len(A)):\n        # Loop through the remaining elements of the array\n        for j in range(i+1, len(A)):\n            # XOR the current pair of elements\n            xor_value = A[i] ^ A[j]\n\n            # Check if the xor value is odd\n            if xor_value % 2!= 0:\n                # Increment the count\n                count += 1\n\n            # Break out of the inner loop if we have found a pair with an odd xor value\n            if count == N:\n                break\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # initialize the count variable\n    count = 0\n\n    # loop through all pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            # check if the xor value is odd\n            if xor % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor & 1 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    This function takes a list A and an integer N as input and returns the number of pairs whose xor value is odd.\n    \n    Parameters:\n    A (list): A list of integers.\n    N (int): An integer.\n    \n    Returns:\n    int: The number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_char = char.upper()\n        elif char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    lowercase_string = string.lower()\n    # Initialize an empty list to store the toggled characters\n    toggled_chars = []\n    # Iterate over the lowercase string and append the toggled characters to the list\n    for char in lowercase_string:\n        if char.isupper():\n            toggled_chars.append(char.lower())\n        else:\n            toggled_chars.append(char.upper())\n    # Join the list of toggled characters into a string and return it\n    return ''.join(toggled_chars)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Check if the character is a lowercase letter\n        if string[i].islower():\n            # Convert the character to uppercase\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # Check if the character is an uppercase letter\n        elif string[i].isupper():\n            # Convert the character to lowercase\n            string = string[:i] + string[i].lower() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # loop through each character in the string\n    for i in range(len(string)):\n        # convert the character to its opposite case\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        else:\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create an empty string to hold the toggled characters\n    toggled_string = \"\"\n    # loop through each character in the original string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            toggled_string += char.lower()\n        # if the character is lowercase, convert it to uppercase\n        elif char.islower():\n            toggled_string += char.upper()\n        # if the character is not uppercase or lowercase, leave it as is\n        else:\n            toggled_string += char\n    # return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    n1 = str(n1)\n    n2 = str(n2)\n    \n    diff_sum = 0\n    for i in range(len(n1)):\n        diff_sum += abs(int(n1[i]) - int(n2[i]))\n    \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    sum = 0\n    for i in range(10):\n        digit1 = n1 // 10**i\n        digit2 = n2 // 10**i\n        diff = digit1 - digit2\n        sum += diff * diff\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    digit_sum = 0\n    while diff > 0:\n        digit_sum += diff % 10\n        diff //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits for easy manipulation\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    # Calculate the per-digit difference between the two lists\n    digit_diffs = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n    # Calculate the sum of the per-digit difference\n    sum_diffs = sum(digit_diffs)\n    # Return the sum of the per-digit difference\n    return sum_diffs"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n    \n    # Calculate the sum of the per-digit difference between the strings\n    sum_per_digit = 0\n    for i in range(len(num1_str)):\n        digit_diff = abs(ord(num1_str[i]) - ord(num2_str[i]))\n        sum_per_digit += digit_diff\n    \n    return sum_per_digit"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to lists of digits\n    num1 = list(map(int, str(n1)))\n    num2 = list(map(int, str(n2)))\n\n    # Find the minimum length of the two numbers\n    min_length = min(len(num1), len(num2))\n\n    # Pad the shorter number with zeros to make it the same length as the longer number\n    if len(num1) < min_length:\n        num1 = num1 + [0] * (min_length - len(num1))\n    elif len(num2) < min_length:\n        num2 = num2 + [0] * (min_length - len(num2))\n\n    # Compute the per-digit difference between the two numbers\n    digit_diff_sum = 0\n    for i in range(min_length):\n        digit_diff_sum += abs(num1[i] - num2[i])\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input numbers to lists of digits\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    # Find the number of digits in the larger number\n    max_len = max(len(num1), len(num2))\n    # Pad the shorter list with zeros\n    num1 = num1 + [0] * (max_len - len(num1))\n    num2 = num2 + [0] * (max_len - len(num2))\n    # Calculate the per-digit difference between the two numbers\n    diff = [abs(num1[i] - num2[i]) for i in range(max_len)]\n    # Calculate the sum of the per-digit differences\n    total = sum(diff)\n    return total"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n\n    Args:\n    n1: An integer.\n    n2: An integer.\n\n    Returns:\n    An integer. The sum of the per-digit difference between n1 and n2.\n    '''\n\n    # Calculate the difference between the two numbers as a string\n    diff_str = str(abs(n1 - n2))\n\n    # Initialize the sum of the differences\n    sum_diff = 0\n\n    # Loop through each digit in the string and add its difference to the sum\n    for digit in diff_str:\n        sum_diff += int(digit)\n\n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the difference between the two numbers\n    diff = n1 - n2\n    \n    # Initialize the sum to 0\n    digit_sum = 0\n    \n    # Loop through each digit in the difference\n    for digit in str(diff):\n        # Convert the digit to an integer and add to the sum\n        digit_sum += int(digit)\n        \n    # Return the sum of the differences\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a counter variable to keep track of the number of digits in the numbers\n    digit_count = len(str(n1)) + len(str(n2))\n    \n    # Convert the numbers to strings and get their digits\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Initialize a variable to hold the sum of the differences between the digits\n    digit_sum = 0\n    \n    # Iterate over each digit in the strings\n    for i in range(digit_count):\n        # Get the digits for the current positions\n        digit1 = int(str1[i])\n        digit2 = int(str2[i])\n        \n        # Calculate the difference between the digits\n        difference = abs(digit1 - digit2)\n        \n        # Add the difference to the running total\n        digit_sum += difference\n    \n    # Return the total sum of the differences\n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(arr, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += arr[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for end in range(size):\n        current_sum += a[end]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end - size + 1\n            \n    return max_sum, a[start:start+size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    elif size == 1:\n        return a[0]\n    else:\n        max_so_far = max_ending_here = a[0]\n        for i in range(1, size):\n            max_ending_here = max(max_ending_here + a[i], a[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size-1:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two input tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # print the union list\n    print(\"Union of elements in the two tuples:\")\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = test_tup1 + test_tup2  # combine the two tuples\n    unique_elements = list(set(union))  # remove duplicates using set\n    sorted_elements = sorted(unique_elements)  # sort the elements\n    return sorted_elements"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set union to get the union of the two sets\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    test_set3 = test_set1.union(test_set2)\n    # Convert the set to a list and sort it\n    sorted_list = sorted(list(test_set3))\n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using the set() function\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    \n    # Output the union in sorted order\n    print(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set of elements from both tuples\n    union_set = test_tup1.union(test_tup2)\n    # Convert set to list and sort it\n    union_list = sorted(list(union_set))\n    # Output the union list\n    print(\"Union of elements:\", union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # remove duplicates using set()\n    unique_tup = list(set(combined_tup))\n    # sort the unique elements\n    unique_tup.sort()\n    # output the sorted elements\n    print(unique_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n\n    # Find the unique elements in the combined tuple\n    unique_elements = list(set(combined_tup))\n\n    # Sort the unique elements in ascending order\n    sorted_elements = sorted(unique_elements)\n\n    # Print the sorted elements\n    print(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Union of the elements of both tuples\n    union = test_tup1 + test_tup2\n\n    # Sort the union in ascending order\n    union.sort()\n\n    # Print the union of the elements\n    print(\"Union of the elements:\", union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # convert the sets back to lists to return the union\n    return sorted(list(set1.union(set2)))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Sort the union elements and print them\n    union_list = sorted(union_set)\n    print(\"Union of the elements of the two tuples:\", union_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for num in lst:\n        if num == lst[0]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    lengths = []\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n        lengths.append(length)\n    return max(lengths)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    #creating an empty list to store the lengths of each sublist\n    lengths = []\n\n    #iterating over the list\n    for i in range(len(lst)):\n        #creating an empty list to store the current sublist\n        current_sublist = []\n        #iterating over the next elements of the list\n        for j in range(i+1, len(lst)):\n            #appending the current element to the current sublist\n            current_sublist.append(lst[j])\n            #checking if the current sublist is longer than the maximum length\n            if len(current_sublist) > len(lengths) or (len(current_sublist) == len(lengths) and len(current_sublist) > max(lengths)):\n                #updating the maximum length\n                lengths = current_sublist\n\n    #returning the maximum length\n    return len(lengths)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        if i == 0:\n            current_length = 1\n            max_length = 1\n        else:\n            if lst[i] == lst[i-1]:\n                current_length += 1\n            else:\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = 1\n\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            if len(lst[i:j+1]) > max_length:  \n                max_length = len(lst[i:j+1])  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_len = 1\n    n = len(lst)\n\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            temp = lst[j-1] - lst[i-1]\n            if temp > max_len:\n                max_len = temp\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i+1, len(lst)):\n            sublist2 = lst[j]\n            if len(sublist) > len(sublist2):\n                sublist = sublist2\n            elif len(sublist) < len(sublist2):\n                sublist2 = sublist\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(\\w+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # create a pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # use the re module to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # return a list of all values found in the text\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    values = [match.strip('\"') for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?[^\\\\](?<!\\\\)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Create a set to store the unique elements of the array\n    unique_elements = set(arr)\n\n    # Initialize a counter to keep track of the number of pairs\n    count = 0\n\n    # Iterate through the unique elements of the array\n    for i in range(len(unique_elements)):\n        # Calculate the complement of the current element\n        complement = n - unique_elements[i]\n        # Check if the complement is present in the array\n        if complement in unique_elements:\n            # Increment the counter if the current element and its complement are present\n            count += 1\n\n    # Return the final count of pairs\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to access its digits\n    digits = str(n)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each character in the string\n    for digit in digits:\n        # Convert the character to an integer and add it to the sum\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input integer to a string and then convert each character to an integer\n    digits = [int(d) for d in str(n)]\n    # Calculate the sum of the digits using a for loop\n    total = 0\n    for digit in digits:\n        total += digit\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert integer to string and then to list of integers\n    digits = list(str(n))\n\n    # initialize sum variable to 0\n    sum_value = 0\n\n    # iterate over the list of integers and add each digit to the sum variable\n    for digit in digits:\n        sum_value += int(digit)\n\n    return sum_value"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and use the built-in int() function to convert each character to an integer\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to store the sum\n    total = 0\n    # Iterate over the digits in reverse order\n    for digit in digits[::-1]:\n        # Add the digit to the total\n        total += digit\n    # Return the sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate through the digits list and add them to the sum variable\n    for digit in digits:\n        sum += digit\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is sorted in ascending order\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as input and returns True if the list is sorted and False otherwise.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    if len(list1) == 1:\n        return True\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # Compare the first two elements of the list\n    if list1[0] > list1[1]:\n        return False\n    else:\n        # Recursively call the function on the rest of the list\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether the specified list is sorted or not.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Parameters:\n    length (int): the length of the list to be created\n\n    Returns:\n    list of dictionaries: an empty list of N empty dictionaries\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        list1.remove(sublist)\n        list1.append(sorted_sublist)\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate through each sublist of strings in the list\n    for sublist in list1:\n        # Sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist in the list\n    for sublist in list1:\n        # use the sorted() function to sort each sublist\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return [num for num, count in num_dict.items() if count == 1]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # initialize an empty dictionary to store unique numbers\n    unique_nums = {}\n    \n    # loop through each list in the input lists\n    for lst in nums:\n        # loop through each number in the list\n        for num in lst:\n            # if the number is not in the unique_nums dictionary, add it\n            if num not in unique_nums:\n                unique_nums[num] = True\n    \n    # create a new list to store unique numbers\n    result = []\n    \n    # loop through the unique_nums dictionary and add each number to the new list\n    for num in unique_nums:\n        result.append(num)\n    \n    # return the new list of unique numbers\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store the unique numbers\n    unique_nums = set()\n    # loop over all lists in the input\n    for lst in nums:\n        # loop over all elements in the list\n        for num in lst:\n            # add each unique number to the set\n            unique_nums.add(num)\n    # convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_set = set()\n    # Iterate through each list of numbers\n    for num_list in nums:\n        # Iterate through each number in the list\n        for num in num_list:\n            # Add the number to the set if it's not already there\n            if num not in unique_set:\n                unique_set.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Use a set to remove duplicates from each list in the input\n    unique_nums = set([num for sublist in nums for num in sublist])\n    # Return the unique numbers as a list\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicates from all lists\n    for i in range(len(nums)):\n        nums[i] = list(set(nums[i]))\n\n    # Flatten the list to remove nested lists\n    nums = [num for sublist in nums for num in sublist]\n\n    # Remove duplicates from the flattened list\n    nums = list(set(nums))\n\n    # Return the result\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    # create an empty dictionary to store unique numbers\n    unique_nums = {}\n    # loop through each number in the list\n    for num in nums:\n        # if the number is not already in the dictionary, add it to the dictionary and add 1 to its count\n        if num not in unique_nums:\n            unique_nums[num] = 1\n        # if the number is already in the dictionary, increment its count\n        else:\n            unique_nums[num] += 1\n    # create an empty list to store the unique numbers with a count of 1\n    unique_ones = []\n    # loop through each unique number and its count in the dictionary\n    for num, count in unique_nums.items():\n        # if the count is 1, add the number to the list of unique ones\n        if count == 1:\n            unique_ones.append(num)\n    # return the list of unique ones\n    return unique_ones"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_set = set()\n    # Iterate through each list in the nums list\n    for num_list in nums:\n        # Iterate through each number in the list\n        for num in num_list:\n            # If the number is not already in the set, add it\n            if num not in unique_set:\n                unique_set.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    unique_nums = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    # Create a set of unique numbers in the list\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    unique_prod = 1\n    for num in unique_nums:\n        unique_prod *= num\n    return unique_prod"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)  # convert the list to a set to get only unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n\n    Parameters:\n    -----------\n    list_data: list\n        A list of numbers.\n\n    Returns:\n    --------\n    int\n        The product of the unique numbers in the list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates, then back to a list\n    unique_numbers = list(set(list_data))\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers.\n    \"\"\"\n    # create a set of unique numbers from the list\n    unique_nums = set(lst)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    # create a set to store unique numbers\n    unique_set = set(list_data)\n    \n    # initialize the product variable to 1\n    product = 1\n    \n    # iterate through the unique numbers in the set\n    for num in unique_set:\n        # multiply the product by the number\n        product *= num\n    \n    # return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_set = set(list_data)\n    unique_list = list(unique_set)\n    unique_product = 1\n    for num in unique_list:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    This function calculates the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*r + 2*math.pi*h*r + 2*math.pi*r*h + 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r**2 + 2 * 3.14159 * h\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = (2*math.pi*r**2)/3 + 2*math.pi*r*h\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n\n    # formula to find the surface area of a cylinder\n    surface_area = 2 * math.pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area using the formula:\n    # A = pi * r^2 * h\n    # Using math module in Python\n    A = math.pi * r**2 * h\n    # Return the surface area\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = math.pi * r**2 * h\n    print(\"The surface area of the cylinder is:\", surface_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2)+(2*3.14159*r*h)+(3.14159*r**2*h)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area using the formula for a cylinder\n    surface_area = 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    import math\n    \n    # Formula for surface area of a cylinder\n    surface_area = math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2*math.pi*r*h\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    else: \n        i = 0 \n        j = 0 \n        while i < len(A) and j < len(B): \n            if A[i] == B[j]: \n                i += 1 \n            j += 1 \n        if i == len(A): \n            return True \n        else: \n            return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binarySearch(arr, x):\n    \"\"\"\n    This function takes a list and an element x as input and returns the index of the first occurrence of x in the list.\n    If x is not found in the list, it returns -1.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1\n\ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if B is a sublist of A\n    if len(B) > len(A):\n        return False\n    \n    # Sort A and B in ascending order\n    A = sorted(A)\n    B = sorted(B)\n    \n    # Initialize two pointers, i,j\n    i = 0\n    j = 0\n    \n    # Compare the elements of A and B one by one\n    while j < len(B):\n        # If the current element of B is greater than or equal to the element of A, update i and j\n        if B[j] >= A[i]:\n            i = i + 1\n            j = j + 1\n        # If the current element of B is less than the element of A, increment j\n        else:\n            j = j + 1\n            \n    # If all elements of B have been compared and not found in A, then A is a sublist of B\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n\n    # Traverse through all possible starting indices of B in A\n    for i in range(len(A)-len(B)+1): \n        # Check if the sublist is present in A[i:]\n        if A[i:i+len(B)] == B: \n            return True\n\n    # If the loop completes without returning True, then B is not present in A\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    if len(B) > len(A): \n        return False \n    for i in range(len(A) - len(B) + 1): \n        if A[i:i+len(B)] == B: \n            return True \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A: \n        return True\n    for i in range(len(B)): \n        if B[i] in A: \n            if is_Sub_Array(A[:i], B): \n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(B, list):\n        raise ValueError(\"Input must be a list\")\n    if not all(isinstance(x, int) for x in B):\n        raise ValueError(\"Elements of input list must be integers\")\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # Check if the second list is sublist of the first list\n    if len(B) > len(A): \n        return False\n    \n    # Initialize variables\n    i = 0\n    j = 0\n    \n    # Traverse through the first list\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    \n    # Check if the second list is fully matched\n    return j == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    elif len(B) == len(A):\n        return A == B\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B):\n        for i in range(len(A)):\n            if A[i] in B:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if both lists have the same length\n    if len(A)!= len(B):\n        return False\n    # Traverse through the lists simultaneously\n    i = 0\n    j = 0\n    while i < len(A):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n            # If we reach the end of both lists, we have a match\n            if j == len(B):\n                return True\n        else:\n            # If we find a mismatch, move both pointers back to the beginning\n            i -= j\n            j = 0\n    # If we reach the end of both lists without finding a match, the list is not a sublist\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the last digit to -1\n    last_digit = -1\n    # loop through the digits of the number\n    while n > 0: \n        # extract the last digit and remove it from the number\n        last_digit = n % 10\n        n //= 10\n        # check if the last digit is zero\n        if last_digit == 0: \n            return -1\n    # if no zero digits were found, the function has returned successfully\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # check if n is a positive integer\n    if n <= 0:\n        print(\"Error: Input must be a positive integer.\")\n        return\n\n    # find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # extract the last digit from the factorial\n    last_digit = factorial % 10\n\n    # print the last digit\n    print(\"The last digit in the factorial of\", n, \"is\", last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    \n    for i in range(1,n+1):\n        factorial = factorial * i\n        \n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n > 0:\n        n //= 10\n    return n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize a variable to store the last digit of factorial\n    last_digit = 0\n    # loop through the digits of the factorial and add them to the variable\n    while n > 0:\n        last_digit += n % 10\n        n = n // 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize last_digit as 0\n    last_digit = 0\n\n    # loop until the last digit is found\n    while n > 0:\n        # get the last digit of the factorial of n\n        last_digit = n % 10\n\n        # check if the last digit is a 0\n        if last_digit!= 0:\n            break\n\n        # remove the last digit from n and multiply by 10\n        n = n // 10\n\n    # return the last digit found\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initializing the result variable with 0\n    result = 0\n\n    # looping through the digits of the input number\n    for digit in str(n):\n        # multiplying the result with the factorial of the last digit\n        result *= int(digit)\n\n    # returning the last digit of the result\n    return result % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    i = 1\n\n    while i <= n:\n        fact = fact * i\n        i = i + 1\n\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # finding the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        \n    # finding the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] < list3[k]:\n            result.append(list1[i])\n            i += 1\n            j += 1\n            k += 1\n        elif list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    i = 0\n    flat_list = []\n    while i < len(list1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if all the lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All the lists must have the same length\")\n\n    # create an empty list to store the final result\n    result = []\n\n    # iterate through each list and add its elements to the result list at the correct positions\n    i = 0\n    for element in list1:\n        result.append(element)\n        i += 1\n    i = 0\n    for element in list2:\n        result.append(element)\n        i += 1\n    i = 0\n    for element in list3:\n        result.append(element)\n        i += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    i = 0\n    j = 0\n    k = 0\n    interleaved_list = []\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if i == 0 and j == 0 and k == 0:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[j])\n            interleaved_list.append(list3[k])\n            i += 1\n            j += 1\n            k += 1\n        elif i == 0 and j == 0:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list3[k])\n            i += 1\n            k += 1\n        elif i == 0 and k == 0:\n            interleaved_list.append(list2[j])\n            interleaved_list.append(list3[k])\n            j += 1\n            k += 1\n        elif j == 0 and k == 0:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[j])\n            i += 1\n            j += 1\n        elif i == 0:\n            interleaved_list.append(list2[j])\n            interleaved_list.append(list3[k])\n            j += 1\n            k += 1\n        elif j == 0:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list3[k])\n            i += 1\n            k += 1\n        elif k == 0:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[j])\n            i += 1\n            j += 1\n        else:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[j])\n            interleaved_list.append(list3[k])\n            i += 1\n            j += 1\n            k += 1\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if i == 0:\n            interleaved_list.append(list2[j])\n            interleaved_list.append(list3[k])\n            j += 1\n            k += 1\n        elif j == 0:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list3[k])\n            i += 1\n            k += 1\n        elif k == 0:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[j])\n            i += 1\n            j += 1\n        else:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[j])\n            interleaved_list.append(list3[k])\n            i += 1\n            j += 1\n            k += 1\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if i == 0:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[j])\n            i += 1\n            j += 1\n        elif j == 0:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list3[k])\n            i += 1\n            k += 1\n        elif k == 0:\n            interleaved_list.append(list2[j])\n            interleaved_list.append(list3[k])\n            j += 1\n            k += 1\n        else:\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[j])\n            interleaved_list.append(list3[k])\n            i += 1\n            j += 1\n            k += 1\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create an empty list to hold the interleaved elements\n    result = []\n    \n    # iterate over each list in turn\n    for lst in [list1, list2, list3]:\n        # iterate over each element in the list\n        for elem in lst:\n            # add the element to the result list before the next element in the original list\n            result.append(elem)\n    \n    # return the interleaved list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list\n"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and returns a list containing the elements of the first tuple that are not present in the second tuple.\n    \"\"\"\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # loop through both tuples and find all the elements that are not equal\n    dissimilar_elems = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_elems.append(elem)\n    for elem in test_tup2:\n        if elem not in test_tup1:\n            dissimilar_elems.append(elem)\n    # return the list of dissimilar elements\n    return dissimilar_elems\n"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_list.append(elem)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Loop through each element in both tuples\n    for i in range(len(test_tup1)):\n        # If the element at index i in test_tup1 is different from the element at index i in test_tup2, append it to the dissimilar_list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    # Return the dissimilar_list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through the elements in the first tuple\n    for element1 in test_tup1:\n\n        # Check if the element is in the second tuple\n        if element1 not in test_tup2:\n\n            # If it is not, add it to the dissimilar set\n            dissimilar_set.add(element1)\n\n    # Return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Use set operations to find the dissimilar elements\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    dissimilar_list = list(dissimilar_set)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Iterate through the tuples\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # Check if the elements are the same\n        if tup1 == tup2:\n            pass\n        # If they are different, add them to the dissimilar list\n        else:\n            dissimilar_list.append(tup1)\n            \n    # Return the dissimilar elements list\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_fnc(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            uneven_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            uneven_list.append(item)\n        else:\n            pass\n    return uneven_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            if even_fnc(item):\n                return_list.append(item)\n            else:\n                return_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            return_list.append(item)\n    return return_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            even_list.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # check if the input tuple is a nested mixed tuple\n    if not all(isinstance(x, (list, tuple)) for x in test_tuple):\n        raise TypeError(\"Input tuple is not a nested mixed tuple.\")\n\n    # check if all elements in the tuple are even\n    if not all(even_fnc(x) for x in test_tuple):\n        raise ValueError(\"All elements in the tuple must be even.\")\n\n    # create a new tuple without uneven elements\n    result = []\n    for x in test_tuple:\n        if even_fnc(x):\n            result.append(x)\n\n    # return the new tuple\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the input is a tuple\n    if isinstance(test_tuple, tuple):\n        # Check if the input tuple is empty\n        if not test_tuple:\n            return ()\n        # Check if the first element is a tuple\n        if isinstance(test_tuple[0], tuple):\n            # Recursively call the function for the first element\n            first_tuple = even_ele(test_tuple[0], even_fnc)\n            # Check if the first element is empty\n            if not first_tuple:\n                return ()\n            # Check if the first element has odd elements\n            has_odd = False\n            for item in first_tuple:\n                if even_fnc(item):\n                    has_odd = True\n                    break\n            # If the first element has odd elements, return it\n            if has_odd:\n                return first_tuple\n            # If the first element has even elements, add it to the result list\n            else:\n                result = [first_tuple]\n        # Check if the first element is not a tuple\n        else:\n            # Check if the first element has odd elements\n            has_odd = False\n            for item in test_tuple:\n                if even_fnc(item):\n                    has_odd = True\n                    break\n            # If the first element has odd elements, return it\n            if has_odd:\n                return test_tuple\n            # If the first element has even elements, add it to the result list\n            else:\n                result = [test_tuple]\n    # If the input is not a tuple, return it\n    else:\n        return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        for item in sub_tuple:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_odd(num):\n        return num % 2!= 0\n\n    def get_even_num(nested_tuple):\n        return [x for x in nested_tuple if is_even(x)]\n\n    def get_odd_num(nested_tuple):\n        return [x for x in nested_tuple if is_odd(x)]\n\n    even_nums = get_even_num(test_tuple)\n    odd_nums = get_odd_num(test_tuple)\n\n    return even_nums, odd_nums"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "Here's the Python code for the function `even_ele` that takes a tuple and a function as input. The function `even_fnc` is used to check if an element is even or not. If an element is even, it is included in the result tuple. Otherwise, it is not included. The function returns the final tuple with even elements removed."
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base\n    area_base = 0.5 * b * b\n    \n    # calculate the number of rows in the pyramid\n    rows = int(s / b)\n    \n    # calculate the area of each row\n    area_row = area_base * 0.5 * rows\n    \n    # calculate the total surface area\n    surface_area = area_base + area_row * (rows - 1)\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b*s)+(b*s)+(s*b)+(s*b)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b+s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*(b**2) + (s**2)*3\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + ((b * s) ** 2) / 4\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the length of each side of the pyramid\n    side_1 = base_edge\n    side_2 = side_1 * 0.5\n    side_3 = side_1 * 0.5\n    # calculate the area of each side\n    area_1 = side_1 * side_1\n    area_2 = side_2 * side_2\n    area_3 = side_3 * side_3\n    # calculate the total area of the pyramid\n    total_area = area_1 + area_2 + area_3\n    # add up the areas of all three sides\n    total_area += side_1 * side_1 + side_2 * side_2 + side_3 * side_3\n    # multiply by the height to find the surface area\n    surface_area = total_area * height\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the area of each half of the pyramid\n    half_height = s/2\n    half_base = b/2\n\n    # calculate the area of the base of the pyramid\n    base_area = (half_base**2)*(3*half_base + 2*half_height)\n\n    # calculate the area of the top of the pyramid\n    top_area = (half_height**2)*(3*half_height + 2*half_base)\n\n    # calculate the surface area of the pyramid\n    total_area = (base_area + top_area) - (half_height**2)*(half_base**2)\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s**2 + 0.5*s*b**2 + 0.5*b*b\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if dict1.keys() == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and checks if it is empty or not.\n    If it is empty, it returns True, else it returns False.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not any(dict1.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    # Compute the factorial of n\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    # Compute the nth Catalan number\n    cat = (fact * (2 * n - 1)) // (n + 1)\n    return cat"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return num * (2*catalan_number(num-1) - catalan_number(num-2))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number using the formula given in the problem statement.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1) // (factorial(2*n-1))\n\n\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of a number using the formula given in the problem statement.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n - 1) + (2 * n - 1) * catalan_number(n - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n-1) // (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    n = num\n    if n < 0:\n        print(\"Catalan numbers are not defined for negative integers\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)/(n+1) * catalan_number(n-1) + (n-1) * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(2*n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    # base case\n    if n == 0 or n == 1:\n        return 1\n    \n    # recursive case\n    return catalan_number(n-1) + catalan_number(n-2)*n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return 1 + (4*num-1)//(num-1)*catalan_number(num-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError(\"Negative values of n are not allowed\")\n    elif num == 0:\n        return 1\n    else:\n        catalan_list = [1]\n        for i in range(1, num + 1):\n            catalan_list.append(4 * catalan_list[i-1] / (i + 1))\n        return catalan_list[-1]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'(\\w+ly)$', text)\n    positions = []\n    for i, adv in enumerate(adverbs):\n        positions.append((i, len(adv)))\n    return positions\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog chased the fox and it jumped over the lazy cat.\"\nprint(find_adverbs(text))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b([a-z]+)(ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the lazy cat.\"\nresult = find_adverbs(text)\nprint(result)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[A-Z][a-z]*ly\\b'\n\n    # Use the re.findall() function to find all the occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the positions and values of the adverbs found\n    return [(match.start(), match) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start, end = match.span()\n        adverb = text[start:end].lower()\n        print(\"Adverb found: '{}' at position {}\".format(adverb, start))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern for adverbs ending with 'ly'\n    pattern = r'\\bly\\b'\n    # Use re.findall() method to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize empty list to store adverb positions\n    positions = []\n    # Iterate over matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\bly\\b'\n    # use the regular expression search function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # if a match is found, return the adverb and its position in the text\n    if match:\n        return match.group(), match.start()\n    # otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[aeiou][a-z]*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    result = re.findall(pattern, text)\n    for i, match in enumerate(result):\n        print(f'{i+1}. {match}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern for adverb ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize a list to store the adverbs and their positions in the text\n    adverbs = []\n\n    # Loop through each match and append the adverb and its position to the adverbs list\n    for match in matches:\n        pos = text.find(match)\n        adverbs.append((match, pos))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = re.compile(r'\\b\\w+ly\\b')\n\n    # Find all occurrences of adverbs in the text using the pattern\n    matches = pattern.finditer(text)\n\n    # Initialize an empty list to store the adverb and its positions\n    adverbs = []\n\n    # Loop through each match and extract the adverb and its position\n    for match in matches:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end()\n\n        # Add the adverb and its position to the list\n        adverbs.append((adverb, start_pos, end_pos))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max-heap of size n\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Extract and return the n most expensive items from the max-heap\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input.\n    It returns a list of the n most expensive items in the list.\n    '''\n    # Create a max-heap of the first n items\n    heap = items[:n]\n    heapq.heapify(heap)\n    # Iterate through the remaining items\n    for i in range(n, len(items)):\n        # If the item is cheaper than the current maximum item in the heap,\n        # remove the current maximum item and add the new item to the heap\n        if items[i] < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, items[i])\n    # Return the heap as the result\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, -item)\n        else:\n            if -heap[0] > -item:\n                heapq.heappop(heap)\n                heapq.heappush(heap, -item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Build a max heap of size n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)  # use a negative price for max heap\n        if len(heap) > n:\n            heapq.heappop(heap)  # remove the least expensive item from the heap\n    # Extract the n most expensive items from the heap\n    return [-price for price in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and the maximum number of items to return.\n    It returns a list of the n most expensive items in the dataset.\n    '''\n    \n    # Create a min heap with the largest item as the root\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, -item)\n        if len(max_heap) > n:\n            # If the size of the heap exceeds n, pop the smallest item and add it back to the end\n            heapq.heappop(max_heap)\n    \n    # Convert the heap back to a list and return it\n    return [-item for item in max_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes in a list of items and a number n, and returns a list of the n most expensive items in the list.\n    '''\n    # Initialize a min heap to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        # Add the first i items to the min heap\n        if i < len(items):\n            heapq.heappush(min_heap, items[i])\n        else:\n            break\n    \n    # Iterate through the remaining items and push them onto the min heap\n    for item in items[n:]:\n        if item > min_heap[0]:\n            # If the item is more expensive than the current minimum, pop the minimum from the heap and add the new item\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n    \n    # Return a list of the n most expensive items\n    return list(min_heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the dataset in descending order based on price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # Create a min heap to keep track of the n most expensive items\n    min_heap = []\n    \n    # Iterate over the sorted items and add them to the min heap\n    for item in sorted_items:\n        heapq.heappush(min_heap, item)\n        \n        # If the heap size is greater than n, remove the least expensive item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Extract the n most expensive items from the min heap and return them as a list\n    return [item for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    min_heap = []\n    # Iterate over the items in the dataset\n    for item in items:\n        # Add the item to the min heap if it's the first item or its price is less than the current minimum price\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        # If the heap size is greater than n, remove the last item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Extract the n most expensive items from the min heap and return them\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap (priority queue) to store the n most expensive items\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, (item[1], item))\n        elif item[1] == min_heap[0][1]:\n            heapq.heappushpop(min_heap, (item[1], item))\n    \n    # Extract and return the n most expensive items from the min-heap\n    result = [item for _, item in min_heap]\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap and add the first n items to it\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n\n    # Remove the items with the highest prices and add the next n items to the heap\n    for i in range(n, len(items)):\n        if items[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, items[i])\n\n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    part1 = l[:n]\n    part2 = l[n:]\n    return part2 + part1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n == 0:\n        return [l[n:]]\n    elif n > len(l):\n        return l\n    else:\n        return l + split_Arr(l, n - 1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two parts at the nth eelment\n    first_part = l[:n]\n    second_part = l[n:]\n    # Concatenate the two parts into a single list and return it\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return l\n    else:\n        half = len(l)//2\n        return split_Arr(l[:half]+l[half:], n-1) + [l[half]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    rest_part = l[n:]\n    l = rest_part + first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n >= len(l):\n        raise ValueError(\"Invalid index\")\n    else:\n        return [l[i] for i in range(n)] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        return None\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"List should have at least\", n, \"elements\")\n    elif n < 0:\n        print(\"Invalid index. It should be a non-negative integer\")\n    else:\n        mid = n // 2\n        if n % 2 == 0:\n            mid += 1  # if n is even, mid will be n/2\n        first_part = l[:mid]\n        last_part = l[mid:]\n        return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is less than or equal to n\n    if len(l) <= n:\n        print(\"The length of the list is less than or equal to n.\")\n        return\n    \n    # Split the list at the nth element\n    mid = n // 2\n    left_half = l[:mid]\n    right_half = l[mid:]\n    \n    # Add the left half to the end of the right half\n    l = left_half + right_half\n    \n    print(\"The new list is:\", l)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_x = tuple(listx)\n    return tuple_x"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sorting the list in descending order\n    nums.sort(reverse=True)\n    # Finding the difference between largest and smallest value\n    diff = nums[0] - nums[1]\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Loop through the list and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    # Return the difference between the largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between max and min values\n    diff = max_val - min_val\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    # Finding the maximum value in the list\n    max_val = max(nums)\n    # Finding the minimum value in the list\n    min_val = min(nums)\n    # Calculating the difference between the maximum and minimum value\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the difference between max and min values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value.\n    \"\"\"\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        print(\"List is empty!\")\n        return None\n    elif len(nums) == 1:\n        print(\"List has only one element!\")\n        return None\n    \n    # Find the minimum and maximum values in the list\n    min_val = nums[0]\n    max_val = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < min_val:\n            min_val = nums[i]\n        elif nums[i] > max_val:\n            max_val = nums[i]\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes in two numbers, a and b, and returns a list of all perfect squares between a and b.\n    \"\"\"\n    # initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n    # loop through all numbers between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num ** 0.5 == int(num ** 0.5):\n            # add the square to the list if it is a perfect square\n            perfect_squares_list.append(num ** 2)\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == sum(int(digit)**2 for digit in str(i)):\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through each number from a to b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        is_perfect_square = True\n        square_root = int(num ** 0.5) + 1\n\n        # Loop through the range from 2 to square_root\n        for i in range(2, square_root+1):\n            if num % i == 0:\n                is_perfect_square = False\n                break\n        # If the number is a perfect square, add it to the list\n        if is_perfect_square:\n            perfect_squares_list.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize a variable to keep track of the number of perfect squares found\n    count = 0\n    \n    # loop through all possible squares between a and b\n    for i in range(a, b+1):\n        # check if the square is equal to the sum of its digits\n        square_digits = [int(digit) for digit in str(i)]\n        square_sum = sum(square_digits)\n        if square_sum == i:\n            # if it is, increment the count\n            count += 1\n    \n    # return the count of perfect squares found\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize variables\n    sum = 0\n    i = 1\n    while i <= a:\n        # check if i is a perfect square\n        square = i * i\n        if square > b:\n            break\n        # add i to the sum if it is a perfect square\n        if square == b:\n            sum += i\n        # increment i\n        i += 1\n    return sum"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to i\n        if i == i**2:\n            # If it is, print the current number\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # iterate from the smallest square to the largest square\n    for i in range(a, b+1):\n        # check if the square is perfect\n        j = 1\n        while j*j <= i:\n            j += 1\n        # if the square is perfect, print the square\n        if i == j*j:\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    This function converts polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    # Convert the polar coordinates to cartesian coordinates using complex number math\n    r = complex(x, y)\n    theta = complex(0, 1) * cmath.pi * cmath.sqrt(1 - r**2)\n    \n    # Convert the resulting complex number to a tuple of real and imaginary parts\n    x = r.real\n    y = r.imag\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x ** 2 + y ** 2)\n    theta = cmath.phase(x + y * 1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in the radius and angle in radians and returns the rectangular coordinates in the form of a tuple.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates (r and theta) to rectangular coordinates.\n    '''\n    # Convert r to complex number\n    z = cmath.rect(r)\n    \n    # Convert theta to complex number\n    alpha = cmath.pi*theta/180\n    \n    # Multiply z and alpha and add them together\n    return (z*alpha) + (z*alpha).conjugate()"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    phi = theta % (2*cmath.pi)  # convert theta to [-pi, pi]\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    # check if the length of the list is less than 2\n    if len(newList) < 2:\n        return \"The list must have at least 2 elements.\"\n    \n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    #Check if the input is a list\n    if isinstance(newList, list):\n        #Get the length of the list\n        length = len(newList)\n        #Check if the list has at least two elements\n        if length >= 2:\n            #Swap the first and last elements of the list\n            newList[0], newList[length-1] = newList[length-1], newList[0]\n        else:\n            print(\"The list should have at least two elements\")\n    else:\n        print(\"The input should be a list\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length == 1: \n        return newList\n    else: \n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return swap_List(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    first = newList[0]\n    last = newList[n-1]\n    newList[0] = last\n    newList[n-1] = first"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # store the length of the list\n    length = len(newList)\n    # swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # return the new list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n:\n        return 0\n\n    return (k*binomial_Coeff(n-1,k-1) + n*binomial_Coeff(n-1,k)) / k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i * binomial_Coeff(n-i, k-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (1/(i*(i-k+1)))*(1/k)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Check if n and k are positive integers\n    if not (isinstance(n, int) and isinstance(k, int)):\n        print(\"n and k must be positive integers.\")\n        return\n\n    # Check if n and k are valid inputs for a binomial coefficient\n    if not (0 <= n <= k <= n*(n-1)//2):\n        print(\"n and k must satisfy the conditions n <= k <= n(n-1)/2.\")\n        return\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate from 0 to k\n    for i in range(k+1):\n\n        # Calculate the factorial of i\n        factorial_i = 1\n        for j in range(1, i+1):\n            factorial_i *= j\n\n        # Calculate the factorial of k-i\n        factorial_kminusi = 1\n        for j in range(1, k-i+1):\n            factorial_kminusi *= j\n\n        # Calculate the binomial coefficient\n        binomial_coef = factorial_i // (factorial_kminusi * factorial_i)\n\n        # Add the binomial coefficient to the sum\n        sum += binomial_coef\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Check for n and k being negative or zero\n    if n < 0 or k < 0:\n        print(\"Please enter non-negative values for n and k.\")\n        return\n\n    # Initialize variables\n    result = 0\n    i = 0\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    while i <= n:\n        result += (n - i + 1) * (k + i - 1) * (i + k - 1) // 6\n        i += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): Upper limit of the range\n    k (int): Number of terms to sum\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients\n    '''\n\n    # Initialize variables to store the sum and product of co-efficients\n    sum_prod_co_eff = 0\n    prod_co_eff = 1\n\n    # Loop through the range of co-efficients and calculate the sum and product of co-efficients\n    for i in range(1,k+1):\n        sum_prod_co_eff += prod_co_eff\n        prod_co_eff *= n - i\n\n    # Return the sum of the product of consecutive co-efficients\n    return sum_prod_co_eff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): total number of elements in the sequence\n    k (int): number of elements to be included in the sequence\n\n    Returns:\n    int: the sum of the product of consecutive binomial co-efficients\n\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Initialize the first element of the sequence to 1\n    seq = [1]\n\n    # Loop through the remaining elements of the sequence\n    for i in range(2, n + 1):\n        # Calculate the binomial coefficient for the current index i\n        bin_coeff = (n - i + 1) * seq[i - 1] // i\n\n        # Add the binomial coefficient to the sum\n        sum += bin_coeff\n\n        # Append the next element of the sequence to the sequence list\n        seq.append(bin_coeff)\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum of the product of consecutive binomial co-efficients\n    result = 0\n\n    # Iterate over the range from 0 to n-k\n    for i in range(n-k): \n        # Compute the binomial coefficient (n-i-k+1)C(n-i)\n        # where C(n) = n!\n        numerator = (n-i-k+1)\n        denominator = (n-i)\n        coeff = numerator // denominator\n        \n        # Add the binomial coefficient to the sum of the product of consecutive binomial co-efficients\n        result += coeff\n    \n    # Return the sum of the product of consecutive binomial co-efficients\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    for i in range(1,k+1):\n        product *= (n-i+1) / i\n    return product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n - the number of terms in the sequence.\n    k - the number of consecutive terms to consider.\n\n    Returns:\n    The sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n:\n        return 0\n\n    # initialize the sum to 1\n    sum = 1\n\n    # calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # calculate the factorial of k\n    factorial_k = 1\n    for i in range(1, k+1):\n        factorial_k *= i\n\n    # calculate the factorial of (n-k)\n    factorial_n = 1\n    for i in range(1, n-k+1):\n        factorial_n *= i\n\n    # divide the factorials to get the product of consecutive binomial co-efficients\n    product = factorial // (factorial_k * factorial_n)\n\n    # return the sum of the product of consecutive binomial co-efficients\n    return product"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define the pattern for matching ip addresses\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    # match the pattern with the input ip address\n    match = re.match(pattern, ip)\n    # return the modified ip address\n    return match.group(1) + '.' + match.group(2) + '.' + match.group(3) + '.' + match.group(4)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # use regular expressions to match and remove leading zeroes from the ip address\n    pattern = re.compile(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    return re.sub(pattern, r'\\1.\\2.\\3.\\4', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from ip address\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$')\n    if pattern.match(ip):\n        return re.sub(r'^\\d+\\.?\\d*$', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    ip = re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Regular expression pattern to match ip address in the format 'a.b.c.d'\n    pattern = r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}'\n    # Compile the pattern to match ip address\n    regex = re.compile(pattern)\n    # Find all occurrences of ip address in the given string\n    matches = regex.findall(ip)\n    # Loop through each match and remove leading zeroes\n    for match in matches:\n        ip = ip.replace(match, match.lstrip('0'))\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define regular expression pattern for IP address\n    pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n    # Use regex.sub() function to replace all leading zeroes with empty string\n    ip = re.sub(pattern, '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet of the ip address\n    ip = re.sub(r'^\\D+', '', ip)\n    # Remove any remaining characters that are not digits\n    ip = re.sub(r'[^0-9]', '', ip)\n    # If there are any remaining characters, it means there were non-digit characters, so return None\n    if len(ip) > 0:\n        return None\n    # Otherwise, return the cleaned up ip address\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define a regular expression pattern to match the ip address\n    pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    # Use the re.match() method to check if the ip address matches the pattern\n    match = re.match(pattern, ip)\n    # If the ip address matches the pattern, remove the leading zeroes using the sub() method\n    if match:\n        ip = re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', '', ip)\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List should have at least 2 elements.\"\n\n    first_even = first_odd = float('inf')\n    for num in list1:\n        if num % 2 == 0 and num < first_even:\n            first_even = num\n        if num % 2!= 0 and num < first_odd:\n            first_odd = num\n\n    diff = first_even - first_odd\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            even_count += 1\n        else:\n            if first_odd is None:\n                first_odd = num\n            odd_count += 1\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return \"List does not contain even and odd numbers.\"\n    else:\n        return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        elif odd_num is None:\n            odd_num = num\n        else:\n            break\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                return first_even - num\n        else:\n            if first_odd is None:\n                first_odd = num\n            else:\n                return first_odd - num\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_num = odd_num = None\n\n    # Iterate through the list and find the first even and first odd number\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n\n    # If even and odd numbers are found, calculate the difference and return it\n    if even_num is not None and odd_num is not None:\n        return odd_num - even_num\n    else:\n        return \"List does not have any even or odd numbers\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd numbers in the list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        elif num % 2 == 1:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n\n    if even_num is None or odd_num is None:\n        return 'No even or odd numbers found in the list.'\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    even_index = 0\n    odd_index = 0\n\n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0 and list1[odd_index] % 2 == 1:\n            break\n        elif list1[even_index] % 2 == 1 and list1[odd_index] % 2 == 0:\n            break\n        else:\n            even_index += 1\n            odd_index += 1\n\n    if even_index == len(list1) and odd_index == len(list1):\n        return None\n    else:\n        return list1[even_index] - list1[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return list1[0] - list1[1]\n    else:\n        return \"The given list does not contain even and odd numbers.\"\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 0\n        for j in range(i+1, n):\n            if str1[j] == '1':\n                if str2[i] == '0':\n                    dp[i][j] = dp[i][j-1] + 1\n                else:\n                    dp[i][j] = dp[i][j-1]\n            else:\n                if str2[j] == '0':\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = min(dp[i][j-1], dp[i][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize a dictionary to store the frequency of each character in str1\n    freq1 = {}\n    for char in str1:\n        if char in freq1:\n            freq1[char] += 1\n        else:\n            freq1[char] = 1\n\n    # Initialize a dictionary to store the frequency of each character in str2\n    freq2 = {}\n    for char in str2:\n        if char in freq2:\n            freq2[char] += 1\n        else:\n            freq2[char] = 1\n\n    # Create a list to store the characters from str2 that are not in str1\n    extra_chars = []\n    for char in str2:\n        if char not in str1:\n            extra_chars.append(char)\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = float('inf')\n\n    # Check if there are any characters in extra_chars that are in str1\n    for char in extra_chars:\n        if char in freq1:\n            # Subtract the frequency of the character from str1 and str2\n            freq1[char] -= 1\n            freq2[char] -= 1\n\n            # Check if there is any more swaps needed\n            if freq1[char]!= 0 or freq2[char]!= 0:\n                continue\n\n            # Calculate the minimum number of swaps needed\n            min_swaps = min(min_swaps, len(str2) - extra_chars.index(char))\n\n    # Return the minimum number of swaps needed\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Check if both strings are of equal length\n    if len(str1)!= len(str2):\n        return \"Both strings must have equal length.\"\n    \n    # Convert the binary strings to decimal numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize variables for swaps and remaining digits\n    swaps = 0\n    remain = num2\n    \n    # Iterate over the binary strings and swap digits if required\n    for i in range(len(str1)-1, -1, -1):\n        if num1 % 2 == num2 % 2:\n            remain = num1 % 2\n            num1 //= 2\n            num2 //= 2\n        else:\n            remain = num2 % 2\n            num1 = (num1 << 1) + 1\n            num2 //= 2\n            \n        if remain == 0 and remain == num2 % 2:\n            swaps += 1\n            \n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swaps = 0\n    # loop through all pairs of bits in str1 and str2\n    for i in range(n):\n        # if the bits are not equal, swap them\n        if str1[i]!= str2[i]:\n            swaps += 1\n            # if swaps exceed half of the number of bits in the strings, break out of the loop\n            if swaps > n // 2:\n                break\n    # return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * (n + 1) for _ in range(2)]\n\n    # Fill the first row of the dp table\n    for i in range(1, n + 1):\n        if str1[i - 1] == '0':\n            dp[0][i] = dp[0][i - 1] + 1\n        else:\n            dp[0][i] = dp[0][i - 1]\n\n    # Fill the remaining rows of the dp table\n    for i in range(1, 2):\n        for j in range(1, n + 1):\n            if str1[j - 1] == '0':\n                dp[i][j] = min(dp[1 - i][j], dp[i][j - 1])\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[1 - i][j])\n\n    # Return the minimum number of swaps required\n    return dp[1][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize variables to keep track of swaps\n    swaps = 0\n    i = 0\n    \n    # Iterate over the digits of both numbers\n    while i < len(str1):\n        # If the digits are different, swap them\n        if num1 & (1 << i)!= num2 & (1 << i):\n            swaps += 1\n        # Increment the index\n        i += 1\n    \n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2): \n    n = len(str1)  # length of both strings \n    swaps = 0  # number of swaps required \n\n    # find the index of the last occurrence of the first string in the second string \n    for i in range(n): \n        if str1[i] == str2[n-i-1]: \n            swap = n-i-1 \n            break \n\n    # if the second string doesn't have any occurrence of the first string, \n    # then the first string must be in the first n-swaps positions of the second string \n    if swap == 0: \n        swap = n-str1.count(str2[0]) \n\n    # swap the first and last characters of the second string \n    str2 = str2[:swap] + str2[swap+1:].swapcase() + str2[swap] \n    swaps += swap \n\n    # if the first and last characters of the second string are different, then swap them \n    if str1!= str2: \n        swap = str1.find(str2[n-swap-1]) \n        str2 = str2[:swap] + str1 + str2[swap+1:] + str2[swap] \n        swaps += swap \n\n    # if the swaps are odd, then add 1 to the number of swaps \n    if swaps % 2 == 1: \n        swaps += 1 \n\n    return swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # convert the binary strings to lists of bits\n    lst1 = [int(x) for x in str1]\n    lst2 = [int(x) for x in str2]\n    \n    # create a 2D list to store the cost of swaps\n    cost_matrix = []\n    for i in range(len(lst1)):\n        row = []\n        for j in range(len(lst2)):\n            if lst1[i] == lst2[j]:\n                row.append(0)\n            else:\n                row.append(1)\n        cost_matrix.append(row)\n    \n    # create a 2D list to store the minimum cost path\n    min_cost_matrix = []\n    for i in range(len(lst1)+1):\n        row = []\n        for j in range(len(lst2)+1):\n            if i == 0 or j == 0:\n                row.append(float('inf'))\n            else:\n                row.append(float('inf'))\n        min_cost_matrix.append(row)\n    \n    # fill the cost matrix\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] == lst2[j]:\n                min_cost_matrix[i+1][j+1] = 0\n            else:\n                min_cost_matrix[i+1][j+1] = min(min_cost_matrix[i][j+1], min_cost_matrix[i+1][j]) + 1\n    \n    # find the minimum cost path\n    path = []\n    i, j = len(lst1), len(lst2)\n    while i > 0 and j > 0:\n        if lst1[i-1] == lst2[j-1]:\n            path.append(lst1[i-1])\n            i -= 1\n            j -= 1\n        elif min_cost_matrix[i][j] == min_cost_matrix[i][j+1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # count the minimum number of swaps required\n    swaps = len(path)\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # convert strings to lists\n    lst1 = list(str1)\n    lst2 = list(str2)\n    n1, n2 = len(lst1), len(lst2)\n\n    # initialize variables\n    min_swaps = n1 + n2\n    i = j = 0\n\n    # iterate over both lists simultaneously\n    while i < n1 and j < n2:\n        if lst1[i] == lst2[j]:\n            i += 1\n            j += 1\n        elif lst1[i] < lst2[j]:\n            if lst1[i]!= '0':\n                lst1[i], lst1[i+1] = lst1[i+1], lst1[i]\n                min_swaps -= 1\n            i += 1\n        else:\n            if lst2[j]!= '0':\n                lst2[j], lst2[j+1] = lst2[j+1], lst2[j]\n                min_swaps -= 1\n            j += 1\n\n    # iterate over remaining characters in either list\n    while i < n1:\n        if lst1[i]!= '0':\n            lst1[i], lst1[i+1] = lst1[i+1], lst1[i]\n            min_swaps -= 1\n        i += 1\n    while j < n2:\n        if lst2[j]!= '0':\n            lst2[j], lst2[j+1] = lst2[j+1], lst2[j]\n            min_swaps -= 1\n        j += 1\n\n    # return minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    n = len(str1)\n    # If both binary strings are equal, return 0\n    if str1 == str2:\n        return 0\n    \n    # If length of both binary strings are not equal, return -1\n    if n!= len(str2):\n        return -1\n    \n    # Sort both binary strings\n    str1.sort()\n    str2.sort()\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Iterate through both binary strings\n    i = 0\n    j = 0\n    while i < n and j < n:\n        # If characters of both strings are same, move both pointers\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        # If first character of str1 is greater than second character of str2, swap characters and increment count\n        elif str1[i] > str2[j]:\n            str1[i], str1[j] = str1[j], str1[i]\n            str2[i], str2[j] = str2[j], str2[i]\n            count += 1\n            i += 1\n            j += 1\n        # If first character of str2 is greater than second character of str1, move second pointer\n        else:\n            j += 1\n    \n    # If there are still characters left in one of the binary strings, return -1\n    if i < n or j < n:\n        return -1\n    \n    # Return count of swaps required\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list[0]) + sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of the longest tuple in the list.\n    '''\n\n    # initialize the max_size variable to 0\n    max_size = 0\n    \n    # loop through each tuple in the list\n    for tup in tuple_list:\n        \n        # calculate the size of the tuple in bytes\n        size = sys.getsizeof(tup)\n        \n        # update the max_size variable if the current size is greater\n        if size > max_size:\n            max_size = size\n    \n    # return the max_size\n    return max_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Initializing the size variable\n    size = 0\n\n    # Looping through the tuple elements\n    for element in tuple_list:\n        # Adding the size of each element to the size variable\n        size += sys.getsizeof(element)\n\n    # Returning the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # calculate the size of each item in the tuple\n    item_sizes = [sys.getsizeof(i) for i in tuple_list]\n\n    # calculate the total size of the tuple\n    total_size = sum(item_sizes)\n\n    # return the total size\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    i, j = 0, len(arr1)\n    while i < j:\n        pivot1 = arr1[i]\n        pivot2 = arr2[j - 1]\n\n        if pivot1 < pivot2:\n            i += 1\n        else:\n            j -= 1\n\n        if i == k - 1:\n            return pivot1\n        elif j == 0:\n            return pivot2"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    while i < len(arr1):\n        if arr1[i] < arr2[j]:\n            return arr1[i]\n        i += 1\n    while j < len(arr2):\n        if arr2[j] < arr1[i]:\n            return arr2[j]\n        j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize two pointers\n    i = 0\n    j = 0\n\n    # Initialize a variable to store the kth element\n    kth_element = None\n\n    # Compare the first elements of both arrays\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n\n    # If the kth element is in the first array, return that element\n    if i < n1:\n        return arr1[i]\n\n    # If the kth element is in the second array, return that element\n    if j < n2:\n        return arr2[j]\n\n    # If the kth element is in neither array, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    if i == len(arr1) and k <= j:\n        return arr2[j]\n    elif i < len(arr1) and k <= i:\n        return arr1[i]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return min(arr1[i:], arr2[j:])"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the length of the smaller array\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    # If the length of the smaller array is greater than k, then kth element is in arr2\n    if len1 > k:\n        return find_kth(arr2, arr1, k)\n\n    # Compare the first k elements of the two arrays\n    i = 0\n    while i < k and i < len1:\n        if arr1[i] < arr2[i]:\n            return arr1[i]\n        elif arr1[i] > arr2[i]:\n            return arr2[i]\n        i += 1\n\n    # If kth element is not found in arr1, then it is in arr2\n    return arr2[k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments:\n    1. arr1: The first sorted array.\n    2. arr2: The second sorted array.\n    3. k: The value of k.\n    \n    It returns the kth smallest element in the given two sorted arrays.\n    \"\"\"\n    # Initialize two pointers, i and j, at the beginning of the arrays\n    i, j = 0, 0\n    \n    # Initialize the variable kth_element to None\n    kth_element = None\n    \n    # Loop until both pointers meet at the end of the arrays\n    while i < len(arr1) and j < len(arr2):\n        # If the first element of arr1 is less than the kth element, move i to the right\n        if arr1[i] < kth_element:\n            i += 1\n        # If the first element of arr2 is less than the kth element, move j to the right\n        elif arr2[j] < kth_element:\n            j += 1\n        # If the first element of both arrays is equal to the kth element, update the kth_element\n        else:\n            kth_element = arr1[i]\n            i += 1\n            j += 1\n    \n    # If kth_element is still None, the kth smallest element is not in the given arrays\n    if kth_element is None:\n        return None\n    \n    # If k is greater than the number of elements in the array, return the kth_element\n    if k > len(arr1) + len(arr2):\n        return kth_element\n    \n    # If k is less than the number of elements in the array, move the pointers accordingly to find it\n    else:\n        # If k is greater than the number of elements in arr1, move j to the right until k is less than arr1 size\n        while k > len(arr1):\n            j += 1\n            if j == len(arr2):\n                return None\n        \n        # Move the pointers i and j to find the kth smallest element\n        while i < len(arr1) and j < len(arr2):\n            # If the first element of arr1 is less than the kth element, move i to the right\n            if arr1[i] < kth_element:\n                i += 1\n            # If the first element of arr2 is less than the kth element, move j to the right\n            elif arr2[j] < kth_element:\n                j += 1\n            # If the first element of both arrays is equal to the kth element, update the kth_element\n            else:\n                kth_element = arr1[i]\n                i += 1\n                j += 1\n        \n        # If kth_element is still None, the kth smallest element is not in the given arrays\n        if kth_element is None:\n            return None\n        \n        # If k is less than the number of elements in arr2, move i to the right until k is less than arr2 size\n        while k > len(arr1) + len(arr2) - 1:\n            i += 1\n            if i == len(arr1):\n                return None\n        \n        # Move the pointers i and j to find the kth smallest element\n        while i < len(arr1) and j < len(arr2):\n            # If the first element of arr1 is less than the kth element, move i to the right\n            if arr1[i] < kth_element:\n                i += 1\n            # If the first element of arr2 is less than the kth element, move j to the right\n            elif arr2[j] < kth_element:\n                j += 1\n            # If the first element of both arrays is equal to the kth element, update the kth_element\n            else:\n                kth_element = arr1[i]\n                i += 1\n                j += 1\n        \n        # If kth_element is still None, the kth smallest element is not in the given arrays\n        if kth_element is None:\n            return None\n        \n        # Return the kth_element\n        return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n\n    # find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # compare the elements of the arrays\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            elif k < 0:\n                i += 1\n            else:\n                j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a number k and returns the kth smallest element.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    while i < len(arr1):\n        if i < k:\n            k -= len(arr1) - i\n            arr1.insert(k, arr1[i])\n        i += 1\n\n    while j < len(arr2):\n        if j < k:\n            k -= len(arr2) - j\n            arr2.insert(k, arr2[j])\n        j += 1\n\n    return arr1[k-1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number = str(number)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit of the number\n    for digit in number:\n        # Add the digit raised to the power of the number of digits to the sum variable\n        sum += int(digit)**len(number)\n    # Compare the sum with the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    if n == 0 or n == 1:\n        return True\n    elif n < 10:\n        return False\n    \n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    \n    return n == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize variables\n    sum_of_squares = 0\n    temp_number = number\n    # Convert the number to a string and calculate the sum of its squares\n    for digit in str(temp_number):\n        sum_of_squares += int(digit) ** 3\n    # Compare the sum of squares and the original number\n    return sum_of_squares == temp_number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    number = str(number)\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through each digit in the number\n    for digit in number:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit) ** 3\n    \n    # Check if the sum is equal to the original number\n    if sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # function to check whether a number is an armstrong number or not\n    def is_armstrong(num):\n        # initialize the sum of digits to 0\n        sum_of_digits = 0\n        # loop through each digit of the number\n        for digit in str(num):\n            # add the current digit to the sum of digits\n            sum_of_digits += int(digit) ** len(str(num))\n        # if the sum of digits is equal to the original number, then it's an armstrong number\n        return sum_of_digits == num\n\n    # check if the given number is an armstrong number or not\n    if is_armstrong(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # check if the number is not a positive integer\n    if number <= 0 or not isinstance(number, int):\n        return False\n    # find the sum of the cubes of its digits\n    sum_of_cubes = 0\n    while number > 0:\n        digit = number % 10\n        sum_of_cubes += digit ** 3\n        number //= 10\n    # check if the sum of cubes is equal to the original number\n    return sum_of_cubes == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Return True if n is an Armstrong number, False otherwise.\n    \"\"\"\n    n = int(n)\n    return sum(int(digit) ** len(str(n)) for digit in str(n)) == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = len(str(number))\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n    # Initialize a variable to hold the sum of the cube of digits\n    cube_sum = 0\n    # Iterate through the digits of the number\n    for digit in number_str:\n        # Convert the digit to an integer and cube it\n        digit_cube = int(digit) ** 3\n        # Add the cube of the digit to the cube_sum variable\n        cube_sum += digit_cube\n    # Return True if the cube_sum equals the original number, else False\n    return cube_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    number_str = str(number)\n    sum_of_squares = 0\n    power = len(number_str)\n    for digit in number_str:\n        square = int(digit) ** power\n        sum_of_squares += square\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count = 0\n    while count < number:\n        num = int(input(\"Enter a number: \"))\n        sum_of_numbers += num\n        count += 1\n    average = sum_of_numbers / number\n    print(\"The sum of first\", number, \"natural numbers is:\", sum_of_numbers)\n    print(\"The average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    total = 0\n    for i in range(1, n+1):\n        sum += i\n        total += 1\n    average = sum / total\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    count = 0\n    for i in range(n+1):\n        sum_of_numbers += i\n        count += 1\n    average = sum_of_numbers / count\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    avg = total / n\n    return (total, avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initializing sum and count variables\n    sum = 0\n    count = 0\n    \n    # iterating through the numbers from 1 to n\n    for i in range(1, number+1):\n        # adding the number to the sum\n        sum += i\n        \n        # incrementing count\n        count += 1\n        \n    # finding the average\n    average = sum / count\n    \n    # printing the sum and average\n    print(\"The sum is:\", sum)\n    print(\"The average is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(1, number+1):\n        sum += i\n        count += 1\n        \n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_num = 0\n    count = 0\n    while count < number:\n        count += 1\n        sum_num += count\n    avg = sum_num / number\n    return sum_num, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    # check if the number is even or odd\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether a given number is even or odd.\n    \"\"\"\n    # check if the number is even or not\n    if n % 2 == 0:\n        # if even, return True\n        return True\n    else:\n        # if odd, return False\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer n as input and returns True if n is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as an argument and returns True if the number is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char, freq in char_freq.items():\n        if freq == 2:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character\n    for char, count in freq.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        else:\n            char_freq[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the count of each character\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # loop through the characters again and find the first repeated character\n    for char in str1:\n        # if the character count is greater than 1, it is a repeated character\n        if char_count[char] > 1:\n            return char\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the dictionary to find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j]:\n                return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n    \n    # Loop through all numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a lucid number\n        if is_lucid(num):\n            # If it is, add it to the list of lucid numbers\n            lucid_numbers.append(num)\n    \n    # Return the list of lucid numbers\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given number is a lucid number.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each digit in the number\n    for digit in str(num):\n        # Add the digit to the sum of digits\n        sum_of_digits += int(digit)\n    \n    # Check if the sum of digits is equal to the original number\n    return sum_of_digits == num"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(2, n+1):\n        j = i\n        while j <= n:\n            ludic_numbers.append(j)\n            j += i\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list to store lucid numbers\n    lucid_numbers = []\n\n    # loop through all integers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if the integer is a lucid number (i.e., divisible by 3)\n        if i % 3 == 0:\n            # if the integer is a lucid number, append it to the list of lucid numbers\n            lucid_numbers.append(i)\n\n    # return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to n.\n    \"\"\"\n    def is_lucid(n):\n        \"\"\"\n        Helper function to check if a number is lucid.\n        \"\"\"\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def helper(start, lucids):\n        \"\"\"\n        Recursive helper function to generate all lucid numbers.\n        \"\"\"\n        if start > n:\n            return lucids\n        if is_lucid(start):\n            lucids.append(start)\n        helper(start+1, lucids)\n        return lucids\n\n    return helper(1, [])"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n+1):\n        if i % 2!= 0:\n            lucids.append(i)\n        else:\n            j = i\n            while j <= n:\n                lucids.append(j)\n                j += i\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize an empty list to store lucid numbers\n    lucid_numbers = []\n    # Initialize a boolean flag to keep track of if the current number is a lucid number\n    is_lucid = False\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Initialize a variable to store the current number as a string\n        current_number = str(i)\n        # Check if the current number is a lucid number\n        for j in range(1, len(current_number)+1):\n            # If the sum of the digits of the current number and j is less than or equal to the length of the current number,\n            # then the current number is a lucid number\n            if sum(int(digit) for digit in current_number) + j <= len(current_number):\n                is_lucid = True\n                break\n        # If the current number is a lucid number, add it to the list of lucid numbers\n        if is_lucid:\n            lucid_numbers.append(int(current_number))\n            is_lucid = False\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j**2 + i**2 == n**2:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = 1\n    while lucid <= n:\n        yield lucid\n        lucid += 2"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i > 1 and i % 2 == 0:\n            j = i\n            while j < n:\n                if j % 2 == 0:\n                    break\n                j += 2\n            else:\n                ludic.append(i)\n    return ludic"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the reversed words back into a string\n    result =''.join(words)\n    # Return the reversed string\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    # Split the string into words using whitespace as the delimiter\n    words = s.split()\n    # Reverse each word in the list using slicing\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string using whitespace as the delimiter\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string by spaces\n    words = s.split()\n    # reverse the order of the words\n    reversed_words = words[::-1]\n    # join the reversed words back into a string\n    reversed_string =''.join(reversed_words)\n    # return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word)  # reverse the order of the words\n    return''.join(reversed_words)  # join the reversed words back into a string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    \n    # Join the reversed words into a string\n    reversed_s = \" \".join(reversed_words)\n    \n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    # Remove spaces from the string\n    s = s.replace(\" \", \"\")\n    # Split the string into words\n    words = s.split(\" \")\n    # Reverse the words\n    words.reverse()\n    # Join the words back into a string\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using whitespace as the delimiter\n    words = s.split()\n    # reverse the order of the words\n    words.reverse()\n    # join the words back into a string with whitespace as the delimiter\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2 or num == 3:\n        return True\n    if is_prime(num-1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Initialize a variable to keep track of whether the number is prime or not\n    is_prime = True\n\n    # Check if the number is less than 2\n    if num < 2:\n        is_prime = False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            is_prime = False\n            break\n\n    # Return the result\n    return is_prime"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return round(radian, 2)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a text string and a regex pattern as input, and searches for all the occurrences of the pattern in the text string.\n    It returns a list of tuples containing the matching substring, the start index, and the end index of each occurrence.\n    '''\n    # Find all occurrences of the pattern in the text string using re.findall()\n    matches = re.findall(pattern, text)\n    \n    # Create an empty list to store the results\n    result = []\n    \n    # Iterate over the matches and add each match to the result list as a tuple\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        result.append((match, start_index, end_index))\n    \n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        start = matches[0].start()\n        end = matches[0].end()\n        return matches[0], start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find all the matches of the pattern\n    matches = re.findall(pattern, text)\n    \n    # if there are matches, iterate over each match and return the substring, start index, and end index\n    for match in matches:\n        return match[0], match.start(), match.end()\n    \n    # if there are no matches, return None\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = (2*bell*i) / (i+1)\n    return bell\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of Bell number for\", n, \"is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for i in range(3, n+1):\n            bell_number = (1/i) * ((math.sin(math.pi * i) / (math.cos(math.pi * i))))\n            print(bell_number)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 0\n    for i in range(1, n+1):\n        bell_num = bell_num + ((-1)**i) * (2*i - 1)\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initialize the list to store the bell numbers\n    bell_num = []\n\n    # Loop through the first n terms of the sequence\n    for i in range(n):\n        # Add the nth term to the list\n        bell_num.append(bell(i))\n\n    # Return the list of bell numbers\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_seq = [0]\n    for i in range(1, n+1):\n        bell_seq.append(bell_seq[-1] + bell_seq[-2])\n    return bell_seq[n]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return \"List is too short to remove the kth element.\"\n    k = L - 1\n    for i in range(len(list1)):\n        if i == k:\n            list1.pop(i)\n        else:\n            list1[i] = list1[i+1]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1 = list(list1)\n    k = L\n    if k > len(list1):\n        return \"The given list is less than k elements long.\"\n    \n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    for i in range(len(list1)):\n        if i!= k-1:\n            list1[i], list1[k-1] = list1[k-1], list1[i]\n            k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    for i in range(n-1, k-1, -1):\n        list1[i] = list1[i+1]\n    list1.pop()\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and a value of k and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # find the k'th element in the list\n    k = L-1\n    for i in range(len(list1)):\n        if i == k:\n            continue\n        elif i > k:\n            list1[i-1] = list1[i]\n    # return the list with the k'th element removed\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L > len(list1):\n        raise ValueError(\"The length of list is less than k.\")\n    return list1[:L-1] + list1[L:]\n"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_list = []\n    for row in test_list:\n        max_list.append(max(row[i] for i in range(len(row))))\n    return max(max_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Extract the nth column from the matrix\n    column = [row[N-1] for row in test_list]\n    # Return the maximum value in the column\n    return max(column)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(matrix)):\n        matrix[i].sort()\n        matrix[i] = matrix[i][-N:]\n    return max(matrix, key=lambda x: x[-1])"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, max(test_list[i]))\n        else:\n            max_value = max(max_value, test_list[i][N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if not isinstance(test_list, list) or not all(isinstance(sublist, list) for sublist in test_list):\n        return \"Input is not a valid matrix\"\n    n = len(test_list)\n    if N < 1 or N > n:\n        return \"Invalid column index\"\n    max_value = float('-inf')\n    for row in test_list:\n        max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_val = float('-inf')  # initialize to negative infinity\n    for row in test_list:\n        if N-1 < len(row):  # check if N-1th column exists\n            col_val = row[N-1]  # get the value of the N-1th column\n            if col_val > max_val:  # check if the current value is greater than the maximum value\n                max_val = col_val  # update the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        col = [row[i] for row in test_list]\n        col.sort(reverse=True)\n        test_list[i] = col[:N]\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize variables to keep track of the max value and its index\n    max_val = test_list[0][N-1]\n    max_index = 0\n    \n    # loop through the list of lists\n    for i in range(1, len(test_list)):\n        # compare the value of then'th column with the current max value\n        if test_list[i][N-1] > max_val:\n            # update the max value and its index if the new value is greater\n            max_val = test_list[i][N-1]\n            max_index = i\n    \n    # return the value of the max value and its index\n    return (max_val, max_index)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_value = max(max_value, max(test_list[i]))\n        elif test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        first, second = sublist\n        result.append([first, second])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for i in range(0, len(lst), 2):\n        first_elem = lst[i][0]\n        second_elem = lst[i+1][1]\n        merged_lst.append([first_elem, second_elem])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        for val in tup:\n            total += val\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            cum_sum += test_list[i] + test_list[j-1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            cumsum += sum(test_list[i])\n        else:\n            cumsum += test_list[i]\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], tuple):\n            cum_sum += sum(test_list[i])\n        elif isinstance(test_list[i], list):\n            for j in range(len(test_list[i])):\n                if isinstance(test_list[i][j], tuple):\n                    cum_sum += sum(test_list[i][j])\n        else:\n            cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num) / len(num) for num in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to hold the averages\n    averages = []\n    # loop through each tuple in the input tuple\n    for i in range(len(nums)):\n        # calculate the average value for each tuple\n        avg = sum(nums[i]) / len(nums[i])\n        # add the average value to the averages list\n        averages.append(avg)\n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    averages = []\n    \n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # loop through each element in the tuple\n        for elem in tup:\n            # add the element to a running total\n            total += elem\n        \n        # calculate the average and append it to the list of averages\n        avg = total / len(tup)\n        averages.append(avg)\n        \n        # reset the running total and loop index to start over\n        total = 0\n        index = 0\n    \n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        avg = sum(nums[i]) / len(nums[i])\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize a list to store the averages for each tuple\n    averages = []\n\n    # iterate through each tuple in the input list\n    for tup in nums:\n        # calculate the sum of all elements in the tuple\n        total = sum(tup)\n        # divide the sum by the length of the tuple to get the average\n        avg = total / len(tup)\n        # append the average to the list of averages for each tuple\n        averages.append(avg)\n\n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n    return [total / count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Convert the input tuple into a list of lists\n    input_list = [[x] for x in nums]\n\n    # Create an empty list to store the averages\n    averages = []\n\n    # Iterate over each element of the input list\n    for row in input_list:\n        # Calculate the average of the row using the built-in sum() function\n        avg = sum(row) / len(row)\n\n        # Add the average to the averages list\n        averages.append(avg)\n\n    # Convert the averages list back into a tuple and return it\n    return tuple(averages)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Checking if the length of the tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two input tuples are not the same.\")\n    # Performing element-wise modulo\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    # Returning the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n\n    # Perform element-wise modulo on the two input tuples\n    modulo_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n\n    # Return the modulo tuple\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The length of the tuples are not equal.\"\n    \n    # Perform element-wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length.\")\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    # Create a 2D array to store the minimum number of jumps required to reach the point (d, 0) from origin\n    min_jumps = [[float('inf')] * (d + 1) for i in range(steps + 1)]\n\n    # Initialize the first row and column\n    for i in range(steps + 1):\n        min_jumps[i][0] = 0\n        min_jumps[0][i] = float('inf')\n\n    # Fill the remaining values in the 2D array\n    for i in range(1, steps + 1):\n        for j in range(1, d + 1):\n            # Check if the current point is reachable\n            if min_jumps[i - 1][j] + 1 < min_jumps[i][j]:\n                min_jumps[i][j] = min_jumps[i - 1][j] + 1\n\n            # Check if the current point is reachable after jumping to the right\n            if j > 1 and min_jumps[i - 1][j - 1] + 1 < min_jumps[i][j]:\n                min_jumps[i][j] = min_jumps[i - 1][j - 1] + 1\n\n    # Return the minimum number of jumps required\n    return min_jumps[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize a variable to store the number of jumps required to reach (d, 0)\n    jumps = 0\n\n    # Initialize a variable to store the number of steps remaining\n    steps_left = steps\n\n    # Loop through each step\n    for i in range(steps_left):\n        # Check if the next step is an upward step\n        if i < d:\n            # If it is, increase the number of jumps required and decrease the number of steps remaining\n            jumps += 1\n            steps_left -= 1\n        # Check if the next step is a downward step\n        else:\n            # If it is, decrease the number of steps remaining\n            steps_left -= 1\n\n    # Return the number of jumps required to reach (d, 0)\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    # Function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane\n    n = len(steps)\n    jumps = 0\n    curr_pos = 0\n    while curr_pos < n-1:\n        if steps[curr_pos] <= d:\n            curr_pos += 1\n        else:\n            d -= steps[curr_pos]\n            jumps += 1\n            curr_pos += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    rows = len(steps)\n    cols = len(steps[0])\n\n    # Initialize the dp table\n    dp = [[float('inf')] * (cols + 1) for _ in range(rows + 1)]\n\n    # Initialize the starting point\n    dp[0][0] = 0\n\n    # Traverse the dp table from the starting point and fill in the values\n    for i in range(1, rows + 1):\n        for j in range(1, cols + 1):\n            # If the current cell is the destination cell\n            if i == rows and j == d:\n                return dp[i][j]\n\n            # If the current cell is not the destination cell\n            if i == rows and j!= d:\n                dp[i][j] = float('inf')\n\n            # If the current cell is a valid cell\n            else:\n                # If the next cell is a valid cell, then there can be only one jump from the current cell to the next cell\n                dp[i][j] = dp[i - 1][j] + 1\n\n                # If the next cell is not a valid cell, then there can be two jumps from the current cell to the next cell\n                if steps[i - 1][j] == 1:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j + 1] + 1)\n\n    # If the destination cell is not reachable\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    num_jumps = 0\n    start_row = 0\n    start_col = 0\n    end_row = 0\n    end_col = 0\n\n    # iterate through all possible starting points\n    for row in range(len(steps)):\n        for col in range(len(steps[row])):\n            # check if the current point is at (d, 0)\n            if steps[row][col] == d and start_row == 0 and start_col == 0:\n                # set the end point to be at (d, 0)\n                end_row = row\n                end_col = col\n                break\n\n    # check if the end point has been reached\n    if end_row == 0 and end_col == 0:\n        return -1\n    else:\n        # initialize variables\n        distance = 0\n        row_to_jump = 1\n        col_to_jump = 0\n        direction = 1\n\n        # iterate until the end point is reached\n        while True:\n            # check if the end point has been reached\n            if row_to_jump == end_row and col_to_jump == end_col:\n                break\n\n            # check if the end point is within the boundaries of the array\n            if row_to_jump >= len(steps) or col_to_jump >= len(steps[row_to_jump]):\n                return -1\n\n            # check if the current point is out of range\n            if row_to_jump < 0 or col_to_jump < 0:\n                return -1\n\n            # update the distance\n            distance += 1\n\n            # check if the current point is a wall\n            if steps[row_to_jump][col_to_jump] == 1:\n                return -1\n\n            # check if the current point is a jump\n            if steps[row_to_jump][col_to_jump] == 2:\n                num_jumps += 1\n\n                # update the starting point\n                start_row = row_to_jump\n                start_col = col_to_jump\n\n                # update the direction\n                if direction == 1:\n                    row_to_jump += 1\n                elif direction == 2:\n                    col_to_jump += 1\n                elif direction == 3:\n                    row_to_jump -= 1\n                elif direction == 4:\n                    col_to_jump -= 1\n\n                # update the direction\n                direction = (direction + 1) % 4\n\n        return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Calculate the total number of steps\n    total_steps = steps * (steps + 1) // 2\n    \n    # Initialize variables\n    jumps = 0\n    current_position = 0\n    \n    # Loop through each step\n    for step in range(total_steps):\n        \n        # If the current position is the starting point, increment the jumps count\n        if current_position == 0:\n            jumps += 1\n        \n        # Move one step to the right\n        current_position += 1\n        \n        # If the current position is d, exit the loop\n        if current_position == d:\n            break\n        \n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # Use dynamic programming approach to solve this problem\n    dp = [[0]*(d+1) for _ in range(steps+1)]\n\n    for i in range(1, steps+1):\n        for j in range(d+1):\n            if j > 0:\n                dp[i][j] = dp[i-1][j-1]\n            if i > 1 and j > 1:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    jumps = 0\n    i = 1\n    \n    # Loop until the point of form (d, 0) is reached\n    while i <= steps:\n        if i >= d:\n            jumps += 1\n            i += 1\n        else:\n            i += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function calculates the minimum number of jumps needed to reach a point of form (d, 0) from origin in a 2D plane.\n\n    Parameters:\n    steps (int): the number of steps required to reach a point of form (d, 0) from origin.\n    d (int): the value of d.\n\n    Returns:\n    int: the minimum number of jumps required to reach a point of form (d, 0) from origin.\n\n    Example:\n    >>> min_Jumps(10, 3)\n    2\n    '''\n\n    # Calculate the number of jumps required for each step\n    jumps_per_step = (steps + 1) // 2\n\n    # Calculate the minimum number of jumps required\n    min_jumps = min(jumps_per_step, d)\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize the number of jumps as 0\n    jumps = 0\n    # Initialize the current step as 0\n    current_step = 0\n    # Initialize the maximum number of jumps as 0\n    max_jumps = 0\n    # Initialize the maximum length of steps as 0\n    max_steps = 0\n    # Loop through the steps\n    while current_step < steps:\n        # If the current step is equal to d, add 1 to the jumps and update the maximum jumps and maximum steps\n        if current_step == d:\n            jumps += 1\n            max_jumps = max(max_jumps, jumps)\n            max_steps = max(max_steps, current_step)\n            # If the current step is greater than d, update the current step as 0 and add 1 to the jumps\n            current_step = 0\n            jumps += 1\n        # If the current step is less than d, add 1 to the current step and move on to the next step\n        else:\n            current_step += 1\n            jumps += 1\n            # Update the maximum jumps and maximum steps\n            max_jumps = max(max_jumps, jumps)\n            max_steps = max(max_steps, current_step)\n    # Return the maximum number of jumps required\n    return max_jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have same length\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists are not of equal length.\"\n    # Divide each element of the lists and store in a new list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns the division of each element in the lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError('The second list cannot contain 0')\n        else:\n            result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lengths of two lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: Both lists must have the same length.\")\n        return\n    # Divide each element of the lists element wise and append the result to a new list\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    # Return the new list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a list where each element is the element-wise division of corresponding elements in the two input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must be of the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    result = ''.join(num_list)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums_str = ''.join(nums)\n    return test_str.replace(nums_str, '') + nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            j = i + 1\n            while j < len(test_str) and test_str[j].isdigit():\n                j += 1\n            while j > i:\n                new_str = new_str + test_str[j - 1]\n                test_str = test_str[:j - 1] + test_str[j:]\n                j -= 1\n        else:\n            new_str += test_str[i]\n        i += 1\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize empty string to store numbers\n    nums = \"\"\n\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, add it to the nums string\n        if char.isdigit():\n            nums += char\n        # If the character is not a number, add it to the end of the test_str string\n        else:\n            test_str += char\n\n    # Return the test_str string with all the numbers moved to the end\n    return test_str + nums"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    for num in nums:\n        test_str = test_str.replace(num, '')\n    return test_str + ''.join(nums)\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into individual characters\n    chars = list(test_str)\n    # Initialize an empty string to store the numbers\n    numbers = ''\n    # Loop through each character and append it to the appropriate string\n    for char in chars:\n        if char.isdigit():\n            numbers += char\n        else:\n            chars.remove(char)\n    # Join the characters together and return the result\n    return ''.join(chars) + numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a string to store the numbers\n    num_str = \"\"\n\n    # Loop through each character in the given string\n    for char in test_str:\n        # If the character is a number, add it to the num_str\n        if char.isdigit():\n            num_str += char\n        # If the character is not a number, append it to the string\n        else:\n            test_str += char\n\n    # Return the modified string with all the numbers moved to the end\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 1\n    current_size = 1\n    i = 0\n    while i < n:\n        if a[i] % a[i + 1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n        i += 1\n    max_size = max(max_size, current_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a) # Sort the list in ascending order\n    n = len(a)\n    dp = [1] * n # Initialize the dp array with 1s\n\n    # Calculate the maximum size of a subset that is divisible by every number in the list\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # Find the maximum size of a subset\n    max_size = max(dp)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def is_divisible(x, y):\n        return x % y == 0\n    \n    def subset_sum(arr, start, end):\n        if start == end:\n            return arr[start]\n        return arr[start] + subset_sum(arr, start+1, end)\n    \n    largest_subset_size = 0\n    start_idx = 0\n    \n    for end_idx in range(1, len(a)):\n        if is_divisible(a[start_idx], a[end_idx]):\n            largest_subset_size = max(largest_subset_size, subset_sum(a, start_idx, end_idx))\n        else:\n            start_idx = end_idx\n    \n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Create a list of the multiples of the first element of the list\n    multiples_of_first = [x * a[0] for x in range(1, max(a)+1)]\n    # Create a list of the multiples of each element in the list\n    multiples_of_elements = [x * a[i] for i in range(len(a)) for x in range(1, max(a)+1)]\n    # Create a set of the elements in the list\n    elements = set(a)\n    # Find the number of unique pairs that can be formed from the elements with the first element as multiples\n    unique_pairs = 0\n    for i in range(1, len(multiples_of_elements)):\n        for j in range(i, len(multiples_of_elements)):\n            if multiples_of_elements[i] % multiples_of_elements[j] == 0:\n                unique_pairs += 1\n    # Find the size of the largest subset of the elements with the first element as multiples\n    subset_size = unique_pairs\n    # Iterate through the list of unique pairs and find the maximum subset size\n    for i in range(len(multiples_of_elements)):\n        for j in range(i, len(multiples_of_elements)):\n            if multiples_of_elements[i] % multiples_of_elements[j] == 0 and j > i:\n                subset_size = max(subset_size, unique_pairs)\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    # Create a set to store the remainders\n    remainders = set()\n    \n    # Initialize the largest subset size to 0\n    largest_subset_size = 0\n    \n    # Iterate through the list of numbers\n    for num in a:\n        # Calculate the remainder of the current number\n        remainder = num % 2\n        \n        # If the remainder is not in the set, add it and update the largest subset size if necessary\n        if remainder not in remainders:\n            remainders.add(remainder)\n            largest_subset_size = max(largest_subset_size, len(remainders))\n    \n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    pairs = []\n    count = 0\n    curr_pair = []\n    max_count = 0\n    \n    for num in a:\n        if num % 2 == 0:\n            if curr_pair:\n                curr_pair.append(num)\n                count += 1\n                if count > max_count:\n                    max_count = count\n            else:\n                curr_pair = [num]\n                count = 1\n        else:\n            if curr_pair:\n                pairs.append(curr_pair)\n                curr_pair = []\n                count = 0\n            if num % 2 == 0:\n                curr_pair.append(num)\n                count += 1\n                if count > max_count:\n                    max_count = count\n    \n    if curr_pair:\n        pairs.append(curr_pair)\n    \n    return max_count, pairs"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Initialize variables to store the largest subset size and the number of pairs that form it\n    largest = 0\n    num_pairs = 0\n    # Loop through the list of numbers and for each number, check if it's divisible by any number in the list\n    for num in a:\n        is_divisible = True\n        for divisible_num in a:\n            if num % divisible_num!= 0:\n                is_divisible = False\n                break\n        # If the number is divisible by all numbers, update the largest subset size and the number of pairs that form it\n        if is_divisible:\n            largest = max(largest, num_pairs)\n            num_pairs = 1\n        else:\n            num_pairs += 1\n    # Finally, update the largest subset size and the number of pairs that form it\n    largest = max(largest, num_pairs)\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    largest = 0\n    curr = 0\n    \n    # Sort the list\n    a.sort()\n    \n    # Iterate through the list\n    for i in range(len(a)):\n        # Calculate the current subset size\n        curr = i + 1\n        \n        # Check if every pair is divisible\n        is_divisible = True\n        for j in range(i+1, len(a)):\n            if a[j] % a[i]!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            # Update the largest subset size\n            largest = max(largest, curr)\n    \n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    def is_divisible(num, divisor):\n        \"\"\"\n        Check if a number is divisible by a given divisor.\n        \"\"\"\n        return num % divisor == 0\n    \n    def find_largest_subset(arr, start, end):\n        \"\"\"\n        Recursive function to find the size of the largest subset of the given range.\n        \"\"\"\n        if start == end:\n            return 1\n        \n        subsets = []\n        \n        for i in range(start, end+1):\n            if is_divisible(arr[i], arr[start]):\n                subsets.append(find_largest_subset(arr, start+1, i))\n                \n        return max(subsets)\n    \n    max_subset_size = 0\n    \n    for i in range(len(a)):\n        subset_size = find_largest_subset(a, i, i)\n        if subset_size > max_subset_size:\n            max_subset_size = subset_size\n    \n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    i = 0\n    while i < len(a):\n        j = i + 1\n        while j < len(a) and a[j] % a[i]!= 0:\n            j += 1\n        max_size = max(max_size, j - i)\n        i = j\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of the same size n and returns the\n    median of the two lists.\n    \"\"\"\n    # Merge the two sorted lists into one\n    arr = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        arr.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        arr.append(arr2[j])\n        j += 1\n    # Get the median of the merged list\n    arr.sort()\n    if len(arr) % 2 == 0:\n        median = (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2\n    else:\n        median = arr[len(arr)//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    \n    # Sort the array\n    arr.sort()\n    \n    # Calculate the middle index\n    mid = n // 2\n    \n    # Check if the middle index is odd or even\n    if n % 2 == 0:\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Concatenate the two arrays and sort them\n    arr = sorted(arr1 + arr2)\n\n    # Determine the median index\n    median_index = n // 2\n\n    # If the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return arr[median_index]\n\n    # If the length of the array is even, return the average of the middle two elements\n    else:\n        return (arr[median_index - 1] + arr[median_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes three arguments: the first two lists to be compared and\n    the size of both lists (n). It returns the median of the two lists.\n    \"\"\"\n    \n    # Concatenate the two lists and sort them\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Find the middle index of the sorted list\n    mid = n // 2\n\n    # If n is odd, the median is the middle element\n    if n % 2 == 1:\n        return arr[mid]\n    else:\n        # If n is even, the median is the average of the middle two elements\n        return (arr[mid - 1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two lists\n    lst = arr1 + arr2\n\n    # Sort the concatenated list\n    lst.sort()\n\n    # Calculate the median index\n    mid = n // 2\n\n    # Check if the length of the list is odd or even\n    if n % 2 == 0:\n        # Return the average of the two middle numbers\n        return (lst[mid - 1] + lst[mid]) / 2\n    else:\n        # Return the middle number\n        return lst[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    median_index = n // 2\n    if n % 2 == 0:\n        median = (merged_arr[median_index - 1] + merged_arr[median_index]) / 2\n    else:\n        median = merged_arr[median_index]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    median = arr[n // 2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort the two arrays\n    sorted_arr = sorted(arr1 + arr2)\n    # Find the median index\n    median_index = n // 2\n    # Check if the median index is even or odd\n    if n % 2 == 0:\n        # Find the average of the two elements at the median index\n        median = (sorted_arr[median_index-1] + sorted_arr[median_index]) / 2\n    else:\n        # Return the element at the median index\n        median = sorted_arr[median_index]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        print(\"Error: Both lists must have the same length!\")\n        return\n    \n    sorted_arr = sorted(arr1 + arr2)\n    \n    if n % 2 == 0:\n        median = (sorted_arr[n//2-1] + sorted_arr[n//2])/2\n    else:\n        median = sorted_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Sort the given lists\n    arr1.sort()\n    arr2.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2] + arr2[n//2-1] + arr2[n//2]) / 4\n    else:\n        median = arr1[n//2]\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    # loop through each number in the list\n    for num in nums:\n        # compute the nth power of the number\n        result = num ** n\n        # print the result\n        print(result)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    :param nums: A list of numbers.\n    :param n: An integer specifying the power to compute.\n    :return: A list of n-th powers of each number in the input list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase\n    string = string.upper()\n    # return the uppercase string\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the given string to uppercase using the upper() method\n    upper_string = string.upper()\n    # Return the uppercase string\n    return upper_string"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"The given list should have at least 2 elements\"\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the given list is empty or not\n    if len(newList) < 2:\n        print(\"The given list is empty or has less than 2 elements.\")\n    else:\n        # Interchange the first and last element of the list\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(\"The new list is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the input list is not empty\n    if not newList:\n        print(\"The input list is empty.\")\n        return\n    # Check if the input list has only one element\n    elif len(newList) == 1:\n        print(\"The input list has only one element.\")\n        return\n    else:\n        # Interchange the first and last element in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"The input list has been interchanged.\")\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is less than or equal to 1\n    if len(newList) <= 1:\n        return newList\n    else:\n        # interchange the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Take the first and last element of the list\n    first_elem = newList[0]\n    last_elem = newList[-1]\n\n    # Interchange the first and last element\n    newList[0] = last_elem\n    newList[-1] = first_elem\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: \n        return newList\n    else: \n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # check if the length of the list is less than 2\n    if len(newList) < 2: \n        return newList\n\n    # swapping the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements\"\n    \n    # Swap the first and last elements\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14\n    # Formula for area of a triangle given two vertices and their angles\n    def area(a, b, c):\n        return (1/2)*a*b*c\n    # Find the semi-perimeter of a semicircle\n    def sperimeter(r):\n        return 2*pi*r\n    # Find the semi-perimeter of the largest triangle\n    def lperimeter(r):\n        return sperimeter(r/2)\n    # Find the semi-radius of the largest triangle\n    def lradius(l):\n        return l/3\n    # Find the area of the largest triangle inscribed in the semicircle with radius r\n    def larea(l, r):\n        return area(l/2, l/2, l/2)\n    # Check if the given radius is valid\n    if r <= 0:\n        return \"Invalid radius\"\n    # Find the area of the largest triangle inscribed in the semicircle with radius r\n    area_l = larea(lperimeter(r), r)\n    return area_l"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the length of the semicircle\n    a = 2*r\n\n    # Calculate the area of the largest triangle\n    s = (3*r**2)/4\n\n    # Return the area of the largest triangle\n    return s"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    A = math.pi * r ** 2\n    largest_triangle_area = max(A, (math.pi * r ** 2) / 3)\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n    \n    # Calculate the semi-circle's area\n    semicircle_area = 2 * math.pi * r ** 2\n    \n    # Calculate the height of the largest triangle that can be inscribed in the semicircle\n    height = semicircle_area / 3\n    \n    # Calculate the area of the largest triangle\n    largest_triangle_area = (1 / 2) * height ** 2\n    \n    return largest_triangle_area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 3*r\n    b = r**2\n    c = a**2 - b**2\n    area = 0.5*a*b*c\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    '''\n    a = math.sqrt(3) * r\n    return 4 * a / 3\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Constants\n    pi = 3.14159265358979323846\n    \n    # Find the area of the largest triangle\n    area = (pi * r**2) / 3\n    \n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r * (math.sin(math.pi/3))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(3):\n        area += (r ** 2 - r * i) ** 0.5\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # find the semiperimeter\n    s = math.pi * r * 2\n\n    # find the smallest semiperimeter that satisfies triangle inequality\n    while s >= r:\n        s = s - 2 * r\n\n    # find the area of the largest triangle that can be inscribed in the semicircle with the given radius\n    area = math.sqrt(s * (s - r) * (s - r) * (s - r))\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    while start<=end:\n        mid = (start+end)//2\n        if array[mid]<mid:\n            start = mid+1\n        elif array[mid]>mid:\n            end = mid-1\n        else:\n            start = mid+1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the array is sorted or not\n    if len(array)!= len(set(array)):\n        print(\"Error: Array is not sorted.\")\n        return -1\n\n    # Find the maximum number in the array\n    max_num = max(array)\n\n    # Initialize the variable for the first missing number\n    first_missing = max_num + 1\n\n    # Iterate through the array and find the first missing number\n    for num in array:\n        if num == first_missing:\n            first_missing += 1\n        elif num > first_missing:\n            break\n\n    # Check if the number of iterations equals the maximum number in the array\n    if first_missing > max_num:\n        print(\"Error: Array contains all the numbers.\")\n        return -1\n\n    # Return the first missing number\n    return first_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the list is sorted\n    if array!= sorted(array):\n        raise ValueError(\"The list should be sorted.\")\n    \n    # Check if the list is empty\n    if len(array) == 0:\n        raise ValueError(\"The list should not be empty.\")\n    \n    # Check if the end index is not provided\n    if end is None:\n        end = len(array) - 1\n    \n    # Find the first missing number using binary search\n    left = start\n    right = end\n    while left <= right:\n        mid = left + (right - left) // 2\n        if array[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the input list is empty, it will return None.\n    '''\n    if not array:\n        return None\n\n    # Check if the array is sorted\n    if array[0] <= array[-1]:\n        return None\n\n    # Find the minimum value in the array\n    min_val = array[0]\n\n    # Check for missing numbers in the array\n    for i in range(1, len(array)):\n        if array[i] - min_val!= i:\n            return min_val + i\n\n    # If the loop completes, all the missing numbers have been found\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    If the list is not sorted, it sorts the list.\n    \"\"\"\n\n    # if the list is not sorted, sort it\n    if start!= 0:\n        array = sorted(array)\n\n    # initialize the missing number\n    missing = start\n\n    # loop through the array to find the missing number\n    for i in range(len(array)):\n        if array[i]!= missing:\n            missing += 1\n            break\n\n    # return the missing number\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n    return end"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if not array[i] in array[:i]:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes a sorted list of natural numbers as an input and returns the smallest missing number.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list[int]): A sorted list of natural numbers.\n        start (int, optional): The start index of the search range. Defaults to 0.\n        end (int, optional): The end index of the search range. Defaults to None, which means to search all indices.\n\n    Returns:\n        int: The smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    for i in range(start, end):\n        if i!= array[i]:\n            return i\n    return end"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # unpack the coordinate tuple\n    x, y = ele\n    \n    # define the list of adjacent coordinates\n    adj = [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]\n    \n    # return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # create a list of adjacent coordinates\n    adj = [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n    # add the sublist to the list of adjacent coordinates\n    adj.extend(sub)\n    # return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # unpack the coordinate tuple\n    x, y = ele\n    \n    # define the adjacent coordinates\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    \n    # add the adjacent coordinates to the sublist if they are not already present\n    if (adj[0] not in sub) and (adj[1] not in sub) and (adj[2] not in sub) and (adj[3] not in sub):\n        sub.extend(adj)\n    \n    # return the list of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0 and y > 0:\n        sub.append((x - 1, y - 1))\n    if x > 0 and y < 9:\n        sub.append((x - 1, y + 1))\n    if x < 9 and y > 0:\n        sub.append((x + 1, y - 1))\n    if x < 9 and y < 9:\n        sub.append((x + 1, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    if x > 0 and y > 0:\n        adjacent.append((x-1, y-1))\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x > 0 and y < 9:\n        adjacent.append((x-1, y+1))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < 9:\n        adjacent.append((x, y+1))\n    if x < 9 and y > 0:\n        adjacent.append((x+1, y-1))\n    if x < 9:\n        adjacent.append((x+1, y))\n    if x < 9 and y < 9:\n        adjacent.append((x+1, y+1))\n    adjacent = [tuple(i) for i in adjacent]\n    for coord in adjacent:\n        if coord not in sub:\n            sub.append(coord)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    res = []\n    if x > 0:\n        res.append((x-1, y))\n    if x < n-1:\n        res.append((x+1, y))\n    if y > 0:\n        res.append((x, y-1))\n    if y < m-1:\n        res.append((x, y+1))\n    for i in range(len(sub)):\n        x, y = sub[i]\n        if x > 0:\n            res.append((x-1, y))\n        if x < n-1:\n            res.append((x+1, y))\n        if y > 0:\n            res.append((x, y-1))\n        if y < m-1:\n            res.append((x, y+1))\n    return res"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    if isinstance(ele, tuple):\n        x, y = ele\n    elif isinstance(ele, list):\n        x, y = ele[0], ele[1]\n    else:\n        print(\"Invalid input\")\n        return None\n    \n    if x < 0 or x > 100 or y < 0 or y > 100:\n        print(\"Invalid coordinates\")\n        return None\n    \n    adj = []\n    \n    # add adjacent coordinates to the list\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 100:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 100:\n        adj.append((x, y+1))\n    \n    # check if the adjacent coordinates are within the boundaries of the grid\n    for a in adj:\n        if a[0] < 0 or a[0] > 100 or a[1] < 0 or a[1] > 100:\n            return None\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    for i in range(len(sub)):\n        if i == 0:\n            adjacent.append((x, sub[i][1]))\n        elif i == len(sub)-1:\n            adjacent.append((sub[i-1][0], y))\n        else:\n            adjacent.append((sub[i-1][0], sub[i][1]))\n            adjacent.append((sub[i][0], sub[i][1]))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple (x,y) representing a coordinate and a list as an optional argument.\n    It returns a list of adjacent coordinates. The list of adjacent coordinates is obtained by\n    finding the neighboring grid points that are adjacent to the coordinate (x,y), and appending\n    them to the list. If the optional argument sub is provided, then only the adjacent coordinates \n    that are subsets of sub will be returned.\n    '''\n    x,y = ele\n    sub_set = set(sub)\n    adj = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i,j) not in sub_set and (i,j)!= ele and (i,j)!= (x,y):\n                adj.append((i,j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Define a dictionary to store the adjacent coordinates of the given element.\n    adj_dict = {}\n\n    # Extract all the adjacent elements of the given element.\n    for coord in ele:\n        if coord[0] > 0 and coord[1] > 0:\n            adj_dict[(coord[0]-1, coord[1]-1)] = True\n        if coord[0] > 0 and coord[1] < len(sub)-1:\n            adj_dict[(coord[0]-1, coord[1]+1)] = True\n        if coord[0] < len(sub)-1 and coord[1] > 0:\n            adj_dict[(coord[0]+1, coord[1]-1)] = True\n        if coord[0] < len(sub)-1 and coord[1] < len(sub)-1:\n            adj_dict[(coord[0]+1, coord[1]+1)] = True\n\n    return adj_dict"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        elif text[i] == \"_\":\n            new_text += \" \"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    This function replaces all spaces in a given string with an underscore and vice versa.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text.replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text.replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    if zero_count > 0:\n        for i in range(len(num_list) - zero_count - 1, -1, -1):\n            if num_list[i]!= 0:\n                num_list[i], num_list[i + zero_count] = num_list[i + zero_count], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[index], num_list[i] = num_list[i], num_list[index]\n            index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    i = 0\n    while i < n:\n        if num_list[i] == 0:\n            for j in range(i+1, n):\n                if num_list[j]!= 0:\n                    num_list[i], num_list[j] = num_list[j], num_list[i]\n                    n = n-1\n                    break\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-count] = num_list[len(num_list)-1-count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Iterate through the list backwards and swap zeroes with non-zero elements\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n            return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        for j in range(len(num_list) - 1, zero_index, -1):\n            num_list[j], num_list[j - 1] = num_list[j - 1], num_list[j]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # initialize two pointers for two lists: one for non-zeroes and one for zeros\n    non_zero_index = 0\n    zero_index = len(num_list)\n\n    # loop through the list and swap non-zero elements with non-zero elements and zero elements\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[non_zero_index], num_list[i] = num_list[i], num_list[non_zero_index]\n            non_zero_index += 1\n        elif num_list[i] == 0:\n            num_list[zero_index], num_list[i] = num_list[i], num_list[zero_index]\n            zero_index -= 1\n\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    num_list.reverse()\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            i -= 1\n            num_list.append(0)\n    num_list.reverse()\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum_xor ^= xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of two numbers is their sum\n    def xor(a, b):\n        return a ^ b\n\n    # XOR of all pairs of numbers in the list\n    xor_sum = sum(xor(a, b) for a in arr for b in arr)\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize a variable to store the sum of xor of all pairs\n    xor_sum = 0\n    # Loop through all pairs of numbers from the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the two numbers and add it to the xor_sum\n            xor_sum += arr[i] ^ arr[j]\n    # Return the xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and the length of the list as inputs and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements in the list\n    xor_sum = sum([a^b for a in arr for b in arr])\n\n    # Divide the sum by 2^n (to get the sum of xor of all pairs)\n    xor_sum = xor_sum//(2**n)\n\n    # Convert the result to a list\n    xor_sum = list(xor_sum)\n\n    # Return the result list\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and a number n as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a max heap\n    heap = [None] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n        hq.heapify(heap, i)\n\n    # extract the elements from the max heap and convert them back to a list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n    return [hq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    # Build a max heap from the list\n    hq.heapify(lst)\n    # Iterate over the list and extract the maximum element\n    for i in range(len(lst)-1, 0, -1):\n        # Extract the maximum element from the heap\n        max_elem = hq.heappop(lst)\n        # Insert the maximum element at the end of the list\n        lst.append(max_elem)\n    # Return the sorted list\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min-heap\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n\n    # sort the min-heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    h = [0] * n\n    for i in range(n):\n        hq.heappush(h, iterable[i])\n    for i in range(n-1, -1, -1):\n        hq.heappop(h)\n    return h"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n        \n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n        hq.heappush(iterable, iterable[i])\n\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list to a min-heap\n    min_heap = hq.heapify(iterable)\n    \n    # Remove the min element from the heap and add it to the result list\n    result = []\n    while min_heap:\n        result.append(min_heap[0])\n        min_heap = min_heap[1:]\n    \n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n    actual_cost (float): The actual cost of the sale.\n    sale_amount (float): The amount of sale.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    if sale_amount == 0:\n        return True\n    if actual_cost - sale_amount <= 0:\n        return True\n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount does not have no profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit <= 0 and sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # check if the actual cost is greater than or equal to the sale amount\n    if actual_cost >= sale_amount: \n        # if it is, then the sale amount has no profit or loss\n        return True\n    else: \n        # if it's not, then the sale amount has a profit or loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount >= actual_cost:\n        return \"No profit and no loss\"\n    elif sale_amount > 0:\n        return \"No profit, but loss is possible\"\n    else:\n        return \"No loss, but profit is possible\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        return False, \"Profit found\"\n    elif profit < 0:\n        return True, \"Loss found\"\n    else:\n        return True, \"Profit and Loss found\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    elif actual_cost * 1.01 >= sale_amount:\n        return False\n    else:\n        return \"Can't determine if there is no profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost - sale_amount <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index\n    wc = 35.74 + 0.6215*t - 35.75*math.exp((17.67*t)/(t+243.5)) + 0.4275*math.exp((17.67*t)/(t+243.5))\n    # calculate the rounded wind chill index\n    wc_rounded = round(wc)\n    # return the rounded wind chill index\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): The wind velocity in km/h\n    t (float): The temperature in celsius\n\n    Returns:\n    int: The wind chill index rounded to the next integer\n\n    '''\n    # Convert temperature to kelvin\n    t_k = t + 273.15\n    \n    # Calculate the wind chill index\n    wci = (13.12 + (0.6215 * t) - (11.37 * v**0.16) + (0.3965 * t_k**0.16)) / (237.3 + (0.6215 * t) - (11.37 * v**0.16) + (0.3965 * t_k**0.16))\n    \n    # Convert to rounded integer and return\n    return int(math.ceil(wci))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate the wind chill index\n    wind_chill_index = ((68.1 + (13.3*v) + (0.621*v**2)) / (237.3 - (0.396*v) + (0.0165*v**2)))\n    \n    # Convert the wind chill index to an integer\n    wind_chill_index_rounded = round(wind_chill_index)\n    \n    # Return the wind chill index rounded to the next integer\n    return wind_chill_index_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index for a given temperature and wind velocity in km/h.\n\n    Args:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the nearest integer.\n    \"\"\"\n    if t < -273.15:\n        raise ValueError(\"Temperature cannot be less than -273.15\u00b0C.\")\n    elif t > 100:\n        raise ValueError(\"Temperature cannot be greater than 100\u00b0C.\")\n    else:\n        # Calculate the dew point temperature\n        dpt = 243.04 * (1 - (0.0065 * t) + (0.0001 * t**2))\n        # Calculate the heat index\n        hi = (v * (0.62197 * (t - dpt)) ** 0.16) + ((v ** 0.16) * (dpt - 273.15))\n        # Calculate the wind chill index\n        wci = math.floor(hi - 0.004275 * (t - 23) + 10.35)\n        # Check for wind chill index below 0 or above 100\n        if wci < 0:\n            wci = 0\n        elif wci > 100:\n            wci = 100\n        return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    if t <= 0:\n        raise ValueError(\"Temperature should be positive.\")\n    elif v <= 0:\n        raise ValueError(\"Wind velocity should be positive.\")\n    elif v <= 1:\n        raise ValueError(\"Wind velocity should be greater than 1 km/h.\")\n    \n    # Convert the temperature from Celsius to Kelvin\n    k = t + 273.15\n    \n    # Calculate the heat capacity of water\n    cp = 1005.0  # J/kg/K\n    \n    # Calculate the latent heat of vaporization\n    cv = 2246.0  # J/kg\n    \n    # Calculate the relative humidity\n    rh = 0.70  # Relative humidity (0-1)\n    \n    # Calculate the dew point temperature\n    td = math.degrees(math.sqrt(rh * cp * k / cv))\n    \n    # Calculate the wind chill index\n    wci = math.ceil(td / (1.3 * math.log(v)))\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate wind chill index using formula from Wikipedia\n    wci = 35.74 + 0.6215*t - 35.75*math.exp((17.625*t)/(t+243.5)) + 0.4275*v**0.16 + 0.2441*t*v**0.16\n    wci_rounded = math.ceil(wci)\n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function takes in a wind velocity in km/h and a temperature in celsius and returns the wind chill index rounded to the nearest integer.\n    '''\n    # convert temperature to fahrenheit\n    t = (t*1.8)+32\n    # calculate the dew point temperature\n    dp = 243.04*(10**(-0.075*(t-273.15)))\n    # calculate the wind chill index\n    wci = (13.12 + 0.6215*(v) - 11.37*math.log(dp) + 0.3965*t)\n    # round the wind chill index to the nearest integer\n    wci = round(wci)\n    # return the wind chill index\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Kelvin\n    k = t + 273.15\n\n    # Calculate the dew point temperature\n    dew = 243.04 * math.exp((17.67 * (k - 273.15)) / (k - 29.65))\n\n    # Calculate the heat index\n    hi = dew - 0.0065 * v**0.16 + 13.12\n\n    # Calculate the wind chill index\n    wc = hi - 32\n    \n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: wind chill index rounded to the next integer\n    \"\"\"\n    # calculate the wind chill temperature\n    wc = 35.74 + (0.6215*t) - (35.75*math.exp(-(t-23.15)/10.0)) + (0.4275*v**0.16)\n    \n    # round the wind chill temperature to the nearest integer\n    wc = round(wc)\n    \n    # return the wind chill index rounded to the next integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = math.cos(math.radians(t))\n    wc = 35.72 + 0.6215 * v - 35.75 * c + 0.4275 * v * c\n    return round(wc)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name.startswith(name[0].upper()):\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n    sum_len = 0\n    for name in valid_names:\n        sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()] # filtering uppercase names\n    sum_len = 0\n    for name in names:\n        sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of lengths to 0\n    name_length_sum = 0\n    # Iterate through each name in the list\n    for name in sample_names:\n        # Remove any name that starts with a lowercase letter\n        if not name.startswith(name[0].upper()):\n            # Add the length of the remaining name to the sum\n            name_length_sum += len(name)\n    # Return the sum of lengths\n    return name_length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the valid names\n    valid_names = []\n    # iterate through the sample names list\n    for name in sample_names:\n        # check if the first letter of the name is uppercase\n        if name[0].isupper():\n            # if the first letter is uppercase, add the name to the valid names list\n            valid_names.append(name)\n    # iterate through the valid names list\n    total_length = 0\n    for name in valid_names:\n        # calculate the length of each name and add it to the total length\n        total_length += len(name)\n    # return the total length of valid names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names that start with a lowercase letter\n    names_to_remove = []\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # If the name starts with a lowercase letter, add it to the names_to_remove list\n        if name[0].islower():\n            names_to_remove.append(name)\n    # Loop through each name in the sample_names list again to calculate the sum of the lengths of the remaining names\n    total_length = 0\n    for name in sample_names:\n        # If the name does not start with a lowercase letter, add its length to the total_length\n        if name not in names_to_remove:\n            total_length += len(name)\n    # Return the total_length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to keep track of the sum of the lengths of the names\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name and move to the next name\n            continue\n        # Otherwise, add the length of the name to the total length\n        total_length += len(name)\n    \n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # create a new list to store the names that start with a lowercase letter\n    names_lowercase = []\n    \n    # iterate over each name in the sample_names list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, add the name to the names_lowercase list\n            names_lowercase.append(name)\n    \n    # sum the length of the names in the names_lowercase list\n    result = sum([len(name) for name in names_lowercase])\n    \n    # return the result\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of lengths of names\n    sum_of_lengths = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, remove it from the list and add its length to the sum\n            sample_names.remove(name)\n            sum_of_lengths += len(name)\n    \n    # Return the sum of lengths of names after removing lowercase names\n    return sum_of_lengths"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # Remove all parenthesis from the string\n    items = re.sub(r'\\([^()]*?\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the pattern to match the parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    # Replace the parenthesis with an empty string\n    items = pattern.sub('', items)\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression pattern to match parenthesis\n    pattern = r'\\([^()]*\\)'\n    # Use the re.sub() function to replace the parenthesis with an empty string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove parenthesis from the string using regular expression\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # remove any remaining whitespaces\n    items = re.sub(r'\\s+','', items)\n    # remove any remaining single quotes\n    items = re.sub(r\"'\", '', items)\n    # remove any remaining double quotes\n    items = re.sub(r'\"', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove all the parenthesis from the string\n    items = re.sub(r'\\([^()]*\\)', '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        return 4 * is_nonagonal(n-1) + 4"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the variables for the two-dimensional array\n    nonagonal = [[1]]\n    num_rows = 1\n    max_num = 2 * n - 1\n    \n    # Calculate the total number of elements in the array\n    num_cols = 1\n    while num_cols * num_rows <= max_num:\n        num_cols += 1\n        num_rows += 1\n    \n    # Create the two-dimensional array with the specified values\n    for i in range(num_rows):\n        nonagonal.append([0] * num_cols)\n        if i == 0 or i == num_rows - 1:\n            nonagonal[i][0] = 1\n            nonagonal[i][num_cols - 1] = 1\n        else:\n            nonagonal[i][0] = 1\n            nonagonal[i][num_cols - 1] = 1\n            for j in range(1, num_cols - 1):\n                nonagonal[i][j] = nonagonal[i - 1][j] + nonagonal[i][j - 1]\n    \n    # Find the nth nonagonal number\n    if n <= num_rows:\n        return nonagonal[n - 1][0]\n    else:\n        return -1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the side length of a square\n    side = int(n ** 0.5) + 1\n    \n    # Find the sum of the squares of the side length\n    side_squares = side ** 2\n    \n    # Calculate the nth nonagonal number\n    nonagonal = (side * (side - 1) // 2) ** 2 - side_squares\n    \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return (2*n*n-1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = 0\n    for i in range(1, n+1):\n        nonagonal_number += i*i\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the sum variable\n    sum = 1\n    # loop through the range of numbers from 1 to n-1\n    for i in range(1, n):\n        # add the value of i to the sum variable\n        sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            num *= (2*i-1)\n        else:\n            num *= 2*i\n    return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    count = 0\n    \n    while count < n:\n        a += 1\n        b += 2\n        count += 1\n    \n    return a - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (n-1) * (n-1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #initialize a counter variable\n    count = 1\n    #initialize the sum variable to 0\n    sum_nonagonal = 0\n    #loop n times\n    for i in range(1, n+1):\n        #if the current number is odd, add it to the sum\n        if i % 2 == 1:\n            sum_nonagonal += i\n        #if the current number is even, add the sum to the sum\n        else:\n            sum_nonagonal += sum_nonagonal\n        #increment the counter\n        count += 1\n    #return the sum of the nth nonagonal number\n    return sum_nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(word_pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?<!^)z(?!\\w)\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regex to find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Iterate over each word and check if it contains 'z' except at the start and end of the word\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n\n    # If no words contain 'z' except at the start and end of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    word_list = re.findall(r'\\b[a-z]\\w*\\b', text)\n    for word in word_list:\n        if word.endswith('z') and not word.startswith('z'):\n            return True\n        elif word.startswith('z') and not word.endswith('z'):\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    regex = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(regex, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z_pattern = r'\\b[zZ]\\w+\\b'\n    matches = re.findall(z_pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(?<![\\w])[zZ](?![\\w])')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<!\\w)z(?!\\w)' # define a regex pattern to match 'z' except at the start and end of a word\n    matches = re.findall(pattern, text) # find all matches in the text using the pattern\n    \n    # check if the number of matches is even or odd\n    if len(matches) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define the regular expression pattern to match 'z' except at the start and end of the word\n    pattern = r'(?<![a-zA-Z])[zZ](?![a-zA-Z])'\n\n    # find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # if the pattern is found in the text, return True, otherwise return False\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(0, k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the array\n    input.reverse()\n    \n    # Reverse the array upto k-1 position\n    for i in range(k-1, len(input)):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    \n    # Print the reversed array\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function reverses an array upto a given position.\n    \"\"\"\n    # Initialize two pointers, one starting from the beginning and other starting from k.\n    left = 0\n    right = k - 1\n    # Swap the elements pointed by left and right pointers.\n    temp = input[left]\n    input[left] = input[right]\n    input[right] = temp\n    # Reverse the remaining elements of the array.\n    for i in range(k, len(input)):\n        temp = input[i]\n        input[i] = input[left]\n        input[left] = temp\n        left += 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # reverse the array upto the k-th element\n    left, right = 0, k - 1\n\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    # reverse the remaining elements\n    left, right = k, len(input) - 1\n\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input) \n    if k > n: \n        return \"Invalid Input: k is greater than the length of the array.\" \n    elif k == 1: \n        return input[::-1] \n    else: \n        for i in range(k-1, n): \n            input[i], input[i-1] = input[i-1], input[i] \n        return input[::-1] "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n\n    n = len(input) \n    arr = input[:k] + input[k:][::-1] + input[:k] \n\n    return arr \n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # check if the input array is empty or not\n    if not input:\n        return []\n    # check if the k is valid or not\n    if k >= len(input):\n        return input\n    # reverse the array up to the kth position\n    reverse_input = input[:k][::-1]\n    # reverse the remaining elements of the array\n    reverse_input.extend(input[k:])\n    return reverse_input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize two pointers, one at the beginning and the other at the end of the array\n    left = 0\n    right = len(input) - 1\n    \n    # Reverse the array upto the position specified by k\n    while left < right and left < k:\n        # Swap the elements at the left and right pointers\n        input[left], input[right] = input[right], input[left]\n        # Move the left and right pointers towards each other\n        left += 1\n        right -= 1\n    \n    # Reverse the array from the kth element to the end\n    while left < right:\n        # Swap the elements at the left and right pointers\n        input[left], input[right] = input[right], input[left]\n        # Move the left and right pointers towards each other\n        left += 1\n        right -= 1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the input is valid\n    if not isinstance(input, list):\n        print(\"Invalid input. Please provide a list.\")\n        return\n    \n    # Check if the k is valid\n    if k > len(input):\n        print(\"Invalid k. k should be less than or equal to the length of the input.\")\n        return\n    \n    # Initialize two pointers, one starting from the beginning of the list and the other starting from the kth position\n    i = 0\n    j = k - 1\n    \n    # Swap the elements at the two pointers until they meet in the middle of the list\n    while i < j:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n    \n    # Reverse the remaining elements in the list\n    for i in range(k, len(input)):\n        input[i], input[len(input) - 1 - i] = input[len(input) - 1 - i], input[i]\n    \n    # Print the reversed array\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # reverse the array from 0 to k-1\n    input = input[:k] + input[k:].reverse() + input[:k]\n    # reverse the array from k to n-1\n    input = input[:n//2] + input[n//2:n//2+k].reverse() + input[n//2+k:]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary and add the dictionary to the tuple\n    new_dict = test_dict.copy()\n    new_dict.update(test_tup)\n    # convert the dictionary to a tuple and return it\n    return tuple(new_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Loop through each key in the dictionary\n    for key in test_dict:\n        # Check if the key already exists in the tuple\n        if key in test_tup:\n            # If it does, add the value to the existing key\n            test_tup[key].append(test_dict[key])\n        else:\n            # If it doesn't, add a new key with the value\n            test_tup[key] = [test_dict[key]]\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a tuple and concatenate it with the tuple\n    return (test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    test_list = list(test_dict.items())\n    # Add the list of tuples to the tuple\n    test_tup += tuple(test_list)\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    new_dict = test_dict.copy()\n    new_tup = new_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    test_tup += (new_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Add a dictionary to a tuple.\n\n    Args:\n        test_tup (tuple): The tuple to which the dictionary will be added.\n        test_dict (dict): The dictionary to be added.\n\n    Returns:\n        tuple: The tuple with the dictionary added.\n    \"\"\"\n    # Copy the original tuple and add the new dictionary\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    total_cost = 0\n    total_cells = 0\n    max_avg = 0\n    current_avg = 0\n    current_path = [0, 0]\n\n    for i in range(n):\n        for j in range(n):\n            if j < n - 1:\n                current_path[1] = j + 1\n            else:\n                current_path[1] = 0\n            if i < n - 1:\n                current_path[0] = i + 1\n            else:\n                current_path[0] = 0\n            current_cells = current_path[1] + current_path[0] - current_path[1] * (current_path[0] + 1) // 2\n            total_cost += cost[current_path[0]][current_path[1]] * current_cells\n            total_cells += current_cells\n            current_avg = total_cost / total_cells\n            if current_avg > max_avg:\n                max_avg = current_avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the maximum value in the matrix\n    max_value = max(sum(row) for row in cost)\n\n    # Initialize variables for the maximum path and its average\n    max_path = []\n    max_avg = 0\n\n    # Iterate through each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n\n            # Calculate the cost of the current cell\n            current_cost = cost[i][j]\n\n            # Check if the current cell is part of the maximum path\n            is_max_path = True\n            for k in range(len(max_path)):\n                if (k == 0 and (i == 0 and j == 0)) or (max_path[k][0] == i - 1 and max_path[k][1] == j):\n                    is_max_path = False\n                    break\n                elif max_path[k][0] == i and max_path[k][1] == j:\n                    is_max_path = False\n                    break\n            if is_max_path:\n\n                # Calculate the cost of the current path\n                path_cost = 0\n                for k in range(len(max_path)):\n                    path_cost += current_cost - cost[max_path[k][0]][max_path[k][1]]\n\n                # Update the maximum path and its average if the current path is the best\n                new_avg = (path_cost + current_cost) / (len(max_path) + 1)\n                if new_avg > max_avg:\n                    max_path = max_path[:k] + [(i, j)] + max_path[k:]\n                    max_avg = new_avg\n\n    # Calculate the average of the maximum path\n    path_cost = 0\n    for i in range(len(max_path)):\n        path_cost += cost[max_path[i][0]][max_path[i][1]]\n    max_avg = (path_cost + max_value) / (len(max_path) + 1)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n\n    # Initialize first row and first column\n    for j in range(N):\n        dp[0][j] = cost[0][j]\n\n    # Initialize first column\n    for i in range(1, N):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n\n    # Fill in rest of matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Return maximum average in top-right cell\n    return dp[N-1][N-1]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def isSafe(i, j, n, m):\n        return 0 <= i < n and 0 <= j < m\n    \n    def dfs(i, j, n, m, visited, path_cost, max_avg):\n        if i == n-1 and j == m-1:\n            path_avg = path_cost / (i+1)\n            if path_avg > max_avg:\n                max_avg = path_avg\n            return 1\n        \n        visited[i][j] = True\n        \n        up = dfs(i+1, j, n, m, visited, path_cost+cost[i+1][j], max_avg)\n        down = dfs(i-1, j, n, m, visited, path_cost+cost[i-1][j], max_avg)\n        right = dfs(i, j+1, n, m, visited, path_cost+cost[i][j+1], max_avg)\n        left = dfs(i, j-1, n, m, visited, path_cost+cost[i][j-1], max_avg)\n        \n        visited[i][j] = False\n        \n        return up+down+right+left\n    \n    n, m = len(cost), len(cost[0])\n    visited = [[False] * m for _ in range(n)]\n    max_avg = 0\n    dfs(0, 0, n, m, visited, 0, max_avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    max_avg = 0\n    \n    for i in range(N):\n        # Traverse all possible paths starting from top-left\n        for j in range(N):\n            current_avg = 0\n            current_cost = 0\n            current_path = [[i, j]]\n            # Check all possible paths\n            while current_path[-1][0]!= N-1 or current_path[-1][1]!= N-1:\n                if current_path[-1][0] < N-1:\n                    if cost[current_path[-1][0]+1][current_path[-1][1]] < cost[current_path[-1][0]][current_path[-1][1]]:\n                        current_path.append([current_path[-1][0]+1, current_path[-1][1]])\n                    else:\n                        current_path.append([current_path[-1][0], current_path[-1][1]])\n                else:\n                    if cost[current_path[-1][0]][current_path[-1][1]+1] < cost[current_path[-1][0]][current_path[-1][1]]:\n                        current_path.append([current_path[-1][0], current_path[-1][1]+1])\n                    else:\n                        current_path.append([current_path[-1][0], current_path[-1][1]])\n                current_cost += cost[current_path[-1][0]][current_path[-1][1]]\n                current_avg += current_cost\n            # Update max average if needed\n            if current_avg > max_avg:\n                max_avg = current_avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N <= 1:\n        return 0\n    \n    # Initialize variables to keep track of the maximum average and the paths with the maximum average\n    max_avg = 0\n    max_path = []\n    \n    # Loop through all possible starting cells and check if they can be the end of a path\n    for i in range(N):\n        for j in range(N):\n            # Check if the cell can be the end of a path\n            if i+1 < N and j+1 < N and cost[i][j] < cost[i+1][j] and cost[i][j] < cost[i][j+1]:\n                # Calculate the total cost of the path\n                path_cost = cost[i][j] + cost[i][j+1] + cost[i+1][j+1] + cost[i+1][j]\n                # Calculate the average of the path\n                path_avg = path_cost / 4\n                # Update the maximum average and the path with the maximum average\n                if path_avg > max_avg:\n                    max_avg = path_avg\n                    max_path = [[i,j],[i+1,j],[i+1,j+1],[i,j+1]]\n    \n    # Return the maximum average of all existing paths\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n    start = 0\n    end = N*N-1\n    queue = [(start, [start])]\n    while queue:\n        node = queue.pop(0)\n        if node[0] == end:\n            path_cost = 0\n            for i in range(len(node[1])):\n                path_cost += cost[node[1][i]/N][node[1][i]%N]\n            path_avg = path_cost/len(node[1])\n            if path_avg > max_avg:\n                max_avg = path_avg\n            visited[node[0]/N][node[0]%N] = True\n            continue\n        if node[0] < end and not visited[node[0]/N][node[0]%N]:\n            visited[node[0]/N][node[0]%N] = True\n            queue.append((node[0]+1, node[1]+[node[0]+1]))\n        if node[0] >= N and not visited[node[0]/N][node[0]%N]:\n            visited[node[0]/N][node[0]%N] = True\n            queue.append((node[0]-N, node[1]+[node[0]-N]))\n        if node[1] < N and not visited[node[0]/N][node[1]]:\n            visited[node[0]/N][node[1]] = True\n            queue.append((node[0], node[1]+[node[1]]))\n        if node[1] >= N and not visited[node[0]/N][node[1]]:\n            visited[node[0]/N][node[1]] = True\n            queue.append((node[0], node[1]-N))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    \n    def max_average(i, j):\n        # Base case: if current cell is the bottom right cell\n        if i == N-1 and j == N-1:\n            return cost[i][j]\n        \n        # Recursive case: if current cell is not the bottom right cell\n        cost_right = cost[i][j+1] + max_average(i, j+1)\n        cost_down = cost[i+1][j] + max_average(i+1, j)\n        \n        # Return maximum average\n        return max(cost_right, cost_down)\n    \n    return max_average(0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    # Initialize diagonal elements\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n    \n    # Fill remaining elements using dynamic programming\n    for i in range(N-1):\n        for j in range(i+1, N):\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + cost[i][j]\n    \n    # Find maximum average\n    max_avg = 0\n    for i in range(N):\n        max_avg = max(max_avg, dp[0][i])\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i][j-1])\n            elif j == 0:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i-1][j])\n            else:\n                dp[i][j] = max(dp[i][j], cost[i][j] + min(dp[i][j-1], dp[i-1][j]))\n    \n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    \n    # loop through each student in the input dictionary\n    for name, data in students.items():\n        # unpack the data tuple\n        height, weight = data\n        \n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered list\n            filtered_students.append(name)\n    \n    # return the filtered list of students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    \n    for name, student in students.items():\n        if student[0] > h and student[1] > w:\n            filtered_students[name] = student\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    # Filter the students based on their height and weight\n    filtered_students = {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        total += int(str(base)[i])\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        power //= 10\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum of digits to 0\n    digit_sum = 0\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum of digits\n        digit_sum += int(digit)\n    # Return the sum of digits raised to the specified power\n    return int(digit_sum ** power)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through each digit of the base\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Calculate the digit raised to the specified power\n        digit_power = digit_int ** power\n\n        # Add the digit raised to the specified power to the sum\n        sum += digit_power\n\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    # Convert the base to a string and convert each digit to an integer\n    base_str = str(base)\n    base_digits = [int(d) for d in base_str]\n\n    # Calculate the sum of digits raised to the power\n    result = 0\n    for digit in base_digits:\n        result += digit ** power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        base_sum += base % 10\n        power -= 1\n        base //= 10\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Calculate the sum of the digits to the power\n    total = sum([int(digit)**power for digit in base_str])\n    \n    # Return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_digits = [int(d) for d in str(base)]\n    sum_of_digits = 0\n    for d in base_digits:\n        sum_of_digits += d ** power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string to handle negative numbers\n    base_str = str(base)\n    # convert power to integer to handle negative numbers\n    power = int(power)\n    # initialize sum to 0\n    total = 0\n    # iterate through each digit of base\n    for digit in base_str:\n        # calculate power of digit\n        digit_power = power ** int(digit)\n        # add digit to sum\n        total += digit_power\n    # return sum\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n\n    Args:\n    text1 (str): The given string.\n\n    Returns:\n    str: A string containing all the values between quotation marks \" \" of the input string.\n    '''\n    # Using regular expression to match all the values between quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # Joining all the matched values into a single string\n    output =''.join(matches)\n\n    return output"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of strings containing the values between quotation marks.\n    '''\n    pattern = r'(?<=\\s|\"|\\')[^\\s\"']*?(?=\\s|\"|\\')'\n    result = re.findall(pattern, text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to match the quotation marks and any text between them\n    pattern = r'\"([^\"]*)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return \"\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Use regular expressions to extract all values between quotation marks\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n\n    # Print the extracted values\n    for match in matches:\n        print(match)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Get the length of the input tuple\n    N = len(test_tup)\n    # Create an empty tuple of length N\n    result_tup = (0,)*N\n    # Iterate through the input tuple and multiply each element by the next element in the tuple\n    for i in range(N):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = (test_tup[0] * test_tup[2], test_tup[1] * test_tup[3])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # calculate the length of the input tuple\n    N = len(test_tup)\n    \n    # initialize the output tuple with zeros\n    result_tup = [0] * N\n    \n    # loop through the input tuple\n    for i in range(N):\n        # multiply the i-th element of the input tuple with the (i+1)-th element\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    \n    # return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_length = len(test_tup) - 1\n    result = []\n    for i in range(t_length):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty tuple to store the result\n    result_tup = ()\n    \n    # Loop through the tuple and multiply each element with the next element in the tuple\n    for i in range(len(test_tup)):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    # Return the tuple of results\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2  # Find the number of elements in the tuple\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+N])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their sum.\n    \"\"\"\n    # Using list comprehension to add the two lists\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # check if the two lists have the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists must have the same length.\")\n    # create an empty list to store the sum of elements\n    result = []\n    # iterate over the elements of both lists\n    for i in range(len(lst1)):\n        # add the elements and store the result in the result list\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list by the value\n    grouped = groupby(nums)\n\n    # initialize an empty list to store non-consecutive duplicates\n    non_consecutive_duplicates = []\n\n    # iterate over the groups\n    for key, group in grouped:\n        # if the group is not consecutive, append it to the non_consecutive_duplicates list\n        if len(list(group)) > 1:\n            non_consecutive_duplicates.append(group)\n\n    # remove duplicates from the non_consecutive_duplicates list\n    non_consecutive_duplicates = list(set(non_consecutive_duplicates))\n\n    # return the non_consecutive_duplicates list\n    return non_consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def consecutive_duplicates(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list of integers.\n    '''\n    return list(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Use groupby to group the list by their consecutive duplicates\n    grouped_nums = groupby(enumerate(nums), lambda x: x[1] == x[0] + 1)\n\n    # Convert the grouped results into a list of consecutive duplicates\n    consecutive_duplicates = [num for (key, group) in grouped_nums if key]\n\n    # Return the list of consecutive duplicates\n    return consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = []\n    for key, group in groupby(sorted(nums)):\n        if key + 1 == key:\n            continue  # skip consecutive duplicates\n        result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key:\n            for item in group:\n                if nums.index(item) == len(nums)-1:\n                    yield item"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # loop through the list and group by the values\n    result = [list(group) for key, group in groupby(enumerate(nums))]\n\n    # remove any groups with only one element\n    result = [group for group in result if len(group) > 1]\n\n    # remove any groups with two elements in a row\n    result = [group for group in result if len(group) == 2 or group[0]!= group[1]]\n\n    # convert the groups back to lists\n    result = [list(group) for group in result]\n\n    # combine the groups with consecutive duplicates\n    result = [group for group in result if len(group) > 2]\n\n    # remove any groups with three or more elements in a row\n    result = [group for group in result if len(group) == 3 or group[0]!= group[1]]\n\n    # return the final result\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    #Calculate the lateral surface area\n    lateral_area = math.pi*r**2*h/3\n    \n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    \n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n        \n    Returns:\n        float: The lateral surface area of the cone.\n    '''\n    # Formula to calculate the lateral surface area of a cone\n    lateral_surface_area = (1/3)*r*r*math.tan(math.pi/3)*h\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r**2\n    B = h * math.tan(math.pi/6)\n    lateral_surface_area = A - B\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    lateral_surface_area = math.pi * (r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given the radius r and height h.\n\n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * (r**2) + math.pi * (r**2 * h)\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculating the base area\n    base_area = math.pi * (r**2)\n    # Calculating the height factor\n    height_factor = math.sin(math.acos(r/h))\n    # Calculating the lateral surface area\n    lateral_surface_area = base_area * height_factor\n    # Returning the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (2*r*h)/3\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    '''\n\n    # Calculate the lateral surface area using the formula:\n    # Lateral surface area = 1/2 * r^2 * h\n    # or\n    # Lateral surface area = 1/2 * r * h\n    lateral_surface_area = 0.5 * r * h\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]','',text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_specialchar(text):\n    # define the regular expression pattern for spaces, commas, and dots\n    pattern = r'([,.])'\n\n    # find all occurrences of special characters in the text using the regular expression pattern\n    special_chars = re.findall(pattern, text)\n\n    # replace the special characters with colons\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s|,|\\.+','', text) # remove spaces, commas, and dots\n    text = text.replace(\" \",\":\") # replace spaces with colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)  # remove special characters except words and spaces\n    text = re.sub(r'\\s+','', text)  # replace multiple spaces with one space\n    text = text.replace(',', ':').replace('.', ':')  # replace commas and dots with colons\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    pattern = re.compile(r'[\\s,\\.]+')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = [',', '.','']\n    for char in special_chars:\n        text = re.sub(char, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^A-Za-z0-9]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern\n    pattern = r'[\\s,\\.]+'\n    # Replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # Remove all special characters except words and spaces\n    text = text.replace(' ', ':') # Replace spaces with colons\n    text = text.replace(',', ':') # Replace commas with colons\n    text = text.replace('.', ':') # Replace dots with colons\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # check if it is the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if right == len(A) - 1 and A[right] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    :param A: A sorted array of integers.\n    :param x: The number to search for in the array.\n    :return: The index of the first occurrence of x in A, or -1 if x is not found in A.\n    \"\"\"\n\n    # Initialize variables\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    # Find the first occurrence of x in the array\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # Return the index of the first occurrence of x in the array\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): sorted list of numbers\n        x (int): number to find\n\n    Returns:\n        int: index of the first occurrence of x in A or -1 if x is not in A\n    \"\"\"\n\n    # Initialize index to -1 to indicate not found\n    first_occurrence = -1\n\n    # Iterate over the array and search for the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence = i\n            break\n\n    return first_occurrence"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + arr[i-1]*(arr[i-1]*i)\n\n    total = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            total += dp[j] - dp[i-1]\n    return total"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(n-1):\n        dp[i+1] = arr[i+1] + dp[i]\n\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            ans += prod * dp[j]\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Get the length of the array\n    n = len(arr)\n    \n    # Initialize the sum of products to zero\n    sum_prod = 0\n    \n    # Initialize a list to store the running product of the subarray\n    running_product = [1] * n\n    \n    # Calculate the running product of the array using a sliding window approach\n    for i in range(n):\n        running_product[i] *= arr[i]\n        \n    # Calculate the sum of products of all possible sublists of the array\n    for i in range(n):\n        for j in range(i, n):\n            sum_prod += running_product[j] * running_product[j]\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Create a 2D table to store the sum of products of all sublists\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    # Fill the first column of the table\n    for i in range(n + 1):\n        dp[i][0] = arr[i - 1] * i\n    # Fill the rest of the table\n    for j in range(1, n + 1):\n        for i in range(j):\n            dp[i][j] = (dp[i][j - 1] + arr[i - 1]) * (j - i)\n    # Return the sum of products of all sublists\n    return dp[0][n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Base case: empty or single element array\n    if len(arr) == 0 or len(arr) == 1:\n        return 0\n    \n    # Initialize variables\n    sum_prod = 0\n    prod = 1\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Update the product\n        prod *= arr[i]\n        \n        # If the product is negative, it means we have gone backwards in the array\n        # So, reset the product to 1 and add the previous product to the sum_prod\n        if prod < 0:\n            prod = 1\n            sum_prod += prod\n    \n    # Return the sum of products\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # To store sum of products of subarrays\n    product_sum = 0\n    # To store sum of products of sublists\n    sublist_product = 1\n    # To store the products of subarrays\n    subarray_product = []\n    # To store the products of sublists\n    sublist_product = [1] * n\n\n    # To iterate over all possible sublists of the array\n    for i in range(n):\n        # To find the end index of the current sublist\n        j = i + 1\n        while j < n:\n            # To find the sum of products of the current subarray\n            current_product = arr[i] * arr[j]\n            # To update the sum of products of subarrays\n            product_sum += current_product\n            # To update the sum of products of sublists\n            sublist_product[j] *= current_product\n            # To update the subarray and sublist products\n            subarray_product.append(current_product)\n            sublist_product = [sublist_product[i] * sublist_product[j] for i in range(n) for j in range(i, n + 1)]\n            # To increment j and check if j has exceeded the length of the array\n            j += 1\n\n    return product_sum, sublist_product, subarray_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n\n    # Initialize the first sublist\n    dp[1] = arr[0]\n\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] * arr[i - 1], dp[i - 2] * arr[i - 2])\n\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = [1]*n\n    prefix_prod = [1]*n\n\n    # Calculate product of all subarrays from index 0 to i\n    for i in range(n):\n        prod[i] = arr[i]*prod[i]\n\n    # Calculate prefix product of all subarrays from index 0 to i\n    for i in range(n):\n        prefix_prod[i] = prefix_prod[i-1]*arr[i]\n\n    # Calculate sum of products of all subarrays from index 0 to i\n    sum_prod = 0\n    for i in range(n):\n        sum_prod += prod[i]*prefix_prod[i]\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    def sublist_product(sublist):\n        sublist = [arr[i] for i in sublist]\n        return 1 if not sublist else sublist[0] * sublist_product(sublist[1:])\n\n    sublist_products = [sublist_product(i) for i in range(len(arr)+1)]\n    return sum(sublist_products[1:])"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_arr = [0] * (n+1)\n    sum_arr[0] = 0\n    for i in range(n):\n        sum_arr[i+1] = sum_arr[i] + arr[i]\n    prod_arr = [0] * (n+1)\n    prod_arr[0] = 1\n    for i in range(1, n+1):\n        prod_arr[i] = prod_arr[i-1] * arr[i-1]\n    result = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            result += prod_arr[i] * prod_arr[j] * sum_arr[i] * sum_arr[j]\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the mask with 0b1111...1111\n    mask = 0b11111111\n\n    # shift the mask to the left by the number of bits to toggle\n    mask <<= n\n\n    # shift the original number to the right by the same number of bits to toggle\n    n >>= n\n\n    # toggle the bits of the number except the first and the last\n    n ^= mask\n\n    # shift the number back to its original position\n    n <<= n\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the last two bits of the number\n    last_two_bits = n & 0x3\n    # Get the first and last bits of the number\n    first_bit = n >> 1 & 0x1\n    last_bit = n >> 31 & 0x1\n    # Toggle the first and last bits of the number\n    toggled_number = n ^ (last_two_bits << 1)\n    # Set the first and last bits of the number\n    if first_bit == 0:\n        toggled_number = toggled_number | (last_bit << 31)\n    else:\n        toggled_number = toggled_number ^ (last_bit << 31)\n    return toggled_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # First, we will create a mask for the first and last bits\n    mask = (1 << 1) - 1\n    # Next, we will create a mask for the middle bits\n    middle_mask = (1 << (n.bit_length() - 2)) - 1\n    # Finally, we will toggle the middle bits\n    n = n ^ middle_mask\n    # We will then toggle the first and last bits\n    n = n ^ (mask | mask)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # Initialize two variables to store the middle bits and the rest of the number\n    middle_bits = 0\n    rest_bits = n\n    \n    # Iterate over the number of times required to toggle the middle bits\n    for i in range(1, 2):\n        middle_bits ^= 1 << i\n        \n    # Update the rest of the number with the middle bits toggled\n    rest_bits &= ~(middle_bits ^ rest_bits)\n    \n    # Return the updated number\n    return rest_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit = n & 1  # To get the first bit\n    last_bit = n & (1 << (n.bit_length() - 1))  # To get the last bit\n    result = first_bit ^ last_bit  # To toggle bits except first and last bit\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 0\n    \n    last_bit = n & 1\n    n = n >> 1\n    \n    if n == 0:\n        return 0\n    \n    n = n ^ (last_bit << 1)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the first and last bit as 0\n    n &= 0xFFFFFFFE\n\n    # Shift all the other bits to the left by one position\n    n = (n << 1) & 0xFFFFFFFF\n\n    # Set the first and last bit as 1\n    n |= 0x00000001\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the first and the last bit as 1 and 0 respectively\n    n |= 0b100000000000000000000000000000000000000000000000000000000000 # 1 in the first position, 0 in the last position\n    n &= 0b01111111111111111111111111111111111111111111111111111111111111 # 0 in the first position, 1 in the last position\n    \n    # Reverse the first and last bit\n    n = ((n & 0b1111111111111111111111111111111111111111111111111111111111111) << 1) | ((n & 0b0000000000000000000000000000000000000000000000000000000000001) >> 1)\n    \n    # Set the middle bits to 0\n    n &= 0b1111111111111111111111111111111111111111111111111111111111111111 # 0 in all middle positions\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    return first_bit + last_bit + (n & ~(1 << first_bit) & ~(1 << last_bit))"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the result variable\n    result = 0\n    # Extract the last two bits from the number\n    last_two_bits = n & 3\n    \n    # Toggle the middle two bits (excluding the last two bits)\n    middle_two_bits = (last_two_bits + 1) % 4\n    result = result | (middle_two_bits << 2)\n    \n    # Extract the first bit from the number\n    first_bit = n & 1\n    \n    # Toggle the first bit (excluding the last two bits)\n    result = result | (first_bit << 4)\n    \n    # Extract the last bit from the number\n    last_bit = n >> 31\n    \n    # Toggle the last bit (excluding the last two bits)\n    result = result | (last_bit << 6)\n    \n    # Combine the last two bits with the toggled middle bits\n    return (result << 2) | last_two_bits"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    # Using bisect function to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if a[index] == x:\n        return index\n    if a[index] < x:\n        return bisect.bisect_left(a[index:], x)\n    else:\n        return bisect.bisect_right(a[:index], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list 'a' and a value 'x' as input and returns the left insertion point for 'x'.\n\n    :param a: The sorted list.\n    :type a: list\n\n    :param x: The value to be inserted.\n    :type x: int\n\n    :return: The left insertion point for 'x'.\n    :rtype: int\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif x < a[index]:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Define the left and right indices\n    left = 0\n    right = len(a) - 1\n\n    # Find the position where the value should be inserted\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the mid value is less than the target, search on the right side of the array\n        if a[mid] < x:\n            left = mid + 1\n        # If the mid value is greater than the target, search on the left side of the array\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    left = bisect.bisect_left(a, x)\n    if left!= len(a) and a[left] == x:\n        return left\n    else:\n        return left - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    \n    if pattern.match(string):\n        print(\"The given string starts with a vowel.\")\n    else:\n        print(\"The given string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_str(string):\n    print(\"The string starts with a vowel.\")\nelse:\n    print(\"The string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return geometric_sum(n-1) + (1/n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base case: n=1 has a geometric sum of 1\n    if n == 1:\n        return 1\n    \n    # Recursive case: n>1 has a geometric sum of (1/n) * (n-1) + n * geometric_sum(n-1)\n    else:\n        return (1/n) * (n-1) + n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n\nprint(geometric_sum(5))  # Output: 15"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Initialize the first n terms of the sequence with 0, 1, 2,...\n    seq = [0] * n\n    seq[0] = 0\n    seq[1] = 1\n    seq[2] = 2\n    \n    # Loop through the rest of the sequence\n    for i in range(3, n):\n        # Calculate the next term of the sequence as the sum of the previous two terms\n        seq[i] = seq[i-1] + seq[i-2]\n        \n    # Find the smallest triangular number with n digits\n    min_tri = seq[0]\n    min_index = 0\n    \n    # Loop through the rest of the sequence and compare each with the current smallest triangular number\n    for i in range(3, n):\n        if seq[i] < min_tri:\n            min_tri = seq[i]\n            min_index = i\n            \n    # Return the index of the smallest triangular number with n digits\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize two variables to store the smallest and the largest triangular numbers\n    smallest = 0\n    largest = 5 * n * (n + 1) // 2\n\n    # Iterate through the range of smallest and largest triangular numbers\n    while True:\n        # Calculate the next triangular number\n        next_triangular = smallest + largest\n\n        # Check if the current triangular number is smaller than the current smallest number\n        if next_triangular < smallest:\n            return smallest\n\n        # Update the smallest number to the current triangular number\n        smallest = next_triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Initialize variables\n    triangular_num = 0\n    count = 0\n\n    # Loop until the triangular number has n digits\n    while len(str(triangular_num)) < n:\n        # Calculate the next triangular number\n        triangular_num = triangular_num * 10 + count\n        count += 1\n\n    # Return the index of the smallest triangular number\n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def is_valid_triangular_number(n):\n        \"\"\"\n        Check if a given number is a triangular number or not\n        \"\"\"\n        triangular_sum = 0\n        for i in range(n):\n            triangular_sum += i * (i + 1) // 2\n        return triangular_sum == n\n\n    def is_valid_triangular_index(n):\n        \"\"\"\n        Check if the index of a triangular number is a valid triangular index or not\n        \"\"\"\n        triangular_sum = 0\n        for i in range(n):\n            triangular_sum += i * (i + 1) // 2\n        return triangular_sum > n\n\n    def get_min_triangular_number(n):\n        \"\"\"\n        Find the smallest triangular number with n digits\n        \"\"\"\n        for i in range(1, 10 ** n + 1):\n            if is_valid_triangular_number(i):\n                return i\n        return None\n\n    if not is_valid_triangular_index(n):\n        print(\"Invalid input. n should be a triangular index.\")\n        return None\n\n    min_triangular_number = get_min_triangular_number(n)\n    if min_triangular_number is None:\n        print(\"No triangular number with n digits.\")\n        return None\n\n    index = math.ceil(math.log10(min_triangular_number))\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the index to 0\n    index = 0\n    \n    # Loop until the index is less than the number of digits in the smallest triangular number\n    while index < n: \n        # Calculate the smallest triangular number with n digits\n        num = math.comb(10**(n-1), index)\n        \n        # Check if the smallest triangular number has n digits\n        if int(str(num)[-n:]) == n:\n            # If the smallest triangular number has n digits, return the index\n            return index\n        \n        # Increment the index by 1\n        index += 1\n    \n    # If the loop completes without finding the smallest triangular number with n digits, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number and its index to infinity\n    min_triangular = float('inf')\n    min_index = 0\n    \n    # Loop through the possible indices\n    for i in range(1, 10**n+1):\n        triangular = (i*(i+1))//2\n        if triangular < min_triangular:\n            min_triangular = triangular\n            min_index = i\n    \n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    triangular_numbers.append(1)\n    for i in range(1, n+1):\n        triangular_numbers.append(math.factorial(i) * 3**(n-i))\n    return min(range(1, len(triangular_numbers)), key=lambda i: triangular_numbers[i])"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of smallest triangular number with n digits.\n    \"\"\"\n\n    # Calculate the sum of digits of n using recursion\n    def sum_of_digits(n, count=0):\n        if n == 0:\n            return count\n        return sum_of_digits(n//10, count+1)\n\n    # Calculate the index of smallest triangular number with n digits using math.comb() function\n    def smallest_triangular_index(n):\n        return math.comb(10**(n-1), n-1)\n\n    # Calculate the total number of digits of n using recursion\n    def total_digits(n):\n        return total_digits(n//10) + 1\n\n    # Calculate the total number of triangular numbers with n digits\n    def total_triangular_numbers(n):\n        return smallest_triangular_index(n) * (10**(n-1))\n\n    # Calculate the total number of indices with n digits\n    def total_indices(n):\n        return total_triangular_numbers(n) * (n-1)\n\n    # Calculate the sum of digits of the smallest triangular number with n digits\n    def sum_of_smallest_digits(n):\n        return sum_of_digits(sum_of_smallest_number(n))\n\n    # Calculate the sum of digits of the smallest triangular number with n digits using recursion\n    def sum_of_smallest_number(n):\n        if n == 0:\n            return 0\n        return sum_of_smallest_number(n//10) + n%10\n\n    # Calculate the smallest triangular number with n digits\n    def smallest_triangular_number(n):\n        return sum_of_smallest_number(smallest_triangular_index(n))\n\n    # Calculate the total number of smallest triangular numbers with n digits\n    def total_smallest_triangular_numbers(n):\n        return total_indices(n) * (smallest_triangular_number(n)-1)\n\n    # Calculate the index of the smallest triangular number with n digits\n    def smallest_triangular_index(n):\n        return total_smallest_triangular_numbers(n) + sum_of_smallest_digits(n)\n\n    # Calculate the index of smallest triangular number with n digits\n    return smallest_triangular_index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Function to calculate triangular number with n digits\n    def triangular_num(n): \n        return int(''.join([str(math.factorial(i)) for i in range(1, n+1)])) \n\n    # Initialize variables\n    result = 0\n    num = triangular_num(n) \n\n    # Iterate over all triangular numbers with n digits\n    for i in range(1, num): \n        if num-i > 0: # Check if the triangular number has n digits\n            triangular_num_n = triangular_num(n-1)\n            if num-i == triangular_num_n: # If the triangular number has n digits\n                result += 1 # Increment the result by 1\n\n    return result\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    num = 0\n    while True:\n        num += 1\n        digit = len(str(num))\n        if digit == n:\n            return num"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)):\n        key = i\n        value = test_tup[i]\n        test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 1:\n        return None\n    else:\n        dict_obj = {}\n        for i in range(0, len(test_tup), 2):\n            dict_obj[test_tup[i]] = test_tup[i+1]\n        return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    This function takes a tuple and returns a dictionary with the elements as keys and adjacent elements as values.\n    \"\"\"\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"Input tuple must have an even length\")\n\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The tuple must have an even number of elements.\")\n\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # loop through the tuple and add adjacent elements to the dictionary\n    for i in range(0, len(test_tup)-1):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create an empty dictionary\n    my_dict = {}\n    # loop through the tuple elements\n    for i in range(len(test_tup)-1):\n        # add the current key-value pair to the dictionary\n        my_dict[i] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # taking the first character of the string\n    first_char = s[0]\n    \n    # iterating through the string and checking if all characters are same or not\n    for char in s:\n        if char!= first_char:\n            return False\n    \n    # if all characters are same, then return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    # take the first character of the string as a variable\n    first_char = s[0]\n    # loop through all the characters of the string\n    for char in s:\n        # if the current character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n    # if all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in the string are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # first, convert all the characters in the string to lowercase\n    s = s.lower()\n    # second, compare the first two characters of the string\n    if s[0] == s[1]:\n        # if they are same, check the rest of the string\n        for i in range(2, len(s)):\n            if s[i]!= s[0]:\n                # if there is any other character, return False\n                return False\n        # if all the characters are same, return True\n        return True\n    else:\n        # if the first two characters are not same, return False\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0]!= s[1]:\n            return False\n        else:\n            return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and checks whether all the characters in the string are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to a list of characters\n    char_list = list(s)\n    # check if all the characters are the same\n    if len(set(char_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side**2 * math.sqrt(2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.16666666666666666 * side * (side - 1) * (side - 2) * (side - 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) ** (1/2)\n    return (1/6) * s * (s + side)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 6\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron given its side length.\n    '''\n    # Calculate the semi-perimeter\n    s = (side * (side + math.sqrt(3))) / 4\n    # Calculate the area\n    area = (1 / 6) * s * (s - side) * (s - 2 * side) * (s - 3 * side)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.25\n    area = (1/6) * s * side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2\n    \n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    # Formula for Heron's formula to calculate the area of a tetrahedron\n    s = (side**2 + side**2 + side**2 + side**2) / 12\n    \n    # Calculate the semi-perimeter and use math.sqrt() function to calculate the area\n    a = math.sqrt(s)\n    \n    return a"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2\n\nprint(area_tetrahedron(3))  # Output: 12.0\nprint(area_tetrahedron(4))  # Output: 20.0"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/3 * side * side * side\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # get the length of the list\n    n = len(list)\n    \n    # if the list is empty or the number of items to rotate is zero, return the original list\n    if n == 0 or m == 0:\n        return list\n    \n    # calculate the number of times to rotate the list\n    k = n - m\n    \n    # initialize the new list with the last m items of the original list\n    new_list = list[-m:]\n    \n    # shift the last m items of the original list to the beginning of the list\n    for i in range(n-m):\n        list[i] = list[i+m]\n    \n    # set the first k items of the original list to the last k items of the new list\n    for i in range(k):\n        list[i] = new_list[i]\n        \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # if the rotation count is greater than the length of the list, do not rotate the list\n    if m > n:\n        return list\n    # rotate the list by m items using the circular shift method\n    for i in range(m):\n        # move the first element to the last position\n        list.append(list.pop(0))\n    # reverse the first m elements of the list\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n\n    list = list[n - m:] + list[:n - m]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list by specified number of items to the right direction.\n    \"\"\"\n    # Create a copy of the list to avoid modifying the original list\n    lst_copy = lst.copy()\n\n    # Calculate the length of the list\n    length = len(lst)\n\n    # Calculate the number of rotations needed\n    rotations = n % length\n\n    # If the number of rotations is zero, return the original list\n    if rotations == 0:\n        return lst\n\n    # Reverse the first n elements of the list\n    lst_copy[:n] = lst_copy[:n][::-1]\n\n    # Reverse the last n-rotations elements of the original list\n    lst_copy[n:] = lst_copy[n:][::-1]\n\n    # Combine the two lists\n    result = lst_copy + lst[:n]\n\n    return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[-m:] = list[:-m]\n    list[:m] = [list[-1]] * m\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    \n    # Reverse the list from start to mid\n    list[:m] = list[:m][::-1]\n    \n    # Reverse the list from mid+1 to end\n    list[m:] = list[m:][::-1]\n    \n    # Reverse the entire list\n    list[:] = list[::-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and an integer m as input and rotates the list to the right by m items.\n    It modifies the original list and returns nothing.\n    \"\"\"\n    n = len(list)\n    m %= n\n    list[0:m], list[m:n] = list[m:n], list[0:m]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(test_tup) is None"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # Find all the digits of the numbers within the given range\n    digits = [int(d) for d in str(startnum) + str(endnum)]\n\n    # Define a lambda function that takes a number as input and returns True if it is divisible by every digit in the list\n    is_divisible = lambda x: all(d in str(x) for d in digits)\n\n    # Use the lambda function to filter out the numbers within the given range that are not divisible by every digit\n    result = filter(is_divisible, range(startnum, endnum + 1))\n\n    return list(result)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return lambda x: all(d in str(x) for d in str(startnum)) and all(d in str(x) for d in str(endnum))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Define a lambda function to check if a number is divisible by a digit\n    check_divisible = lambda x: all(int(d) in str(x) for d in str(x))\n    \n    # Iterate through the range of numbers and check if they are divisible by every digit using the check_divisible lambda function\n    for i in range(startnum, endnum+1):\n        if check_divisible(i):\n            print(i)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(num):\n        return all(int(digit) % 2 == 0 for digit in str(num))\n\n    return list(filter(is_divisible, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(num):\n        def get_digits(num):\n            return [int(d) for d in str(num)]\n        \n        return all(digit in get_digits(num) for digit in '1234567890')\n    \n    return list(filter(is_divisible_by_digit, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return list(filter(lambda x: all(map(lambda y: x%y == 0, range(10))), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda num: all(num % digit == 0 for digit in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: (x % 10 == 0) * (x // 10 == 0) * (x % 100 == 0) * (x // 100 == 0)\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r**2 * a / 360\n    \n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * r * r * math.sin(math.radians(a))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        area = r*r*math.pi*a/360\n        return area\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    a = math.radians(a)\n    \n    # calculate area\n    area = r * r * math.sin(a)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area\n\nradius = float(input(\"Enter the radius: \"))\nangle = float(input(\"Enter the angle in degrees: \"))\n\narea = sector_area(radius,angle)\n\nif area is not None:\n    print(\"The area of the sector is:\", area)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # check if the angle is valid\n    if a > 360:\n        return None\n    \n    # calculate the area of the sector using the formula A = pi r^2 cos(angle)\n    area = math.pi * r**2 * math.cos(math.radians(a))\n    \n    # return the calculated area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r * r * math.pi * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # create a table to store lengths of subsequences\n    L = [[0] * (p+1) for i in range(m+1)]\n    \n    # fill the table from the bottom up\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # create a path to reconstruct the subsequence\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n    while i!= 0 and j!= 0 and k!= 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i-1][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs[::-1] # reverse the order of the subsequence"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n    # table to store lengths of LCS of substring\n    LCS = [[0] * (p+1) for i in range(m+1)]\n    # calculating lengths of LCS using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n    # reconstructing the LCS\n    LCS_str = \"\"\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            LCS_str += X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] == LCS[i][j-1][k]:\n            i -= 1\n        elif LCS[i][j-1][k] == LCS[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return LCS_str[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # creating a table to store the length of the longest common subsequence\n    # for substrings of X, Y and Z\n    T = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # filling the table in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    T[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    T[i][j][k] = T[i - 1][j - 1][k - 1] + 1\n                else:\n                    T[i][j][k] = max(T[i - 1][j][k], T[i][j - 1][k], T[i - 1][j - 1][k - 1])\n\n    # backtracking to find the LCS\n    i = m\n    j = n\n    k = o\n    lcs = []\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif T[i - 1][j][k] == T[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize the length of the longest common subsequence \n    n = len(X) \n    m = len(Y) \n    k = len(Z) \n\n    # Create a 2D array to store the length of longest common subsequence for \n    # all possible substrings of X, Y and Z \n    table = [[0 for j in range(k+1)] for i in range(n+1)] \n\n    # Fill the table in bottom up manner \n    for i in range(n+1): \n        for j in range(m+1): \n            for l in range(k+1): \n                if i == 0 or j == 0 or l == 0: \n                    table[i][j][l] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[l-1]: \n                    table[i][j][l] = table[i-1][j-1][l-1] + 1 \n                else: \n                    table[i][j][l] = max(table[i-1][j][l], table[i][j-1][l], table[i][j][l-1]) \n\n    # Initialize the length of the longest common subsequence \n    L = table[n][m][k] \n\n    # Initialize the indices of the longest common subsequence \n    i = n \n    j = m \n    l = k \n\n    # Print the longest common subsequence \n    result = [] \n    while i > 0 and j > 0 and l > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[l-1]: \n            result.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            l -= 1 \n        elif table[i-1][j][l] == table[i][j][l]: \n            i -= 1 \n        elif table[i][j-1][l] == table[i][j][l]: \n            j -= 1 \n        else: \n            l -= 1 \n\n    result.reverse() \n\n    return L, result\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Create a 3D table to store the lengths of LCS\n    table = [[0 for j in range(len(Y) + 1)] for i in range(len(X) + 1)]\n    \n    # Fill the table in bottom-up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    # Extract the LCS from the table\n    i = len(X)\n    j = len(Y)\n    LCS = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return ''.join(reversed(LCS))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Create a 2D table to store the lengths of LCS for every combination of three strings\n    # Initialize the table with zeros\n    table = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)]\n\n    # Step 2: Fill the table using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j] = table[i-1][j-1] + 1\n                else:\n                    table[i][j] = max(table[i-1][j], table[i][j-1], table[i-1][j-1])\n\n    # Step 3: Backtrack to find the actual LCS\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Step 1: Convert the input strings into lists of characters\n    X = list(X)\n    Y = list(Y)\n    Z = list(Z)\n    \n    # Step 2: Calculate the lengths of the three sequences\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Step 3: Create a 2D table to store the lengths of the LCS for each substring of X, Y and Z\n    table = [[0]*(p+1) for i in range(m+1)]\n    \n    # Step 4: Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    # Step 5: Trace the LCS back using the table\n    i = m\n    j = p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Find the longest common subsequence of the three input strings X, Y, Z.\n\n    :param X: first input string\n    :param Y: second input string\n    :param Z: third input string\n    :return: the longest common subsequence of the three input strings X, Y, Z\n    \"\"\"\n    n, m, l = len(X), len(Y), len(Z)\n    L = [[0] * (l + 1) for i in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            for k in range(l + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    lcs = \"\"\n    i, j, k = n, m, l\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = Z[k - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    #Creating a 2D array to store LCS\n    LCS = [[0 for j in range(p+1)] for i in range(m+1)]\n    \n    #Iterating through the first row\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Z[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n    \n    #Printing the LCS matrix\n    for i in range(m+1):\n        print(\" \".join(map(str, LCS[i])))\n        \n    #Using the LCS matrix to find the length of LCS\n    length = LCS[m][p]\n    \n    #Printing the length of LCS\n    print(\"Length of LCS:\", length)\n    \n    #Creating a 2D array to store LCS of X, Y and Z\n    LCS_XYZ = [[0 for j in range(length+1)] for i in range(3)]\n    \n    #Iterating through the first column of LCS matrix\n    for i in range(m+1):\n        for j in range(3):\n            LCS_XYZ[j][0] = 0\n    \n    #Iterating through the first row of LCS matrix\n    for j in range(1, p+1):\n        for i in range(3):\n            if X[i-1] == Z[j-1]:\n                LCS_XYZ[i][j] = LCS[i][j-1]\n            elif Y[i-1] == Z[j-1]:\n                LCS_XYZ[i][j] = LCS[i-1][j]\n            else:\n                LCS_XYZ[i][j] = LCS[i-1][j-1]\n    \n    #Printing the LCS of X, Y and Z matrix\n    for i in range(3):\n        print(\" \".join(map(str, LCS_XYZ[i])))\n        \n    #Using the LCS matrix to find the length of LCS of X, Y and Z\n    length_XYZ = LCS_XYZ[m][p]\n    \n    #Printing the length of LCS of X, Y and Z\n    print(\"Length of LCS of X, Y and Z:\", length_XYZ)\n    \n    #Creating a 2D array to store LCS of X and Z\n    LCS_XZ = [[0 for j in range(length_XYZ+1)] for i in range(2)]\n    \n    #Iterating through the first column of LCS matrix\n    for i in range(m+1):\n        for j in range(2):\n            LCS_XZ[j][0] = 0\n    \n    #Iterating through the first row of LCS matrix\n    for j in range(1, p+1):\n        for i in range(2):\n            if X[i-1] == Z[j-1]:\n                LCS_XZ[i][j] = LCS_XYZ[i][j-1]\n            else:\n                LCS_XZ[i][j] = LCS_XYZ[i-1][j]\n    \n    #Printing the LCS of X and Z matrix\n    for i in range(2):\n        print(\" \".join(map(str, LCS_XZ[i])))\n        \n    #Using the LCS matrix to find the length of LCS of X and Z\n    length_XZ = LCS_XZ[m][p]\n    \n    #Printing the length of LCS of X and Z\n    print(\"Length of LCS of X and Z:\", length_XZ)\n    \n    #Creating a 2D array to store LCS of X, Y and Z\n    LCS_XYZ_XY = [[0 for j in range(length_XZ+1)] for i in range(2)]\n    \n    #Iterating through the first column of LCS matrix\n    for i in range(m+1):\n        for j in range(2):\n            LCS_XYZ_XY[j][0] = 0\n    \n    #Iterating through the first row of LCS matrix\n    for j in range(1, p+1):\n        for i in range(2):\n            if Y[i-1] == Z[j-1]:\n                LCS_XYZ_XY[i][j] = LCS_XYZ[i-1][j-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Initialize the 2D table to store the lengths of subsequences\n    # along with the starting index of each subsequence\n    table = [[0] * (len(Y)+1) for i in range(len(X)+1)]\n\n    # Step 2: Fill the table using dynamic programming approach\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Step 3: Backtrack to find the LCS string\n    lcs = ''\n    i = len(X)\n    j = len(Y)\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b\\w'\n    \n    # Split the string into words using the pattern\n    words = re.findall(pattern, str1)\n    \n    # Iterate over the words and capitalize the first letter and put a space between the words\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n        if i < len(words)-1:\n            words[i] = words[i] + \" \"\n    \n    # Join the words back together into a string with spaces between them\n    return \"\".join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with a space\n    str2 = re.sub(r'[^\\w\\s]','', str1)\n    # Split the string into words using spaces as the delimiter\n    words = str2.split()\n    # Capitalize the first letter of each word\n    new_words = [word.capitalize() for word in words]\n    # Join the words with spaces between them\n    result =''.join(new_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Add spaces between words starting with capital letters\n    for i in range(len(words)):\n        if words[i][0].isupper() and i!= 0:\n            words[i] ='' + words[i]\n        elif not words[i][0].isupper() and i == 0:\n            words[i] = words[i]\n        else:\n            words[i] = words[i]\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w*[A-Z]\\w*\\b') # matches any word starting with capital letter\n    return pattern.sub(r'\\1 \\2', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b[a-z]', lambda x: x.group(0) +'', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    # Split the string by whitespace and iterate over each word\n    words = str1.split()\n    for i, word in enumerate(words):\n        # Check if the word starts with a capital letter\n        if word[0].isupper():\n            # If yes, add a space between the previous word and the current word\n            if i > 0:\n                words[i] ='' + words[i]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # define regular expression pattern for capital letter followed by word characters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # use re.sub() method to replace all occurrences of the pattern with a space\n    str2 = re.sub(pattern, r'\\1 ', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w', string.lower())\n    capitalized = []\n    for word in words:\n        if word.istitle():\n            capitalized.append(word)\n        else:\n            capitalized.append(word[0].upper() + word[1:])\n    return''.join(capitalized)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Initialize an empty string to store the modified words\n    modified_words = []\n    # Iterate through each word and check if it starts with a capital letter\n    for word in words:\n        if word[0].isupper():\n            # If it starts with a capital letter, add a space and the rest of the word to the modified_words list\n            modified_words.append(f' {word[1:]}')\n        else:\n            # If it doesn't start with a capital letter, simply append it to the modified_words list\n            modified_words.append(word)\n    # Join the modified_words list into a string and return it\n    return ''.join(modified_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(\\w)([A-Z][a-z]+)')\n    match = pattern.findall(str1)\n\n    for word in match:\n        str1 = str1.replace(word[0] + word[1], word[0] +'' + word[1])\n\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings to integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the integers numerically\n    nums.sort()\n\n    # Convert the sorted integers back to strings and return the sorted list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the numeric strings in the list to integers\n    nums = [int(num) for num in nums_str]\n    # Sort the integers in the list\n    nums.sort()\n    # Convert the sorted integers back to strings and return the sorted list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_list = []\n    for num_str in nums_str:\n        nums_list.append(float(num_str))\n    nums_list.sort()\n    sorted_nums_str = [str(num) for num in nums_list]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float values\n    nums = [float(num) for num in nums_str]\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Convert the sorted list back to strings and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: (int(''.join(filter(str.isdigit, x))), x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x), reverse=True)\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n\n    Args:\n    nums_str: a list of strings of numbers.\n\n    Returns:\n    A sorted list of strings of numbers.\n    \"\"\"\n    nums = []\n    for s in nums_str:\n        try:\n            nums.append(float(s))\n        except ValueError:\n            continue\n\n    nums.sort()\n\n    return [str(n) for n in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to float values\n    nums = [float(num) for num in nums_str]\n    # Sort the list of floats using built-in sort() function\n    nums.sort()\n    # Convert the sorted list of floats back to strings and return the result\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers as input, and sorts them numerically.\n    '''\n    # Use map function to convert string to float\n    nums_float = list(map(float, nums_str))\n    # Use sorted function to sort the list numerically\n    nums_float = sorted(nums_float)\n    # Use map function to convert sorted list back to string\n    sorted_str = list(map(str, nums_float))\n    return sorted_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sorts a list of strings of numbers numerically.\n    '''\n    # Split the strings into lists of numbers\n    nums_list = []\n    for num_str in nums_str:\n        nums_list.extend([int(x) for x in num_str.split()])\n\n    # Sort the lists of numbers numerically\n    sorted_nums_list = sorted(nums_list)\n\n    # Convert the sorted lists of numbers back into strings\n    sorted_nums_str = [''.join(str(num)) for num in sorted_nums_list]\n\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Concatenate the two tuples into a new list\n    new_list = test_list + [test_tup]\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the two lists\n    combined_list = test_list + list(test_tup)\n    return combined_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if the array represents a min heap and False otherwise.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i//2]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    '''\n    This function takes the array and the index of the current element as input and returns True if the array represents a min heap and False otherwise.\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    if i == 1:\n        if arr[i] > arr[2]:\n            return False\n    else:\n        if arr[i] > arr[i//2] or (arr[i] > arr[i//2] and arr[i] < arr[i//3]):\n            return False\n    return check_min_heap_helper(arr, i*2)\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if the array represents a min heap and False otherwise.\n    '''\n    return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case\n    if i >= len(arr):\n        return True\n    \n    # Check if the element at index i is less than or equal to the element at the parent index\n    if arr[i] > arr[(i-1)//2]:\n        return False\n    \n    # Recursive call to the left subtree\n    return check_min_heap_helper(arr, 2*i+1)\n\ndef is_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i < len(arr):\n        # If current node is greater than root, swap it\n        if arr[i] > arr[0]:\n            arr[i], arr[0] = arr[0], arr[i]\n        # Recursively check for min heap\n        check_min_heap_helper(arr, 2 * i + 1)\n        check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if length of array is less than or equal to 1\n    if len(arr) <= 1:\n        return True\n    # Check if root is greater than all left children\n    if arr[0] > arr[1]:\n        return False\n    # Check if root is greater than all right children\n    if arr[0] > arr[2]:\n        return False\n    # Recursively check for min heap\n    check_min_heap_helper(arr, 1)\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    if i == 0:\n        return arr[i] >= arr[i+1]\n    return arr[i] >= arr[i-1] and check_min_heap_helper(arr, i+1)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or arr[i] >= arr[i//2]:\n        return True\n    else:\n        return False\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    for i in range(n//2, n):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Base case\n    if i >= len(arr):\n        return True\n\n    # Get the left and right child indices\n    left_child_index = 2 * i + 1\n    right_child_index = 2 * i + 2\n\n    # Check if the left child is smaller than the parent\n    if left_child_index < len(arr) and arr[left_child_index] > arr[i]:\n        return False\n\n    # Check if the right child is smaller than the parent\n    if right_child_index < len(arr) and arr[right_child_index] > arr[i]:\n        return False\n\n    # If both the left and right children are smaller than or equal to the parent,\n    # then the parent must be a min heap.\n    return check_min_heap_helper(arr, left_child_index) and check_min_heap_helper(arr, right_child_index)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    # To check if the array is already a min heap, check if it is a complete binary tree.\n    # A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, \n    # and all nodes in the last level (if it exists) are as left as possible.\n    # We can use the property that the parent node's value is less than or equal to its children nodes' values, \n    # which can be checked by comparing the index of each parent node to its children nodes.\n    for i in range(n//2-1, -1, -1):\n        if arr[i] > arr[2*i+1]:  # If the parent node's value is greater than its child node's value, return False.\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n\n    if arr[i] < arr[parent]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Find the nth jacobsthal number\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) * (1 + n//2)\n    else:\n        return jacobsthal_num(n//2) * (1 - n//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num_list = []\n    jacobsthal_num_list.append(0)\n    jacobsthal_num_list.append(1)\n    jacobsthal_num_list.append(1)\n    for i in range(2, n):\n        jacobsthal_num_list.append(jacobsthal_num_list[i-1] + jacobsthal_num_list[i-2])\n    return jacobsthal_num_list[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        # even number\n        return 2 * jacobsthal_num(n // 2)\n    else:\n        # odd number\n        return 4 * jacobsthal_num((n - 1) // 2) + 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    else:\n        jacobsthal = 1\n        for i in range(4, n+1):\n            jacobsthal += (4*i**2 - 2*i - 1)\n        return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2**n - 1) // (2**n - 1) * 2**n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*jacobsthal_num(n-1) - jacobsthal_num(n-2)) // 3"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return (2 * (n - 1)) + (2 * jacobsthal_num(n-1))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    num = 0\n    prev = 1\n    curr = 1\n\n    # Loop for nth jacobsthal number\n    for i in range(n):\n        if i % 2 == 0:\n            num += curr\n        prev, curr = curr, prev + curr\n\n    return num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # create a dictionary to store count of elements in each tuple\n    count = {}\n    # loop through the tuple list and count the elements\n    for t in test_list:\n        for elem in t:\n            if elem in count:\n                count[elem] += 1\n            else:\n                count[elem] = 1\n    # loop through the dictionary and find the minimum k records\n    min_count = float('inf')\n    min_list = []\n    for elem, count in count.items():\n        if count < min_count:\n            min_count = count\n            min_list = [elem]\n        elif count == min_count:\n            min_list.append(elem)\n    # return the minimum k records\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return \"Error: Test list is smaller than K.\"\n    \n    test_list.sort()\n    result = []\n    count = 0\n    \n    for i in test_list:\n        result.append(i)\n        count += 1\n        if count == K:\n            break\n    \n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples by the second element of the tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize minimum records to be infinity and minimum value to be 0\n    min_records = float('inf')\n    min_value = 0\n\n    # Iterate through the sorted list of tuples\n    for i in range(K):\n        # Check if the current tuple is smaller than the minimum value\n        if sorted_list[i][1] < min_value:\n            # If it is, update the minimum records and the minimum value\n            min_records = i+1\n            min_value = sorted_list[i][1]\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1])  # sort by second element (minimum records)\n    min_set = set()\n    for i in range(K):\n        min_set.add(test_list[i][0])\n    return min_set"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sort the tuple list in ascending order of the second element (the first element is used for sorting)\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize min_k variable to store the minimum k records\n    min_k = []\n\n    # loop through the sorted tuple list and add k records to min_k\n    for i in range(K):\n        min_k.append(test_list[i])\n\n    return min_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the first element of each tuple (which is the time of arrival)\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize minimum k as first element of sorted list\n    minimum_k = sorted_list[0][1]\n\n    # Initialize count as 1\n    count = 1\n\n    # Iterate through the sorted list starting from second element (starting from 1)\n    for i in range(1, len(sorted_list)):\n        # If we have already found minimum k records, then we can stop searching further\n        if count == K:\n            break\n\n        # If the current time (i.e., second element) is less than or equal to the previous time, then we have found a new record\n        if sorted_list[i][0] <= sorted_list[i-1][0]:\n            # Update minimum k as the minimum of the previous minimum k and the current time\n            minimum_k = min(minimum_k, sorted_list[i][1])\n            # Increment count\n            count += 1\n\n    return minimum_k\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Input:\n    test_list - a list of tuples, where each tuple contains a name and an age\n    K - an integer, the number of records to be considered\n    \n    Output:\n    A list of tuples, where each tuple contains a name and an age, representing the k records with the minimum age\n    \n    Example:\n    test_list = [(\"Alice\", 25), (\"Bob\", 20), (\"Charlie\", 22), (\"David\", 18), (\"Eve\", 21), (\"Frank\", 23)]\n    K = 3\n    Output: [(\"Charlie\", 22), (\"Alice\", 25), (\"Frank\", 23)]\n    '''\n\n    # create a dictionary to store the age of each name\n    age_dict = {}\n    for name, age in test_list:\n        age_dict[name] = age\n\n    # sort the dictionary by age in descending order\n    sorted_dict = dict(sorted(age_dict.items(), key=lambda item: item[1], reverse=True))\n\n    # get the first k keys from the sorted dictionary\n    min_age_list = list(sorted_dict.items())[:K]\n\n    # create a new list of tuples with the minimum k records\n    min_records = []\n    for name, age in min_age_list:\n        min_records.append((name, age))\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sorting the tuple list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # Initializing the minimum value of k as infinity\n    min_value = float('inf')\n    # Initializing a variable to store the minimum count of k records\n    min_count = 0\n    # Looping through the sorted tuple list\n    for i in range(len(test_list)):\n        # If the count of k records is less than k, increment the count of k records\n        if i < K:\n            min_count += 1\n        # If the count of k records is equal to k, updating the minimum value if the value is less than the current minimum value\n        if min_count == K and min_value > test_list[i][0]:\n            min_value = test_list[i][0]\n    # Returning the minimum value of k records\n    return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples by second element\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize min_k as the first element of the sorted list\n    min_k = test_list[0][1]\n\n    # Loop through the remaining elements of the sorted list\n    for i in range(1, len(test_list)):\n        # If we have found K records so far, update min_k\n        if i >= K:\n            if test_list[i][1] < min_k:\n                min_k = test_list[i][1]\n\n        # If we have found K records, return the minimum value\n        if i >= K:\n            return min_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    min_count = float('inf')\n    min_list = []\n    for tup in test_list:\n        count = tup.count(K)\n        if count < min_count:\n            min_count = count\n            min_list = [K]\n        elif count == min_count:\n            min_list.append(K)\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty dictionary to store the indices of each list\n    indices = {}\n    # Loop through the lists and record the indices of each element\n    for l in [l1, l2, l3]:\n        for i, elem in enumerate(l):\n            if elem in indices:\n                indices[elem].append(i)\n            else:\n                indices[elem] = [i]\n    # Loop through the indices of each list and find the common elements\n    common = []\n    for i in indices.values():\n        if len(set(i)) == 1:\n            common.append(i[0])\n    # Return the common elements\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to hold the common elements\n    common_elements = []\n    \n    # loop through each element in l1\n    for i in range(len(l1)):\n        # if the element is common for all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Create an empty dictionary to store common elements\n    common_elements = {}\n\n    # Iterate through each index in the lists\n    for i in range(len(l1)):\n\n        # If the element at this index is present in all the lists\n        if l1[i] in l2 and l1[i] in l3:\n\n            # If the element is not already in the dictionary, add it\n            if l1[i] not in common_elements:\n                common_elements[l1[i]] = True\n\n    # Convert the dictionary to a list\n    common_elements_list = list(common_elements.keys())\n\n    return common_elements_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n\n    index_list = set()\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list.add(i)\n        if l2[i] in l1 and l2[i] in l3:\n            index_list.add(i)\n        if l3[i] in l1 and l3[i] in l2:\n            index_list.add(i)\n    return list(index_list)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # Check if the element at that index is in all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i] and l1[i] not in common_elements:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Iterate over each element in the first list\n    for i in range(len(l1)):\n        # If the element is also in the other two lists\n        if l1[i] in l2 and l1[i] in l3:\n            # Add it to the common list\n            common.append(l1[i])\n    \n    # Return the common list\n    return common"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return second_smallest(numbers[1:])"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    smallest = numbers[0]\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Check if there are only two numbers in the list\n    if len(numbers) == 2:\n        return numbers[1]\n\n    # If there are more than two numbers, return the second smallest number\n    else:\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return \"There is no second smallest number in the list.\"\n    else:\n        return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List should contain at least two numbers.\"\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*a'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n\n    for string in test_list:\n        reverse_string = string[::-1]\n        if string == reverse_string:\n            continue\n        if string.replace(reverse_string, '') == '':\n            count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                reverse_count += 1\n    return reverse_count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(s):\n    \"\"\"\n    Check if the given string is a reverse of itself.\n    \"\"\"\n    return s == s[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if type(item) == list:\n            item_tuple = tuple(item)\n            if item_tuple in count_dict:\n                count_dict[item_tuple] += 1\n            else:\n                count_dict[item_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    counts = {}\n    # iterate over the lists in the input list\n    for sublist in list1:\n        # convert the list to a tuple and count its occurrences in the input list\n        tuple_sublist = tuple(sublist)\n        counts[tuple_sublist] = counts.get(tuple_sublist, 0) + 1\n    # return the dictionary\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for lst in list1:\n        # convert list to tuple and check if it exists in the dictionary\n        lst_tuple = tuple(lst)\n        if lst_tuple in sublist_count:\n            sublist_count[lst_tuple] += 1\n        else:\n            sublist_count[lst_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublist_dict = {}\n    for i in list1:\n        for j in list1:\n            if i == j:\n                continue\n            if (i,j) in unique_sublist_dict:\n                unique_sublist_dict[(i,j)] += 1\n            else:\n                unique_sublist_dict[(i,j)] = 1\n    return unique_sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create an empty dictionary\n    count_dict = {}\n\n    # iterate over the original list\n    for item in list1:\n        # convert the list to a tuple\n        item_tuple = tuple(item)\n        # check if the tuple is already in the dictionary\n        if item_tuple in count_dict:\n            # increment the count of the tuple\n            count_dict[item_tuple] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[item_tuple] = 1\n\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        # convert list to tuple and count number of occurrences\n        count = 0\n        for sublist in list1:\n            if sublist == item:\n                count += 1\n        # add tuple to dictionary\n        count_dict[(item,)] = count\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num:\n            if len(num.split('.')[1]) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    # Check if the number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the number contains any non-numeric characters\n    if not num.isdigit():\n        return False\n    \n    # Check if the number has a precision of 2\n    if len(num) > 1 and num[0] == '0' and num[-1]!= '.':\n        return False\n    if len(num) > 3 and num[-1] == '.' and num[-2]!= '.':\n        return False\n    \n    # Check if the number is negative or has more than one decimal point\n    if len(num) == 1 or '.' not in num:\n        return False\n    \n    # Check if the number is a valid decimal number\n    for i in range(len(num)):\n        if num[i] == '.' and i == len(num) - 1:\n            continue\n        if num[i] == '.' and i!= len(num) - 1:\n            return False\n        if num[i] in ['+', '-']:\n            if i == 0:\n                return False\n            if num[i-1] == '.':\n                return False\n        if '0' <= num[i] <= '9':\n            continue\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    if \".\" not in num:\n        return False\n    parts = num.split(\".\")\n    if len(parts)!= 2:\n        return False\n    if len(parts[0]) == 0:\n        return False\n    for digit in parts[0]:\n        if not digit.isdigit():\n            return False\n    if len(parts[1]) > 2:\n        return False\n    for digit in parts[1]:\n        if not digit.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    else:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) > 2:\n            return False\n        else:\n            for char in decimal_part:\n                if not char.isdigit():\n                    return False\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Convert the string to float to remove any decimal points\n    num = float(num)\n    \n    # Check if the float is within the precision of 2 decimal points\n    if abs(num) <= 0.01:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Split the string into a list of individual characters\n    num_list = list(num)\n    # Initialize the count of digits after the decimal point to 0\n    after_dot_count = 0\n    \n    # Iterate through each character in the list\n    for char in num_list:\n        # If the character is a digit, increment the count of digits after the decimal point\n        if char.isdigit():\n            after_dot_count += 1\n        # If the character is a decimal point, check if there are exactly 2 digits after it\n        elif char == '.':\n            if after_dot_count == 2:\n                return True\n            else:\n                after_dot_count = 0\n    \n    # If the loop completes without finding two digits after the decimal point, the string is not a decimal number\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input string is of type string\n    if type(num)!= str:\n        return False\n\n    # Convert the input string to a list of characters\n    num_list = list(num)\n\n    # Initialize variables\n    count = 0\n    decimal_count = 0\n    is_decimal = False\n\n    # Loop through the list and count the number of digits and decimal points\n    for char in num_list:\n        if char.isdigit():\n            count += 1\n        elif char == '.':\n            decimal_count += 1\n        else:\n            break\n\n    # Check if the number of digits is greater than or equal to 1 and less than or equal to 2\n    if count < 1 or count > 2:\n        return False\n\n    # Check if the number of decimal points is greater than or equal to 1 and less than or equal to 2\n    if decimal_count < 1 or decimal_count > 2:\n        return False\n\n    # Check if the number has a precision of 2\n    if decimal_count > 0 and len(num) - count - decimal_count!= 1:\n        return False\n\n    # If the number passes the above checks, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the input is a valid decimal number\n    try:\n        decimal_number = float(num)\n        if decimal_number == int(decimal_number):\n            return False\n    except ValueError:\n        return False\n    \n    # Check if the number has a precision of 2\n    decimal_parts = num.split('.')\n    if len(decimal_parts) > 1 and len(decimal_parts[1]) > 2:\n        return False\n    \n    # If the number passes all the checks, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            num = num.split('.')[0]\n            num_parts = [int(p) for p in num]\n            return len(num_parts) <= 2\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            if len(num.split('.')[1]) == 2:\n                return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, False otherwise.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_flag = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique_flag = False\n                break\n        if not unique_flag:\n            break\n    return unique_flag"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store the distinct elements of the list\n    distinct_set = set(arr)\n    # check if the length of the set is equal to 1, indicating that there is only one distinct element\n    if len(distinct_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n == 0:\n        return False\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for num in arr:\n        if arr.count(num) > 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Remove duplicates from the list\n    arr = list(set(arr))\n    \n    # Check if the length of the list is 1\n    if len(arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and year % 100 == 0 and year % 400!= 0):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid Month Number\"\n    \n    # Check the number of days in each month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the month has 30 days\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return \"30\"\n    elif monthnum3 in range(1, 5):\n        return days_in_month[monthnum3-1]\n    else:\n        return days_in_month[monthnum3-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        if monthnum3 == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check if the input is a valid number\n    if not isinstance(monthnum3, int) or monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid input. Months are given as number from 1 to 12.\"\n\n    # check if the month contains 30 days\n    if monthnum3 % 2 == 0:\n        return \"The given month contains 30 days.\"\n    else:\n        return \"The given month does not contain 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if monthnum3 == 2 and day > 29:\n                return True\n        elif day > 28:\n            return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if day > 30:\n            return True\n    else:\n        if day > 31:\n            return True\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = int(monthnum3)\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n\n    if monthnum == 2:\n        year = int(input(\"Enter the year: \"))\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days[1] = 29\n        else:\n            days[1] = 28\n\n    for day in days:\n        if day == 30:\n            return True\n\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # List of months and their days\n    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # Check if the given month number is valid\n    if monthnum3 in months:\n        # Check if the given month has 30 days\n        if months[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum3, \"contains 30 days.\")\n    elif monthnum3 in [4, 6, 9, 11]:\n        print(monthnum3, \"contains 31 days.\")\n    else:\n        print(monthnum3, \"is invalid.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if monthnum3 % 2 == 0:\n            return \"30 days\"\n        else:\n            return \"31 days\"\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"31 days\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"The array should have at least two elements\"\n\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[n-1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n\ndef find_min_diff(arr, n):\n    merge_sort(arr)\n    min_diff = abs(arr[1] - arr[0])\n\n    for i in range(1, n - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Initialize the minimum difference to be positive infinity\n    min_diff = float('inf')\n    \n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = n - 1\n    \n    # Iterate through the array using two pointers\n    while left < right:\n        # Calculate the sum of the elements at the two pointers\n        current_sum = arr[left] + arr[right]\n        \n        # Calculate the absolute difference between the sum and the minimum element\n        current_diff = abs(current_sum - min_element)\n        \n        # If the current difference is smaller than the minimum difference found so far, update the minimum difference\n        if current_diff < min_diff:\n            min_diff = current_diff\n        \n        # If the sum is greater than the minimum element, move the right pointer to the right\n        if current_sum > min_element:\n            right -= 1\n        # If the sum is smaller than the minimum element, move the left pointer to the right\n        else:\n            left += 1\n    \n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the given array\n    arr.sort()\n\n    # Initialize min_diff with the difference between the first two elements\n    min_diff = abs(arr[1] - arr[0])\n\n    # Loop through the array from the third element onwards\n    for i in range(2, n):\n        # Calculate the difference between the current and previous element\n        diff = abs(arr[i] - arr[i - 1])\n\n        # Update min_diff if the new difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function takes in an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    min_diff = float('inf') # initialize minimum difference to infinity\n    for i in range(n): # iterate over all elements in the array\n        for j in range(i+1, n): # iterate over all elements in the array except the current element\n            diff = arr[j] - arr[i] # calculate the difference between the current element and the next element\n            if diff < min_diff: # if the difference is smaller than the current minimum difference\n                min_diff = diff # update the minimum difference\n    return min_diff # return the minimum difference between any two elements in the array"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    arr.sort() # sorting the array\n    min_diff = arr[1] - arr[0] # finding the minimum difference between the first and second elements\n    for i in range(1, n-1): # iterating for the remaining n-2 elements\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n    arr: an array of integers\n    n: the length of the array\n\n    Returns:\n    minimum difference between any two elements in the array\n    \"\"\"\n\n    # Initialize two variables to store the minimum and maximum elements of the array\n    min_num = float('inf')\n    max_num = float('-inf')\n\n    # Traverse through the array and update the minimum and maximum values\n    for i in range(n):\n        if arr[i] < min_num:\n            min_num = arr[i]\n        if arr[i] > max_num:\n            max_num = arr[i]\n\n    # Calculate the minimum difference between any two elements in the array\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[i] - arr[j]\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # sort the array in ascending order\n\n    # Initialize variables\n    min_diff = float('inf')\n    current_diff = float('inf')\n\n    # Traverse the array\n    for i in range(n - 1):\n        current_diff = abs(arr[i + 1] - arr[i])\n\n        # Update min_diff if current_diff is less than min_diff\n        if current_diff < min_diff:\n            min_diff = current_diff\n\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n and returns True if it is a polite number and False otherwise. \n    A polite number is defined as a positive integer that is divisible by 5 but not by 25.\n    '''\n    if n <= 1: # base case: 1 is considered polite\n        return True\n    \n    if n % 5 == 0: # check if n is divisible by 5\n        if n % 25 == 0: # check if n is divisible by 25\n            return False # n is not a polite number\n        else:\n            return True # n is a polite number\n    \n    # n is not divisible by 5, so it must be divisible by 15\n    if n % 3 == 0:\n        return True # n is a polite number\n    else:\n        return False # n is not a polite number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the current polite number to 1\n    polite_num = 1\n    # Initialize the counter variable to 1\n    count = 1\n    # Initialize the factorial of n to n!\n    factorial = math.factorial(n)\n    # Loop through all the factors of n\n    for i in range(2, n+1):\n        # Check if the current factor is a prime factor of n\n        if n % i == 0:\n            # If it is, update the polite number by multiplying it by the factorial divided by the factorial of i\n            polite_num *= factorial / math.factorial(i)\n            # Increment the counter by 1\n            count += 1\n    \n    # Return the nth polite number\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    else: \n        x = 1\n        y = 2\n        while y < n: \n            x, y = y, x + y \n        return y"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n    return num\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_prime_and_polite(num):\n        return is_prime(num) and num % 2 == 1\n\n    def nth_prime_and_polite(n):\n        count = 0\n        num = 1\n        while count < n:\n            if is_prime_and_polite(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    return nth_prime_and_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number using the following algorithm:\n\n    Polite numbers are even, and their square is equal to the sum of their digits raised to the power of 3.\n    For example: 152 is a polite number because 152^3 = 1^3 + 5^3 + 2^3 = 1 + 125 + 4096 = 4976.\n\n    To calculate the nth polite number, we start with 0 and iterate through the sequence of polite numbers.\n    For each polite number, we check if it is greater than the current nth polite number. If it is, we return it.\n    If not, we iterate to the next polite number in the sequence.\n\n    If we reach the end of the sequence without finding a polite number greater than the nth polite number,\n    we return None to indicate that there is no nth polite number.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    polite_numbers = [0]\n    current_polite_number = 0\n    next_polite_number = 0\n\n    while next_polite_number <= n:\n        if current_polite_number > n:\n            return current_polite_number\n\n        polite_numbers.append(current_polite_number)\n        current_polite_number += 1\n\n        if current_polite_number % 2 == 0:\n            next_polite_number = current_polite_number * current_polite_number * current_polite_number\n        else:\n            next_polite_number = sum(digit ** 3 for digit in str(current_polite_number))\n\n        if next_polite_number % 2 == 0:\n            next_polite_number += 1\n\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 10\n    if n == 3:\n        return 15\n    if n == 4:\n        return 20\n    if n == 5:\n        return 25\n    if n == 6:\n        return 30\n    if n == 7:\n        return 35\n    if n == 8:\n        return 40\n    if n == 9:\n        return 45\n    if n == 10:\n        return 50\n    \n    # Calculate the nth polite number using the Euclidean algorithm\n    # Reference: https://www.geeksforgeeks.org/n-th-polite-number/\n    a, b = 1, 4\n    polite = math.ceil(math.log10(n))\n    \n    for i in range(1, polite+1):\n        if i % 2 == 0:\n            a, b = b, a + b\n        else:\n            a, b = b, a\n    \n    return a"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n    \"\"\"\n    def sieve_of_eratosthenes(n):\n        \"\"\"\n        Generate a list of prime numbers up to n.\n        \"\"\"\n        primes = [True] * (n + 1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if primes[i]:\n                for j in range(i * i, n + 1, i):\n                    primes[j] = False\n        return [i for i in range(n + 1) if primes[i]]\n\n    primes = sieve_of_eratosthenes(10**6)\n    count = 0\n    for prime in primes:\n        count += 1\n        if count == n:\n            return prime"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    sqrt5 = math.sqrt(5)\n    return int(1 + 3*(sqrt5 - 1)/2)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    The nth polite number is the number that is written in the form of \"n words\" and has the form: \"n words\" polite.\n    The words are chosen to be \"nice\", \"smart\", \"kind\", \"courageous\", \"generous\", \"eager\", \"cool\", \"helpful\", \"happy\", \"valiant\", \"prudent\", \"funny\", \"happy\", \"romantic\", \"euphoric\", \"super\", \"delightful\", \"amazing\", \"loving\", \"humble\", \"frugal\", \"mild\", \"free\", \"gentle\", \"chill\", \"quiet\", \"jolly\", \"relaxed\", \"angry\", \"angry\", \"melancholy\", \"sad\", \"sad\", \"disappointed\", \"disappointed\", \"terrified\", \"terrified\", \"disgusted\", \"disgusted\", \"anguished\", \"anguished\", \"furious\", \"furious\", \"displeased\", \"displeased\", \"disconsolate\", \"disconsolate\", \"dejected\", \"dejected\", \"terrible\", \"terrible\", \"discouraged\", \"discouraged\", \"dismal\", \"dismal\", \"disappointed\", \"disappointed\", \"dejected\", \"dejected\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"dejected\", \"dejected\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappointed\", \"disappoint"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if not l1:\n        return []\n    result = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(lst):\n    result = []\n    n = len(lst)\n    for i in range(n-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function takes a list of numbers and the sum as input and returns the count of pairs whose sum is equal to'sum'.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the number of pairs whose sum is equal to'sum'.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a sum as arguments and returns the count of pairs of numbers in the list whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function takes two arguments:\n\n    - arr: a list of numbers\n    - sum: an integer representing the target sum\n\n    The function returns an integer representing the count of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and the sum as input. It returns the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    diff = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff.append(li1[i])\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes in two lists and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    difference = []\n    for item in li1:\n        if item not in li2:\n            difference.append(item)\n    return difference"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a new list with the elements that are present in list 1 but not in list 2.\n    '''\n\n    diff_list = []\n\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    # Create a set of unique elements from both lists\n    union = set(li1).union(set(li2))\n\n    # Create a new list with only the elements that are not in both lists\n    diff = list(set(li1).difference(li2))\n\n    # Return the difference list\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add fourth power of i to sum\n        sum += i ** 4\n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum\n\nprint(odd_num_sum(10)) # Output: 1048576"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    num = 3  # starting number\n    \n    for i in range(n):\n        sum_of_powers += num**4\n        num += 2  # increase starting number to get the next odd natural number\n    \n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum variable\n    sum = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate fourth power of the number and add to sum variable\n        sum += i**4\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # initializing variables\n    num = 3\n    sum = 0\n\n    # iterating till n odd natural numbers\n    for i in range(1, n+1):\n        # calculating the fourth power of num and adding to sum\n        sum += num ** 4\n        # incrementing num\n        num += 2\n\n    # returning the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(2, n + 1):\n        total += i ** 4\n    return total"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in [')', '}']:\n                if last_char in ['(', '{']:\n                    continue\n                else:\n                    return False\n            elif char in [']']:\n                if last_char in ['[', '(':]:\n                    continue\n                else:\n                    return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if stack.pop()!= '(' and stack.pop()!= '{' and stack.pop()!= '[':\n                return False\n            if char == ')' and not stack or char == '}' and not stack or char == ']' and not stack:\n                return False\n    if not stack:\n        return True\n    return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        elif char in ['(', '{', '[']:\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n        elif char == '}':\n            if not stack or stack.pop()!= '{':\n                return False\n        elif char == ']':\n            if not stack or stack.pop()!= '[':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack to keep track of opening and closing brackets\n    stack = deque()\n    # loop through the expression\n    for i in range(len(exp)):\n        # if the current character is an opening bracket, push it onto the stack\n        if exp[i] in ['(', '{', '[']:\n            stack.append(exp[i])\n        # if the current character is a closing bracket, pop the top of the stack and compare it with the current character\n        elif exp[i] in [')', '}', ']']:\n            # if the stack is empty or the top of the stack is not the corresponding opening bracket, return False\n            if not stack:\n                return False\n            elif stack[-1]!= exp[i]:\n                return False\n            else:\n                stack.pop()\n    # if the stack is not empty at the end, return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in ['(', '{']:\n                if last_char not in [')', ']']:\n                    return False\n            elif char in [')', ']']:\n                if last_char not in ['(', '{']:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            if stack[-1] in open_brackets.values():\n                if char in close_brackets.values():\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    \n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words using whitespace as the separator\n    words = test_str.split()\n\n    # Remove words with length greater than or equal to K\n    words = [word for word in words if len(word) < K]\n\n    # Join the words back into a string with whitespace as the separator\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the new words\n    new_words = []\n    \n    # Iterate through the words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Add the word to the new list\n            new_words.append(word)\n    \n    # Join the new words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with length greater than K\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is greater than K, add it to the result list\n        if len(word) > K:\n            result.append(word)\n    # Join the result list back into a string and return it\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Initialize an empty list to store the non-length-K words\n    non_length_K_words = []\n\n    # Loop through the list of words and add non-length-K words to the list\n    for word in words:\n        if len(word)!= K:\n            non_length_K_words.append(word)\n\n    # Join the list of non-length-K words into a string and return it\n    return''.join(non_length_K_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n\ntest_str = \"This is a test string with words and sentences. This should be removed.\"\nK = 3\nresult = remove_length(test_str, K)\nprint(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. \n    Return None if there is no match.\n    \"\"\"\n    try:\n        match = re.search(pattern, text)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        return [(m.group(), m.start(), m.end()) for m in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    \n    if not matches:\n        return None\n    \n    result = []\n    \n    for match in matches:\n        result.append((match.start(), match.end()))\n        \n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return [(match, text.index(match)) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes a string 'text' and a pattern 'pattern' as input. It returns a tuple containing the\n    number of occurrences of the pattern within the string and the position of the first occurrence.\n    If there is no match, it returns None.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    # Use the re.finditer() function to find all occurrences of the pattern in the text\n    occurrences = re.finditer(pattern, text)\n    \n    # Initialize an empty dictionary to store the occurrences\n    result = {}\n    \n    # Iterate over the occurrences and store the positions and lengths in a dictionary\n    for match in occurrences:\n        pos = match.start()\n        length = len(match.group())\n        result[pos] = length\n    \n    # If no occurrences are found, return None\n    if not result:\n        return None\n    \n    # Sort the occurrences by position and return the first occurrence\n    sorted_result = sorted(result.items())\n    return sorted_result[0]"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    \n    count = 0\n    for match in matches:\n        count += 1\n        if count == 1:\n            start = match.start()\n            end = match.end()\n        else:\n            end = match.end()\n    \n    return (start, end)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if len(set([nums[j] for j in range(i, len(nums), 2)]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 1 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    # Loop through each odd index in the list\n    for i in range(1, len(nums), 2):\n        # Check if the current number at the odd index is odd\n        if nums[i] % 2!= 0:\n            # If it's not, return False immediately\n            return False\n    # If we make it through the loop without finding a pair of odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if sum([x % 2 for x in nums[i:]]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            print(\"No odd numbers found in the odd position of the list.\")\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n        else:\n            if nums[i] % 2 == 1:\n                return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # Check if the index is even\n            continue\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 1:  # Count the number of odd numbers in the odd index\n                count += 1\n        if count == 0:  # If there are no odd numbers in the odd index, return False\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # Initialize a dictionary to store the frequency of vowels\n    vowel_freq = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n\n    # Loop through each character in the string\n    for char in test_str:\n\n        # Check if the character is a vowel and its neighbor is also a vowel\n        if char in vowel_freq and char in vowel_freq and char in vowel_freq:\n            vowel_freq[char] += 1\n\n    # Return the frequency of vowels\n    return vowel_freq"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or test_str[i-1] in vowels:\n            if i == len(test_str)-1 or test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n\ntest_str = \"hello world\"\nprint(count_vowels(test_str)) # Output: 3"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_elements = set(arr)\n    \n    # Initialize the sum of non-repeated elements to zero\n    sum_of_non_repeated = 0\n    \n    # Iterate through the unique elements and add their sum to the sum_of_non_repeated variable\n    for element in unique_elements:\n        sum_of_non_repeated += element\n        \n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an input and returns the sum of all the non-repeated elements in the list.\n    '''\n    unique_arr = list(set(arr))\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # sum up all the elements with frequency 1\n    total = sum([num for num in arr if freq[num] == 1])\n    \n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # initialize the sum to zero\n    sum = 0\n    # loop through each unique element in the set\n    for element in unique_set: \n        # add its value to the sum\n        sum += element\n    # return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the unique elements\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n\n    # Calculate the sum of unique elements\n    unique_sum = sum(unique_set)\n\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    sum_unique = sum(unique_elements)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    \n    # iterate through the list\n    for num in arr:\n        # if the number is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # if the number is not in the dictionary, add it and its frequency to the dictionary\n        else:\n            freq[num] = 1\n    \n    # initialize the sum to 0\n    sum_non_repeated = 0\n    \n    # iterate through the list again\n    for num in arr:\n        # if the number is in the dictionary but not the first occurrence, skip it\n        if num in freq and freq[num] > 1:\n            continue\n        # if the number is not in the dictionary or is the first occurrence, add it to the sum\n        else:\n            sum_non_repeated += num\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set of the unique elements in the list\n    unique_elems = set(arr)\n    # Create a set of the repeated elements in the list\n    repeated_elems = set(arr) & unique_elems\n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = sum(unique_elems) - sum(repeated_elems)\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # iterate through the list and increment the count of each element in the dictionary\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n            \n    # initialize the sum to zero\n    total_sum = 0\n    \n    # iterate through the list again and add up the count of each non-repeating element\n    for i in arr:\n        if count_dict[i] == 1:\n            total_sum += i\n    \n    # return the sum of non-repeating elements\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    # Initialize the sum to zero\n    sum = 0\n    # Iterate through the unique elements in the set\n    for element in unique_set:\n        # Add the element to the sum\n        sum += element\n    return sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the elements of the list by their values\n    grouped = groupby(list1)\n    # loop through the grouped elements and pack consecutive duplicates into sublists\n    result = []\n    prev_value = None\n    for key, group in grouped:\n        if prev_value is None:\n            prev_value = key\n        elif key == prev_value + 1:\n            sublist = list(group)\n            sublist.insert(0, prev_value)\n            result.append(sublist)\n            prev_value = key + 1\n    # add the last sublist if there are any\n    if prev_value is not None:\n        sublist = list(group)\n        sublist.insert(0, prev_value)\n        result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    prev = None\n    for item, group in groupby(list1):\n        if prev is None or item!= prev:\n            sublist = list(group)\n            sublist.sort()\n            result.append(sublist)\n        prev = item\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == key:\n            group = list(group)\n            result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    group_iter = groupby(list1)\n    for group in group_iter:\n        sublist = list(group[1])\n        if len(sublist) > 1:\n            list2.append(sublist)\n    return list2"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a list where each consecutive duplicate element is grouped into a sublist.\n    '''\n    groups = []\n    for key, group in groupby(lst):\n        if key == lst[-1]:\n            groups.append(list(group))\n        else:\n            groups.append([next(group), list(group)])\n    return groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    This function takes a list as input and returns a new list where consecutive duplicates\n    of the list elements are packed into sublists.\n\n    For example:\n\n    list1 = [1, 2, 3, 2, 4, 2, 5, 2, 2, 6]\n    pack_consecutive_duplicates(list1) = [[1, 2, 2], [3, 4], [5, 2, 2], [6]]\n    '''\n    grouped_list = list(groupby(sorted(list1), lambda x: x))\n    result = []\n    for item in grouped_list:\n        if len(item) > 1:\n            if item[0][1] == item[-1][1]:\n                result.append(list(item))\n            else:\n                result.append(list(item))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Example:\n    >>> pack_consecutive_duplicates([1, 2, 3, 2, 4, 4, 5, 6, 6, 6])\n    [[1], [2, 2], [3], [4, 4], [5], [6, 6, 6]]\n    '''\n\n    # Group the list by consecutive duplicates\n    grouped = groupby(list1)\n\n    # Create an empty list to store the sublists\n    result = []\n\n    # Iterate through the grouped list\n    for key, group in grouped:\n\n        # If the group contains only one element, add it to the result list\n        if len(group) == 1:\n            result.append(list(group))\n\n        # Otherwise, add a sublist to the result list with consecutive duplicates\n        else:\n            sublist = []\n            for item in group:\n                sublist.append(item)\n                if len(sublist) == len(list1) - 1:\n                    result.append(sublist)\n                    sublist = []\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1) if len(list(g)) > 1]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create a dictionary to store the count of each unique tuple\n    count = {}\n    \n    # Loop through each list in the input list\n    for lst in list1:\n        # Turn the list into a tuple and check if it already exists in the dictionary\n        if lst in count:\n            # If it does, add 1 to the existing count\n            count[lst] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            count[lst] = 1\n    \n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the number of occurrences of each sublist in the list\n    sublist_count = {}\n    \n    # loop through the list and for each sublist, add it to the dictionary if it's not already in it\n    for sublist in list1:\n        if sublist not in sublist_count:\n            sublist_count[sublist] = 0\n        sublist_count[sublist] += 1\n        \n    # return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if type(item) == list:\n            item_tuple = tuple(item)\n            if item_tuple in count:\n                count[item_tuple] += 1\n            else:\n                count[item_tuple] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist_tuple = tuple(item)\n            if sublist_tuple in count:\n                count[sublist_tuple] += 1\n            else:\n                count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the unique sublists and their counts\n    unique_sublists_dict = {}\n\n    # Loop through the list and convert each list to a tuple\n    for sublist in list1:\n        unique_sublists_dict[tuple(sublist)] = unique_sublists_dict.get(tuple(sublist), 0) + 1\n\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through each list in the main list\n    for sublist in list1:\n        # Turn the list into a tuple to compare with other tuples\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple already exists in the dictionary\n        if sublist_tuple in count_dict:\n            # Increment the count for this tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # If the tuple doesn't exist in the dictionary, add it with a count of 1\n            count_dict[sublist_tuple] = 1\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts\n    count = {}\n\n    # Loop through the list of lists\n    for item in list1:\n        # Convert the list to a tuple and add it to the dictionary\n        if tuple(item) not in count:\n            count[tuple(item)] = 1\n        else:\n            count[tuple(item)] += 1\n\n    # Return the dictionary with the counts\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = set()\n    for sublist in lst:\n        sublists.add(tuple(sublist))\n    sublist_counts = {}\n    for sublist in sublists:\n        sublist_counts[sublist] = sublist_counts.get(sublist, 0) + 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of sublists\n    counts = {}\n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # If the element is a list, turn it into a tuple and add it to the dictionary\n        if isinstance(list1[i], list):\n            tuple_list = tuple(list1[i])\n            if tuple_list in counts:\n                counts[tuple_list] += 1\n            else:\n                counts[tuple_list] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            combinations_list.append(comb)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Remove duplicates from the input list\n    test_list = list(set(test_list))\n    # Get the length of the input list\n    n = len(test_list)\n    # Define the function to check if a combination of sums is valid\n    def is_valid_combination(sums):\n        for i in range(n):\n            # Check if the current sum is greater than or equal to the current tuple element\n            if sums[i] >= test_list[i][0]:\n                return False\n        # If all the sums are valid, the combination is valid\n        return True\n    # Find all combinations of sums with tuples in the input list\n    combinations_of_sums = []\n    for i in range(1, n+1):\n        for comb in combinations(test_list, i):\n            # Check if the combination is valid\n            if is_valid_combination(comb):\n                combinations_of_sums.append(comb)\n    # Return the list of valid combinations of sums with tuples in the input list\n    return combinations_of_sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def comb(lst, n):\n        return list(combinations(lst, n))\n\n    def check_sum(lst, target):\n        s = sum(lst)\n        if s == target:\n            return True\n        if s > target:\n            return False\n        return check_sum(lst[1:], target - s)\n\n    def is_valid_combination(combination):\n        if len(combination) < 2:\n            return False\n        for i in range(len(combination) - 1):\n            if combination[i] == combination[i+1]:\n                return False\n        return True\n\n    lst = test_list\n    lst.sort()\n    result = []\n\n    for i in range(len(lst) - 1):\n        comb_i = comb(lst, i+1)\n        for combination in comb_i:\n            if is_valid_combination(combination) and check_sum(combination, lst[i]):\n                result.append(combination)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def is_valid_combination(combination):\n        total_sum = sum(combination)\n        return total_sum == target_sum\n\n    def find_combinations_helper(test_list, target_sum, current_combination, result):\n        if target_sum == 0:\n            result.append(tuple(current_combination))\n        elif target_sum < 0:\n            pass\n        else:\n            for i in range(len(test_list)):\n                if is_valid_combination(current_combination + (test_list[i],)):\n                    find_combinations_helper(test_list[i:], target_sum - test_list[i], current_combination + (test_list[i],), result)\n\n    test_list = sorted(test_list)\n    target_sum = sum(test_list) // 2\n    find_combinations_helper(test_list, target_sum, (), [])\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of all the unique tuples in the list\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    # create a list of all the possible sums of tuples in the set\n    possible_sums = [sum(x) for x in unique_tuples]\n    # create a list of all the tuples in the set with the given sum\n    tuples_with_sum = [x for x in unique_tuples if sum(x) == target_sum]\n    # create a list of all possible combinations of tuples with the given sum\n    combinations_of_tuples = [list(combination) for combination in combinations(tuples_with_sum, r=2)]\n    # return all combinations of tuples with the given sum\n    return combinations_of_tuples"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Define the function to find the combinations of sums with tuples\n    def find_combinations_helper(nums, target):\n        # Base case: if target becomes 0, all the combinations are found\n        if target == 0:\n            return [()]\n        # Base case: if target becomes negative, no combinations can be found\n        elif target < 0:\n            return []\n        # Recursive case: find the combinations of sums with tuples\n        else:\n            # Find the combinations of sums with tuples in the given list\n            result = []\n            for i in range(len(nums)):\n                for combo in find_combinations_helper(nums[:i] + nums[i+1:], target - nums[i]):\n                    result.append((nums[i],) + combo)\n            return result\n\n    # Find all the combinations of sums with tuples in the given list\n    return find_combinations_helper(test_list, sum(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize empty result list\n    result = []\n    # Sort the input list\n    test_list.sort()\n    # Loop through all combinations of sums with tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the current and next elements is present in the list\n            if test_list[i] + test_list[j] in test_list:\n                # Append the current and next elements to the result list\n                result.append((test_list[i], test_list[j]))\n    # Return the result list\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a set to store unique tuples in the given list\n    unique_tuples = set(test_list)\n\n    # create a list to store the combinations of sums\n    combinations_list = []\n\n    # loop through all unique tuples\n    for tup in unique_tuples:\n        # calculate the sum of the tuples\n        tup_sum = sum(tup)\n\n        # loop through all possible combinations of tuples\n        for comb in combinations(unique_tuples, len(tup)):\n            # calculate the sum of the combinations\n            comb_sum = sum(comb)\n\n            # check if the combination sum is equal to the given sum\n            if comb_sum == tup_sum:\n                # add the combination to the list\n                combinations_list.append(comb)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of tuples with sums as elements\n    sum_tuples = [tuple(x) for x in test_list]\n    # use itertools.combinations to find all combinations of sums\n    all_combinations = list(combinations(sum_tuples, len(sum_tuples[0])))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            for k in range(j+1, len(test_list)+1):\n                combinations_list.append(tuple(sorted([test_list[i], test_list[j], test_list[k]])))\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function calculates the count of divisors of a given number.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    count += 1 if n > 1 else 0\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors of a given number n is even or odd.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    # Find the number of divisors\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n            if n / i!= i:\n                divisor_count += 1\n    \n    # Check whether the count is even or odd\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n\n    # Initialize count of divisors to 0\n    count_div = 0\n\n    # Loop through all integers from 1 to n-1\n    for i in range(1, n+1): \n        # If i is divisible by n, increment count_div by 1\n        if n % i == 0: \n            count_div += 1\n\n    # Check if count of divisors is even\n    if count_div % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function will count the number of divisors of a given number n.\n    \"\"\"\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    if divisors % 2 == 0:\n        print(f\"{n} has an even count of divisors.\")\n    else:\n        print(f\"{n} has an odd count of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    if len(divisors) % 2 == 1:\n        print(f\"{n} has an odd number of divisors.\")\n    else:\n        print(f\"{n} has an even number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even and False otherwise.\n    '''\n    if n == 1:\n        return True\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    return True if count % 2 == 0 else False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function returns the count of divisors of a given number.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n and returns True if the count of divisors is even,\n    otherwise it returns False. The count of divisors of a number n is the number of integers from 1 to n that divide evenly into n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum_odd += arr[j]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    sum_odd_len_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                sum_odd_len_subarrays += arr[j] - arr[i]\n    return sum_odd_len_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n-2, 2):\n            sum_of_subarrays += arr[j]\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    n = len(arr)\n    for i in range(1, n-1):\n        if i % 2!= 0:\n            left = 0\n            right = i\n            current_sum = 0\n            while left <= right:\n                current_sum += arr[left]\n                left += 1\n            total_sum += current_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+2, n, 2):\n            if j >= n:\n                break\n            if j-i+1 % 2 == 0:\n                sum += arr[j] - arr[i-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    n = len(arr)\n    \n    # Loop through the array\n    for i in range(n):\n        # If the current element is odd, add it to the subarray sum\n        if i % 2 == 1:\n            subarray_sum += arr[i]\n        \n        # If the current subarray sum is odd, add it to the overall sum\n        if subarray_sum % 2 == 1:\n            overall_sum += subarray_sum\n        \n        # If the current subarray sum is even, reset it to 0\n        if subarray_sum % 2 == 0:\n            subarray_sum = 0\n    \n    return overall_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            odd_sum += arr[i]\n        else:\n            odd_sum = max(odd_sum + arr[i], 0)\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_len = 0\n    n = len(arr)\n    for i in range(n):\n        # check if the length of the subarray is odd\n        if i < n-1:\n            if len(arr[i:i+2]) % 2 == 1:\n                # if the length of the subarray is odd, add its sum to the sum_odd_len variable\n                sum_odd_len += sum(arr[i:i+2])\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    total_sum = 0\n    left = 0\n    for right in range(n):\n        while right < n and (right - left + 1) % 2 == 1:\n            total_sum += arr[right]\n            right += 1\n    return total_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # initialize sum of odd length subarrays\n    sum_odd = 0\n    # loop through the array and calculate the sum of odd length subarrays\n    for i in range(n):\n        # check if the current element is odd and its index is greater than or equal to i\n        if i % 2!= 0 and i >= 0:\n            # calculate the sum of all odd length subarrays up to the current element\n            sum_odd += sum(arr[i:j+1] for j in range(i+1, n, 2))\n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert RGB to HSV\n    r_f = r / 255.0\n    g_f = g / 255.0\n    b_f = b / 255.0\n\n    min_v = min(r_f, g_f, b_f)\n    max_v = max(r_f, g_f, b_f)\n    delta = max_v - min_v\n\n    if max_v == 0:\n        h = 0\n    elif delta == 0:\n        h = 0\n    else:\n        if r_f == max_v:\n            h = (g_f - b_f) / delta\n        elif g_f == max_v:\n            h = 2 + (b_f - r_f) / delta\n        else:\n            h = 4 + (r_f - g_f) / delta\n\n        if h < 0:\n            h += 6\n\n        h = h / 6\n\n    if max_v == min_v:\n        s = 0\n    else:\n        if max_v == r_f:\n            s = (g_f - b_f) / delta\n        elif max_v == g_f:\n            s = (b_f - r_f) / delta\n        else:\n            s = (r_f - g_f) / delta\n\n        if s < 0:\n            s += 1\n\n        s = s / delta\n\n    v = max_v\n\n    return [h, s, v]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color.\n    \n    Parameters:\n    r (int): Red value of the color (0-255)\n    g (int): Green value of the color (0-255)\n    b (int): Blue value of the color (0-255)\n    \n    Returns:\n    h (float): Hue value of the color (0-360)\n    s (float): Saturation value of the color (0-1)\n    v (float): Value value of the color (0-1)\n    \"\"\"\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h * 60\n        \n        if h < 0:\n            h += 360\n            \n        if h > 360:\n            h -= 360\n            \n        s = delta / (max_val + delta)\n    \n    v = max_val\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV.\n    \n    Parameters:\n    r (int): The red color value (0-255)\n    g (int): The green color value (0-255)\n    b (int): The blue color value (0-255)\n    \n    Returns:\n    h (float): The hue value (0-360)\n    s (float): The saturation value (0-1)\n    v (float): The value value (0-1)\n    \"\"\"\n    r_normalized = r / 255\n    g_normalized = g / 255\n    b_normalized = b / 255\n    \n    max_color = max(r_normalized, g_normalized, b_normalized)\n    min_color = min(r_normalized, g_normalized, b_normalized)\n    \n    h = 0\n    s = 0\n    v = max_color\n    \n    if max_color!= min_color:\n        delta = max_color - min_color\n        s = delta / max_color\n        \n        if r_normalized == max_color:\n            h = (g_normalized - b_normalized) / delta\n        elif g_normalized == max_color:\n            h = 2 + (b_normalized - r_normalized) / delta\n        else:\n            h = 4 + (r_normalized - g_normalized) / delta\n            \n        h = h * 60\n        if h < 0:\n            h += 360\n            \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        delta = max_value - min_value\n        s = delta / max_value\n        \n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h * 60\n        \n        if h < 0:\n            h += 360\n            \n    return (h, s, max_value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import math\n    # calculate minimum and maximum value in the color space\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    # calculate difference between maximum and minimum value in the color space\n    delta = max_value - min_value\n    # calculate value of hsv\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / delta)\n    elif max_value == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n    # calculate value of s\n    s = delta / max_value if max_value!= 0 else 0\n    # calculate value of v\n    v = max_value\n    # calculate value of hsv\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n    r (int): red value between 0 and 255\n    g (int): green value between 0 and 255\n    b (int): blue value between 0 and 255\n\n    Returns:\n    h (int): hue value between 0 and 360\n    s (int): saturation value between 0 and 100\n    v (int): value value between 0 and 100\n    \"\"\"\n\n    r, g, b = r / 255, g / 255, b / 255\n    max_val, min_val = max(r, g, b), min(r, g, b)\n    delta = max_val - min_val\n\n    h = None\n    s = None\n    v = max_val\n\n    if max_val == min_val:\n        h = 0\n    else:\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        elif b == max_val:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n        if h < 0:\n            h += 1\n\n        if max_val == r:\n            s = delta / (v - min_val)\n        elif max_val == g:\n            s = delta / (v - min_val)\n        else:\n            s = delta / (v - min_val)\n\n        s = s * 100\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0 # achromatic\n    else:\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n    if max_val == 0:\n        s = 0 # achromatic\n    else:\n        s = delta / max_val\n\n    v = max_val\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert RGB to HSV\n    r = r/255\n    g = g/255\n    b = b/255\n\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    h = None\n    s = None\n    v = None\n\n    if max_rgb == min_rgb:\n        h = 0\n        s = 0\n    else:\n        diff = max_rgb - min_rgb\n        s = diff / max_rgb\n\n        if max_rgb == r:\n            h = (g - b) / diff\n        elif max_rgb == g:\n            h = 2 + (b - r) / diff\n        else:\n            h = 4 + (r - g) / diff\n\n        h = h * 60\n        if h < 0:\n            h = h + 360\n\n    v = max_rgb\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSL\n    h = (r + g + b) / 3\n    s = max(r, g, b) - min(r, g, b)\n    v = max(r, g, b)\n    # Convert HSV to HSL\n    hsv_to_hsl(h, s, v)\n    return h, s, v\n\n\ndef hsv_to_hsl(h, s, v):\n    '''\n    Write a function to convert HSV color to HSL color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if s == 0:\n        h = 0\n        l = v\n    else:\n        l = (2 * v) / (s + v)\n        if l > 1:\n            l = 1\n        if l < 0:\n            l = 0\n        if l <= 0.5:\n            s = (v - (v - s)) / (6 * l)\n        else:\n            s = (v - (v - s)) / (2 - 6 * l)\n        if h == 1:\n            h = 0\n        elif h == 6:\n            h = 0\n        h *= 60\n    return h, s, l"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert R, G, and B to float values\n    r, g, b = float(r), float(g), float(b)\n    \n    # Calculate minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Calculate chroma\n    chroma = max_val - min_val\n    \n    # Calculate hue and saturation\n    if chroma == 0:\n        hue = 0\n    else:\n        if r == max_val:\n            hue = (g - b) / chroma\n        elif g == max_val:\n            hue = 2 + (b - r) / chroma\n        elif b == max_val:\n            hue = 4 + (r - g) / chroma\n        hue *= 60\n        if hue < 0:\n            hue += 360\n    \n    # Calculate value\n    value = max_val\n    \n    # Create a dictionary with the values\n    hsv_color = {'hue': hue,'saturation': chroma / max_val, 'value': value}\n    \n    return hsv_color"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd numbers in the list.\n    \"\"\"\n\n    # initialize variables\n    first_even = None\n    first_odd = None\n    product = 1\n\n    # iterate through the list\n    for num in lst:\n        # check if the number is even\n        if num % 2 == 0:\n            # check if the first even number has not been found yet\n            if first_even is None:\n                first_even = num\n            # check if the current even number is greater than the first even number\n            elif num > first_even:\n                first_even = num\n        # check if the number is odd\n        else:\n            # check if the first odd number has not been found yet\n            if first_odd is None:\n                first_odd = num\n            # check if the current odd number is less than the first odd number\n            elif num < first_odd:\n                first_odd = num\n\n    # calculate the product of the first even and odd numbers\n    if first_even is not None and first_odd is not None:\n        product = first_even * first_odd\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count == 1 and odd_count == 1:\n            product = num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n    \n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n    \n    if even_count == 0:\n        return 0\n    else:\n        return product // (even_count * odd_count)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    if even_count > 0:\n        product = even_count * odd_count\n    else:\n        product = 0\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count == 0:\n        return odd_product\n    elif odd_count == 0:\n        return even_product\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            product *= list1[i]\n        else:\n            product *= list1[i] + 1\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and finds the product of the first even and odd numbers of the list.\n    '''\n    even_product = 1\n    odd_product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    return even_product * odd_product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = list(test_str)\n    int_list = []\n    for i in str_list:\n        try:\n            int_list.append(int(i))\n        except ValueError:\n            pass\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    if not isinstance(test_str, str):\n        raise TypeError('Input must be a string')\n    try:\n        return tuple(int(x) for x in test_str.split(','))\n    except ValueError:\n        raise ValueError('Input must contain only integers separated by commas')"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple()\n    for i in test_str:\n        try:\n            int_tuple += (int(i),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of substrings\n    list_str = test_str.split(',')\n    \n    # Create an empty list to store the converted integer values\n    list_int = []\n    \n    # Loop through the list and convert each substring to an integer\n    for item in list_str:\n        list_int.append(int(item))\n    \n    # Return the integer tuple\n    return tuple(list_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Create empty list to store converted tuples\n    converted_list = []\n    # Split the string into tuples using comma as separator\n    tup_list = test_str.split(',')\n    # Loop through each tuple in the list\n    for tup in tup_list:\n        # Convert each tuple element to integer\n        int_tup = tuple(int(x) for x in tup.split())\n        # Append the converted tuple to the list\n        converted_list.append(int_tup)\n    # Return the converted list\n    return converted_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Initialize an empty list to hold the integers\n    int_list = []\n\n    # Loop through the list of strings\n    for string in str_list:\n        # If the string is not a number, add an error message to the list\n        try:\n            int_list.append(int(string))\n        except ValueError:\n            int_list.append('Error: Invalid number in tuple string')\n\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    return tuple(int(x) for x in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    for char in test_str:\n        if char.isdigit():\n            int_list.append(int(char))\n        else:\n            continue\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a list to store the integer values\n    int_list = []\n    # Split the string into a list of substrings based on commas\n    string_list = test_str.split(',')\n    # Loop through the list of substrings, convert each substring to an integer and append it to the list\n    for string in string_list:\n        int_list.append(int(string))\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str)!= tuple:\n        test_str = tuple(test_str.split(','))\n    \n    return tuple(int(x) for x in test_str)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif x > a[index]:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index if index < len(a) and a[index] == x else None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Find the right insertion point using bisect_right function from bisect module.\n    # This function returns the index where the value should be inserted to maintain sorted order.\n    index = bisect.bisect_right(a, x)\n    \n    # Return the right insertion point.\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the bisect module to find the index of the right insertion point for x in a.\n    index = bisect.bisect_right(a, x)\n    # If x is already in the list, return the current index.\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, return the index where x should be inserted.\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_right to find the index where x should be inserted.\n    index = bisect.bisect_right(a, x)\n    # Check if x is already present at the index.\n    if a[index-1] == x:\n        # If x is already present at the index, bisect_right returns the index.\n        # Therefore, decrement the index by 1 to return the index where x should be inserted.\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Define the insertion point as the length of the list minus one\n    i = len(a) - 1\n\n    # Use binary search to find the insertion point\n    while i >= 0:\n        j = bisect.bisect_left(a, x)\n\n        # If the value is already in the list, return the index\n        if j < len(a) and a[j] == x:\n            return j\n\n        # If the value is not in the list, return the index of the previous value\n        elif j == len(a):\n            return j - 1\n\n        # If the value is to the left of the insertion point, move the insertion point to the right\n        elif a[j] < x:\n            i = j - 1\n\n        # If the value is to the right of the insertion point, move the insertion point to the left\n        else:\n            i = j\n\n    # If the value is not in the list, return the index of the first insertion point\n    return len(a)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found:'+ match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        print('Match found!')\n    else:\n        print('No match found.')\n\ntext = 'abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"ababab\"\nmatches = text_match_three(text)\nprint(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = re.compile(r'a(b){3}')\n\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'(?i)ab{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\b[ab][b]{2}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a+b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_list + test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Combine the two tuples into a new tuple\n    new_tuple = test_str, new_list\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists into a single list\n    combined_list = test_list + test_str\n    # Convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    new_list = test_list + [test_str]\n    # Convert the combined list into a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list + test_str, test_str + test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple += (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of strings.\n        test_str (str): A string.\n\n    Returns:\n        A new tuple containing both the list and string.\n    \"\"\"\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split()) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_list)\n    new_list.append(test_str)\n    return tuple(new_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize a boolean variable to keep track of whether every even index contains even numbers\n    even_found = True\n\n    # Iterate over each index in the list\n    for i in range(len(nums)):\n        # If the current index is even and the corresponding number in the list is odd, update the boolean variable\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            even_found = False\n\n    # Return the final boolean value of whether every even index contains even numbers\n    return even_found"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count == odd_count)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_flag = True\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                even_flag = False\n                break\n    return even_flag"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            for j in range(i, len(nums)):\n                if nums[j] % 2 == 0:\n                    even_count += 1\n                    if even_count == 2:\n                        return True\n        else:\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    even_count += 1\n                    if even_count == 2:\n                        return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    \n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n                if even_count == len(nums)//2:\n                    return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count = 0\n            for num in nums:\n                if num % 2 == 0:\n                    even_count += 1\n                if even_count > 1:\n                    return False\n            if even_count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len([x for x in nums[i:] if x % 2 == 0]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Parameters:\n    test_tup: a tuple containing tuples as elements.\n\n    Returns:\n    A new tuple with all tuples removed.\n    \"\"\"\n    new_tup = []\n    for element in test_tup:\n        if isinstance(element, tuple):\n            new_tup.extend(element)\n        else:\n            new_tup.append(element)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result += remove_nested(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                result_list.append(sub_item)\n        else:\n            result_list.append(item)\n    return tuple(result_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    return tuple(flattened_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup if not isinstance(x, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return list(filter(lambda x: not isinstance(x, tuple), test_tup))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(x) for x in test_tup if not isinstance(x, tuple))\n    else:\n        return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    This function counts the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments - the sorted array and the element to be searched.\n    The function returns the last position of the element in the array or -1 if the element is not found.\n    '''\n    # initializing the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # checking if the element is present in the array or not\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        \n        elif arr[mid] > x:\n            right = mid - 1\n        \n        else:\n            left = mid + 1\n    \n    # returning -1 if the element is not found\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the last index of x in the array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i if i >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Iterate over the array starting from the last element\n    for i in range(len(arr) - 1, -1, -1):\n        # If the current element is equal to the search element\n        if arr[i] == x:\n            # Set the last position to the current index\n            last_position = i\n            # Break the loop\n            break\n\n    # Return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # find the last index of the element in the array\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element x as input, and returns the index of the last occurrence of x in the array.\n\n    Args:\n    arr (list): A sorted array.\n    x (any): The element we are looking for.\n\n    Returns:\n    int: The index of the last occurrence of x in the array.\n    '''\n    # Initialize a variable to keep track of the current position\n    curr_pos = 0\n    \n    # Loop through the array until we find the last occurrence of x\n    while curr_pos < len(arr) and arr[curr_pos]!= x:\n        curr_pos += 1\n    \n    # If we haven't found the element, return -1\n    if curr_pos == len(arr):\n        return -1\n    \n    # Otherwise, return the current position\n    return curr_pos - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x as arguments.\n    It returns the index of the last occurrence of x in the array.\n    If x is not found in the array, it returns -1.\n\n    Args:\n        arr (list): A sorted array.\n        x (int): An element to find the last occurrence of.\n\n    Returns:\n        int: The index of the last occurrence of x in the array, or -1 if x is not found.\n    \"\"\"\n\n    # Initialize left and right pointers to first and last elements\n    left = 0\n    right = len(arr) - 1\n\n    # Keep track of the index of the last occurrence of x\n    last_index = -1\n\n    # Iterate through the array until the left pointer reaches the right pointer\n    while left <= right:\n\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, update the last_index variable\n        if arr[mid] == x:\n            last_index = mid\n\n        # If the middle element is less than x, update the right pointer\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the middle element is greater than x, update the left pointer\n        else:\n            right = mid - 1\n\n    # Return the last_index variable\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and a target element as input and returns the last position of the target element in the array.\n    \"\"\"\n\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Keep track of the position of the last occurrence of the target element\n    last_pos = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the mid element is equal to the target element, update last_pos and move the right pointer to the left\n        if arr[mid] == x:\n            last_pos = mid\n            right = mid - 1\n        # If the mid element is greater than the target element, move the right pointer to the left\n        elif arr[mid] < x:\n            left = mid + 1\n        # If the mid element is less than the target element, move the left pointer to the right\n        else:\n            right = mid - 1\n\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the first element greater than or equal to x in the array\n    i = 0\n    while i < len(arr) and arr[i] < x:\n        i += 1\n    # Check if x is present in the array\n    if arr[i] == x:\n        # Find the last element of the array greater than or equal to x\n        j = i\n        while j < len(arr) and arr[j] == x:\n            j += 1\n        # Return the index of the last element\n        return j-1\n    else:\n        # If x is not present in the array, return -1\n        return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = re.compile(r'a.*b')\n\n    matches = pattern.findall(text)\n\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<![a-z])a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*?b')\n    match = pattern.match(text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for key, value in dict.items():\n        sum_ += value\n    return sum_"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # Check if n is a valid input number\n    if not isinstance(n, int) or n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return None\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through all odd natural numbers within the range [1, n]\n    for i in range(1, n+1, 2):\n        sum += i\n\n    # Return the sum of all odd natural numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the lower and upper limit of the range: \").split())\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a natural number n and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    # initialize sum to 0\n    total = 0\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # if i is odd, add it to total\n        if i % 2!= 0:\n            total += i\n    # return total\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # defining the range of numbers to be checked\n    l = 1\n    r = n\n    \n    # initializing the sum variable to 0\n    sum = 0\n    \n    # looping through the range of numbers\n    while l <= r:\n        # checking if the number is odd\n        if l % 2!= 0:\n            # adding the number to the sum\n            sum += l\n        # incrementing the loop counter\n        l += 1\n    \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    This function takes in an array and returns the sum of all its elements.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all the elements in the array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for i in arr:  \n        sum += i  \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert integer to binary string\n    binary_str = bin(n)[2:]\n    # calculate length of binary string\n    len_binary = len(binary_str)\n    # calculate position of least significant bit\n    lsb = len_binary - 1 - binary_str.index('1')\n    # calculate new least significant bit position\n    new_lsb = lsb - d\n    # calculate new binary string with new least significant bit position\n    new_binary_str = binary_str[:new_lsb] + binary_str[new_lsb:]\n    # convert new binary string to integer\n    new_int = int(new_binary_str, 2)\n    # return new integer\n    return new_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    n = n & mask\n    \n    for i in range(d):\n        carry = (n & 0x80000000) >> 31\n        n = (n << 1) | carry\n        \n    n = n & mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert n to binary\n    binary_number = bin(n)[2:]\n\n    # Append d zeros to the left of the binary number\n    zeros = \"0\" * d\n    binary_number = zeros + binary_number\n\n    # Convert the binary number back to decimal\n    rotated_number = int(binary_number, 2)\n\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary_n = bin(n)[2:]\n\n    # Calculate the number of bits to rotate\n    rotate_bits = len(binary_n) - d\n\n    # Calculate the number to rotate\n    rotate_number = int(binary_n[-d:], 2)\n\n    # Calculate the new number\n    new_number = (rotate_number << rotate_bits) + (binary_n[:-rotate_bits] if d > 0 else binary_n)\n\n    # Convert the new number to decimal\n    new_n = int(new_number, 2)\n\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # convert the given number to binary representation\n    num_binary = bin(n)[2:]\n\n    # add zeros to the left until the length of binary representation is equal to d bits\n    num_binary = '0'*(d-len(num_binary)) + num_binary\n\n    # convert the binary representation back to decimal number\n    num_decimal = int(num_binary, 2)\n\n    # rotate the decimal number left by d bits and return the result\n    return num_decimal"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Extract the last d bits\n    msk = 0xffffffff << (32 - d)\n    bits = n & msk\n    # Shift the bits and set the most significant bit\n    new_bits = (bits << d) | ((n & (0xffffffff >> d)) >> (32 - d))\n    # Return the rotated bits\n    return new_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    num_bits = 32\n    num_rotations = d % num_bits\n    # Calculate the number of left shift bits\n    shift_bits = (num_rotations % num_bits) * 2\n    # Calculate the number of right shift bits\n    right_shift_bits = (num_rotations // num_bits) * 2\n    # Calculate the new value\n    new_value = (n << shift_bits) | (n >> right_shift_bits)\n    # Return the new value\n    return new_value"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary string\n    binary_str = bin(n)[2:]\n    \n    # Calculate the number of bits to shift left\n    shift_bits = d % 32\n    \n    # Calculate the number of bits to shift right\n    shift_bits_right = 32 - shift_bits\n    \n    # Create the new binary string\n    new_binary_str = (shift_bits_right * '0') + binary_str[shift_bits:]\n    \n    # Convert the new binary string back to an integer\n    new_n = int(new_binary_str, 2)\n    \n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # rotate left d bits\n    n = n << d\n    # shift n to the right by 32-d bits\n    n = n >> (32 - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary and get its length\n    n_bin = bin(n)[2:]\n    n_len = len(n_bin)\n\n    # Calculate the number of left rotations required\n    rotations = d % n_len\n\n    # Calculate the shifted binary number\n    shifted_bin = n_bin[rotations:] + n_bin[:rotations]\n\n    # Convert the shifted binary number back to an integer\n    shifted = int(shifted_bin, 2)\n\n    return shifted"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n\n    Args:\n    text: str - The string to be processed.\n\n    Returns:\n    str - The processed string.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all spaces from a string.\n\n    :param text: The string from which all whitespaces should be removed.\n    :type text: str\n    :return: The string with all whitespaces removed.\n    :rtype: str\n    \"\"\"\n    return re.sub(' +','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given text string.\n    '''\n    # use the regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    This function takes three integer values as input and returns the number of times the values are equal.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y:\n            count += 1\n        if x == z:\n            count += 1\n        if y == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == x == z:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and x == z or y == x and y == z or z == x and z == y:\n        count += 1\n    if y == x and y == z or z == x and z == y:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the count of rotations to zero\n    count = 0\n    # Find the minimum and maximum elements of the array\n    min_element = arr[0]\n    max_element = arr[-1]\n    # Loop through the array\n    for i in range(n):\n        # If the element is greater than the minimum element, increment the count of rotations\n        if arr[i] > min_element:\n            count += 1\n        # If the element is less than the maximum element, update the minimum element\n        if arr[i] < max_element:\n            min_element = arr[i]\n        # If the element is greater than the maximum element, decrement the count of rotations\n        if arr[i] < max_element:\n            count -= 1\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # If the array is already sorted, no rotation is required.\n    if arr == sorted(arr):\n        return 0\n\n    # The array is not sorted. Find the position where the array becomes sorted.\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            return i\n\n    # If the array is not rotated, the position where it becomes sorted is n.\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # If the array is already sorted in reverse, the number of rotations will be n\n    if arr == sorted(arr, reverse=True):\n        return n\n    # Find the pivot element\n    pivot = arr[n//2]\n    # Count the number of rotations required to generate the sorted array\n    count = 0\n    # Iterate through the array and swap elements if they are not in the correct order\n    for i in range(n):\n        if arr[i] > pivot:\n            arr[i], arr[count] = arr[count], arr[i]\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n\n    # Check if array is already sorted or not\n    if arr == sorted(arr):\n        return 0\n\n    # Check if array has only one element\n    if n == 1:\n        return 0\n\n    # Initialize counter for rotations\n    count = 0\n\n    # Traverse through the array\n    for i in range(n):\n\n        # If current element is greater than next element, count the rotation\n        if arr[i] > arr[i+1]:\n            count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Create a set of all rotations of the array\n    rot_set = set()\n    for i in range(n):\n        for j in range(i, n):\n            rot_set.add(tuple(arr[i:j+1]))\n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        count += len(rot_set - {tuple(arr[i:])})\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the count of rotations required to generate the array.\n    \"\"\"\n\n    # Initialize two pointers, one starting from the beginning of the array and the other from the end of the array.\n    i = 0\n    j = len(arr) - 1\n\n    # Initialize a variable to store the count of rotations required.\n    count = 0\n\n    # Loop until the pointers meet.\n    while i < j:\n\n        # If the element pointed by the i-th pointer is greater than the element pointed by the j-th pointer,\n        # it means the array has been rotated. Increment the count and move the pointers towards each other.\n        if arr[i] > arr[j]:\n            count += 1\n            i += 1\n            j -= 1\n\n        # If the element pointed by the j-th pointer is greater than the element pointed by the i-th pointer,\n        # it means the array has been rotated. Increment the count and move the pointers towards each other.\n        elif arr[j] > arr[i]:\n            count += 1\n            i += 1\n            j -= 1\n\n        # If the element pointed by the i-th pointer is equal to the element pointed by the j-th pointer,\n        # it means the array has not been rotated. Move the pointers towards each other.\n        else:\n            i += 1\n            j -= 1\n\n    # Return the count of rotations required.\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # initialize the count of rotations as 0\n    count = 0\n    # loop through all possible rotations of the array\n    for i in range(n):\n        # if the array is already sorted, exit the loop\n        if i == 0 or arr[i] >= arr[i-1]:\n            continue\n        # rotate the array by 1 element to the left\n        arr[i], arr[0] = arr[0], arr[i]\n        count += 1\n        # check if the rotated array is sorted\n        if i == n-1 or arr[i] >= arr[i+1]:\n            continue\n        # rotate the array by 1 element to the right\n        arr[i], arr[n-1] = arr[n-1], arr[i]\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i > 0 and arr[i] < arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Count number of inversions\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - i - j - 1\n                # Stop if all elements are sorted\n                if i == j:\n                    break\n    # Return count of rotations\n    return inv_count // 2"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # get the maximum and minimum elements in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    # check if the array is already sorted\n    if max_val == min_val:\n        return 0\n    # initialize a variable to count the number of rotations\n    count = 0\n    # loop through the array and check if the minimum element is greater than the next element\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            # if yes, increment the count\n            count += 1\n            # shift all the elements one position to the right\n            for j in range(n-1):\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    # return the count of rotations\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if the given number is less than 1\n    if n < 1:\n        return False\n\n    # Initialize the variable to store the square root\n    square_root = 0\n\n    # Calculate the square root\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            square_root = i\n            break\n\n    # Check if the square root is equal to the square of the given number\n    if square_root == int(n**0.5) and square_root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Compute the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, else False.\n    \"\"\"\n    # Helper function to check whether a number is a perfect square or not\n    def is_square(num):\n        \"\"\"\n        Returns True if the given number is a perfect square, else False.\n        \"\"\"\n        if num == 0 or num == 1:\n            return True\n        i = 1\n        while i*i <= num:\n            if num % i:\n                return False\n            num //= i\n        return num == 1\n\n    # Check if the given number is a perfect square using the helper function\n    return is_square(n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    A perfect square is a number that is the square of an integer.\n    \"\"\"\n    x = 0\n    y = n\n    while y!= 0:\n        x += 1\n        y = y - x\n    return x == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if the given number is less than or equal to 0\n    if n <= 0:\n        return False\n    # check if the given number is 1\n    elif n == 1:\n        return True\n    # check if the given number is a perfect square\n    else:\n        # find the square root of the given number\n        sqrt_n = n ** 0.5\n        # check if the square root is an integer\n        if sqrt_n.is_integer():\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # function to check if a number is a perfect square or not\n    def isPerfectSquare(num):\n        # calculate square root of the given number\n        root = (float(num) + 1) ** 0.5\n        # check if the square root is an integer\n        if root.is_integer():\n            return True\n        else:\n            return False\n\n    # check if the given number is a perfect square\n    if isPerfectSquare(n):\n        print(\"The given number is a perfect square.\")\n    else:\n        print(\"The given number is not a perfect square.\")"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # sqrt() function is used to find the square root of a number\n    sqrt_n = int(n ** 0.5)\n    # we check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    a, b = 1, n\n    while a * a <= n:\n        a += 1\n    while b * b > n:\n        b -= 1\n    return b * b == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(product, \"is an even product\")\n    else:\n        print(product, \"is an odd product\")\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        print(\"The product of numbers in the list is even.\")\n    else:\n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for l in lists:\n        sum_l = sum(l)\n        if sum_l > max_sum:\n            max_sum = sum_l\n            max_list = l\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and its corresponding list\n    max_sum = float('-inf')\n    max_list = []\n    # Iterate over the lists in the given list of lists\n    for i in range(len(lists)):\n        # Calculate the sum of the current list\n        current_sum = sum(lists[i])\n        # Check if the sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum and its corresponding list\n            max_sum = current_sum\n            max_list = lists[i]\n    # Return the maximum sum and its corresponding list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if lst[0] > max_sum:\n            max_sum = lst[0]\n            max_list = [lst[0]]\n        elif lst[0] == max_sum:\n            max_list.append(lst[0])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst.sort(reverse=True)\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the current max sum and the list with the max sum\n    current_max = float('-inf')\n    current_list = []\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n        # Update the current max sum if necessary\n        if sublist_sum > current_max:\n            current_max = sublist_sum\n            current_list = sublist\n    # Return the list with the highest sum\n    return current_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sub_list = [lists[i][j]]\n            while j < len(lists[i]) - 1:\n                sub_list.append(lists[i][j+1])\n                j += 1\n            sub_sum = sum(sub_list)\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n                max_list = sub_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize maximum sum to negative infinity\n    max_sum = -float('inf')\n\n    # Loop through all possible combinations of lists in the input list\n    for i in range(len(lists)):\n        for j in range(i, len(lists)):\n            # Combine the two lists and calculate the sum\n            combined_list = lists[i] + lists[j]\n            combined_sum = sum(combined_list)\n            # Update the maximum sum if the new combination is greater\n            if combined_sum > max_sum:\n                max_sum = combined_sum\n                # Return the combined list as the result\n                return [combined_list]\n\n    # If no combination has been found with a sum greater than the maximum sum, return an empty list\n    return []"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the maximum sum among all lists\n    max_sum = max([sum(i) for sublist in lists for i in sublist])\n    # Return the list whose sum is the maximum\n    return [sublist for sublist in lists if sum(sublist) == max_sum]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            total = sum(lists[i][k] + lists[k][j] for k in range(len(lists)))\n            if total > max_sum:\n                max_sum = total\n                max_list = [[lists[i][k], lists[k][j]] for k in range(len(lists))]\n\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    prev_uppercase = False\n    for char in test_str:\n        if char.isupper():\n            if prev_uppercase:\n                max_run += 1\n            prev_uppercase = True\n        else:\n            prev_uppercase = False\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of current run of uppercase characters\n    max_run = 0\n    current_run = 0\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase, reset the current run to 0\n        else:\n            current_run = 0\n\n        # If the current run is greater than the maximum run so far, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n\n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    start_index = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper() and not test_str[i].isspace():\n            run_length += 1\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                max_run = test_str[start_index:start_index+run_length]\n                if max_run_length < run_length:\n                    max_run_length = run_length\n                    max_run_start = start_index\n                run_length = 0\n        else:\n            run_length = 0\n            start_index = i+1\n\n    return max_run_start, max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    prev_char = ''\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run count\n        if char.isupper():\n            curr_run += 1\n        else:\n            # If the current character is not uppercase and the current run count is greater than the maximum run count, update the maximum run count\n            if curr_run > max_run:\n                max_run = curr_run\n            \n            # Reset the current run count to 0\n            curr_run = 0\n        \n        # Keep track of the previous character\n        prev_char = char\n    \n    # If the last character was uppercase, increment the current run count\n    if prev_char.isupper():\n        curr_run += 1\n    \n    # If the current run count is greater than the maximum run count, update the maximum run count\n    if curr_run > max_run:\n        max_run = curr_run\n    \n    # Return the maximum run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    count = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_run:\n                max_run = count\n                start = i\n        else:\n            count = 0\n    return max_run, start\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    uppercase = False\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 1\n        if current_run > max_run:\n            max_run = current_run\n            uppercase = True\n    return max_run if uppercase else 0"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables for maximum run and its start index\n    max_run = 0\n    start = 0\n    \n    # loop through each character in the string\n    for i in range(1, len(test_str)):\n        # if the character is uppercase and the previous character was not uppercase\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            # increment the maximum run and update the start index if necessary\n            max_run += 1\n            if max_run > max_run:\n                start = i - max_run + 1\n    \n    # return the maximum run and its start index\n    return max_run, start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    run = 0\n\n    # Loop through each character in the string\n    for char in test_str:\n\n        # If the character is uppercase and we are not in the middle of a run, update the run count and the maximum run count so far\n        if char.isupper() and run == 0:\n            run += 1\n            max_run = run\n\n        # If the character is not uppercase and we are in a run, update the run count and the maximum run count so far\n        elif not char.isupper() and run > 0:\n            run = 0\n\n        # If the character is not uppercase and we are not in a run, do nothing\n\n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Initialize an odd variable to store the first odd number\n    first_odd = None\n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is odd and not already assigned to the first_odd variable, set it as the first odd number\n        if num % 2!= 0 and (first_odd is None or num < first_odd):\n            first_odd = num\n    # Return the first odd number if it exists, otherwise return None\n    return first_odd"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as an argument and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n    \"\"\"\n    k_found = False\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            k_found = True\n            break\n    return k_found"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            k_count += 1\n    if k_count >= len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    for i, t in enumerate(test_tup):\n        if len(t) > K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n    test_tup: A list of tuples.\n    K: An integer.\n\n    Returns:\n    A boolean value indicating if the given tuples contain the k or not.\n    \"\"\"\n    if any(tup in test_tup for tup in K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a test tuple and a K value and returns True if the K appears in the tuple and False otherwise.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of strings and an integer K as input, and returns a boolean value indicating whether the K is present in the tuple or not.\n    '''\n\n    # Loop through each element in the tuple and check if it matches the K\n    for element in test_tup:\n        if element == K:\n            return True\n    # If we've made it through the loop without finding the K, return False\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are of different lengths.\"\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"False\"\n\n    return \"True\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through the tuples and compare their elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    # If all elements are smaller, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # loop through each element in test_tup2\n    for i in range(len(test_tup2)):\n        # check if the element in test_tup2 is smaller than the element in test_tup1 at index i\n        if test_tup2[i] < test_tup1[i]:\n            # if it is, return False, indicating that the second tuple is not smaller than the first tuple\n            return False\n    # if no elements in test_tup2 are smaller than their corresponding elements in test_tup1, return True, indicating that the second tuple is smaller than the first tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of both tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # iterate over the elements of the second tuple and compare them with the corresponding elements in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    # if the loop completes without returning False, all elements of the second tuple are smaller than their corresponding elements in the first tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the number of elements in the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # check if each element of the first tuple is smaller than its corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    # all elements in the first tuple are smaller than all elements in the second tuple\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]