[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Given two tuples, find the shared elements.\n\n    :param test_tup1: First tuple to compare.\n    :param test_tup2: Second tuple to compare.\n    :return: A set of the shared elements between the two tuples.\n    \"\"\"\n    shared_elements = set()\n    # Loop through the first tuple\n    for element in test_tup1:\n        # Check if the element is in the second tuple\n        if element in test_tup2:\n            # If it is, add it to the shared elements set\n            shared_elements.add(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup1[i] not in common_list:\n            common_list.append(test_tup1[i])\n    return common_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    shared_list = list(shared_set)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = set1.intersection(set2)\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number n as input and returns True if it's a prime number,\n    otherwise False.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n < 9:\n        return True\n    elif n % 5 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2 (i.e. it is not prime)\n    if n < 2:\n        return True\n    \n    # check if n is divisible by any number between 2 and sqrt(n) (inclusive)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # if we make it through the loop without finding a divisor, then n is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number,\n    and False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Returns True if n is not a prime number, and False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap with the first n elements of the list\n    heap = [nums[0]]\n    for i in range(1,n):\n        heap.append(hq.heappushpop(heap, -nums[i]))\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap of size n from the first n numbers in the list\n    hq.heapify(nums[:n])\n\n    # Pop the max element from the heap and append it to the result list\n    result = [hq.heappop(nums) for _ in range(n)]\n\n    # Build the max heap by adding the remaining numbers to the heap\n    hq.heapify(nums)\n\n    # Reverse the result list to get the n largest numbers in descending order\n    result.reverse()\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Convert the list to a min heap\n    heap = nums\n    for i in range(len(heap)//2):\n        hq.heappop(heap)\n\n    # Extract the largest n elements from the heap\n    for i in range(n):\n        yield hq.heappop(heap)\n\n    # Extract the remaining elements from the heap\n    while heap:\n        yield hq.heappop(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min-heap of size n\n    min_heap = []\n    for num in nums:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        elif num > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n    \n    # Return the n largest integers from the min-heap\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a max heap\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, num)\n    # Extract and return the n largest integers from the max heap\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(heapq.heappop(max_heap))\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap and get the first n elements\n    heap = list(nums[:n])\n    hq.heapify(heap)\n    # Remove the first element from the heap and add it to the result list\n    result = [hq.heappop(heap)]\n    # Add the remaining elements in descending order to the result list\n    for num in nums[n:]:\n        if num > hq.heappop(heap):\n            hq.heappush(heap, num)\n        else:\n            hq.heappush(heap, hq.heappop(heap))\n            hq.heappush(heap, num)\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Use a min heap to store the first n largest integers\n    hq.heapify(nums[:n])\n    # Extract the n largest integers from the heap and return them in descending order\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Build a min heap of the first n elements of the list\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # Extract the largest n elements from the heap and return them in descending order\n    largest = []\n    while len(largest) < n:\n        largest.append(hq.heappop(heap))\n    \n    return largest[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return hq.nlargest(n, nums)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the given number to binary format\n    binary_str = bin(x)[2:]\n    # Calculate the number of set bits in binary format\n    num_set_bits = binary_str.count('1')\n    # If the number of set bits is only one, then the two numbers differ at one bit position only\n    if num_set_bits == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if x is a power of 2\n    while x & (x-1)!= 0:\n        x &= x-1\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0:\n        x &= x - 1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check if x is a power of two\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0: \n        return True \n    elif x & (x - 1) == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    if x == 0:\n        return True\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    if x & (x - 1) == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    pattern = r'\\b\\w{4,}\\b'  # matches any word that is at least 4 characters long\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter out words which are less than 4 characters long\n    filtered_words = filter(lambda word: len(word) >= 4, words)\n    # convert the filtered words back to a list\n    final_words = list(filtered_words)\n    return final_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern for words containing at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of words with at least 4 characters\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b' # \\b matches word boundary and \\w+ matches one or more word characters\n    matches = re.findall(pattern, text) # find all matches of the pattern in the text\n    result = []\n    for match in matches:\n        if len(match) >= 4: # check if the length of the match is at least 4\n            result.append(match) # if it is, append it to the result list\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Print all the words which are at least 4 characters long\n    print(words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter words which are at least 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n\n    return filtered_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Find the length of the string\n    n = len(str)\n    # Initialize the minimum number of rotations to 0\n    min_rot = 0\n    # Initialize the dictionary to store the frequency of each character in the string\n    freq = {}\n    # Initialize the list to store the character with the highest frequency\n    max_freq_char = []\n    \n    # Count the frequency of each character in the string\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Find the character with the highest frequency\n    max_freq = max(freq.values())\n    for char, count in freq.items():\n        if count == max_freq:\n            max_freq_char.append(char)\n    \n    # Initialize the dictionary to store the frequency of each character after rotating it\n    freq_rot = {}\n    # Initialize the list to store the character with the highest frequency after rotating it\n    max_freq_char_rot = []\n    \n    # Iterate through the maximum frequency characters and rotate them to get the frequency after rotating it\n    for char in max_freq_char:\n        # Initialize the frequency of the character after rotating it to 0\n        freq_rot[char] = 0\n        # Initialize the list to store the character with the highest frequency after rotating it\n        max_freq_char_rot = []\n        # Initialize the variable to keep track of the current character being rotated\n        current_char = char\n        # Initialize the variable to keep track of the current rotation\n        current_rot = 0\n        # Initialize the variable to keep track of the frequency of the character after rotating it\n        freq_rot_char = 0\n        # Initialize the variable to keep track of the character with the highest frequency after rotating it\n        max_freq_char_rot_char = \"\"\n        \n        # Rotate the current character to get the frequency after rotating it\n        for i in range(n):\n            # Check if the current character is equal to the maximum frequency character\n            if current_char == char:\n                # Increment the frequency of the character after rotating it by 1\n                freq_rot_char += 1\n                # Check if the frequency of the character after rotating it is greater than the frequency of the character with the highest frequency after rotating it\n                if freq_rot_char > freq_rot[max_freq_char_rot_char]:\n                    max_freq_char_rot_char = current_char\n            # Rotate the current character to the next character in the string\n            current_char = str[(str.index(current_char) + 1) % n]\n            # Increment the current rotation\n            current_rot += 1\n        \n        # Update the frequency of the maximum frequency character after rotating it\n        freq_rot[max_freq_char_rot_char] = freq_rot_char\n        # Update the maximum frequency character after rotating it\n        max_freq_char_rot.append(max_freq_char_rot_char)\n    \n    # Check if the frequency of each character after rotating it is equal to the frequency of each character in the string\n    for i in range(n):\n        for char in str:\n            if freq_rot[char]!= freq[char]:\n                return -1\n    \n    # Check if the maximum frequency character after rotating it is equal to the character with the highest frequency in the string\n    if max_freq_char_rot[0]!= max_freq_char[0]:\n        return -1\n    \n    # Return the minimum number of rotations required to get the same string\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # base case: if the string is empty or has only one character, return 0\n    if len(str) <= 1:\n        return 0\n    # recursive case: if the string has at least 2 characters, find the minimum number of rotations required for each substring\n    else:\n        # find the minimum number of rotations required for the first half of the string\n        first_half_rotations = find_Rotations(str[:len(str)//2])\n        # find the minimum number of rotations required for the second half of the string\n        second_half_rotations = find_Rotations(str[len(str)//2:])\n        # find the minimum number of rotations required to get the same string as the first half and the second half\n        same_string_rotations = 0\n        for i in range(len(str)//2):\n            if str[i] == str[-1-i]:\n                same_string_rotations += 1\n        # return the minimum of the two rotations and the same string rotations\n        return min(first_half_rotations + second_half_rotations, same_string_rotations)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    for i in range(n-1):\n        if str[i] == str[n-i-1]:\n            count += 1\n            if count == n:\n                return count\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Find the number of rotations required to get the same string by adding the number of characters to itself\n    rotations = 0\n    for i in range(n):\n        rotations += str[i]\n    \n    # Check if there are any odd rotations\n    if rotations % 2 == 1:\n        rotations -= n // 2\n        for i in range(n // 2):\n            rotations += n - i\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    n = len(str)\n    # Initialize minimum number of rotations to infinity\n    min_rotations = float('inf')\n    \n    # Iterate through all possible rotations of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            \n            # Check if the sub-strings are equal\n            if str[i:j] == str[j:i]:\n                # Calculate the number of rotations required to get the same string\n                rotations = (j-i)//2 + 1\n                # Update the minimum number of rotations if necessary\n                if rotations < min_rotations:\n                    min_rotations = rotations\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) <= 1: \n        return 0\n\n    # Find the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Calculate the frequency of characters in the rotated string\n    rotated_freq = {}\n    for i in range(len(str)):\n        rotated_char = str[-i-1]\n        if rotated_char in rotated_freq:\n            rotated_freq[rotated_char] += 1\n        else:\n            rotated_freq[rotated_char] = 1\n\n    # Calculate the number of rotations required\n    rotation_count = 0\n    for i in range(26):\n        if freq[chr(ord('a')+i)] < rotated_freq[chr(ord('a')+i)]:\n            rotation_count += 1\n\n    return rotation_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    rotations = 0\n    \n    # Traverse all possible rotations of the string\n    for i in range(n): \n        # If the current character is same as the next character, there is no rotation\n        if str[i] == str[i+1]: \n            continue \n        # Otherwise, there is a rotation\n        else: \n            rotations += 1\n            # If the string is already equal to its rotated form, there is no rotation\n            if str == str[::-1]: \n                break\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    if len(str) == 0:\n        return 0\n    \n    # Find the length of the longest substring that contains all characters of str\n    n = len(str)\n    i = 0\n    max_len = 1\n    while i < n - 1:\n        j = i + 1\n        while j < n:\n            if str[i] not in str[j:]:\n                break\n            j += 1\n        if j - i > max_len:\n            max_len = j - i\n        i += 1\n    \n    # Find the length of the longest substring that contains all characters of str after rotations\n    max_len_rot = max_len\n    for k in range(max_len):\n        if k < max_len - 1:\n            max_len_rot += max_len - k - 1\n        else:\n            max_len_rot += 1\n    \n    # Calculate the minimum number of rotations required to get the same string\n    rotations = 0\n    for i in range(len(str)):\n        if str[i]!= str[(i + rotations) % n]:\n            rotations += max_len_rot - 1\n            if rotations == 0:\n                return 0\n            max_len_rot = max_len\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    min_rotations = float('inf')\n    for i in range(n):\n        # calculate the number of rotations required to make str[i:] the longest prefix of str[:i]\n        rotations = 0\n        while str[i:]!= str[:i][::-1]:\n            str = str[1:] + str[0]\n            rotations += 1\n        # update the minimum number of rotations found so far\n        min_rotations = min(min_rotations, rotations)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Create a list of tuples with the count and character\n    count_list = [(count, char) for char, count in char_count.items()]\n\n    # Sort the list of tuples in descending order of count\n    count_list.sort(reverse=True)\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Loop through the sorted list of tuples\n    for count, char in count_list:\n        # If the count is greater than 1, increment the minimum rotations count\n        if count > 1:\n            min_rotations += 1\n\n        # Check if the count is greater than 1 and if the character has a smaller count than the previous character\n        if count > 1 and char_count[char] < char_count[prev_char]:\n            # If the count is greater than 1 and the character has a smaller count than the previous character,\n            # decrement the count of the previous character and increment the count of the current character\n            char_count[prev_char] -= 1\n            char_count[char] += 1\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    # initialize variables\n    i = 0\n    j = len(s) - 1\n    \n    # loop through the string until the first occurrence of the character is found\n    while i < j and s[i]!= ch:\n        i += 1\n    \n    # check if the character was found\n    if i == j:\n        return s\n    \n    # loop through the string until the last occurrence of the character is found\n    while i < j and s[j]!= ch:\n        j -= 1\n    \n    # check if the character was found\n    if i == j:\n        return s\n    \n    # return the substring from the first occurrence to the last occurrence of the character\n    return s[:i] + s[i+1:j] + s[j+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return \"Character not found in the string.\"\n    else:\n        s = s.replace(ch, '')\n        s = s.strip()\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = s.find(ch)\n    while i!= -1: \n        s = s[:i] + s[i+1:] \n        i = s.find(ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    new_string = \"\"\n    for i in s: \n        if i!= ch: \n            new_string += i\n    return new_string"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize variables\n    first_occ = -1\n    last_occ = -1\n    # loop through the string and find the first and last occurrence of the character\n    for i in range(len(s)):\n        if s[i] == ch:\n            if first_occ == -1:\n                first_occ = i\n            last_occ = i\n    # check if there are any occurrences of the character\n    if first_occ == -1 and last_occ == -1:\n        return s\n    # remove the first and last occurrence of the character\n    s = s[:first_occ] + s[last_occ+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    # Remove first occurrence of character ch from string\n    s = s.replace(ch,'',1)\n    # Remove last occurrence of character ch from string\n    s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # If the string is empty or contains only one character, return an empty string\n    if len(s) < 2:\n        return \"\"\n    # If the character to remove is not found in the string, return the original string\n    if ch not in s:\n        return s\n    # Split the string into two parts, before and after the first occurrence of the character to remove\n    before, after = s.split(ch, 1)\n    # If there was only one occurrence of the character to remove, return the after part (i.e. the substring without the first and last characters)\n    if len(before) == 0:\n        return after\n    # If there were multiple occurrences of the character to remove, return the before part (i.e. the substring without the first character) and the after part (i.e. the substring without the last character)\n    else:\n        return before + after[1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    s = s.replace(ch, \"\")\n    s = s.strip()\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present in the string\n    if ch in s:\n        # split the string into list of characters\n        lst = list(s)\n        # loop through the list to remove the first and last occurrence of the character\n        for i in range(len(lst)):\n            if lst[i] == ch:\n                lst.pop(i)\n                if i == 0:\n                    lst.pop(0)\n                if i == len(lst)-1:\n                    lst.pop()\n        # join the list of characters into a string\n        s = ''.join(lst)\n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    index = s.index(ch)\n    s.pop(index)\n    index = s.index(ch)\n    s.pop(index)\n    return ''.join(s)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    # Sort each row of the matrix in ascending order\n    for i in range(len(M)):\n        M[i].sort()\n\n    # Compute the sum of each row\n    sums = [sum(row) for row in M]\n\n    # Sort the matrix by sum of rows\n    i = 0\n    while i < len(M) - 1:\n        if sums[i] > sums[i+1]:\n            M[i], M[i+1] = M[i+1], M[i]\n        i += 1\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Traverse each row and calculate the sum of its elements\n    for i in range(n):\n        row_sum = sum(M[i])\n        # If the sum is greater than 0, reverse the order of the row\n        if row_sum > 0:\n            M[i].reverse()\n    # Sort the rows based on their sum\n    for i in range(n):\n        for j in range(i+1, n):\n            # Swap rows if the sum of their elements is less than the sum of the row i\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        row_sum = sum(M[i])\n        for j in range(i+1, n):\n            if row_sum > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n                row_sum = sum(M[i])"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix\n    for row in M:\n        # Find the sum of the row\n        row_sum = sum(row)\n        # Create a temporary list to hold the row in ascending order\n        row_sorted = []\n        # Loop through each element of the row\n        for i in range(len(row)):\n            # If the element is smaller than the current smallest element, append it to the sorted list\n            if row[i] < row[row_sorted[-1]] or row_sorted == []:\n                row_sorted.append(i)\n        # Create a new list with the sorted row\n        M[M.index(row)] = row_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize a variable to store the sorted matrix\n    sorted_matrix = []\n\n    # iterate through each row in the matrix\n    for row in M:\n        # initialize a variable to store the current row's sum\n        current_sum = 0\n\n        # iterate through each element in the row\n        for element in row:\n            # add the element to the current sum\n            current_sum += element\n\n        # add the current row's sum to the sorted matrix\n        sorted_matrix.append(current_sum)\n\n    # sort the sorted matrix in ascending order\n    sorted_matrix.sort()\n\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Initialize variables\n    row_sums = [sum(row) for row in M]\n    sorted_indices = []\n\n    # Sort the row sums in descending order\n    row_sums.sort(reverse=True)\n\n    # Iterate through the matrix and add the indices of the elements with the largest row sums\n    for i, row in enumerate(M):\n        for j, _ in enumerate(row):\n            if i == len(M) - 1 or row_sums[i] < row_sums[i+1]:\n                sorted_indices.append((i, j))\n\n    # Sort the matrix based on the sorted indices\n    sorted_matrix = [list(row) for row in sorted([M[i][j] for i, j in sorted_indices])]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Calculate the sum of each row\n    for i in range(n):\n        row_sum = sum(M[i])\n        M[i].sort(reverse=True)\n        # Reconstruct the matrix in ascending order based on the row sums\n        for j in range(n):\n            M[i][j] = M[i][j] + row_sum\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # loop through each row of the matrix\n    for i in range(n):\n        # calculate the sum of the row\n        row_sum = sum(M[i])\n        # loop through each other row and swap the elements if necessary\n        for j in range(n):\n            if M[j][i] > row_sum:\n                M[j][i], M[i][j] = M[i][j], M[j][i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # sort the matrix in ascending order based on the row sums\n    sorted_matrix = [sorted(row) for row in M]\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3 # formula for volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \n    Parameters:\n    l (float): Length of the base of the triangular prism.\n    b (float): Length of the height of the triangular prism.\n    h (float): Length of the width of the triangular prism.\n    \n    Returns:\n    float: Volume of the triangular prism.\n    \"\"\"\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h # calculate the volume using formula V = 1/2 (l x b x h)\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = 0.5 * l * b * h # Calculate the volume using Heron's formula\n    \n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    \"\"\"\n    This function takes the length, width and height of a triangular prism as arguments and returns the volume of the prism.\n    \"\"\"\n    V = 1/3 * l * b * h # formula for volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate volume\n    V = (1/3)*l*b*h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<=\\w)(?=[a-z])|_(?=\\w)\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'^(?=.*[a-z])(?=.*_)[a-z]+_+$'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![_a-z])[a-z]+(?=[_a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<=[a-z])([a-z])\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<=[a-z])[A-Z](?=[a-z])|_(?=[a-z])\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'\\b[a-z]*_[a-z]*\\b'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]*_[a-z]*$'\n    match = re.match(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z](?=[a-z]|$)'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    elif len(matches) == len(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=\\w)([a-z])(?=\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z][a-z0-9_]*[a-z]$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a  # the formula for the perimeter of a square is 4a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Remove characters present in the second string from the first string\n    for char in string:\n        if char in char_list:\n            char_list.remove(char)\n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate through the list of characters\n    for char in char_list:\n        # If the character is not present in the second string, append it to the result string\n        if char not in string:\n            result += char\n\n    # Return the result string\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = list(string)\n    for char in string:\n        if char in list_string:\n            list_string.remove(char)\n    return ''.join(list_string)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    set1 = set(string)\n    set2 = set(string)\n    for i in range(NO_OF_CHARS):\n        set2.remove(chr(i))\n    return list(set1 - set2)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the first string to a list of integers\n    char_list = [ord(char) for char in string]\n    \n    # Sort the characters in the list in alphabetical order\n    char_list.sort()\n    \n    # Create an empty list to store the characters to remove\n    char_to_remove = []\n    \n    # Iterate through the characters in the list\n    for i in range(1, NO_OF_CHARS):\n        # If the character is not already in the second string and is the smallest one, append it to the list to remove\n        if char_list[0]!= i and char_list[0] not in char_to_remove and char_list[0] < char_list[1]:\n            char_to_remove.append(char_list[0])\n    \n    # Remove the characters from the first string using the list of characters to remove\n    for char in char_to_remove:\n        string = string.replace(char, '')\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n\n    new_string = ''.join(char_list)\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a new string where all the characters present in the second string are removed from the first string.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Convert the second string to a set to remove duplicates\n    char_set = set(string)\n\n    # Remove the characters from the first string which are present in the second string\n    for char in char_list:\n        if char in char_set:\n            char_list.remove(char)\n\n    # Convert the list of characters back to a string\n    result_str = ''.join(char_list)\n\n    return result_str"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(string)\n\n    # Create a set of characters to be removed\n    char_set = set(string)\n\n    # Iterate over the list of characters\n    for i in range(NO_OF_CHARS):\n        # Check if the current character is in the set of characters to be removed\n        if i in char_set:\n            # Remove the current character from the list of characters\n            str_list.remove(chr(i))\n\n    # Convert the list of characters back to a string\n    result = ''.join(str_list)\n\n    # Return the modified string\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    chars = [chr(i) for i in range(NO_OF_CHARS)]\n    list_string = list(string)\n    for char in chars:\n        if char in list_string:\n            list_string.remove(char)\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters that are present in the second string\n    set_chars = set(string)\n\n    # Create a list of characters that are not present in the second string\n    list_chars = [chr(i) for i in range(NO_OF_CHARS) if i not in set_chars]\n\n    # Remove the characters present in the first string from the list of characters\n    list_chars = [char for char in list_chars if char not in string]\n\n    return list_chars"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Initialize an empty set to store the unique elements\n    unique_set = set()\n    \n    # Loop through the array of integers and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n        \n    # Check if there are any duplicate elements in the set\n    if len(unique_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements of the array\n    dict_nums = {}\n\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, the function returns True\n        if num in dict_nums:\n            return True\n        # If the element is not in the dictionary, add it to the dictionary with a value of True\n        else:\n            dict_nums[num] = True\n\n    # If no duplicate elements are found, the function returns False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # initialize an empty dictionary to store the indices of each element in the array\n    indices = {}\n\n    # loop through each element in the array\n    for index, num in enumerate(arraynums):\n        # check if the element exists in the indices dictionary\n        if num in indices:\n            # if it does, return True since the array contains a duplicate element\n            return True\n        # if the element does not exist in the indices dictionary, add it with its index\n        else:\n            indices[num] = index\n\n    # if all elements in the array have been checked and no duplicates have been found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique = True\n    seen = {}\n\n    for num in arraynums:\n        if num in seen:\n            unique = False\n            break\n        else:\n            seen[num] = True\n\n    return unique"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        else:\n            hashmap[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store the unique numbers\n    unique_nums = set()\n    # Loop through the array and check if the current number is already in the set\n    for num in arraynums:\n        if num in unique_nums:\n            return True\n        else:\n            unique_nums.add(num)\n    # If no duplicate numbers are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique_nums = set(arraynums)\n    return len(arraynums)!= len(unique_nums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        hashmap[num] = True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n\n    # check if the number is divisible by 11\n    if x % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(3, x+1, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n\n    # Define a list of possible values for x\n    values = [1, 2, 3, 5, 8, 13, 21, 34]\n\n    # Check if x is in the list\n    if x in values:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return \"The number is not a woodball\"\n    elif x % 5 == 0 and x % 7 == 0:\n        return \"The number is a woodball\"\n    else:\n        return \"The number is not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Define the base case for the recursive function\n    if x < 1:\n        return False\n\n    # Define the recursive case for the function\n    return is_woodall(x - 1) or x == 2"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 7 or x == 11: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the range of possible outcomes for a number to be a woodball\n    woodball_range = (1, 5)\n\n    # Check if the given number falls within the woodball range\n    if x in woodball_range:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num % 2 == 1 and num < 2 * rev(num // 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Reverse the number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # Check if the original number is one less than twice its reverse\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    return (reverse_num * 2) == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num_str = str(num)\n    # Initialize two variables to store the reversed number and the number of digits in the reversed number\n    rev_num = 0\n    rev_num_digits = 0\n    # Loop through each digit in the string and add it to the reversed number and increment the number of digits\n    for digit in num_str:\n        rev_num += int(digit)\n        rev_num_digits += 1\n    # Check if the reversed number is one less than twice the original number\n    if rev_num == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    rev_num = 0\n    temp = num\n\n    while temp!= 0:\n        rev_num = rev_num*10 + temp % 10\n        temp = temp//10\n\n    if (num + 1) < 2 * rev_num:\n        print(num, \"is one less than twice its reverse\")\n    else:\n        print(num, \"is not one less than twice its reverse\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num % 2 == 0 and abs(int(str(num)[::-1]) - num - 1) < 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    # calculate the reverse of the number\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp = temp // 10\n    # compare the number to the reverse of the number\n    return (num - 2 * rev_num) == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < int(str(num)[::-1]) * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n\n    # Convert the reversed number back to an integer\n    reversed_num = int(reversed_num)\n\n    # Check if the original number is one less than twice the reversed number\n    if num - 2 * reversed_num == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # Get the reverse of the number\n    reverse = str(num)[::-1]\n    # Convert the reverse to an integer and subtract 1\n    reverse_num = int(reverse) - 1\n    # Check if the original number is one less than twice the reverse\n    if reverse_num < num - num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    max_num = 0\n    for digit in arr:\n        max_num = max(max_num, int(digit))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # Base case: If the list is empty, return 0\n    if len(arr) == 0:\n        return 0\n\n    # Recursive case: If the list has only one element, return it\n    if len(arr) == 1:\n        return arr[0]\n\n    # Recursive case: Compare the first two digits and find the maximum\n    first_digit = arr[0]\n    second_digit = arr[1]\n    max_num = first_digit\n    if first_digit > second_digit:\n        max_num = second_digit\n\n    # Recursive case: Call the function with the rest of the list and update the max_num\n    rest_of_list = arr[2:]\n    max_num = max(max_num, find_Max_Num(rest_of_list))\n\n    # Return the maximum number\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    num = 0\n    for digit in arr:\n        num = num*10 + digit\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            dp[i][j] = arr[j]\n            for k in range(1, i):\n                if arr[j+k] > arr[j] and dp[i-k][j+k] > dp[i][j]:\n                    dp[i][j] = dp[i-k][j+k]\n    return max(dp[n][0:n], key=int)\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    n = len(arr)\n    # Initialize variables\n    max_num = 0\n    curr_num = 0\n    for i in range(n):\n        # If the current number is greater than max_num, update max_num and curr_num\n        if arr[i] > max_num:\n            max_num = arr[i]\n            curr_num = arr[i]\n        # If the current number is equal to max_num, add it to curr_num\n        elif arr[i] == max_num:\n            curr_num += arr[i]\n    # Add the last remaining digit to curr_num\n    curr_num += arr[-1]\n    # Return the final answer\n    return curr_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # create a list to store the largest number that can be formed with the given list of digits\n    max_num = []\n    \n    # loop through each number in the array\n    for num in arr:\n        # initialize a variable to store the current number\n        current_num = num\n        \n        # loop through each digit in the current number\n        for digit in str(num):\n            # if the current digit is less than the digit in the max_num, update the max_num with the current number\n            if int(digit) < int(max_num[-1]):\n                max_num.append(digit)\n                \n        # if the max_num is empty, return the current number\n        if not max_num:\n            return num\n        \n        # update the max_num with the current number\n        max_num = []\n        \n        # append the current number to the max_num\n        max_num.append(current_num)\n    \n    # if the loop completes without finding a max_num, return None\n    return None"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n\n    # Initialize variables to store the maximum number and its length\n    max_num = 0\n    max_length = 0\n\n    # Traverse through each digit in the list\n    for num in arr: \n\n        # Convert the digit to an integer and check if it is greater than the maximum number found so far\n        if int(num) > max_num: \n\n            # If it is greater, update the maximum number and its length\n            max_num = int(num)\n            max_length = len(str(num))\n\n    # Return the maximum number and its length\n    return max_num, max_length"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)-1, -1, -1):\n        max_num += arr[i] ** (len(arr)-i-1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    def max_sum(arr):\n        n = len(arr)\n        dp = [0] * n\n        dp[0] = arr[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n        return dp[n-1]\n\n    n = len(arr)\n    max_val = max_sum(arr)\n    return max_val\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    # Initialize the largest number as the first number in the array\n    largest_num = arr[0]\n\n    # Iterate through the array and compare each number to the current largest number\n    for num in arr:\n        if num > largest_num:\n            largest_num = num\n\n    # Return the largest number\n    return largest_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x == 0 and y == 0) or (x == 0 and y!= 0) or (x!= 0 and y == 0):\n        print(\"Both numbers have the same sign.\")\n    elif x < 0 and y < 0:\n        print(\"Both numbers have opposite signs.\")\n    elif x > 0 and y > 0:\n        print(\"Both numbers have opposite signs.\")\n    else:\n        print(\"One number has positive sign and the other has negative sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if the two numbers have opposite signs\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x == 0 or y == 0:\n        return \"Both numbers are zero.\"\n\n    if x > 0 and y < 0:\n        return \"The first number is positive and the second number is negative.\"\n\n    if x < 0 and y > 0:\n        return \"The first number is negative and the second number is positive.\"\n\n    if x > 0 and y == 0:\n        return \"The first number is positive and the second number is zero.\"\n\n    if x < 0 and y == 0:\n        return \"The first number is negative and the second number is zero.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    elif x == 0:\n        return \"The first number is zero.\"\n    elif y == 0:\n        return \"The second number is zero.\"\n    elif x > 0 and y < 0 or x < 0 and y > 0:\n        return \"The signs are opposite.\"\n    else:\n        return \"The signs are same.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return \"The two integers have opposite signs.\"\n    else:\n        return \"The two integers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x*y < 0: # If both x and y are negative, then they have opposite signs\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return (x * y) < 0"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # First, check if n is an integer.\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer.')\n\n    # Check if n is a valid integer.\n    if n < 0:\n        raise ValueError('n must be non-negative.')\n\n    # Check if n is a positive integer.\n    if n % 2 == 0:\n        raise ValueError('n must be a positive odd integer.')\n\n    # Initialize the sum variable.\n    octagonal_sum = 0\n\n    # Initialize the loop variables.\n    i = 1\n    j = 1\n\n    # Calculate the sum of the octagonal numbers.\n    while i * i + j * j <= n:\n        octagonal_sum += i * i + j * j\n\n        # If the sum is greater than n, stop the loop.\n        if octagonal_sum > n:\n            break\n\n        # Update the loop variables.\n        i += 1\n        j += 2\n\n    # Return the octagonal sum.\n    return octagonal_sum"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    def is_square(num):\n        root = int(num**0.5)\n        return root**2 == num\n\n    def is_pentagonal(num):\n        root = int(num**0.5)\n        return root**2 + num == num\n\n    if is_square(n) and is_pentagonal(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the base and the exponent for the formula\n    base = 1.0\n    exponent = 0\n    \n    # Find the nth octagonal number\n    while n > 0:\n        exponent += 1\n        n -= 1\n    \n    # Calculate the nth octagonal number using the formula\n    nth_octagonal = base ** exponent\n    \n    return nth_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) ** 2\n\nfor i in range(1, 20):\n    print(is_octagonal(i))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(i*(3**0.5)+1)\n    return octagonal_numbers"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n\n    a = 1\n    b = n\n    while a * a + b * b <= n:\n        if a * a + b * b == n:\n            return True\n        a += 1\n        b -= 1\n\n    return False\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    return 8 * n * n - 16 * n + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Define the formula for nth octagonal number\n    a = (n*(3*n - 1)) // 2\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 1, 1\n    while True:\n        if a*a + b*b == n:\n            return a*b\n        a += 1\n        b += 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_num = 1\n    for i in range(1, n + 1):\n        if i * (i + 1) * (2 * i + 1) == 8 * i * i + 16 * i + 4:\n            octagonal_num = i\n    return octagonal_num"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    substrings_count = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Loop through each character in the string starting from the current character\n        for j in range(i, len(s)):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j+1])\n            # If the sum of digits is equal to the length of the substring, increment the count\n            if substring_sum == len(s[i:j+1]):\n                substrings_count[substring_sum] += 1\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # create a dictionary to store the count of substrings with each digit sum\n    digit_count = defaultdict(int)\n    \n    # loop through the string and calculate the digit sum for each substring\n    for i in range(len(s)):\n        substring = s[i:i+len(str(len(s)))]\n        substring_sum = sum(int(d) for d in substring)\n        digit_count[substring_sum] += 1\n    \n    # return the count of substrings with the sum of digits equal to their length\n    return digit_count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            temp = ''.join(sorted(s[i:j+1]))\n            if sum(int(digit) for digit in temp) == len(temp):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    dp = [[0]*10 for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(10):\n            dp[i][j] = dp[i-1][j]\n            if j < 9:\n                dp[i][j] += dp[i-1][j+1]\n    for i in range(1, n+1):\n        for j in range(10):\n            if i-j >= 0:\n                count += dp[i][j]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int) # A dictionary to store the count of digits in each substring\n    \n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            digit_count[sum(int(d) for d in s[i:j])] += 1\n    \n    return sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                count[j-i+1] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the frequency of digits in each substring\n    freq = defaultdict(int)\n\n    # loop through each character in the string and update the frequency of digits\n    for char in s:\n        if char.isdigit():\n            freq[len(char)] += 1\n\n    # initialize the count variable to 0\n    count = 0\n\n    # loop through each substring of the string and check if the sum of digits is equal to its length\n    for i in range(1, len(s)+1):\n        for j in range(i, len(s)+1):\n            # get the substring by slicing the string\n            substring = s[j-i:j]\n\n            # check if the sum of digits is equal to its length\n            if sum(int(digit) for digit in substring) == i:\n                # increment the count variable if the substring is a valid substring\n                count += 1\n\n    # return the count of valid substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    substring_count = defaultdict(int)\n\n    # Loop through all substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring from the input string\n            substring = s[i:j]\n\n            # Calculate the sum of digits of the substring\n            substring_sum = sum(int(digit) for digit in substring)\n\n            # Add 1 to the count of substrings with the sum of digits equal to their length in the dictionary\n            substring_count[substring_sum] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(count for count in substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize a dictionary to store the count of substrings\n    count = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        \n        # Initialize the sum of digits of the current substring\n        substring_sum = 0\n        \n        # Loop through each character after the current character\n        for j in range(i+1, len(s)+1):\n            \n            # Get the substring from the current character to the end of the string\n            substring = s[i:j]\n            \n            # Calculate the sum of digits in the substring\n            substring_sum += sum(int(digit) for digit in substring)\n            \n            # If the substring has the sum of digits equal to its length, increment the count in the dictionary\n            if substring_sum == len(substring):\n                count[substring] += 1\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a defaultdict to store the count of substrings\n    substrings = defaultdict(int)\n\n    # Iterate over the characters in the string\n    for i in range(len(s)):\n        # Iterate over all possible starting positions of the substring\n        for j in range(i+1):\n            # Get the substring and calculate its sum of digits\n            substring = s[j:i+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            # Add the count of the substring to the defaultdict\n            substrings[digits_sum] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return sum(substrings[digit_sum] for digit_sum in substrings if len(digit_sum) == len(str(len(s))))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # Check if the list is empty\n    if not xs:\n        return None\n    # Initialize smallest number to the first element of the list\n    smallest = xs[0]\n    # Loop through the list and update smallest if a smaller number is found\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    # Return smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # initialize smallest number to the first element in the list\n    smallest = xs[0]\n    # loop through the rest of the list and update the smallest number if a smaller one is found\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    \n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples and returns the maximum difference between available pairs.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return \"List should contain at least two elements.\"\n    else:\n        max_diff = 0\n        for i in range(len(test_list)):\n            for j in range(i+1, len(test_list)):\n                if j < len(test_list)-1 and test_list[j+1][0]-test_list[j][0] > max_diff:\n                    max_diff = test_list[j+1][0]-test_list[j][0]\n        return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    pairs = list(zip(*test_list))\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            diff = pairs[i][1] - pairs[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) <= 1:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                max_diff = max(max_diff, test_list[i][1] - test_list[j][1])\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            diff = pairs[j][0] - pairs[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    if len(test_list) < 2:\n        return \"Error: List must have at least 2 elements.\"\n\n    test_list = sorted(test_list)\n    max_diff = test_list[1] - test_list[0]\n\n    for i in range(2, len(test_list)):\n        curr_diff = test_list[i] - test_list[i-1]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    if not test_list:\n        return \"The list is empty.\"\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    pairs = []\n\n    # Loop through each pair in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the values\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            # Update the maximum difference if it's greater than the current maximum\n            if diff > max_diff:\n                max_diff = diff\n                pairs = [(test_list[i][0], test_list[j][0]), (test_list[i][1], test_list[j][1])]\n\n    # Return the maximum difference and pairs\n    return max_diff, pairs"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples in ascending order based on the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    This function takes a list of tuples as input and returns a new list in which the tuples are sorted based on the second value of each tuple.\n    \"\"\"\n    # Sorting the list based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: sum the first element and call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\ndata_list = [1, [2, 3], 4, [5, [6, 7], 8], 9]\nflattened_list = recursive_list_sum(data_list)\nprint(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list, current_index=0, result=0):\n    if current_index == len(data_list):\n        return result\n    result += data_list[current_index]\n    return recursive_list_sum(data_list, current_index + 1, result)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list or list with one element\n    if len(data_list) == 0 or len(data_list) == 1:\n        return data_list\n    # Recursive case: concatenate the first element with the flattened rest of the list\n    else:\n        return [data_list[0]] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        '''\n        Helper function to flatten a list.\n        '''\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list, current_index=0, accumulator=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if current_index == len(data_list):\n        return accumulator\n    else:\n        return recursive_list_sum(data_list, current_index + 1, accumulator + data_list[current_index])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # if the input list is empty, return 0\n    if not data_list:\n        return 0\n    # if the input list contains only one element, return the value\n    elif len(data_list) == 1:\n        return data_list[0]\n    # if the input list contains more than one element, recursively flatten it and sum its elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n\n    # Recursive case: add the first element to the sum of the remaining elements\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return recursive_list_sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the Bell numbers\n    bell = [1] + [0] * (n - 1)\n\n    # Initialize the number of ways to partition\n    count = 1\n\n    # Find the number of ways to partition\n    for i in range(2, n + 1):\n        count *= i\n        count //= (i - bell[i - 1])\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_list = [0]*(n+1)\n    bell_list[0] = 1\n    bell_list[1] = 1\n    for i in range(2, n+1):\n        bell_list[i] = bell_list[i-1] + bell_list[i-2]\n    return bell_list[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the list of Bell numbers\n    bell_list = [1, 2, 5, 12, 25, 50, 125, 250, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000]\n    # Initialize the list of ways to partition the list\n    ways = [0] * (n + 1)\n    # Initialize the number of ways to partition the set of Bell numbers\n    count = 0\n    # Loop through the list of Bell numbers\n    for i in range(len(bell_list)):\n        # Loop through the list of Bell numbers again\n        for j in range(len(bell_list)):\n            # Check if the two Bell numbers are adjacent\n            if abs(bell_list[i] - bell_list[j]) == 1:\n                # Add the number of ways to partition the sublist to the total ways\n                count += ways[j]\n    # Return the total number of ways\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        bell_nums = [0]*(n+1)\n        bell_nums[1] = 1\n        bell_nums[2] = 2\n        for i in range(3, n+1):\n            for j in range(1, i//2+1):\n                if i%2 == 0:\n                    bell_nums[i] += bell_nums[j]*bell_nums[i-j]\n                else:\n                    bell_nums[i] += bell_nums[j]*bell_nums[i-j]*2\n        return bell_nums[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # Initialize a list to store the number of ways to partition the set\n    ways = [0] * (n + 1)\n    ways[1] = 1\n    ways[2] = 2\n\n    for i in range(3, n + 1):\n        # Use the formula for binomial coefficient to compute the number of ways to partition\n        ways[i] = ways[i - 1] + ways[i - 2]\n\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    # Calculate the number of Bell numbers for n\n    bell_numbers = [0] * (n+1)\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    for i in range(2, n+1):\n        bell_numbers[i] = 0\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i-j-1]\n\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, k):\n        if n < 0 or k < 0 or n < k:\n            return 0\n        elif n == 0:\n            return 1\n        elif n == k:\n            return 1\n        elif n > k:\n            return partition(n, n - k)\n        else:\n            return partition(n - 1, k)\n\n    return partition(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): The number of partitions to find.\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers with n partitions.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number(n // 2) * (bell_number(n // 2) + 1)\n    else:\n        return bell_number(n // 2) * (bell_number(n // 2) + 1) - bell_number(n // 2 - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    dp = [1] * (n+1)\n    # Calculate the first two terms of the series\n    dp[1] = 1\n    dp[2] = 2\n    # Loop through the series\n    for i in range(3, n+1):\n        # Calculate the next term of the series\n        dp[i] = dp[i-1] + dp[i-2]\n    # Return the final answer\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n\n    # Initialize variables for memoization\n    memo = [0] * (n + 1)\n    memo[0] = 0\n    memo[1] = 1\n    memo[2] = 2\n\n    # Calculate the number of ways for smaller values of n\n    for i in range(3, n + 1):\n        memo[i] = memo[i - 1] + memo[i - 2]\n\n    return memo[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2: \n        return True\n\n    if A[0] <= A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] > A[i+1]: \n                return False\n        return True\n\n    else: \n        for i in range(1, len(A)-1): \n            if A[i] < A[i+1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty \n    if len(A) <= 1: \n        return True\n    \n    # iterate over the array and compare adjacent elements \n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n\n    if A[0] >= A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n\n    if A[0] > A[-1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) == 0: \n        return True\n    \n    # check if the array contains only one element\n    if len(A) == 1: \n        return True\n    \n    # initialize variables\n    min_val = A[0]\n    max_val = A[0]\n    \n    # loop through the array and compare the values\n    for i in range(1, len(A)): \n        if A[i] < min_val: \n            min_val = A[i]\n        elif A[i] > max_val: \n            max_val = A[i]\n        \n        # check if the array is monotonic\n        if A[i] > min_val and A[i] < max_val: \n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A as input and returns True if it is monotonic and False otherwise.\n    A is an array of integers.\n    \"\"\"\n    if len(A) < 2:\n        return False\n\n    if A[0] >= A[1]:\n        return True\n\n    if A[0] <= A[1]:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Determine if a given array A is monotonic or not.\n\n    An array A is said to be monotonic if for all i, A[i] <= A[i+1] if i < len(A)-1.\n    The function returns True if A is monotonic, and False otherwise.\n    \"\"\"\n\n    # check if the array is empty\n    if not A:\n        return True\n    \n    # check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # check if the array has a decreasing sequence\n    if A[1] > A[0]:\n        return False\n    \n    # check if the array has a increasing sequence\n    for i in range(1, len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    # check if the array has a constant sequence\n    if A[1] == A[0]:\n        for i in range(2, len(A)):\n            if A[i]!= A[0]:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    It returns True if the array is monotonic, False otherwise.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    elif A[0] > A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[1] >= A[0]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] < A[i+1]:\n                return False\n        return True\n    if A[1] < A[0]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] or A[i] > A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    n = len(A) \n    if n < 2: \n        return True \n\n    for i in range(1, n): \n        if A[i] < A[i-1]: \n            return False \n\n    return True "
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two lists as input, l and s, and checks whether l contains s as a sublist.\n    If so, it returns True, otherwise it returns False.\n    '''\n    if s not in l:\n        return False\n    else:\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    else:\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(s, list):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:]:\n            if l[i:] == s:\n                return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to store the result of the check\n    result = True\n    \n    # Loop through all the tuples in the input list\n    for tup in Input:\n        # If the length of the current tuple is not equal to the length of the first tuple, set the result to False and break out of the loop\n        if len(tup)!= len(Input[0]):\n            result = False\n            break\n    \n    # Return the result of the check\n    return result"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Create a set of tuples to store the unique lengths of the input tuples\n    lengths = set(len(t) for t in Input)\n\n    # Check if there is only one unique length in the set\n    if len(lengths) == 1:\n        return True\n\n    # If there are multiple unique lengths, the input tuples must not have equal lengths\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all the tuples have equal length or not\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): The list of elements to be sorted.\n\n    Returns:\n    The sorted list of elements.\n    '''\n\n    # Initialize the swaps and iterations variables\n    swaps = True\n    i = 0\n\n    # While the list is not sorted\n    while swaps:\n        # Reset the swaps variable\n        swaps = False\n\n        # Iterate through the list\n        for j in range(len(nums)-i):\n            # If the adjacent elements are not in the correct order\n            if nums[j] > nums[j+1]:\n                # Swap the elements\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                # Set the swaps variable to True\n                swaps = True\n\n        # Update the iterations variable\n        i += 1\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = (gap + 1) // 2\n        if gap == 1:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    This function implements the comb sort algorithm for sorting a list of elements.\n    \n    Args:\n    nums (list): A list of elements to be sorted.\n    \n    Returns:\n    The sorted list.\n    '''\n    n = len(nums)\n    k = 1\n    max_iter = 100\n    \n    while k <= n // 1.3 and max_iter > 0:\n        max_iter -= 1\n        swapped = False\n        for i in range(n - k):\n            if nums[i] > nums[i + k]:\n                nums[i], nums[i + k] = nums[i + k], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        k = k * 1.3\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        \n        if gap < 1:\n            gap = 1\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_iter = len(nums) // 2\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(max_iter):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        max_iter //= 1\n        if max_iter == 0:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = min(gap // 1.3, n)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        # Iterate through the list\n        for i in range(gap, n):\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        \n        # Decrease the gap by half\n        gap = int(gap / 1.3)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Initialize the square of n as the result\n    square = n**2\n\n    # Loop until the square is less than or equal to 1000\n    while square <= 1000:\n        # Check if the difference of the square and the number is a square\n        if (square + n)**2 == n**2:\n            return True\n        square += 1\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0 and n%(n//i) == 0:\n            print(\"Yes, the number can be represented as the difference of two squares.\")\n            return\n    print(\"No, the number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is less than 0\n    if n < 0:\n        return False\n    \n    # Find the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    \n    # Check if the square root of the given number is an integer\n    if sqrt_n ** 2!= n:\n        return False\n    \n    # Check if the given number can be represented as the difference of two squares\n    i = 1\n    while i ** 2 <= sqrt_n:\n        if i ** 2 + sqrt_n == n:\n            return True\n        elif i ** 2 + sqrt_n < n:\n            return False\n        i += 1\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if i*i == n:\n                return f\"The given number {n} can be represented as the difference of two squares.\"\n        return f\"The given number {n} cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0 and n // i == i:\n            return True\n    return False\n\n\ndef is_diff_square(n):\n    \"\"\"\n    Returns True if n can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n\n    if is_square(n) and is_square(abs(n) - 1):\n        return True\n\n    if is_square(n) and is_square(abs(n) + 1):\n        return True\n\n    return False\n\n\ndef dif_Square(n):\n    \"\"\"\n    Returns the difference of two squares that can be represented as n.\n    \"\"\"\n    if n < 0:\n        return None\n\n    if is_diff_square(n):\n        return n - 1\n\n    if is_diff_square(n + 1):\n        return n\n\n    return None\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_sum = 0\n    num = n\n    while num > 0:\n        square_sum += num % 10 ** (len(str(num))+1)\n        num //= 10 ** (len(str(num))+1)\n    if square_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    def is_square(num):\n        '''\n        Function to check whether a given number is a square or not.\n        '''\n        return num*num == num\n        \n    def find_square(num):\n        '''\n        Function to find the square of a given number.\n        '''\n        i = 1\n        while i*i <= num:\n            if num % i == 0:\n                return i\n            i += 1\n        return i\n    \n    num1 = abs(n)\n    num2 = find_square(num1)\n    num3 = num1 - num2*num2\n    \n    if is_square(num2) and is_square(num3):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_sum = sum([i**2 for i in range(1,n+1)])\n    square_diff = (square_sum**2 - n**2)**0.5\n    if square_diff.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    \n    # Find the square root of n\n    sqrt_n = int(n**0.5)\n    \n    # Check if sqrt_n is even\n    if sqrt_n % 2 == 0:\n        return False\n    \n    # Check if the difference of sqrt_n and n is a square\n    diff = sqrt_n - n\n    if diff**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(n**0.5)\n    b = int(n - a*a)\n    return a*a == n and b*b == n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    count = 0\n    for i in range(n):\n        if colors[i] == patterns[i]:\n            count += 1\n        if count == n-1:\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    # Initialize variables for the current pattern and the count of colors\n    current_pattern = \"\"\n    count = 0\n\n    # Loop through the colors list\n    for color in colors:\n        # If the current color matches the first character of the current pattern, increment the count\n        if color == current_pattern[0]:\n            count += 1\n        # If the current color does not match the first character of the current pattern,\n        # reset the count and append the current pattern to the patterns list\n        else:\n            current_pattern = \"\"\n            if count == len(patterns[0]):\n                patterns.append(current_pattern)\n            count = 0\n            current_pattern += color\n\n    # If there are any remaining characters in the current pattern, append it to the patterns list\n    if count == len(patterns[0]):\n        patterns.append(current_pattern)\n\n    return patterns"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initialize variables\n    n = len(colors)\n\n    # check if all colors are present in the first pattern\n    if colors[0] not in patterns[0]:\n        return False\n\n    # check if all colors are present in the second pattern\n    if colors[1] not in patterns[1]:\n        return False\n\n    # check if the first color is in the third pattern\n    if colors[2] not in patterns[2]:\n        return False\n\n    # check if all colors are present in the last pattern\n    if colors[n-1] not in patterns[n-1]:\n        return False\n\n    # check if the last color is in the first pattern\n    if colors[n-2] not in patterns[n-2]:\n        return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    seen = set()\n    for i, color in enumerate(colors):\n        if color in seen:\n            continue\n        elif patterns[i] in seen:\n            seen.remove(patterns[i])\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Initialize variables\n    is_sequence = True\n    current_color = colors[0]\n    index = 1\n    \n    while index < len(colors):\n        if current_color!= colors[index]:\n            # Check if it follows the sequence given in the patterns array\n            for pattern in patterns:\n                if current_color == pattern[0]:\n                    if len(pattern) > 1 and colors[index] == pattern[1]:\n                        # Move on to the next pattern and color combination\n                        index += 1\n                        current_color = colors[index]\n                        break\n                    else:\n                        is_sequence = False\n                        break\n        else:\n            # Move on to the next color combination\n            index += 1\n            current_color = colors[index]\n            \n    return is_sequence"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the count of each color in the input colors list\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n    \n    # Initialize the count of each pattern in the patterns array\n    pattern_count = {}\n    for pattern in patterns:\n        pattern_count[pattern] = 0\n    \n    # Iterate through the input colors and patterns arrays\n    for color in colors:\n        pattern = patterns[colors.index(color)]\n        if pattern in pattern_count:\n            pattern_count[pattern] += 1\n    \n    # Check if the count of each pattern in the patterns array is the same as the count of each color in the input colors list\n    for pattern in patterns:\n        if pattern not in color_count or pattern_count[pattern]!= color_count[pattern]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the length of the colors and patterns arrays are the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Create a set to store the current pattern\n    current_pattern = set()\n\n    # Loop through the colors array\n    for i in range(len(colors)):\n        # Get the current color\n        current_color = colors[i]\n\n        # If the current color is already in the current pattern, check if it matches the current pattern in the patterns array\n        if current_color in current_pattern and current_pattern.union(set(patterns[i])).issubset(set(patterns[i])):\n            # Update the current pattern\n            current_pattern = current_pattern.union(set(patterns[i]))\n        else:\n            # Reset the current pattern\n            current_pattern = set()\n\n    # If the current pattern is not empty, it means there are more patterns in the array than colors\n    if current_pattern:\n        return False\n\n    # If all the colors are used, it means the colors are in the correct order\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    # Define the sequence of colors and patterns\n    colors_seq = set(colors)\n    patterns_seq = set(patterns)\n\n    # Check if the two sets are disjoint\n    if colors_seq.isdisjoint(patterns_seq):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # check if the length of colors and patterns is the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # create a set of all colors in the colors list\n    all_colors = set(colors)\n\n    # iterate over the patterns list\n    for pattern in patterns:\n        # split the pattern into a list of colors\n        pattern_colors = pattern.split()\n\n        # check if the length of pattern_colors is the same as the length of all_colors\n        if len(pattern_colors)!= len(all_colors):\n            return False\n\n        # create a set of all colors in the pattern_colors list\n        pattern_colors_set = set(pattern_colors)\n\n        # check if pattern_colors_set is a subset of all_colors\n        if pattern_colors_set!= all_colors:\n            return False\n\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple1 in test_list:\n        divisible_flag = True\n        for num in tuple1:\n            if num % K!= 0:\n                divisible_flag = False\n                break\n        if divisible_flag:\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples\n    result = []\n    \n    # Loop through each tuple in the list of tuples\n    for tup in test_list:\n        # Check if each element in the tuple is divisible by k\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by k, add the tuple to the result list\n            result.append(tup)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize an empty list to store the tuples that meet the condition\n    result = []\n    # loop through the list of tuples\n    for tup in test_list:\n        # check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # if all elements are divisible, add the tuple to the result list\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple1 in test_list:\n        for tuple2 in test_list:\n            if tuple1!= tuple2 and all(num % K == 0 for num in tuple1) and all(num % K == 0 for num in tuple2):\n                result.append(tuple1 + tuple2)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        if all(x % K == 0 for x in tuple_):\n            result.append(tuple_)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    if n%11==0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for w in word:\n        if len(w) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 1:  # if the length of the word is odd\n            print(word, \"is odd-length.\")\n        else:\n            print(word, \"is even-length.\")\n    return None"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    count = 0\n    for word in words:\n        count += len(word)\n    if count % 2!= 0:\n        print(\"Length of the word is odd\")\n    else:\n        print(\"Length of the word is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string by whitespace into a list of words\n    word_lengths = [] # initialize an empty list to store the length of each word\n    for word in words: # iterate over each word in the list\n        word_lengths.append(len(word)) # append the length of the word to the list\n    odd_lengths = [length for length in word_lengths if length % 2!= 0] # filter out even lengths\n    if len(odd_lengths) == 0: # if there are no odd lengths, the word is even\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 0:\n            print(word + \" is even length.\")\n        else:\n            print(word + \" is odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for i in word:\n        if len(i)%2!=0:\n            print(i, \"is odd length\")\n        else:\n            print(i, \"is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # convert the string to a list of words\n    words = s.split()\n\n    # iterate over the words and check their length\n    for word in words:\n        if len(word) % 2 == 0:\n            return \"Even\"\n        else:\n            return \"Odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word)%2 == 1:\n            print(f\"{word} has odd length\")\n        else:\n            print(f\"{word} has even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words\n    words = s.split()\n    \n    # Loop through each word\n    for word in words: \n        # If the length of the word is odd, return True\n        if len(word) % 2!= 0: \n            return True\n    \n    # If no odd word is found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    # Split the string into words and loop through each word\n    for word in s.split():\n        # Get the length of the word and check if it is odd or even\n        length = len(word)\n        if length % 2 == 0:\n            # If the length is even, print a message saying that the word is even length\n            print(word, \"is an even length.\")\n        else:\n            # If the length is odd, print a message saying that the word is odd length\n            print(word, \"is an odd length.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 4\n    c = 6\n    d = 8\n    \n    for i in range(1, n+1):\n        a = (4*a**2 - 1)/(2*b)\n        b = (4*b**2 - 1)/(2*c)\n        c = (4*c**2 - 1)/(2*d)\n        d = (4*d**2 - 1)/(2*a)\n    \n    return a + b + c + d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n\n    # Recursive case\n    else:\n        return (n * 2) - (n + 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function takes an integer n and returns the nth tetrahedral number.\n    '''\n    # Define the formula for the nth tetrahedral number\n    tn = 1 + 3 * n + 3 * (n ** 2) + n ** 3\n\n    # Return the value of the nth tetrahedral number\n    return tn"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 3 * tetrahedral_number(n-1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return \"Invalid input! Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (1 + (4 * n - 2)) // 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 4 * n * (n + 1) * (n + 2) // 6\n    b = 3 * n * (n + 1) // 2\n    c = 3 * n * (n - 1) // 2\n    d = 4 * n * (n - 1) * (n - 2) // 6\n    \n    return a + b + c + d\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Check if n is valid\n    if n < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 20\n    else:\n        # Use the formula for n-1 tetrahedral numbers to find the nth tetrahedral number\n        return (4*n*n - 6*n + 2) // 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c, d = 1, 1, 1, 1\n    for i in range(n):\n        a, b, c, d = d, a + d, b + d, c + d\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                continue\n            else:\n                return tetrahedral_number(i-1) + tetrahedral_number(i-2) + tetrahedral_number(i-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0.25\n    b = 0.75\n    c = 1.0\n    d = 0.5\n    tetrahedra = [a, b, c, d]\n    count = 0\n    for t in tetrahedra:\n        count += t\n    return count / len(tetrahedra)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # compute the volume of the sphere\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    This function takes the radius of the sphere as input and returns its volume.\n    \"\"\"\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr(result % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize a variable to store the ASCII value of the first character of the string\n    first_char_ascii = ord(strr[0])\n\n    # iterate through the remaining characters of the string\n    for i in range(1, len(strr)):\n        # get the ASCII value of the current character\n        char_ascii = ord(strr[i])\n\n        # add the ASCII value of the current character to the ASCII value of the first character\n        first_char_ascii = (first_char_ascii + char_ascii) % 26\n\n    # convert the ASCII value of the first character to a character and return it\n    return chr(first_char_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the ASCII value of characters\n    ascii_value = ''\n    \n    # Loop through each character of the string\n    for char in strr:\n        # Convert the character to ASCII value\n        ascii_value += str(ord(char))\n        # Add the ASCII value of the character modulo 26 to the result\n        ascii_value = (int(ascii_value) + 26) % 26\n        # Convert the ASCII value to character and append it to the result string\n        ascii_value += chr(int(ascii_value))\n    \n    return ascii_value"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Convert the string to lowercase\n    strr = strr.lower()\n    # Initialize an empty string to store the ASCII value of each character\n    char_val = \"\"\n    # Iterate through each character in the string\n    for char in strr:\n        # Get the ASCII value of the character\n        char_val += str(ord(char))\n    # Calculate the sum of the ASCII values modulo 26\n    sum_val = sum(int(x) for x in char_val)\n    # Return the character made by adding the ASCII value of all the characters modulo 26\n    return chr((sum_val % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert the string to lowercase\n    strr = strr.lower()\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum variable\n        sum += ord(char)\n\n    # Find the character made by adding the ASCII value of all the characters of the string modulo 26\n    char_result = chr((sum % 26) + 65)\n\n    # Return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return char_result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str = \"\"\n    for i in range(len(strr)):\n        str += chr(ord(strr[i]) + ord('a'))\n    return str[-1]"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_ascii = sum([ord(i) for i in strr]) % 26\n    char = chr(char_ascii + ord('a'))\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i]) % 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the sum of ASCII values\n    ascii_sum = 0\n    \n    # loop through each character in the string\n    for char in strr:\n        # add the ASCII value of each character to the sum\n        ascii_sum += ord(char)\n        \n    # convert the ASCII sum to a character and return it\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    sum = 0  \n    for i in range(len(strr)):  \n        sum += ord(strr[i])  \n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a, end=' ')\n        a, b = b, 2*a+b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        new_seq = [2*x + 1 for x in sequence]\n        sequence.extend(new_seq)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1: \n        return None \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 4*sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # initialize the sequence with the first two numbers\n    sequence = [0, 1]\n\n    # loop through the sequence to generate the remaining numbers\n    for i in range(2, n):\n        # generate the next number in the sequence\n        next_num = sequence[i-1] + sequence[i-2]\n\n        # append the next number to the sequence\n        sequence.append(next_num)\n\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    This function calculates the nth number in the Newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2]\n    for i in range(3, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]  # initialize the sequence with 0 and 1\n    for i in range(2, n):  # iterate over the rest of the sequence\n        sequence.append(sequence[i-1] + sequence[i-2])  # calculate the next number in the sequence\n    return sequence[n-1]  # return the nth number in the sequence"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = (4 * pi * r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the area of a sphere using Heron's formula\n    area = (4/3) * math.pi * r**3\n\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r ** 3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere as input and returns the surface area of the sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area of the sphere\n    surface_area = 4 * math.pi * r ** 2\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    '''\n    \n    if n < 1:\n        return None\n    \n    # Initialize the first three centered hexagonal numbers\n    centered_hexagons = [1, 13, 55, 163, 393, 895, 1971]\n    \n    # Find the nth centered hexagonal number\n    for i in range(n):\n        centered_hexagons.append(centered_hexagons[i] + centered_hexagons[i-1] + centered_hexagons[i-2])\n    \n    return centered_hexagons[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a, b = 1, 2\n    while b < 2*n:\n        a, b = b, 4*a + 2\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 8\n    if n == 2:\n        return 19\n    if n == 3:\n        return 36\n    if n == 4:\n        return 61\n    if n == 5:\n        return 96\n    if n == 6:\n        return 143\n    if n == 7:\n        return 196\n    if n == 8:\n        return 259\n    if n == 9:\n        return 326\n    if n == 10:\n        return 399\n    if n == 11:\n        return 472\n    if n == 12:\n        return 550\n    if n == 13:\n        return 634\n    if n == 14:\n        return 727\n    if n == 15:\n        return 825\n    if n == 16:\n        return 930\n    if n == 17:\n        return 1045\n    if n == 18:\n        return 1165\n    if n == 19:\n        return 1292\n    if n == 20:\n        return 1429\n    if n == 21:\n        return 1571\n    if n == 22:\n        return 1721\n    if n == 23:\n        return 1882\n    if n == 24:\n        return 2050\n    if n == 25:\n        return 2228\n    if n == 26:\n        return 2411\n    if n == 27:\n        return 2602\n    if n == 28:\n        return 2805\n    if n == 29:\n        return 3015\n    if n == 30:\n        return 3235\n    if n == 31:\n        return 3460\n    if n == 32:\n        return 3693\n    if n == 33:\n        return 3936\n    if n == 34:\n        return 4195\n    if n == 35:\n        return 4463\n    if n == 36:\n        return 4746\n    if n == 37:\n        return 5037\n    if n == 38:\n        return 5341\n    if n == 39:\n        return 5653\n    if n == 40:\n        return 5978\n    if n == 41:\n        return 6310\n    if n == 42:\n        return 6653\n    if n == 43:\n        return 7003\n    if n == 44:\n        return 7364\n    if n == 45:\n        return 7732\n    if n == 46:\n        return 8111\n    if n == 47:\n        return 8496\n    if n == 48:\n        return 8892\n    if n == 49:\n        return 9303\n    if n == 50:\n        return 9724\n    if n == 51:\n        return 10160\n    if n == 52:\n        return 10605\n    if n == 53:\n        return 11065\n    if n == 54:\n        return 11534\n    if n == 55:\n        return 12017\n    if n == 56:\n        return 12510\n    if n == 57:\n        return 13018\n    if n == 58:\n        return 13536\n    if n == 59:\n        return 14069\n    if n == 60:\n        return 14612\n    if n == 61:\n        return 15170\n    if n == 62:\n        return 15738\n    if n == 63:\n        return 16319\n    if n == 64:\n        return 16911\n    if n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    first_centered_hex = 0\n    second_centered_hex = 1\n    total_centered_hex = 0\n    \n    # Loop to calculate centered hexagonal numbers\n    for i in range(2, n+1):\n        total_centered_hex = 2*first_centered_hex + 2*second_centered_hex\n        first_centered_hex = second_centered_hex\n        second_centered_hex = total_centered_hex\n        \n    return total_centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = n - 1 # First centered hexagonal number is 1\n    return 2 * (3 * n * n + 1) - 1 # formula for centered hexagonal number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Convert n to the number of rows needed to create the centered hexagonal number\n    rows = (n // 2) + 1\n\n    # Initialize the first row of the centered hexagonal number\n    row = [1]\n\n    # Iterate through the remaining rows of the centered hexagonal number\n    for i in range(rows - 2):\n        # Add the previous row to the current row to get the next row\n        next_row = [row[j - 1] + row[j] for j in range(1, len(row))]\n\n        # Add the new row to the list of rows\n        row = next_row\n\n    # Return the nth centered hexagonal number\n    return row[n % 2]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n    # Check if n is positive\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n\n    # Initialize variables\n    a = 1\n    b = 2\n\n    # Calculate centered hexagonal number\n    for _ in range(1, n + 1):\n        a, b = b, a + b\n\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(k, r):\n        if r == 0:\n            return k\n        else:\n            return centered_hexagonal_helper(4*k - r, r - 1)\n    \n    return centered_hexagonal_helper(1, 1) + n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initializing variables\n    a = 1\n    b = 1\n    c = 1\n\n    # Loop to calculate centered hexagonal number\n    for i in range(1, n+1):\n        a = (3*a**2 - b**2 - 2*c**2) / 6\n        b = (2*a**2 + b**2 - c**2) / 6\n        c = (a**2 + 2*b**2 + c**2) / 6\n\n        # Printing the centered hexagonal number\n        print(f\"The {i}th centered hexagonal number is {a:0.1f}\")"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 3*(n**2) - 1"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine the three dictionaries into a single dictionary\n    combined_dict = ct.ChainMap(dict1, dict2, dict3)\n    # Convert the combined dictionary to a regular dictionary\n    result_dict = dict(combined_dict)\n    return result_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    - dict1: a dictionary\n    - dict2: a dictionary\n    - dict3: a dictionary\n\n    Returns:\n    - A dictionary that contains the merged contents of the input dictionaries.\n\n    Notes:\n    - The order of the elements in the merged dictionary is preserved from the input dictionaries.\n    - If an element in the input dictionaries has a value of None, that element will be excluded from the merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        if dict1[key] is not None:\n            merged_dict[key] = dict1[key]\n    for key in dict2:\n        if dict2[key] is not None:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if dict3[key] is not None:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to merge.\n        dict2 (dict): Second dictionary to merge.\n        dict3 (dict): Third dictionary to merge.\n\n    Returns:\n        dict: Merged dictionary.\n    \"\"\"\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): Dictionary to be merged.\n    dict2 (dict): Dictionary to be merged.\n    dict3 (dict): Dictionary to be merged.\n\n    Returns:\n    dict: A merged dictionary.\n    \"\"\"\n    # create an empty dictionary to hold the merged data\n    merged_dict = {}\n\n    # loop over the keys of each dictionary and merge the values\n    for key in dict1.keys():\n        if key in dict2.keys():\n            if key in dict3.keys():\n                merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n            else:\n                merged_dict[key] = dict1[key] + dict2[key]\n        elif key in dict3.keys():\n            merged_dict[key] = dict1[key] + dict3[key]\n        else:\n            merged_dict[key] = dict1[key]\n\n    # loop over the keys of each dictionary and add any new keys\n    for key in dict2.keys():\n        if key not in merged_dict.keys():\n            merged_dict[key] = dict2[key]\n\n    for key in dict3.keys():\n        if key not in merged_dict.keys():\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy() # creating a copy of the first dictionary for merging\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value # adding the value of the second dictionary to the merged dictionary if the key is not already present in the merged dictionary\n        elif isinstance(merged_dict[key], dict):\n            merged_dict[key] = merge_dictionaries_three(merged_dict[key], value) # recursively calling the merge_dictionaries_three function if the value is also a dictionary\n        else:\n            merged_dict[key].append(value) # if the value is not a dictionary, adding it to the existing value of the same key in the merged dictionary\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value # adding the value of the third dictionary to the merged dictionary if the key is not already present in the merged dictionary\n        elif isinstance(merged_dict[key], dict):\n            merged_dict[key] = merge_dictionaries_three(merged_dict[key], value) # recursively calling the merge_dictionaries_three function if the value is also a dictionary\n        else:\n            merged_dict[key].append(value) # if the value is not a dictionary, adding it to the existing value of the same key in the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list) # create a new defaultdict with initial value as an empty list\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n    return dict(merged_dict) # convert the defaultdict to a regular dictionary"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for elem in lst:\n        freq[elem] += 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through the list and update the frequency of each element in the dictionary\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    small_nums = []\n    for i in range(N+1):\n        if i < N:\n            small_nums.append(i)\n    closest_num = min(small_nums)\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    smaller_num = float('inf') # initialize smallest number to infinity\n    for num in range(1, N):\n        if num < N/2:\n            if num < smaller_num:\n                smaller_num = num\n        elif num > N/2:\n            if num > smaller_num:\n                smaller_num = num\n    \n    return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    This function finds the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    closest = float('inf')\n\n    for i in range(N+1):\n        if i % 2 == 0:\n            if i < N:\n                if i-1 < min_num:\n                    min_num = i-1\n            else:\n                if i+1 > closest:\n                    closest = i+1\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # create a list of numbers from 1 to N\n    num_list = list(range(1, N+1))\n    # sort the list in ascending order\n    num_list.sort()\n    # calculate the difference between the last number in the list and N\n    diff = N - num_list[-1]\n    # if the difference is greater than 1, return the last number in the list\n    if diff > 1:\n        return num_list[-1]\n    # if the difference is 1 or less, return the second last number in the list\n    else:\n        return num_list[-2]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    \n    while True:\n        if num - 1 == 0:\n            return 0\n        \n        elif num == 1:\n            return num\n        \n        else:\n            num = (num + N) // 2\n            \n    return None"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = 0\n    while True:\n        n += 1\n        if n > N:\n            return n - 1\n        if n % 2 == 0:\n            n += 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # find the smallest number greater than or equal to N\n    smallest = N + 1\n    \n    # find the largest number less than N\n    largest = N - 1\n    \n    # iterate over all numbers between smallest and largest\n    for num in range(smallest, largest + 1):\n        # if num is less than N, return num\n        if num < N:\n            return num\n        \n        # if num is greater than N, update smallest to num\n        elif num > N:\n            smallest = num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    # initialize variables\n    smallest_diff = n\n    smallest_num = n\n    largest_diff = abs(n - smallest_num)\n    # loop through all numbers between n and 100\n    for i in range(n, 101):\n        diff = abs(i - n)\n        if diff < smallest_diff:\n            smallest_diff = diff\n            smallest_num = i\n        elif diff < largest_diff:\n            largest_diff = diff\n    # return the smallest number\n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    # function to find the closest smaller number than n\n    num = N\n    while True:\n        if num - 1 < N:\n            return num - 1\n        else:\n            num = num - 1\n            \n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    small_nums = []\n    for num in range(1, N+1):\n        if num % 2 == 0:\n            small_nums.append(num)\n    \n    if N % 2 == 0:\n        if len(small_nums) == 0:\n            return None\n        else:\n            return min(small_nums)\n    else:\n        if len(small_nums) == 0:\n            return None\n        else:\n            return max(small_nums)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # create an empty dictionary to store the word lengths\n    lengths = {}\n    \n    # iterate over the list of strings\n    for word in list1:\n        # check if the word is already in the dictionary\n        if word in lengths:\n            # if it is, increment its length by 1\n            lengths[word] += 1\n        else:\n            # if it's not, add it to the dictionary with a length of 1\n            lengths[word] = 1\n    \n    # find the word with the maximum length\n    max_length = 0\n    max_word = ''\n    for word in lengths:\n        if lengths[word] > max_length:\n            max_length = lengths[word]\n            max_word = word\n    \n    # return the length of the maximum word\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, list):\n        raise TypeError('str1 should be a list of strings.')\n    \n    if not isinstance(sub_str, str):\n        raise TypeError('sub_str should be a string.')\n    \n    if not any(isinstance(s, str) for s in str1):\n        raise TypeError('All elements of str1 should be strings.')\n    \n    for s in str1:\n        if sub_str in s:\n            return True\n    \n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= str or type(sub_str)!= str:\n        print(\"Both str1 and sub_str must be strings\")\n        return\n    \n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two parameters, a string `str1` and a string `sub_str`. It checks if the string `str1`\n    is present as a substring in a list of string values. The function returns True if the string is present,\n    else it returns False.\n    \"\"\"\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, str) or not isinstance(sub_str, str):\n        raise ValueError(\"Both the input values must be strings.\")\n    if not sub_str:\n        raise ValueError(\"The sub_str value cannot be an empty string.\")\n    if not str1:\n        return False\n\n    # Split the string into a list of strings\n    str_list = str1.split()\n\n    # Check if the sub_str is present in the list of strings\n    for s in str_list:\n        if s == sub_str:\n            return True\n\n    # If the sub_str is not present in the list of strings, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0: \n        # if the number is positive, it is not undulating\n        return False\n    else: \n        # if the number is negative, it is undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 100:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return is_undulating(n+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Check if the number is equal to zero\n    if n == 0:\n        return True\n    \n    # If the number is odd, then it's not undulating\n    elif n % 2!= 0:\n        return False\n    \n    # If the number is even, then it's undulating\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return True\n        \n        # If the loop completes without finding any factors of 2, then the number is not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if the number is divisible by 3\n    if n % 3 == 0:\n        return True\n    # check if the number is divisible by 5\n    elif n % 5 == 0:\n        return True\n    # if none of the above conditions are true, then the number is not undulating\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is negative or not\n    if n < 0:\n        return False\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return False\n\n    # Check if the number is divisible by 5\n    if n % 5 == 0:\n        return False\n\n    # Check if the number is divisible by 7\n    if n % 7 == 0:\n        return False\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return False\n\n    # If the number is not divisible by any of these numbers, it is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is undulating.\"\n    else:\n        return \"The number is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The given number is even.\"\n    else:\n        return \"The given number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a*a, b/2)\n    else:\n        return a*power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a,b-1)\n    else:\n        return 1/power(a,-b)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    :param a: The base of the power.\n    :param b: The exponent of the power.\n    :return: The value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first tuple in the list that has the smallest second value.\n    \"\"\"\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i, tup in enumerate(test_list):\n        if tup[1] < min_value:\n            min_index = i\n            min_value = tup[1]\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0 # assume minimum is at index 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]: # if current value has smaller second value\n            min_index = i # update minimum index\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples in ascending order based on the second value of each tuple using the itemgetter function.\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list.\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the built-in sorted function to sort the list in ascending order based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for i in range(len(lst)):\n        if min_length is None or len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list. \n    '''\n    min_len = float('inf') #initialize the minimum length variable as infinite\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 99999999\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for lst in lst:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < smallest_length:\n            smallest_length = len(sublist)\n    return smallest_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize variables\n    count = 0\n    divisor = 1\n    \n    # loop through the range of numbers from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        \n        # check if i is a divisor of n\n        if n % i == 0:\n            \n            # if i is a divisor, add it to the count\n            count += 1\n            \n            # if n is a multiple of i, subtract i from n\n            n -= i\n            \n            # check if i is a divisor of n\n            if n % i == 0:\n                \n                # if i is a divisor, add it to the count\n                count += 1\n                \n                # if n is a multiple of i, subtract i from n\n                n -= i\n                \n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer input n and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through the list of lists\n    for sublist in list1:\n        # loop through each element in the sublist\n        for elem in sublist:\n            # if the element is already in the dictionary, increment its count by 1\n            if elem in freq:\n                freq[elem] += 1\n            # if the element is not in the dictionary, add it with a count of 1\n            else:\n                freq[elem] = 1\n    # return the dictionary of frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n    list1 (list of lists): a list of lists, where each sublist contains elements.\n\n    Returns:\n    dict: a dictionary where the keys are elements of the input list, and the values are their frequencies in the input list.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        for element in item:\n            if element in freq:\n                freq[element] += 1\n            else:\n                freq[element] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each element in the flattened list\n    for element in list1:\n        # If the element is not a list, add it to the dictionary and set its frequency to 1\n        if not isinstance(element, list):\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n        # If the element is a list, recursively call the function with the nested list and update the frequency dictionary\n        else:\n            nested_freq_dict = frequency_lists(element)\n            # Update the frequency dictionary by adding the nested dictionary to it\n            for key, value in nested_freq_dict.items():\n                if key in freq_dict:\n                    freq_dict[key] += value\n                else:\n                    freq_dict[key] = value\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each element\n    frequency = {}\n\n    # Flatten the list\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Iterate through the flattened list and update the frequency dictionary\n    for item in flattened_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop over each element in the flattened list of lists\n    for item in list1:\n        # check if the item is already in the dictionary\n        if item in freq:\n            # if it is, increment its frequency by 1\n            freq[item] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            freq[item] = 1\n    # return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for item in list1:\n        # If the element is not in the dictionary, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # Otherwise, increment its frequency by 1\n        else:\n            freq_dict[item] += 1\n    \n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n    # divide the result by the length of the list\n    result /= len(numbers)\n    # return the result\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    binary_number = \"\"\n    while n > 0:\n        binary_number = str(n % 2) + binary_number\n        n = n // 2\n    return binary_number"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    This function takes an integer as input and returns the binary equivalent as a string. \n    The binary equivalent of a decimal number is obtained by converting each digit of the number from right to left to binary \n    and concatenating the results. \n    \"\"\"\n\n    # Initialize an empty string to store the binary equivalent of the input number\n    binary = \"\"\n\n    # Convert the input number to a list of digits\n    digits = list(map(int, str(n)))\n\n    # Iterate through the digits of the number in reverse order\n    for digit in digits[::-1]:\n        # Convert the digit to binary and append it to the binary string\n        binary += format(digit, '08b')\n\n    # Return the binary string without any leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    # convert decimal to binary\n    binary_str = bin(n)[2:]\n    # add leading zeros if necessary\n    while len(binary_str) < len(str(n)):\n        binary_str = '0' + binary_str\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_number = str(remainder) + binary_number\n        n //= 2\n    return binary_number"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Convert decimal to binary using bitwise operators\n    binary = \"\"\n    while n > 0:\n        binary = str(n & 1) + binary\n        n = n >> 1\n\n    # Remove leading zeros from binary string\n    while binary[0] == \"0\":\n        binary = binary[1:]\n\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Reverse the number and convert it to a string\n    reversed_num = str(num)[::-1]\n\n    # Find the largest palindrome that can be formed by concatenating the reversed_num and the smallest number greater than or equal to the reversed_num\n    for i in range(max(num+1, 9), 0, -1):\n        if str(i) + reversed_num + str(i) == str(i) + str(i) * 2:\n            return int(str(i) + str(i) * 2)\n\n    # If no palindrome is found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is negative\n    if num < 0:\n        num = abs(num)\n\n    # Convert the number to a string and reverse it\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n\n    # Check if the reversed number is greater than the original number\n    if int(num_str_rev) > int(num_str):\n        return int(num_str_rev) + 1\n    else:\n        return int(num_str_rev) - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Get the next smallest palindrome from the specified integer\n    smallest_palindrome = 0\n    if num < 0:\n        smallest_palindrome = 10**(num*-1)\n    else:\n        smallest_palindrome = 10**(num+1) - 1\n    \n    # Check if the next smallest palindrome is a palindrome\n    is_palindrome = True\n    temp = smallest_palindrome\n    while temp > 0:\n        if temp % 10!= temp // 10:\n            is_palindrome = False\n            break\n        temp //= 10\n    \n    # If the next smallest palindrome is a palindrome, return its value\n    if is_palindrome:\n        return smallest_palindrome\n    \n    # Otherwise, return the next smallest palindrome that is not a palindrome\n    next_palindrome = 10**(num+1) - 1\n    while True:\n        if next_palindrome % 10!= next_palindrome // 10:\n            return next_palindrome\n        next_palindrome -= 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Returns True if the given number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the given number.\n    \"\"\"\n    # check if the number is already a palindrome\n    if is_palindrome(num):\n        return num + 1\n\n    # otherwise, find the first non-palindromic number greater than num\n    i = num + 1\n    while not is_palindrome(i):\n        i += 1\n\n    # return the next palindromic number\n    return i - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    num_str_rev = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    num_rev = int(num_str_rev)\n    \n    # Increment the reversed integer by 1\n    num_rev += 1\n    \n    # Check if the reversed integer is a palindrome\n    num_rev_str = str(num_rev)\n    if num_rev_str == num_rev_str[::-1]:\n        return num_rev\n    else:\n        # If the reversed integer is not a palindrome, keep decrementing until we find a palindrome\n        while num_rev > 0 and num_rev_str!= num_rev_str[::-1]:\n            num_rev -= 1\n            num_rev_str = str(num_rev)\n        if num_rev == 0:\n            # If we still haven't found a palindrome, return the input number as it is\n            return num\n        else:\n            return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        # Find the smallest palindrome greater than the input number\n        temp = num\n        while temp % 10 == 9:\n            temp -= 10\n        temp += 1\n        \n        # If the next smallest palindrome is greater than 2 * input number, return input number\n        if temp > 2 * num:\n            return num\n        \n        # Otherwise, update the input number to the next smallest palindrome\n        num = temp"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Initialize the variables for the current and next smallest palindromes\n    current = int(num_str)\n    next_palindrome = current + 1\n    # Check if the next palindrome is a palindrome\n    while next_palindrome > 9:\n        if str(next_palindrome) == str(next_palindrome)[::-1]:\n            break\n        else:\n            next_palindrome += 1\n    # Return the next smallest palindrome\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Create a list of all numbers up to and including the specified integer\n    nums = list(range(1, num+1))\n    \n    # Create a list of all factors of 10\n    factors = [10] * 10\n    \n    # Use the Sieve of Eratosthenes algorithm to find prime numbers up to 10^9\n    for i in range(2, int(num**0.5)+1):\n        if factors[i]:\n            for j in range(i*i, num+1, i):\n                factors[j] = 0\n    \n    # Find the smallest prime factor of the specified integer\n    smallest_factor = 1\n    for i in range(1, len(factors)):\n        if factors[i]:\n            smallest_factor = i\n            break\n    \n    # Find the smallest number that has a prime factor that is a multiple of the smallest prime factor\n    smallest_multiple = 1\n    for i in range(2, num+1):\n        if factors[i] % smallest_factor == 0 and factors[i] > smallest_factor:\n            smallest_multiple = i\n            break\n    \n    # Return the next smallest palindrome by adding the smallest multiple to the specified integer\n    return smallest_multiple + num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    This function takes an integer as input and returns the next smallest palindrome of the input integer.\n    '''\n\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Reverse the string\n    rev_str = num_str[::-1]\n\n    # Convert the reversed string to an integer\n    rev_num = int(rev_str)\n\n    # Check if the reversed number is greater than or equal to the original number\n    if rev_num >= num:\n        return next_smallest_palindrome(rev_num)\n    else:\n        # Reverse the original number string\n        orig_str = num_str[::-1]\n\n        # Convert the reversed string to an integer\n        orig_num = int(orig_str)\n\n        # Add 1 to the original number\n        orig_num += 1\n\n        # Check if the reversed number is greater than or equal to the original number\n        if orig_num >= rev_num:\n            return orig_num\n        else:\n            return next_smallest_palindrome(orig_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    def is_palindrome(num):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        return str(num) == str(num)[::-1]\n\n    def is_valid_palindrome(num):\n        '''\n        Helper function to check if a number is a valid palindrome.\n        '''\n        return (num > 10) and is_palindrome(num)\n\n    def find_next_smallest_palindrome(num):\n        '''\n        Helper function to find the next smallest palindrome.\n        '''\n        if is_valid_palindrome(num):\n            return num\n\n        if num < 10:\n            return find_next_smallest_palindrome(num + 1)\n\n        if num % 2 == 0:\n            return find_next_smallest_palindrome(3 * num + 1)\n        else:\n            return find_next_smallest_palindrome(3 * num + 2)\n\n    return find_next_smallest_palindrome(num)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    if len(arr) < k:\n        return None\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"k is greater than the length of the array\")\n    elif k <= 0:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array has at least k elements\n    if len(arr) < k:\n        return \"Array must have at least k elements\"\n    \n    # Sort the array\n    arr.sort()\n    \n    # Find the kth element\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif k == 1:\n        return arr[0]\n    else:\n        if k < len(arr) // 2:\n            left_arr = arr[:k-1]\n            right_arr = arr[k-1:]\n            return kth_element(left_arr, k)\n        else:\n            left_arr = arr[k-len(arr)//2:]\n            right_arr = arr[:k-len(arr)//2]\n            return kth_element(right_arr, k-len(arr)//2)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        print(\"Invalid index. Please enter a number between 1 and\", n)\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        left = 1\n        right = n - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if arr[mid] < arr[k - 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the kth element if it exists\n    return arr[k-1] if k <= n else None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the snake case string to a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case = [word.capitalize() for word in words]\n    # Convert the list of words back to a string\n    camel_case = ''.join(camel_case)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the snake case string to camel case string by replacing underscores with spaces and capitalizing the first letter\n    camel_case_word = ''.join(x.capitalize() for x in word.split('_'))\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += char\n        else:\n            camel_case += char.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].upper()\n        elif i > 0 and word[i].isupper():\n            result += word[i].upper()\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:]].capitalize())"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the snake case string to a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n    # Join the capitalized words together into a camel case string\n    camel_case = ''.join(camel_words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    prev_char = \"_\"\n    for char in word:\n        if char.isupper():\n            camel_case += char\n            prev_char = \"_\"\n        elif char == \"_\":\n            camel_case += char\n        else:\n            camel_case += prev_char.lower() + char\n            prev_char = char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:].capitalize()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i == 1 and word[i].isupper():\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    This function takes two integer values n and m as input and returns the Eulerian number a(n, m).\n\n    Eulerian number: The Eulerian number is defined as the number of non-isomorphic pairs of connected vertices in a graph.\n    It is a function of the number of vertices and edges in the graph.\n\n    Example:\n    For a graph with 5 vertices and 10 edges, the Eulerian number is 25.\n    \"\"\"\n\n    # Number of vertices and edges\n    v = n\n    e = m\n\n    # If the number of vertices is odd, the Eulerian number is (n*(n-1))/2 + (m*(m-1))/2\n    if v % 2 == 1:\n        return (v * (v - 1)) // 2 + (e * (e - 1)) // 2\n\n    # If the number of vertices is even, the Eulerian number is n/2 + m/2\n    else:\n        return v // 2 + m // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables for Eulerian number and count of Eulerian paths\n    eulerian_count = 0\n    eulerian_num = 0\n\n    # Initialize 2D list to store all paths\n    paths = [[0 for i in range(m+1)] for j in range(n+1)]\n\n    # Initialize 2D list to store number of ways to reach each cell\n    num_ways = [[0 for i in range(m+1)] for j in range(n+1)]\n\n    # Fill in paths and num_ways lists using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 or j == 1:\n                num_ways[i][j] = 1\n                paths[i][j] = [(i, j)]\n            elif i == n or j == m:\n                num_ways[i][j] = 1\n                paths[i][j] = [(i, j)]\n            else:\n                num_ways[i][j] = num_ways[i-1][j] + num_ways[i][j-1] - num_ways[i-1][j-1]\n                paths[i][j] = paths[i-1][j] + [(i, j)]\n\n    # Find the Eulerian number by finding the maximum number of paths\n    max_paths = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if num_ways[i][j] > max_paths:\n                max_paths = num_ways[i][j]\n                eulerian_num = i\n                eulerian_count = num_ways[i][j]\n\n    # Print the result\n    print(\"Eulerian number a({}, {}) = {}\".format(n, m, eulerian_num))\n    print(\"Number of Eulerian paths = {}\".format(eulerian_count))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Function to find the Eulerian number a(n, m)\n    def find_a(n, m):\n        return (n*n + m*m - 2*n*m)/(4*n - 2)\n    # Main function to find the Eulerian number a(n, m)\n    def main():\n        print(\"Enter the value of n:\")\n        n = int(input())\n        print(\"Enter the value of m:\")\n        m = int(input())\n        a = find_a(n, m)\n        print(\"Eulerian number a(n, m) =\", a)\n    # Call the main function\n    main()"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the list of vertices\n    vertices = []\n    for i in range(n+1):\n        for j in range(m+1):\n            vertices.append((i, j))\n\n    # Initialize the list of edges\n    edges = []\n    for i in range(n):\n        for j in range(m):\n            for k in range(1, 4):\n                if k % 2 == 1:\n                    edges.append((vertices[i][0], vertices[j][0], vertices[i][1]+k, vertices[j][1]+k))\n\n    # Calculate the Eulerian path\n    eulerian_path = []\n    visited = set()\n    visited.add(vertices[0][0], vertices[0][1])\n    for edge in edges:\n        if (edge[0], edge[1]) not in visited and (edge[2], edge[3]) not in visited:\n            visited.add(edge[0], edge[1])\n            eulerian_path.append(edge)\n            visited.add(edge[2], edge[3])\n    eulerian_path.append(vertices[-1][0], vertices[-1][1])\n\n    # Initialize the list of weights\n    weights = []\n    for i in range(len(eulerian_path)-1):\n        weights.append(abs(eulerian_path[i+1][0]-eulerian_path[i][0])+abs(eulerian_path[i+1][1]-eulerian_path[i][1]))\n\n    # Calculate the sum of weights\n    total_weight = sum(weights)\n\n    # Calculate the Eulerian number\n    a = 0\n    for i in range(len(eulerian_path)-1):\n        a += weights[i]*(eulerian_path[i+1][0]-eulerian_path[i][0])*2*(eulerian_path[i+1][1]-eulerian_path[i][1])\n\n    # Calculate the maximum weight\n    max_weight = max(weights)\n\n    # Return the Eulerian number\n    return a, total_weight, max_weight"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function calculates the Eulerian number a(n, m) using the following formula:\n\n    a(n, m) = n * m / 2\n\n    where n is the number of students and m is the number of classes.\n\n    Parameters:\n    n (int): The number of students in the class.\n    m (int): The number of classes.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n    \"\"\"\n\n    return n * m // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize a 2D matrix with zeros\n    A = [[0 for i in range(m+1)] for j in range(n+1)]\n\n    # Fill the matrix with the values of a(n, m)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 or j == 1 or i == n or j == m:\n                A[i][j] = 1\n            else:\n                A[i][j] = i*j\n\n    # Find the Eulerian number a(n, m)\n    eulerian = A[n][m]\n\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if n and m are integers\n    if type(n)!= int or type(m)!= int:\n        raise ValueError(\"n and m must be integers\")\n\n    # Calculate the first term of the sequence using the Euler's formula\n    a = (-1) ** (n // 2) * (2 * m + 1) / ((n + 1) // 2)\n\n    # Calculate the remaining terms of the sequence\n    for i in range(2, n // 2 + 1):\n        a += (-1) ** i * (2 * m + 2) / (i * (i + 1))\n\n    # Return the final value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a = (a * i) // j\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        n, m = m, n\n\n    # Initialize the matrix with zeros\n    A = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    # Fill the matrix with values\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            A[i][j] = 1 + A[i - 1][j]\n\n    # Calculate the Eulerian number\n    euler = sum([A[i][j] * (n - i + 1) * (m - j + 1) for i in range(1, n + 1) for j in range(1, m + 1)])\n\n    return euler"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define a function to calculate factorial\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    # Calculate the product of n and factorial(n)\n    a_n = n * factorial(n)\n\n    # Calculate the product of m and factorial(m)\n    a_m = m * factorial(m)\n\n    # Calculate the product of a_n and a_m\n    a_nm = a_n * a_m\n\n    # Return the Eulerian number a(n, m)\n    return a_nm"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = ''.join(sorted(input_list[i][j]))\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # append the given list to the given tuple\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_list) + test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists using the + operator\n    combined_list = test_list + test_tup\n    \n    # Convert the combined list to a tuple using the tuple() function\n    combined_tuple = tuple(combined_list)\n    \n    # Return the combined tuple\n    return combined_tuple"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)  # convert the tuple to a list\n    test_list.extend(test_tup)  # extend the list with the tuples elements\n    return test_list  # return the modified list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists\n    new_list = test_list + test_tup\n    \n    # Convert the list to a tuple\n    new_tup = tuple(new_list)\n    \n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists so we can modify them\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    \n    # Loop through the tuples and add each element to the list\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    \n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge two sorted lists\n    sorted_list = num1 + num2\n    # Merge sorted list and third list\n    merged_list = sorted_list + num3\n    # Sort the merged list\n    heapq.heapify(merged_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    heapq.heappush(merged_list, heapq.heappop(num2))\n    heapq.heappush(merged_list, heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into one\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    # Append any remaining elements\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    # Convert the merged list to a sorted list\n    sorted_list = []\n    for item in merged_list:\n        heapq.heappush(sorted_list, item)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge num1, num2 and num3\n    merged_list = num1 + num2 + num3\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # convert the lists to sets to remove duplicates\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n    # convert the sets to lists to merge them\n    num1_list = list(num1)\n    num2_list = list(num2)\n    num3_list = list(num3)\n    # use heapq to merge the sorted lists\n    result = []\n    heapq.heapify(num1_list)\n    heapq.heapify(num2_list)\n    heapq.heapify(num3_list)\n    while num1_list and num2_list and num3_list:\n        if heapq.heappop(num1_list) <= heapq.heappop(num2_list):\n            result.append(heapq.heappop(num1_list))\n        elif heapq.heappop(num1_list) > heapq.heappop(num2_list):\n            result.append(heapq.heappop(num2_list))\n        else:\n            result.append(heapq.heappop(num3_list))\n    # convert the lists back to sets to remove duplicates and sort them\n    result = list(set(result))\n    result.sort()\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Initialize an empty list to hold the merged list\n    merged_list = []\n    \n    # Initialize two heaps: one for each list\n    heap1 = []\n    heap2 = []\n    \n    # Convert each list to a heap\n    for i in range(len(num1)):\n        heapq.heappush(heap1, num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(heap2, num2[i])\n    \n    # Merge the heaps into a single sorted list\n    while heap1 and heap2:\n        if heapq.heappop(heap1) < heapq.heappop(heap2):\n            heapq.heappush(merged_list, heapq.heappop(heap1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(heap2))\n    \n    # Add any remaining elements to the merged list\n    while heap1:\n        heapq.heappush(merged_list, heapq.heappop(heap1))\n    while heap2:\n        heapq.heappush(merged_list, heapq.heappop(heap2))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    :param num1: a list of sorted integers\n    :param num2: a list of sorted integers\n    :param num3: a list of sorted integers\n    :return: a single sorted list of integers\n    \"\"\"\n\n    # Helper function to merge two sorted lists into a single sorted list\n    def merge_lists(list1, list2):\n        result = []\n        i, j = 0, 0\n        while i < len(list1) and j < len(list2):\n            if list1[i] < list2[j]:\n                result.append(list1[i])\n                i += 1\n            else:\n                result.append(list2[j])\n                j += 1\n        result += list1[i:]\n        result += list2[j:]\n        return result\n\n    # Merge the three sorted lists into a single sorted list\n    merged_list = merge_lists(num1, num2)\n    merged_list = merge_lists(merged_list, num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three input lists into one sorted list\n    sorted_list = []\n    while num1 and num2 and num3:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            sorted_list.append(num1.pop(0))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            sorted_list.append(num2.pop(0))\n        else:\n            sorted_list.append(num3.pop(0))\n    \n    # Add any remaining elements to the sorted list\n    if num1:\n        sorted_list.extend(num1)\n    elif num2:\n        sorted_list.extend(num2)\n    elif num3:\n        sorted_list.extend(num3)\n    \n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n):\n    # Convert the binary string into a list of characters\n    binary = list(s)\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop n times\n    for i in range(n):\n        # Rotate the binary list by 1 position to the left\n        binary.insert(0, binary.pop())\n\n        # Iterate over the rotated list\n        for j in range(len(binary)):\n            # If the character at index j is odd, increment the count\n            if int(binary[j]) % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Converting binary string to list of binary digits\n    binary_list = [int(digit) for digit in s]\n    # Number of digits in the binary string\n    n_digits = len(binary_list)\n    # Total number of odd numbers in the binary string\n    odd_count = 0\n    # Counting odd numbers in each rotated position\n    for i in range(n):\n        # Starting with the leftmost digit in the binary string\n        current_digit = binary_list[0]\n        # Counting the odd numbers in the rotated position\n        for j in range(n_digits):\n            # If the current digit is odd, increment the count\n            if current_digit % 2 == 1:\n                odd_count += 1\n            # Shifting the current digit to the right\n            current_digit = binary_list[j+1] if j+1 < n_digits else binary_list[0]\n    # Returning the total number of odd numbers in the binary string\n    return odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    This function takes a binary string s and an integer n and returns the number of odd values that can be obtained after rotating the binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    rotated_s = s\n    # Loop through the given number of times\n    for i in range(n):\n        # Calculate the number of odd values in the rotated string\n        odd_count = sum([int(x) for x in rotated_s if x == '1'])\n        # Update the count variable with the new value\n        count += odd_count\n        # Rotate the string to the left by one position\n        rotated_s = rotated_s[1:] + rotated_s[0]\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Convert the binary string to a list of integers\n    binary_list = [int(x) for x in s]\n\n    # Rotate the binary list the given number of times\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n\n    # Loop through the binary list and count the odd values\n    for num in binary_list:\n        if num % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    # create a binary string of length n from s\n    s = bin(int(s,2))[2:].zfill(n)\n\n    # initialize variables\n    count = 0\n\n    # loop through each bit in the binary string\n    for i in range(n):\n        # if the bit is odd, increment count\n        if int(s[i]) % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize an empty dictionary to store the count of odd numbers\n    odd_count = {}\n    # Count the number of 0s in the binary string\n    zero_count = s.count('0')\n    # Initialize the count of odd numbers to the number of 0s in the binary string\n    odd_count['0'] = zero_count\n    # If the binary string is not divisible by 4, the last 0s will be 0000 or 0001, so we need to count them as well\n    if zero_count % 4!= 0:\n        odd_count['0000'] = 1\n        odd_count['0001'] = 1\n        zero_count += 2\n    # Loop through each character of the binary string and update the odd count dictionary\n    for i in range(n):\n        for char in s:\n            # Convert the character to an integer and add 1 to it to find the corresponding odd number\n            odd_num = int(char) + 1\n            # If the odd number is not already in the dictionary, initialize it to 0\n            if odd_num not in odd_count:\n                odd_count[odd_num] = 0\n            # Increment the count of the odd number by 1\n            odd_count[odd_num] += 1\n    # Return the dictionary of odd counts\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    n = n % len(s)  # To make the rotation number within the range of the string length\n    return len(filter(lambda x: x % 2!= 0, [int(y) for y in s] * n))"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # Convert the binary string to a list of characters\n    binary_list = list(s)\n    \n    # Loop through the given number of times\n    for i in range(n):\n        # Reverse the binary list\n        binary_list = binary_list[::-1]\n        \n    # Count the number of odd values in the list\n    count = 0\n    for i in binary_list:\n        if int(i) % 2 == 1:\n            count += 1\n            \n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize an empty list to store the rotated binary string\n    rotated = []\n    # Loop through each character in the input string\n    for char in s:\n        # Convert the character to an integer and add it to the rotated list\n        rotated.append(int(char))\n    # Rotate the binary string the given number of times\n    for _ in range(n):\n        # Initialize two pointers to the first and last elements in the rotated list\n        i = 0\n        j = len(rotated) - 1\n        # Swap the elements at i and j\n        rotated[i], rotated[j] = rotated[j], rotated[i]\n    # Initialize an empty list to store the odd numbers in the rotated binary string\n    odd_numbers = []\n    # Loop through each element in the rotated list\n    for num in rotated:\n        # Check if the element is odd and add it to the odd_numbers list if it is\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    # Return the length of the odd_numbers list\n    return len(odd_numbers)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list\n    lst = list(s)\n\n    # Rotate the list n times\n    for i in range(n):\n        lst.append(lst.pop(0))\n\n    # Count the number of odd numbers\n    count = 0\n    for i in lst:\n        if i % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for item in nestedlist:\n        if isinstance(item, list):\n            common_set |= set(common_in_nested_lists(item))\n        else:\n            common_set.add(item)\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # initialize an empty set to store the common elements\n    common_set = set()\n    \n    # iterate over all lists in the nested list\n    for lst in nestedlist:\n        # iterate over all elements in the list\n        for elem in lst:\n            # add the element to the set if it's not already there\n            if elem not in common_set:\n                common_set.add(elem)\n    \n    # return the set of common elements\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store common elements\n    common = set()\n\n    # loop through the nested lists\n    for item in nestedlist:\n        # check if the item is in the set of common elements\n        if item in common:\n            # if it is, add it to the set of common elements\n            common.add(item)\n        # if the item is not in the set of common elements, check if it's a set\n        elif isinstance(item, set):\n            # if it is, add all the elements of the set to the set of common elements\n            common.update(item)\n        # if the item is not a set or a set of common elements, add it to the set of common elements\n        else:\n            common.add(item)\n\n    # return the set of common elements\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # iterate over all elements in the nested list\n    for i in range(len(nestedlist)):\n        # iterate over all elements in the current list\n        for j in range(i+1, len(nestedlist)):\n            # if both elements are same, add it to the result list\n            if nestedlist[i] == nestedlist[j]:\n                result.append(nestedlist[i])\n\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Convert the nested list to a set to remove duplicates\n    unique_set = set(tuple(x) for x in nestedlist)\n    # Convert the set back to a list of tuples\n    result_list = list(unique_set)\n    # Sort the list of tuples and return the first element\n    return result_list[0]\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        for item in sublist:\n            common.add(item)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize a set to store the common elements\n    common_set = set()\n    # iterate through the nested list\n    for sublist in nestedlist:\n        # iterate through the sublist\n        for item in sublist:\n            # add the item to the common set if it's not already in it\n            if item not in common_set:\n                common_set.add(item)\n    # convert the common set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set of the first element of each nested list\n    nestedlist_sets = [set(sublist[0]) for sublist in nestedlist]\n\n    # Find the intersection of all sets using the & operator\n    common_elements = nestedlist_sets[0] & nestedlist_sets[1] &...\n\n    # Convert the set back to a list\n    common_elements = list(common_elements)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        set2 = set(nestedlist[i])\n        set1 = set1.intersection(set2)\n    return list(set1)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i.keys())!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            empty = False\n            break\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in list1:\n        if dit:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n    nums (tuple): A tuple of positive integers.\n\n    Returns:\n    int: The single integer representation of the input tuple.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate over the elements of the tuple\n    for num in nums:\n        # Add the current element to the result\n        result += num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    # Define a function to check if an element can be converted to a float\n    def is_convertible(element):\n        try:\n            float(element)\n            return True\n        except ValueError:\n            return False\n\n    # Convert all elements in the list to floats that can be converted\n    test_list_converted = []\n    for sublist in test_list:\n        sublist_converted = []\n        for element in sublist:\n            if is_convertible(element):\n                sublist_converted.append(float(element))\n            else:\n                sublist_converted.append(element)\n        test_list_converted.append(sublist_converted)\n\n    return test_list_converted"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                sublist.remove(item)\n                sublist.append(float(item))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each row of the test_list\n    for row in test_list:\n        # Loop through each element in the row\n        for item in row:\n            # Try to convert the element to a float. If it can be converted, store it in a new row.\n            try:\n                new_item = float(item)\n                row.append(new_item)\n            except ValueError:\n                pass\n    # Return the modified test_list\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                print(f\"{element} cannot be converted to a float.\")\n                return None\n            else:\n                row[row.index(element)] = float(element)\n                print(f\"{element} converted to a float.\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for subitem in item:\n            try:\n                float(subitem)\n            except ValueError:\n                try:\n                    int(subitem)\n                    subitem = float(subitem)\n                except ValueError:\n                    pass\n            item[item.index(subitem)] = subitem"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            result.append(list_to_float(item))\n        elif isinstance(item, (int, float)):\n            result.append(float(item))\n        else:\n            raise ValueError(\"Unsupported type in list: %s\" % type(item))\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        new_row = []\n        for item in row:\n            if isinstance(item, str):\n                try:\n                    new_item = float(item)\n                except ValueError:\n                    new_item = item\n            elif isinstance(item, float):\n                new_item = item\n            else:\n                new_item = str(item)\n            new_row.append(new_item)\n        result.append(new_row)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                try:\n                    float(str(element))\n                except ValueError:\n                    continue\n                else:\n                    sublist[test_list.index(sublist)] = float(str(element))\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and store it in a list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            unique_element = arr[i]\n            break\n\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a variable to store the element that appears only once\n    unique_element = None\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        # if the element at the current index is equal to the previous element, it means it appears only once\n        if arr[i] == arr[i-1] and arr[i]!= unique_element:\n            unique_element = arr[i]\n            break\n    \n    # return the unique element\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            for j in range(i+1, n):\n                if arr[j] == arr[i]:\n                    return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the count of each element in the array\n    count = {}\n    \n    # iterate over the array and update the count of each element\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # iterate over the dictionary and find the element that appears only once\n    for key in count:\n        if count[key] == 1:\n            return key\n    \n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two pointers: one for the start of the array and one for the end\n    start, end = 0, len(arr) - 1\n    # Initialize a variable to store the element that appears only once\n    single_elem = None\n    \n    # Iterate over the array until we find two distinct elements\n    while start < end:\n        # Check if the current element is the same as the previous element\n        if arr[start] == arr[end]:\n            # If it is, we have found a duplicate\n            single_elem = arr[start]\n            # Move the pointers to find another duplicate\n            start += 1\n            end -= 1\n        # If the current element is less than the previous element, move the start pointer to the right\n        elif arr[start] < arr[end]:\n            start += 1\n        # If the current element is greater than the previous element, move the end pointer to the left\n        else:\n            end -= 1\n    \n    # Return the element that appears only once\n    return single_elem"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)): # check if there are duplicate elements in the array\n        return None # if there are duplicate elements, return None\n    else:\n        return arr[0] # if there are no duplicate elements, return the first element in the array"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Loop through the array and increment the frequency count for each element\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # Find the element(s) that appears only once in the array\n    for i in freq:\n        if freq[i] == 1:\n            return i\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    # Initialize variables for the count of occurrences and the index of the element\n    count = 0\n    index = -1\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is the same as the previous element and the count is 1, return the current element\n        if i > 0 and arr[i] == arr[i-1] and count == 1:\n            return arr[i]\n\n        # If the current element is not the same as the previous element, increment the count and reset the index to i\n        if i > 0 and arr[i]!= arr[i-1]:\n            count = 1\n            index = i\n\n        # If the current element is the same as the previous element and the count is 0, reset the index to i\n        if i > 0 and arr[i] == arr[i-1] and count == 0:\n            index = i\n\n        # If the current element is not the same as the previous element and the count is greater than 1, reset the index to i\n        if i > 0 and arr[i]!= arr[i-1] and count > 1:\n            index = i\n\n        # Increment the count if the current element is the same as the previous element and the count is 0 or 1\n        if i > 0 and arr[i] == arr[i-1] and (count == 0 or count == 1):\n            count += 1\n\n    # If the count is greater than 1 and the index is still -1, return None\n    if count > 1 and index == -1:\n        return None\n\n    # Return the element that appears only once in the array\n    return arr[index]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        for i in range(1, n-1):\n            if arr[i] == arr[i-1] and arr[i] == arr[i+1]:\n                return arr[i]\n        return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Given a list of tuples, find the maximum absolute product between numbers in pairs of tuples.\n\n    Args:\n    list1 (list): a list of tuples, where each tuple contains two numbers.\n\n    Returns:\n    int: the maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = -float('inf')\n    for pair in list1:\n        product = max(abs(pair[0]), abs(pair[1])) * min(abs(pair[0]), abs(pair[1]))\n        max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    current_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if abs(current_product) > abs(max_product):\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = abs(list1[i][0] * list1[j][1])\n            if prod > max_product:\n                max_product = prod\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples.\n    \"\"\"\n    max_product = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            product = max(lst[i][0]*lst[j][0], lst[i][1]*lst[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = float('-inf')\n    max_pair = float('-inf'), float('-inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_prod:\n                max_prod = abs(list1[i][0] * list1[j][1])\n                max_pair = (list1[i][0], list1[j][1])\n\n    return max_pair"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes an integer limit as input and returns the sum of all amicable numbers from 1 to limit.\n    \"\"\"\n    # function to check if a number is a prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # function to find all the factors of a number\n    def factors(n):\n        factors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors.append(i)\n        return factors\n    \n    # function to find all the amicable numbers between 1 and limit\n    def amicable_numbers(limit):\n        amicable_numbers = []\n        for i in range(1, limit + 1):\n            if is_prime(i) and is_prime(limit - i) and i!= limit - i:\n                amicable_numbers.append(i)\n        return amicable_numbers\n    \n    # finding all amicable numbers\n    amicable_numbers_list = amicable_numbers(limit)\n    total_sum = sum(amicable_numbers_list)\n    \n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_proper_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\n\ndef sum_of_proper_divisors(n):\n    '''\n    Find the sum of proper divisors of a given number.\n    '''\n    divisors = [i for i in range(1, int(n**0.5)+1) if n % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables\n    amicable_sum = 0\n    num = 1\n    # Check for all numbers up to the limit\n    while num <= limit:\n        # Check if the number is amicable\n        if is_amicable(num):\n            amicable_sum += num\n        # Increment the number\n        num += 1\n    # Return the sum of all amicable numbers\n    return amicable_sum\n\n\ndef is_amicable(num):\n    '''\n    Helper function to check if a number is amicable.\n    '''\n    # Check if the number is divisible by any number up to its square root\n    sqrt_num = int(num**0.5)\n    for i in range(1, sqrt_num+1):\n        if (num % i) == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    # Initialize variables\n    sum = 0\n    amicable_sum = 0\n\n    # Iterate through numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(i):\n            # Add the number to the sum\n            sum += i\n\n            # Check if the sum is also amicable\n            if is_amicable(sum):\n                # Add the sum to the amicable sum\n                amicable_sum += sum\n\n    return amicable_sum\n\n\ndef is_amicable(num):\n    # Check if num is even or less than 2\n    if num <= 1 or num % 2 == 0:\n        return False\n\n    # Initialize variables\n    sum = 0\n    test_num = num\n\n    # Iterate through numbers from 1 to test_num - 1\n    for i in range(1, test_num):\n        # If test_num is divisible by i, it can't be the sum\n        if test_num % i == 0:\n            break\n        # Otherwise, add i to the sum\n        else:\n            sum += i\n\n    # If the sum is equal to test_num, the number is amicable\n    return sum == test_num\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to a specified number.\n    '''\n    for i in range(1, num):\n        if num % i == 0 and i!= num and is_prime(i):\n            return True\n    return False\n\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    \n    for i in range(2, limit + 1):\n        if i in amicable_numbers:\n            continue\n        \n        # Check if i is amicable to any other number in the range [2, limit]\n        is_amicable = False\n        for j in range(2, limit + 1):\n            if i == j:\n                continue\n            \n            if i % j == 0 and j % i == 0:\n                is_amicable = True\n                break\n        \n        if is_amicable:\n            amicable_numbers.append(i)\n    \n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a dictionary to store the sum of an amicable pair\n    amicable_sum = {}\n\n    # Loop through numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the current number is amicable with any other number in the range\n        for other_num in range(1, limit+1):\n            # Check if the current number is divisible by the other number\n            if other_num > num and num % other_num == 0:\n                # If it is, check if the other number is also a factor of the sum of the current and other numbers\n                if other_num == limit - num:\n                    # If it is, add the sum to the dictionary\n                    amicable_sum[num] = amicable_sum.get(num, 0) + num + other_num\n                    break\n\n    # Sum up all the values in the dictionary and return the total\n    return sum(amicable_sum.values())"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    for i in range(1, limit):\n        if i!= 1 and is_amicable(i):\n            sum_of_amicable += i\n    return sum_of_amicable\n\ndef is_amicable(num):\n    '''\n    Check if a given number is amicable or not.\n    '''\n    a, b = 2, num\n    while b!= 1:\n        if b % a == 0:\n            return False\n        a, b = b, a - b\n    return True\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, num):\n        sum1 += i\n        sum2 += num - i\n        if sum1 == sum2:\n            return True\n    return False\n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to keep track of the sum and the largest amicable number found\n    amicable_sum = 0\n    largest_amicable_num = 0\n    \n    # Loop over all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # If it is, check if it is also an amicable number\n            if is_amicable(num):\n                # If it is, add it to the sum and update the largest amicable number found\n                amicable_sum += num\n                if num > largest_amicable_num:\n                    largest_amicable_num = num\n    \n    # Return the sum of the largest amicable number and the sum of all amicable numbers found\n    return largest_amicable_num, amicable_sum\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a given number is an amicable number.\n    '''\n    # Check if the number is within the range of potential amicable numbers\n    if 1 <= num <= 1000:\n        # Check if the number is divisible by any of the prime numbers within the range\n        for prime in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n            if num % prime == 0:\n                return False\n    \n    return True"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle, 3)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert the complex number into a form that cmath can handle\n    angle = cmath.phase(a+b*1j)\n    # Convert the angle from radians to degrees\n    angle = angle*180/cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the modulus\n    modulus = cmath.sqrt(a**2 + b**2)\n    \n    # calculate the phase\n    phase = cmath.phase(modulus)\n    \n    return phase"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the angle of the complex number using the cmath library\n    angle_radian = cmath.phase(a+b*1j)\n\n    # Convert the angle from radians to degrees\n    angle_degree = cmath.degrees(angle_radian)\n\n    return angle_degree"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_0 = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            prev_0 += 1\n        else:\n            if prev_0 > 0:\n                max_diff = max(max_diff, i-prev_0)\n            prev_0 = 0\n            \n    if prev_0 > 0:\n        max_diff = max(max_diff, len(string)-prev_0)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n            else:\n                break\n            if count_0 > count_1:\n                break\n            elif count_1 > count_0:\n                break\n            else:\n                max_diff = max(max_diff, count_0 - count_1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    # Initialize variables\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one count\n        elif char == '1':\n            one_count += 1\n        # If the character is a 0 or a 1, check if the difference between the counts is greater than the current maximum\n        if (zero_count - one_count) > max_diff:\n            max_diff = zero_count - one_count\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    # create an empty dictionary to store the count of 0s and 1s in each substring of the binary string\n    count_dict = {}\n\n    # loop through each substring of the binary string\n    for i in range(len(string)):\n        # create a new substring by slicing the original string from i to the end of the string\n        substring = string[i:]\n\n        # loop through each character in the substring\n        for j in substring:\n            # if the character is a 0, increment the count of 0s in the dictionary for the current substring\n            if j == '0':\n                count_dict[substring] = count_dict.get(substring, 0) + 1\n            # if the character is a 1, increment the count of 1s in the dictionary for the current substring\n            else:\n                count_dict[substring] = count_dict.get(substring, 0) + 1\n\n    # create an empty list to store the maximum difference between the count of 0s and 1s in each substring\n    max_diff_list = []\n\n    # loop through each substring of the binary string\n    for i in range(len(string)):\n        # create a new substring by slicing the original string from i to the end of the string\n        substring = string[i:]\n\n        # if the count of 0s in the dictionary for the current substring is greater than the count of 1s in the dictionary for the current substring, append the difference to the max_diff_list\n        if count_dict[substring] > count_dict[substring][::-1]:\n            max_diff_list.append(count_dict[substring] - count_dict[substring][::-1])\n\n    # find the maximum difference in the max_diff_list and return it\n    if len(max_diff_list) == 0:\n        return 0\n    else:\n        return max(max_diff_list)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    current_diff = 0\n\n    for char in string:\n        if char == '0':\n            zero_count += 1\n            one_count = 0\n        elif char == '1':\n            one_count += 1\n            zero_count = 0\n\n        if zero_count > one_count:\n            current_diff = zero_count - one_count\n        else:\n            current_diff = one_count - zero_count\n\n        if current_diff > max_diff:\n            max_diff = current_diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in string]\n\n    # Initialize the maximum difference as 0\n    max_diff = 0\n\n    # Iterate over all possible sub-strings of the binary list\n    for i in range(1, len(binary_list)):\n        # Calculate the difference between the number of 0s and number of 1s in the current sub-string\n        diff = binary_list[i] - binary_list[i-1]\n\n        # Update the maximum difference if the current difference is greater than the maximum\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    n = len(string)\n    count = [0] * 2\n    \n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n            \n    max_diff = 0\n    \n    for i in range(n-1):\n        if string[i] == '0':\n            if string[i+1] == '1':\n                max_diff = max(max_diff, count[0] - count[1])\n                count[0] -= 1\n            else:\n                count[0] -= 1\n        else:\n            if string[i+1] == '1':\n                max_diff = max(max_diff, count[1] - count[0])\n                count[1] -= 1\n            else:\n                count[1] -= 1\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n        if count_0 == 0:\n            if count_1 == 0:\n                continue\n            else:\n                max_diff = max(max_diff, count_1)\n                count_1 = 0\n        elif count_1 == 0:\n            max_diff = max(max_diff, count_0)\n            count_0 = 0\n            \n        elif count_0 < count_1:\n            max_diff = max(max_diff, count_0 - count_1)\n            count_0 = 0\n        else:\n            max_diff = max(max_diff, count_1 - count_0)\n            count_1 = 0\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string) - 1):\n        diff = count_ones(string[i:]) - count_zeros(string[i:])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\ndef count_zeros(string):\n    count = 0\n    for char in string:\n        if char == '0':\n            count += 1\n    return count\n\ndef count_ones(string):\n    count = 0\n    for char in string:\n        if char == '1':\n            count += 1\n    return count"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n\n    for num in range(1, a + 1):\n        if a % num == 0 and b % num == 0:\n            divisors.append(num)\n\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    This function calculates the sum of common divisors of two given numbers a and b.\n    It uses the Euclidean algorithm to find the common divisors.\n    '''\n\n    # Finding the GCD of a and b using Euclidean algorithm\n    while b!= 0:\n        a, b = b, a % b\n\n    # Finding the sum of common divisors\n    sum_div = a\n\n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the sum of all common divisors of a and b\n    common_divisors = []\n    for i in range(1,a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Return the sum of common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Finding the list of common divisors of the two numbers\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Calculating the sum of common divisors\n    sum_div = sum(divisors)\n\n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Define a function to check if a number is a common divisor of b\n    def is_common_divisor(a, b):\n        \"\"\"\n        Define a function to check if a number is a common divisor of b\n        \"\"\"\n        for i in range(1, b + 1):\n            if a % i == 0 and b % i == 0:\n                return True\n        return False\n\n    # Initialize a variable to store the sum of common divisors\n    common_divisor_sum = 0\n\n    # Check if both numbers are positive\n    if a > 0 and b > 0:\n        # Check if a is a common divisor of b\n        if is_common_divisor(a, b):\n            common_divisor_sum += a\n\n        # Check if b is a common divisor of a\n        if is_common_divisor(b, a):\n            common_divisor_sum += b\n\n    # Return the sum of common divisors\n    return common_divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize the sum of common divisors to zero\n    common_divisor_sum = 0\n\n    # Loop through the numbers from 1 to the larger number\n    for num in range(1, max(a, b) + 1):\n        # Check if the given number is a divisor of both numbers\n        if a % num == 0 and b % num == 0:\n            # Add the common divisor to the sum\n            common_divisor_sum += num\n\n    return common_divisor_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # function to check if a number is divisible by another number\n    def is_divisible(num, divisor):\n        return num % divisor == 0\n\n    # function to find the common divisor of two numbers\n    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    # function to find the sum of common divisors of two numbers\n    def sum_of_common_divisors(a, b):\n        common_divisor = gcd(a, b)\n        if is_divisible(a, common_divisor) and is_divisible(b, common_divisor):\n            return common_divisor\n        else:\n            return sum_of_common_divisors(a, b)\n\n    # calling the sum_of_common_divisors function to find the sum of common divisors\n    sum_common_divisors = sum_of_common_divisors(a, b)\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_set = set()\n    common_divisors = []\n\n    # Loop through all numbers from 1 to the smaller of the two numbers\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # If it is, add it to the set of common divisors\n            divisors_set.add(i)\n\n    # Loop through all numbers from the larger of the two numbers to 1\n    for i in range(max(a, b), 1, -1):\n        # Check if i is a divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # If it is, add it to the set of common divisors\n            divisors_set.add(i)\n\n    # Loop through all numbers in the set of common divisors and add them to the list\n    for divisor in divisors_set:\n        common_divisors.append(divisor)\n\n    # Return the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the common divisor of a and b using Euclid's algorithm\n    while b!= 0: \n        a, b = b, a % b \n\n    # Calculate the sum of common divisors\n    total = 0 \n    i = 1 \n    while i <= a: \n        if a % i == 0 and b % i == 0: \n            total += i \n        i += 1\n\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Create a set to store common divisors of a and b\n    common_divisors = set()\n    \n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # If a is divisible by i, add it to the set of common divisors\n        if a % i == 0:\n            common_divisors.add(i)\n            # If b is divisible by i, add it to the set of common divisors\n            if b % i == 0:\n                common_divisors.add(i)\n    \n    # Find the sum of the common divisors\n    sum_common_divisors = sum(common_divisors)\n    \n    return sum_common_divisors"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(1, y+1):\n        result += x\n    return result\n\nprint(multiply_int(2, 5)) # Output: 10"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    print(result)"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n\n    # Create an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # If the word is longer than n characters, add it to the list\n        if len(word) > n:\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    long_words = [word for word in words if len(word) > n] # filter out words that are longer than n characters\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n    # Create an empty list to store the words longer than n characters\n    long_words_list = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If the length of the word is greater than n, add it to the long_words_list\n            long_words_list.append(word)\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get the size of the matrix\n    n = len(my_matrix)\n\n    # calculate the sum of the matrix\n    matrix_sum = 0\n    for i in range(n):\n        for j in range(n):\n            matrix_sum += my_matrix[i][j]\n\n    # check if the sum of the matrix is equal to the product of the numbers from 1 to n^2\n    if matrix_sum == n**2*(n**2+1)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n\n    Parameters:\n    my_matrix (list): A list of lists representing the matrix.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Calculate the sum of the first row\n    first_row_sum = sum(my_matrix[0])\n\n    # Calculate the sum of the first column\n    first_col_sum = sum(my_matrix[i][0] for i in range(len(my_matrix)))\n\n    # Calculate the sum of the two diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n\n    # Calculate the sum of the two anti-diagonals\n    anti_diag_sum1 = sum(my_matrix[i][len(my_matrix)-1-j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n    anti_diag_sum2 = sum(my_matrix[j][i] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n\n    # Check if the sum of the first row, first column, and diagonals match\n    if first_row_sum == first_col_sum and first_row_sum == diag_sum1 and first_row_sum == diag_sum2:\n        return True\n    # Check if the sum of the first row, first column, and anti-diagonals match\n    elif first_row_sum == first_col_sum and first_row_sum == anti_diag_sum1 and first_row_sum == anti_diag_sum2:\n        return True\n    # Check if the sum of the first column, second row, and diagonals match\n    elif first_col_sum == sum(my_matrix[j][0] for j in range(len(my_matrix))) and first_col_sum == sum(my_matrix[i][i] for i in range(len(my_matrix))) and first_col_sum == sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))):\n        return True\n    # Check if the sum of the first column, second row, and anti-diagonals match\n    elif first_col_sum == sum(my_matrix[j][len(my_matrix)-1-j] for j in range(len(my_matrix))) and first_col_sum == sum(my_matrix[i][i] for i in range(len(my_matrix))) and first_col_sum == sum(my_matrix[j][i] for i in range(len(my_matrix))):\n        return True\n    # Check if the sum of the two diagonals match\n    elif diag_sum1 == diag_sum2:\n        return True\n    # Check if the sum of the two anti-diagonals match\n    elif anti_diag_sum1 == anti_diag_sum2:\n        return True\n    # If none of the conditions are met, the matrix is not a magic square\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the dimensions of the matrix are 3x3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if each row, column, and diagonal contain the same values\n    for i in range(3):\n        if my_matrix[i]!= [int(x) for x in str(my_matrix[i])]:\n            return False\n        if my_matrix.count(my_matrix[i])!= 3:\n            return False\n    \n    # Check if there are any repeated values in the matrix\n    for i in range(3):\n        if my_matrix.count(my_matrix[i][0])!= 1:\n            return False\n        if my_matrix.count(my_matrix[0][i])!= 1:\n            return False\n        if my_matrix.count(my_matrix[i][i])!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Check if the matrix is square\n    if n * n!= len(my_matrix):\n        return False\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the rows\n    row_sums = [sum(my_matrix[i][j] for j in range(n)) for i in range(n)]\n\n    # Calculate the sum of the columns\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n\n    # Check if the diagonal and row/column sums are equal\n    if diagonal_sum!= row_sums[0] or diagonal_sum!= col_sums[0]:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            # Check if the element at (i, j) is not the sum of the corresponding row and column\n            if my_matrix[i][j]!= (row_sums[i] + col_sums[j]):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix is a 3x3 square\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # calculate the sums of the first, second, third, first, second, third rows\n    sum1 = sum([sum(my_matrix[0]), sum(my_matrix[1]), sum(my_matrix[2])])\n    sum2 = sum([sum(my_matrix[i]) for i in range(3)])\n    sum3 = sum([sum(my_matrix[0][i] for i in range(3))])\n    \n    # check if the sums of the first, second, third rows are equal\n    if sum1!= sum2 or sum1!= sum3:\n        return False\n    \n    # calculate the sums of the first, second, third columns\n    sum4 = sum([sum(row) for row in my_matrix])\n    sum5 = sum([sum(row[i] for row in my_matrix) for i in range(3)])\n    sum6 = sum([sum(row[i][j] for row in my_matrix for j in range(3)) for i in range(3)])\n    \n    # check if the sums of the first, second, third columns are equal\n    if sum4!= sum5 or sum4!= sum6:\n        return False\n    \n    # check if the sum of the diagonal elements is equal to the product of the diagonal elements\n    diagonal_sum = sum([my_matrix[i][i] for i in range(3)])\n    product_sum = sum([sum(my_matrix[i]) for i in range(3)])\n    if diagonal_sum!= product_sum:\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n\n    # Check if the matrix is a square\n    if n**2!= sum(sum(row) for row in my_matrix):\n        return False\n\n    # Check if the matrix has only integers in each row and column\n    for row in my_matrix:\n        if not all(isinstance(x, int) for x in row):\n            return False\n\n    # Check if the matrix has no repeating numbers\n    seen = set()\n    for row in my_matrix:\n        for x in row:\n            if x in seen:\n                return False\n            seen.add(x)\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a 3x3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # Check if the matrix has no repeated values\n    for row in my_matrix:\n        if len(set(row))!= 3:\n            return False\n\n    # Check if the matrix can form a magic square\n    for i in range(3):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(3))\n        diag_sum1 = my_matrix[i][i]\n        diag_sum2 = my_matrix[i][2-i]\n        if row_sum!= col_sum!= diag_sum1!= diag_sum2:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is of the required size\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix has no zeroes\n    for row in my_matrix:\n        for num in row:\n            if num == 0:\n                return False\n    \n    # Check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            magic_sum += my_matrix[i][j]\n            if magic_sum > len(my_matrix) ** 2:\n                return False\n            magic_sum -= my_matrix[j][i]\n            \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n    if magic_sum == 0:\n        return False\n    # Check the diagonal\n    for i in range(n):\n        if my_matrix[i][i]!= i+1 or my_matrix[i][n-i-1]!= i+1:\n            return False\n    # Check the rest of the matrix\n    for i in range(n-3):\n        for j in range(n-3):\n            if my_matrix[i][j] + my_matrix[i+1][j+1] + my_matrix[i+2][j+2]!= i+1:\n                return False\n            if my_matrix[j][i] + my_matrix[j+1][i+1] + my_matrix[j+2][i+2]!= i+1:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n    \n    # Check if the matrix has the magic square pattern\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= 1 or my_matrix[i][len(my_matrix)-i-1]!= 1:\n            return False\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if i == j or j == len(my_matrix)-i-1:\n                if my_matrix[i][j]!= my_matrix[i][len(my_matrix)-j-1]:\n                    return False\n    \n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    # Iterate over the list and update the frequency count in the defaultdict\n    for num in nums:\n        freq[num] += 1\n    # Find the item with the maximum frequency count\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Initialize a dictionary to keep track of the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list of numbers\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n\n    # Find the item with the highest frequency in the list that occurs at least once\n    max_occurrence = [num for num, count in freq.items() if count == max_freq]\n\n    # Return the item with the maximum frequency\n    return max(max_occurrence)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in count.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_num = None\n    max_freq = 0\n    \n    for num in nums:\n        count[num] += 1\n        if count[num] > max_freq:\n            max_num = num\n            max_freq = count[num]\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the maximum frequency of any item in the list\n    max_freq = max(freq.values())\n\n    # Find the item with the maximum frequency\n    max_item = None\n    for item, freq in freq.items():\n        if freq == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency in the dictionary\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    regex = r\"[^{}]\".format(vowels)\n    result = re.sub(regex, \"\", str1)\n    reversed_result = result[::-1]\n    return reversed_result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    result = []\n    for char in str1:\n        if char in vowels_set:\n            if not char.islower():\n                char = char.upper()\n            result.append(char)\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    rev_str = \"\"\n    for char in str1:\n        if char in vowels:\n            rev_str += char\n    return rev_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result)[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(char)\n            vowel_count += 1\n    return ''.join(result)[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char.lower() in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str_without_vowels = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            str_without_vowels += char\n    return str_without_vowels[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(string):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_string = \"\"\n    for char in string:\n        if char in vowels:\n            reversed_string = char + reversed_string\n    return reversed_string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \", \".join(str(elem) for elem in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i) + ', '\n    return str1[:-2]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return \" \".join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    result = ', '.join(str(x) for x in tup1)\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string = ''\n    for i in tup1:\n        string += str(i)\n    return string"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize sum to 0\n    total = 0\n    \n    # iterate over the list of numbers\n    for num in nums:\n        # check if the number is negative\n        if num < 0:\n            # add the negative number to the total\n            total += num\n    \n    # return the total sum of negative numbers\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negatives_sum = 0\n    for num in nums:\n        if num < 0:\n            negatives_sum += num\n    return negatives_sum\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * n + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(n):\n        hex_num += (2*i+1)**2\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(n+1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # convert n to integer\n    n = int(n)\n    # find the number of rows needed\n    num_rows = int((n + 1) / 2)\n    # initialize the first row\n    first_row = [1]\n    # initialize the second row\n    second_row = [1]\n    # initialize the result list\n    result = [first_row, second_row]\n    # loop through the remaining rows\n    for i in range(2, num_rows):\n        # calculate the previous row\n        prev_row = result[i - 1]\n        # append the sum of the previous row to the current row\n        curr_row = [prev_row[j] + prev_row[j + 1] for j in range(len(prev_row) - 1)]\n        # add the new row to the result list\n        result.append(curr_row)\n    # return the nth hexagonal number\n    return result[n - 1][0]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Convert n to an integer and check if it is a valid input\n    if not isinstance(n, int) or n < 1:\n        return \"Invalid input.\"\n\n    # Initialize the first 5 hexagonal numbers and their squares\n    hex_numbers = [1, 6, 15, 28, 45]\n    hex_squares = [1, 36, 129, 286, 525]\n\n    # Check if n is within the range of the hexagonal numbers\n    if n < 1 or n > len(hex_numbers):\n        return \"Invalid input.\"\n\n    # Return the nth hexagonal number\n    return hex_numbers[n-1]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Convert n to binary and then convert it to a hexadecimal number\n    hex_num = hex(n)\n    \n    # Remove the prefix \"0x\" and convert the remaining digits to integer\n    hex_num = int(hex_num[2:], 16)\n    \n    # Calculate the hexagonal number\n    hex_num = hex_num * 6\n    \n    # Convert the hexadecimal number back to binary and then convert it to decimal\n    dec_num = int(hex_num, 16)\n    \n    return dec_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the hexagonal formula\n    a = 5 / 2\n    b = (3 * a**2) - 1\n    # Use the formula to find the nth hexagonal number\n    return int(b * n) + 1"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = float(zero_count) / non_zero_count if non_zero_count > 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    ones = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            ones += 1\n\n    return zeros / ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    nonzeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            nonzeros[nonzeros.index(num)] += 1\n    return float(zeros.count(0)) / len(nonzeros)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    # convert the array to an array of bytes to make it easier to count zeros\n    arr = array('B', nums)\n    # count the number of zeros and non-zeros using the count function from the array module\n    zero_count = arr.count(0)\n    nonzero_count = len(arr) - zero_count\n    return zero_count / nonzero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n\n    for num in nums:\n        if num!= 0:\n            non_zeroes += 1\n        else:\n            zeroes += 1\n\n    if non_zeroes == 0:\n        return 0\n\n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create an array of zeros of the same length as the input array\n    zeros = array('i', [0] * len(nums))\n\n    # Iterate over each element in the input array and increment the corresponding index in the array of zeros\n    for num in nums:\n        zeros[nums.index(num)] += 1\n\n    # Calculate the sum of the non-zero elements in the array of zeros\n    non_zeros = sum(i for i in zeros if i!= 0)\n\n    # Calculate the ratio of non-zero elements to total elements in the array\n    ratio = non_zeros / len(nums)\n\n    # Return the ratio as a float value\n    return float(ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    zero_ratio = zeros / non_zeros\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    ratio = non_zeros / zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0])\n    ones = array('i', [0])\n    for num in nums:\n        if num == 0:\n            zeros.append(zeros[-1] + 1)\n        else:\n            ones.append(ones[-1] + 1)\n    return zeros[-1] / ones[-1]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n    \n    for num in nums:\n        if num!= 0:\n            non_zeroes += 1\n        else:\n            zeroes += 1\n            \n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # if n is even, it cannot be represented as sum of powers of 2\n    if n%2 == 0:\n        return False\n\n    # loop through all the numbers from 1 to n/2 and check if they can be represented as sum of powers of 2\n    for i in range(1, n//2+1):\n        # check if i^2 = n, and if n - i^2 is also a power of 2\n        if (i**2 == n) and (n - i**2 == 2**i):\n            return True\n\n    # if no power of 2 can be represented as sum of powers of 2, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # iterate from 0 to n/2\n    for i in range(n//2+1):\n        # check if the sum of powers of 2 is equal to the given number\n        if n - (2**i) == (2**i)*(2**(n-2**i)):\n            return True\n\n    # if no sum of powers of 2 is found, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # To check if the number is greater than or equal to 2, we can simply check if n % 2 == 0.\n    if n >= 2:\n        # To check if the number can be represented as sum of powers of 2, we can iterate through the bits of n\n        # and check if the power of 2 is non-zero. If the power of 2 is non-zero, we add the power of 2 to the sum.\n        sum = 0\n        while n > 0:\n            # To check if the bit at the rightmost position is 1, we can check if the rightmost bit of n is 1.\n            if n % 2 == 1:\n                # If the bit at the rightmost position is 1, we add the power of 2 to the sum.\n                sum += 1\n            # To shift n to the left by 1 bit, we can use the bitwise right shift operator >>.\n            n = n >> 1\n        # If the number can be represented as sum of non-zero powers of 2, we return True, else we return False.\n        if sum == 0:\n            return False\n        else:\n            return True\n    # If the number is less than or equal to 1, we can return True since the number cannot be represented as sum of powers of 2.\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize variables\n    two_powers = []\n    result = 0\n\n    # Loop through all bits of the binary representation of n\n    for i in range(8):\n        # Get the value of the i-th bit\n        bit = (n >> i) & 1\n        # If the bit is 1, add 2^i to the result\n        if bit == 1:\n            result += 2 ** i\n        # If the bit is 0, append 2^i to the list of two powers\n        elif bit == 0:\n            two_powers.append(2 ** i)\n\n    # Check if the result can be represented as the sum of two powers\n    if result in two_powers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n            n //= i\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            if (n//i)**2 == 2*i:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "Let's implement the above approach.<|im_sep|>"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 4:\n        return True\n    if n == 8:\n        return True\n    if n == 16:\n        return True\n    if n == 32:\n        return True\n    if n == 64:\n        return True\n    if n == 128:\n        return True\n    if n == 256:\n        return True\n    if n == 512:\n        return True\n    if n == 1024:\n        return True\n    if n == 2048:\n        return True\n    if n == 4096:\n        return True\n    if n == 8192:\n        return True\n    if n == 16384:\n        return True\n    if n == 32768:\n        return True\n    if n == 65536:\n        return True\n    if n == 131072:\n        return True\n    if n == 262144:\n        return True\n    if n == 524288:\n        return True\n    if n == 1048576:\n        return True\n    if n == 2097152:\n        return True\n    if n == 4194304:\n        return True\n    if n == 8388608:\n        return True\n    if n == 16777216:\n        return True\n    if n == 33554432:\n        return True\n    if n == 67108864:\n        return True\n    if n == 134217728:\n        return True\n    if n == 268435456:\n        return True\n    if n == 536870912:\n        return True\n    if n == 1073741824:\n        return True\n    if n == 2147483648:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    if count == 1:\n        return True\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r # assuming a radius of 1.0"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Calculate the circumference of the circle\n    circumference = 2 * 3.14 * r\n\n    # Return the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Create an empty set to store the flattened list\n    flattened_set = set()\n    \n    # Loop over the elements of the original list\n    for element in test_list:\n        # If the element is a list, recursively call the function on it\n        if isinstance(element, list):\n            flattened_set = flattened_set.union(extract_singly(element))\n        # If the element is not a list, add it to the set\n        else:\n            flattened_set.add(element)\n    \n    # Return the flattened set\n    return flattened_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    flat_set = set(flat_list)\n    return flat_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(sum(sublist) for sublist in test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(sum(test_list, []))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Determine the length of the list\n    n = len(nums)\n\n    # Perform a bubble sort on each sublist\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Create a copy of the list to avoid modifying the original one\n    nums_sorted = nums.copy()\n    \n    # Use the bubble sort algorithm to sort the list in non-decreasing order\n    for i in range(len(nums)):\n        swapped = False\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                swapped = True\n        if not swapped:\n            break\n    \n    return nums_sorted"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Bubble sort\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    # Reverse the sorted part of the list\n    for i in range(n//2):\n        nums[i], nums[n-i-1] = nums[n-i-1], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in nums[i:]\n        largest = nums[i]\n        for j in range(i, n):\n            if nums[j] > largest:\n                largest = nums[j]\n        # swap nums[i] and largest\n        nums[i], nums[nums.index(largest)] = nums[nums.index(largest)], nums[i]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n\n    Pancake sort is an in-place variation of the bubble sort algorithm that works by sorting the array in reverse order.\n    It works by first sorting the array in increasing order, and then swapping adjacent elements in reverse order until the array is sorted.\n\n    This algorithm has a time complexity of O(n^2) in the worst case, but it has a space complexity of O(1).\n    '''\n\n    # Helper function to reverse the order of a subarray\n    def reverse_subarray(arr, start, end):\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    # Bubble sort function\n    def bubble_sort(arr, n):\n        for i in range(n):\n            # Last i elements are already sorted\n            for j in range(0, n-i-1):\n                # Swap if the element found is greater than the next element\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    # Pancake sort function\n    def pancake_sort(arr, n):\n        # One by one move boundary of elements\n        for start in range(n-1, 0, -1):\n            # Find the maximum element in remaining unsorted array\n            max_idx = start\n            for i in range(start+1, n):\n                if arr[i] > arr[max_idx]:\n                    max_idx = i\n            # Swap the maximum element with the first element\n            arr[start], arr[max_idx] = arr[max_idx], arr[start]\n            # Reverse the subarray starting from start\n            reverse_subarray(arr, start, n-1)\n\n    # Sort the given array using Pancake sort\n    pancake_sort(nums, len(nums))\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # reverse the list\n    nums = nums[::-1]\n    \n    # create a new list of indices for the pancakes\n    pancakes = [len(nums)-i-1 for i in range(len(nums))]\n    \n    # while there are pancakes left to sort\n    while pancakes:\n        # get the index of the smallest pancake\n        index = pancakes.index(min(pancakes))\n        \n        # swap the elements at the index and the end of the list\n        nums[index], nums[-1] = nums[-1], nums[index]\n        \n        # decrement the index of the smallest pancake\n        pancakes[index] = len(nums)\n        \n        # decrement the length of the list\n        nums.pop()"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # First, sort the list in descending order\n    for i in range(n):\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    # Then, reverse the sorted list\n    for i in range(n-1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Copy the input list to a new list so we can sort it in-place\n    nums_copy = nums[:]\n\n    # Initialize a list to store the indices of the sorted elements\n    sorted_indices = []\n\n    # Iterate until there are no more swaps\n    while len(nums_copy) > 1:\n        # Find the smallest element and its index\n        min_idx = 0\n        for i in range(1, len(nums_copy)):\n            if nums_copy[i] < nums_copy[min_idx]:\n                min_idx = i\n        # Add its index to the sorted indices list\n        sorted_indices.append(min_idx)\n        # Move the last element of the unsorted portion of the list to its correct position\n        nums_copy[min_idx], nums_copy[-1] = nums_copy[-1], nums_copy[min_idx]\n\n    # Add the sorted indices list to the end of the input list to sort it in-place\n    nums[:len(sorted_indices)] = sorted_indices\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    \n    # find the length of the list\n    n = len(nums)\n    \n    # perform pancake sort\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n                \n        # swap the maximum element with the first element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # reverse the unsorted part of the list\n        for j in range(i+1, n):\n            nums[j], nums[j-1] = nums[j-1], nums[j]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Bubble sort algorithm\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    # Convert the sorted array back to a list\n    sorted_nums = [nums[i] for i in range(n)]\n    return sorted_nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n\n    Args:\n    Input: A tuple of any data type.\n\n    Returns:\n    num_lists: An integer indicating the number of lists present in the tuple.\n    \"\"\"\n\n    # Initialize the counter variable to zero\n    num_lists = 0\n\n    # Loop through each element in the input tuple\n    for element in Input:\n\n        # If the element is a list, increment the counter variable\n        if isinstance(element, list):\n            num_lists += 1\n\n    # Return the number of lists found in the tuple\n    return num_lists"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the maximum difference variable\n    max_diff = float('-inf')\n    \n    # Iterate over the array and calculate the absolute difference between any two elements\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        \n        # Update the maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')  # Initialize max difference to negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() #sort the array in ascending order\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize max_diff variable with the first element of the array\n    max_diff = abs(arr[0] - arr[1])\n    # Loop through the array from the second element\n    for i in range(2, len(arr)):\n        # Calculate the absolute difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n        # Update max_diff variable if the current element is greater than max_diff\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum absolute difference between any two elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n    '''\n    \n    # Initialize variables to store the minimum and maximum values\n    min_val = arr[0]\n    max_val = arr[0]\n    \n    # Iterate through the array\n    for num in arr:\n        # If the number is less than the minimum value, update the minimum value\n        if num < min_val:\n            min_val = num\n        # If the number is greater than the maximum value, update the maximum value\n        elif num > max_val:\n            max_val = num\n    \n    # Calculate the maximum absolute difference between any two elements in the array\n    max_diff = max(abs(arr[i] - arr[j]) for i in range(len(arr)) for j in range(i+1, len(arr)))\n    \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables\n    x = 0\n    y = 0\n\n    # Check if a, b and n are all integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n\n    # Find the discriminant\n    d = (b**2) - (4*a*n)\n\n    # Check if the discriminant is less than 0\n    if d < 0:\n        return None\n\n    # Calculate the two solutions\n    x1 = (-b + (d**0.5)) // (2*a)\n    x2 = (-b - (d**0.5)) // (2*a)\n\n    # Check if both solutions are integers\n    if not (isinstance(x1, int) and isinstance(x2, int)):\n        return None\n\n    # Return the two solutions as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for i in range(-(n//a), (n//a)+1):\n        for j in range(-(n//b), (n//b)+1):\n            if a*i + b*j == n:\n                return (i, j)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n - 1):\n        x = i\n        y = n - i - 1\n        if a * x + b * y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return None\n    else:\n        x1 = -n / a\n        x2 = n / a\n        y1 = -n / b\n        y2 = n / b\n        return (x1, x2), (y1, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, 100):\n        for j in range(1, 100):\n            x = a * i + b * j\n            y = a * j - b * i\n            if x + y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Initialize variables\n    x1 = 0\n    y1 = 0\n    x2 = 0\n    y2 = 0\n\n    # Iterate until we find a solution\n    while x1*a + y1*b + n!= 0:\n        x1 += 1\n        x2 = -x1\n    while x2*a + y2*b + n!= 0:\n        y1 += 1\n        y2 = -y1\n\n    # Check if we found a solution\n    if x2*a + y2*b + n == 0:\n        return (x1, y1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Find the discriminant\n    d = b**2 - 4*a*n\n\n    # If d is negative, there is no solution\n    if d < 0:\n        return None\n\n    # If d is zero, there is one solution\n    elif d == 0:\n        return (int(-b/a), int(-b/a))\n\n    # If d is positive, there are two solutions\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative\n    if d < 0:\n        return None\n    \n    # Calculate the roots\n    x1 = (-b + d**0.5)/2/a\n    x2 = (-b - d**0.5)/2/a\n    \n    # Check if the roots are integers\n    if x1.is_integer() and x2.is_integer():\n        return (int(x1), int(x2))\n    else:\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_set = set()\n    y_set = set()\n    for i in range(1, n + 1):\n        x_set.add(i)\n    for j in range(1, n + 1):\n        y_set.add(j)\n    for x in x_set:\n        for y in y_set:\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple,\n    or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        # No solution if a is zero\n        return None\n\n    d = b**2 - 4*a*n\n\n    if d < 0:\n        # No solution if d is negative\n        return None\n\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n\n    return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # convert both lists to sets for faster comparison\n    set1 = set(list1)\n    set2 = set(list2)\n    # remove all elements in set2 from set1 and convert back to a list\n    result = list(set1 - set2)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the remaining elements\n    result = []\n    # iterate over the first list\n    for element in list1:\n        # check if the element is present in the second list\n        if element not in list2:\n            # if it's not, add it to the result list\n            result.append(element)\n    # return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a set of elements from list2\n    set2 = set(list2)\n    \n    # create a new list without elements from list1 present in list2\n    return [x for x in list1 if x not in set2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # iterate through the list1 to remove all elements in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n    # return the updated list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Args:\n        list1 (list): A list of elements to be removed.\n        list2 (list): A list of elements to be searched.\n\n    Returns:\n        list: A new list with all elements from list1 that are not present in list2.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with all the elements in list1 that are not present in list2.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n - 2 * i >= 0:\n        total += n - 2 * i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n - 1) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = 0\n    for i in range(n//2):\n        series += (n-2*i)\n    return series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    i = 0\n    while n - 2*i >= 0:\n        result += n - 2*i\n        i += 1\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = [0]\n    x = 0\n    for i in range(n // 2):\n        series.append(x + (n - x))\n        x += 2\n    return sum(series)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n - i * 2 > 0:\n        total += n - i * 2\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2*i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # calculate the sum of the series\n    sum_series = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum_series += (n - 2*i)\n        i += 1\n    return sum_series"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s ** 2) / 4 * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * math.sin(2 * math.pi * (i + 0.5) / l)\n    return area / l\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l * i\n        area += s * tan(angle/2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = l / s\n    return a * (tan(pi/s) ** 2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of a regular polygon\n    area = (s * l * (tan(pi/l))) / (2 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter\n    sp = (s * l) / (2 * pi)\n    # calculate the area using Heron's formula\n    area = (l * sp) / (tan(pi / l) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(2 * pi * i / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        r = s / (2 * tan(pi/l))\n        area += r * s\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pi = math.pi\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum_list.append(i)\n\n    div_sum_set = set(div_sum_list)\n    div_sum_sum = sum(div_sum_list)\n\n    if div_sum_sum == len(div_sum_set):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(num):\n        return sum(set(map(int, str(num))))\n\n    return sum_of_divisors(n) == sum_of_divisors(2*n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    divisor_sum = sum(map(int, str(n)))\n    # Calculate the sum of the divisors of n + 1\n    divisor_sum_plus_1 = sum(map(int, str(n + 1)))\n    # Check if the sum of divisors is equal to the sum of divisors of n + 1\n    if divisor_sum == divisor_sum_plus_1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(num): \n        divisors = [] \n        for i in range(1, int(math.sqrt(num))+1): \n            if num % i == 0: \n                divisors.append(i) \n                if num // i!= i: \n                    divisors.append(num // i) \n        return sum(divisors)\n\n    div1 = sum_of_divisors(n)\n    div2 = sum_of_divisors(2*n)\n\n    if div1 == div2: \n        print(\"The sum of the divisors of\", n, \"and\", 2*n, \"are the same.\")\n    else: \n        print(\"The sum of the divisors of\", n, \"and\", 2*n, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    if len(divisors) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors\n    def sum_of_divisors(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if i!= num // i:\n                    divisors.append(num // i)\n        return sum(divisors)\n\n    # Check if the sum of the divisors of n and m are the same\n    def check_div_sum(n, m):\n        if sum_of_divisors(n) == sum_of_divisors(m):\n            return True\n        else:\n            return False\n\n    # Test the function with some inputs\n    print(check_div_sum(24, 36)) # Output: True\n    print(check_div_sum(48, 60)) # Output: False\n    print(check_div_sum(8, 16)) # Output: True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate the sum of divisors using the formula\n    # sum of divisors = (n * (n+1)) // 2\n    div_sum = (n * (n+1)) // 2\n\n    # calculate the sum of the divisors of n\n    div_n = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div_n += i\n            if n // i!= i:\n                div_n += n // i\n\n    # check if the sum of the divisors of n and n are equal\n    if div_n == div_sum:\n        print(\"The sum of the divisors of\", n, \"and\", n, \"is equal.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", n, \"is not equal.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 2:\n        return True\n    elif len(divisors) > 2:\n        return div_sum(sum(divisors))\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # function to calculate the sum of divisors of a number\n    def sum_divisors(num):\n        div_list = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div_list.append(i)\n                if i!= num // i:\n                    div_list.append(num // i)\n        return sum(div_list)\n    \n    # function to check if the sum of divisors of two numbers are the same\n    def same_div_sum(num1, num2):\n        return sum_divisors(num1) == sum_divisors(num2)\n    \n    # calling the same_div_sum function to check if the sum of divisors of two integers are the same\n    if same_div_sum(int(input(\"Enter the first number: \")), int(input(\"Enter the second number: \"))):\n        print(\"The sum of the divisors of these two numbers are the same.\")\n    else:\n        print(\"The sum of the divisors of these two numbers are not the same.\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i:j].lower() in 'abcdefghijklmnopqrstuvwxyz':\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    for i in range(26):\n        if alphabet[i] == str1[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    \n    # Iterate over all characters in the string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n        \n        # If the character is a letter, increment its frequency in the dictionary\n        if char.isalpha():\n            char_freq[char] = char_freq.get(char, 0) + 1\n    \n    # Initialize a counter to keep track of the number of matches\n    count = 0\n    \n    # Iterate over all characters in the English alphabet (case insensitive)\n    for i in range(97, 123):\n        # Convert the character to a letter (back to uppercase) and lowercase\n        letter = chr(i).lower()\n        \n        # If the letter is in the dictionary and occurs at the same position in the string as the current letter, increment the counter\n        if letter in char_freq and char_freq[letter] == i - ord('a'):\n            count += char_freq[letter]\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if str1.lower() == alphabet[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the frequency of characters\n    freq = {}\n\n    # Iterate through the string and count the frequency of characters\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the English alphabet (case insensitive) and count the frequency of characters\n    for i in range(ord('a'), ord('z') + 1):\n        char = chr(i).lower()\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Calculate the count of characters that occur at the same position in the string as in the English alphabet\n    result = 0\n    for char, freq_char in freq.items():\n        if freq_char == freq[char.upper()]:\n            result += 1\n\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # Convert string to lowercase to make case insensitive\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of characters at the same position\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter (either uppercase or lowercase), add it to the dictionary\n        if char.isalpha():\n            char = char.lower()\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    for i in range(26):\n        char = chr(97+i)\n        if char in str1:\n            count += str1.count(char)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    This function takes in a string as input and returns a dictionary containing the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alpha = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    count = {}\n    for char in str1.lower():\n        if char in english_alpha:\n            if english_alpha[char] in count:\n                count[english_alpha[char]] += 1\n            else:\n                count[english_alpha[char]] = 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Create a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a lowercase letter (A-Z)\n        if char.isalpha():\n            # Convert the character to its position in the alphabet (0-25) and add 1 to the count if it's already in the dictionary\n            char_count[ord(char) - ord('a')] = char_count.get(ord(char) - ord('a'), 0) + 1\n\n    # Return the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    \n    # Convert string to lowercase and remove non-alphabetic characters\n    str1 = ''.join(c for c in str1.lower() if c.isalpha()).lower()\n    \n    # Initialize a dictionary to store the count of each character\n    count_dict = {}\n    \n    # Count the number of characters in the string\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in count_dict:\n            count_dict[str1[i]] += 1\n        else:\n            count_dict[str1[i]] = 1\n            count += 1\n    \n    # Print the result\n    print(\"Number of characters that occur at the same position in the string as in the English alphabet (case insensitive):\", count)"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i]!= A[j]:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n    # Initialize the result\n    result = 1\n    \n    # Iterate through the binary representation of n\n    for bit in binary:\n        # If the current bit is 0, multiply the result by 2\n        if bit == '0':\n            result *= 2\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # calculate the exponent needed to make the next power of 2 greater than n\n    exponent = 0\n    while n > 1:\n        exponent += 1\n        n >>= 1\n    # calculate the next power of 2\n    power_of_2 = 1 << exponent\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**ceil(log2(n))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert the input number to an integer\n    n = int(n)\n    \n    # Set the starting value for the power of 2\n    power_of_2 = 1\n    \n    # Loop until we find the smallest power of 2 greater than or equal to n\n    while power_of_2 < n:\n        power_of_2 *= 2\n        \n    # Return the smallest power of 2 greater than or equal to n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is already a power of 2, then simply return n\n    if n & (n - 1) == 0:\n        return n\n    \n    # Initialize a variable to keep track of the next power of 2\n    next_power = 1\n    \n    # Loop until we find a power of 2 that is greater than or equal to n\n    while next_power < n:\n        next_power <<= 1\n    \n    # Return the last power of 2 that we found\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # loop until the power of 2 is greater than or equal to n\n    while n & (n-1)!= 0: \n        n = n | (n-1)\n\n    # return the power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and find the index of the rightmost 1 bit\n    index = n.bit_length() - 1\n    # If the rightmost bit is 0, increment the index by 1\n    if n & (1 << index) == 0:\n        index += 1\n    # Calculate the power of 2 using binary exponentiation\n    return 1 << index"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**((n - 1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1)!= 0:\n        n = n | (n & -n)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # convert n to binary\n    binary = bin(n)[2:]\n    # add zeroes to the binary string until it is of length 32\n    binary = '0'*(32-len(binary)) + binary\n    # convert binary to decimal\n    decimal = int(binary, 2)\n    # find the smallest power of 2 greater than or equal to n\n    while decimal % 2 == 0:\n        decimal //= 2\n    return decimal"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a: \n        if num == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list += i\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_value += i\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > len(list1) or n < 0 or n > len(list1) or m > n:\n        return \"Invalid input.\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize a variable to store the sum\n    sum_range = 0\n\n    # Loop through the list and add the numbers within the specified range\n    for i in range(m, n+1):\n        sum_range += list1[i-m]\n\n    # Return the sum\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Initialize a variable to store the sum of numbers in the range\n    total_sum = 0\n\n    # Loop through the list and add the numbers within the range to the total sum\n    for i in range(m, n+1):\n        total_sum += list1[i]\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= n:\n        return \"Incorrect input. m should be less than or equal to n.\"\n    if len(list1) < n:\n        return \"List does not have enough elements to satisfy the given range.\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m  # swap m and n if m is greater than n\n\n    # initialize sum to zero\n    total = 0\n\n    # loop through the list and add numbers within the range to the total\n    for i in range(m, n+1):\n        total += list1[i-1]  # subtract 1 to convert from 0-based to 1-based indexing\n\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Find the semi-perimeter (half the perimeter)\n    semi_perimeter = 5 * a\n\n    # Calculate the area using Heron's formula\n    area = (5 ** 0.5) * (semi_perimeter ** 0.5)\n\n    # Use math.pi to get the value of pi\n    pi = math.pi\n\n    # Calculate the circumference using the formula pi * r\n    circumference = 2 * pi * a\n\n    # Return the results as a tuple\n    return (area, circumference)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    # return the perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of a regular pentagon using Heron's formula\n    area = (5 * a**2) / 2\n    \n    # calculate the circumference of a regular pentagon using the formula for the semi-perimeter\n    circumference = 2 * (a + a**2 + a**3 + a**4)\n    \n    # calculate the perimeter of a regular pentagon using the formula for the perimeter\n    perimeter = circumference + circumference + area\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # using the formula for the perimeter of a regular polygon\n    perimeter = 5 * a * math.sqrt(3)\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std_index = s.find('std')\n    while std_index!= -1:\n        count += 1\n        std_index = s.find('std', std_index+1)\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    # Iterate over the rest of the tuple\n    for element in test_tuple[1:]:\n        # If the element type is not equal to the first element type, return False\n        if not isinstance(element, type(first_element)):\n            return False\n    # If all elements have same type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    first_element = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_element:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for i in test_tuple:\n        data_types.append(type(i))\n    return all(i == data_types[0] for i in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not isinstance(test_tuple, tuple):\n        return \"Please enter a tuple.\"\n    else:\n        for item in test_tuple:\n            if not isinstance(item, type(item)):\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns a boolean value indicating whether all the elements in the tuple have the same data type or not.\n    '''\n    # Initialize a set to keep track of the data types of the elements in the tuple\n    data_types = set()\n    \n    # Iterate through the elements in the tuple\n    for element in test_tuple:\n        # Convert the element to its data type using the type() function\n        element_type = type(element)\n        \n        # Add the element data type to the set of data types\n        data_types.add(element_type)\n    \n    # Check if all the elements in the set have the same data type or not\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        return \"Tuple required\"\n    \n    for item in test_tuple:\n        if not isinstance(item, type(test_tuple[0])):\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if the length of the tuple is greater than 1\n    if len(test_tuple) > 1:\n        # check if all the elements in the tuple are of same data type\n        if all(isinstance(x, type(test_tuple[0])) for x in test_tuple[1:]):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n / 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    # Initialize a counter to keep track of the occurrences of the target element\n    count = 0\n\n    # Initialize a variable to keep track of the current index\n    i = 0\n\n    # Iterate over the array until the end of the array\n    while i < n:\n        # If the current element is equal to the target element, increment the counter\n        if arr[i] == x:\n            count += 1\n\n        # If the counter exceeds n/2, return True (the element is the majority)\n        if count > n // 2:\n            return True\n\n        # Move to the next element in the array\n        i += 1\n\n    # If we reach this point, the element was not found in the array\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count == n // 2:\n                return True\n        else:\n            count = 0\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Use a dictionary to keep track of the counts of each element in the array\n    counts = {}\n    for i in range(n):\n        if arr[i] not in counts:\n            counts[arr[i]] = 1\n        else:\n            counts[arr[i]] += 1\n    \n    # Check if the element appears more than n/2 times\n    if counts[x] > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n!= 0):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    count = 0 \n    while n: \n        n &= (n - 1) # clear the least significant set bit \n        count += 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        n &= (n - 1)  # clearing the rightmost set bit\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n        str: a string\n\n    Returns:\n        the string with odd index values removed\n    \"\"\"\n    result = \"\"\n    for char in str:\n        if len(result) % 2 == 0:  # if the index is even\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(string):\n    result = []\n    for i in range(len(string)):\n        if i % 2 == 1:\n            result.append(string[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n        str: string to be modified\n\n    Returns:\n        modified_str: modified string with odd index characters removed.\n    \"\"\"\n    # convert the string to a list of characters\n    char_list = list(str)\n\n    # loop through the characters and remove the odd index characters\n    for i in range(len(char_list)):\n        if i % 2 == 1:\n            char_list.pop(i)\n\n    # convert the list of characters back to a string and return it\n    modified_str = ''.join(char_list)\n    return modified_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and removes the characters which have odd index values.\n\n    Parameters:\n    string (str): A string consisting of alphabets.\n\n    Returns:\n    A new string with all the odd values of characters removed.\n    \"\"\"\n    # Create an empty string to store the output\n    output_string = \"\"\n    # Loop through each character in the string\n    for char in string:\n        # Check if the character has an odd index\n        if len(output_string) % 2!= 0:\n            # If it does, add it to the output string\n            output_string += char\n    # Return the output string\n    return output_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    result = []\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bit_count = 0\n    for i in range(l, r+1):\n        if bin(n)[2:].count('1')!= len(bin(n)[2:]):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize an empty list to store the unset bits\n    unset_bits = []\n    # Loop through each bit in the binary representation of n\n    for i in range(l, r + 1):\n        # Calculate the mask for the current bit\n        bit_mask = 1 << i\n        # Check if the current bit is set in the binary representation of n\n        if (n & bit_mask)!= 0:\n            # If the bit is set, add it to the list of unset bits\n            unset_bits.append(i)\n    # Check if all the unset bits are set to 0\n    if len(unset_bits) == r - l + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range to binary\n    range_binary = bin(r-l+1)\n\n    # Get the length of binary representation of n\n    n_length = len(bin(n))\n\n    # Get the number of bits set in the binary representation of n\n    set_bits = n_length - len(range_binary.replace('0b', ''))\n\n    # Check if all the bits are set in the given range or not\n    if set_bits >= n_length:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l >= r:\n        return True\n    elif (n >> l) & 1 == 1 and (n >> r) & 1 == 1:\n        return all_Bits_Set_In_The_Given_Range(n, l + 1, r)\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert decimal number to binary\n    binary_n = bin(n)[2:]\n    # Check if all bits are unset in the given range\n    if binary_n.count('1') == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a variable to store the count of unset bits in the given range\n    unset_bits = 0\n\n    # Loop through each bit from the least significant bit to the most significant bit of n\n    for i in range(l, r + 1):\n        # If the current bit of n is 0, increment the count of unset bits\n        if (n & (1 << i)) == 0:\n            unset_bits += 1\n\n    # Check if all the bits are unset in the given range or not\n    if unset_bits == r - l + 1:\n        # If all the bits are unset, return True\n        return True\n    else:\n        # If not all the bits are unset, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize all the bits as 1 (Set)\n    all_set = 0xFFFFFFFF\n    \n    # XOR all the bits in the given range\n    for i in range(l, r+1):\n        all_set ^= (1 << i)\n    \n    # Check if all the bits are 1 (Set) in the given range\n    if all_set == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += n & (1 << i)\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while l <= r:\n        if n & (1 << l - 1)!= 0:\n            return False\n        l += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are set in the given range or not.\n    It returns True if all the bits are set and False otherwise.\n    '''\n    # initialize a variable to store the count of set bits\n    count = 0\n    # loop through the range of bits\n    for i in range(l, r+1):\n        # check if the current bit is set or not\n        if n & (1 << i):\n            count += 1\n        # if all bits are set then return True\n        if count == r - l + 1:\n            return True\n    # if all bits are not set then return False\n    return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to keep track of positive and negative elements\n    pos = []\n    neg = []\n    # Loop through the array and append positive and negative elements to their respective lists\n    for i in arr:\n        if i >= 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n    # Loop through the arrays and append negative elements to the end of the array\n    for i in range(n):\n        arr.append(neg[i])\n    # Loop through the arrays and append positive elements to the beginning of the array\n    for i in range(n):\n        arr.insert(0, pos[i])\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Count the number of negative and positive elements in the array\n    negatives = 0\n    positives = 0\n    for num in arr[:n]:\n        if num < 0:\n            negatives += 1\n        else:\n            positives += 1\n\n    # Swap negative and positive elements so that positive elements appear first\n    while negatives > 0:\n        if negatives > positives:\n            max_num = arr[n-1]\n            for i in range(n-1, -1, -1):\n                if arr[i] < max_num:\n                    arr[i], max_num = max_num, arr[i]\n                    break\n        else:\n            min_num = arr[0]\n            for i in range(n):\n                if arr[i] > min_num:\n                    arr[i], min_num = min_num, arr[i]\n                    break\n        negatives -= 1\n        positives -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # First, we need to iterate through the array and count the number of negative and positive elements\n    negative_count = 0\n    positive_count = 0\n    for num in arr:\n        if num < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n\n    # Next, we need to iterate through the array again and assign each negative element to the left of the positive elements\n    i = 0\n    j = n\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        else:\n            i += 1\n\n    # Finally, we can assign the remaining positive elements to the right of the negative elements\n    i = n\n    j = n + negative_count\n    while j < len(arr):\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize two pointers, i and j, to the beginning of the array\n    i = 0\n    j = n-1\n\n    # Swap elements at i and j until i becomes greater than or equal to j\n    while i < j:\n\n        # If the element at i is negative, swap it with the element at j\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n\n        # Move i to the right and j to the left\n        i += 1\n        j -= 1\n\n    # Iterate through the array from i to j\n    for k in range(i, j+1):\n\n        # If the element at k is negative, swap it with the element at j\n        if arr[k] < 0:\n            arr[k], arr[j] = arr[j], arr[k]\n            j -= 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # First, sort the array in ascending order\n    arr.sort()\n\n    # Initialize two pointers i and j\n    i = 0\n    j = n-1\n\n    # Traverse the array, swapping negative and positive elements\n    while i < j:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] >= 0:\n            i += 1\n        else:\n            j -= 1\n\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize two variables for storing the negative and positive elements\n    neg_elems = []\n    pos_elems = []\n\n    # Iterate over the input array\n    for elem in arr:\n        if elem < 0:\n            neg_elems.append(elem)\n        else:\n            pos_elems.append(elem)\n\n    # Combine the negative and positive elements and sort them\n    combined_elems = neg_elems + pos_elems\n    combined_elems.sort()\n\n    # Copy the first n elements from the combined array to the output array\n    output_arr = combined_elems[:n]\n\n    # Return the output array\n    return output_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize two pointers, one for positive elements and another for negative elements\n    pos_ptr = 0\n    neg_ptr = 0\n    \n    # loop through the array\n    for i in range(n):\n        \n        # if the current element is positive, move the positive pointer ahead\n        if arr[i] >= 0:\n            pos_ptr += 1\n            arr[pos_ptr], arr[i] = arr[i], arr[pos_ptr]\n        \n        # if the current element is negative, move the negative pointer ahead\n        else:\n            neg_ptr += 1\n            arr[neg_ptr], arr[i] = arr[i], arr[neg_ptr]\n    \n    # loop through the array again and swap elements that have the same value\n    for i in range(n, len(arr)):\n        if arr[i] == arr[i-n]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n    \n    # print the re-arranged array\n    print(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Define variables to store positive and negative elements of the array\n    pos_arr = []\n    neg_arr = []\n    \n    # Iterate through the array and append positive and negative elements to their respective lists\n    for num in arr:\n        if num > 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n    \n    # Concatenate the negative and positive lists and sort them in reverse order\n    sorted_arr = neg_arr + pos_arr\n    sorted_arr.sort(reverse=True)\n    \n    # Remove the first n elements of the sorted list and return the remaining elements\n    return sorted_arr[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers for positive and negative elements\n    i = 0\n    j = 0\n\n    # Iterate through the array\n    while i < n:\n        if arr[i] >= 0:\n            # Move the current element to the first position in the positive array\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        else:\n            # Move the current element to the first position in the negative array\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create an empty list to store the re-arranged array\n    re_arr = []\n\n    # Traverse through the array\n    for i in range(len(arr)):\n        # If the element is negative, append it to the re-arranged array\n        if arr[i] < 0:\n            re_arr.append(arr[i])\n        # If the element is positive, append it to the re-arranged array\n        else:\n            re_arr.append(arr[i])\n\n    # If the number of negative elements is less than or equal to n, append the remaining positive elements to the re-arranged array\n    if len(re_arr) <= n:\n        for i in range(len(arr) - len(re_arr)):\n            re_arr.append(arr[n + i])\n\n    # Return the re-arranged array\n    return re_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for i in str1:\n        if i!='':\n            new_str += i\n        elif i =='':\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace all blank spaces with the character\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    for i in range(n,len(list1)):\n        if list1[i] > -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,-list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to keep track of the largest n items\n    min_heap = []\n    \n    # Iterate through the list and add the largest n items to the min heap\n    for item in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n    \n    # Convert the min heap to a list and return it\n    return list(min_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[0] for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    for i in range(n, len(list1)):\n        if -list1[i] > -heapq.heappop(max_heap):\n            heapq.heappush(max_heap, -list1[i])\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # create a max-heap of size n from the list\n    max_heap = []\n    for i in range(n):\n        max_heapq.heappush(max_heap, list1[i])\n\n    # iterate through the rest of the list and remove the smallest item from the max-heap\n    for i in range(n, len(list1)):\n        heapq.heappop(max_heap)\n        heapq.heappush(max_heap, list1[i])\n\n    # extract the n largest items from the max-heap and return them as a list\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return []\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a max heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1.pop(0))\n    # insert remaining elements into heap\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1.pop(0))\n    # return the heap as a list\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Create a max heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n\n    # Pop the largest elements from the heap and append them to the result list\n    result = []\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    # lateral_surface_area = 2 * pi * r * h\n    # pi = 3.14159\n    # r = radius of the cylinder\n    # h = height of the cylinder\n\n    # Using numpy to compute pi\n    import numpy as np\n    pi = np.pi\n\n    # Using formula to find lateral surface area\n    lateral_surface_area = 2 * pi * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes two arguments, r and h, representing the radius and height of a cylinder, respectively.\n    It returns the lateral surface area of the cylinder using the formula given below:\n    \n    lateral surface area = 2 * pi * r * h\n    \n    where pi is the mathematical constant pi.\n    '''\n    import math\n    pi = math.pi\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * r * h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    LSA = 2 * pi * r * h\n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculating the lateral surface area of the cylinder\n    lateral_area = 2 * r * h\n\n    # Returning the lateral surface area of the cylinder\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.141592653589793**2*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # calculate the lateral surface area\n    lateral_area = math.pi * r**2 * h\n    \n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(len(bin(n)[2:])):\n        if i % 2 == 0:\n            n |= 1 << i\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the even bits of the number\n    even_bits = []\n\n    # Loop through each bit of the number\n    for i in range(32):\n        # If the current bit is even, append it to the even_bits list\n        if (n >> i) & 1:\n            even_bits.append(i)\n\n    # Combine the even bits into a single integer\n    even_bit_string = ''.join([str(i) for i in even_bits])\n    even_bits_int = int(even_bit_string, 2)\n\n    # Set all even bits in the original number to 1\n    n = n | even_bits_int\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Loop through each bit of the number\n    for i in range(1,32):\n        # Check if the current bit is even\n        if n & (1 << i) == 0:\n            # If it's not even, set the corresponding bit to 1\n            n |= (1 << i)\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        if n & 1 == 0:\n            n = n & 0xFE # set the even bit to 1\n        else:\n            n = n >> 1 # shift the number to the right\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize count and even_bits variables \n    count = 0 \n    even_bits = 0 \n\n    # iterate over bits of n \n    while n > 0: \n        # get last bit of n \n        bit = n % 2 \n\n        # check if bit is even \n        if bit == 0: \n            even_bits = even_bits | (1 << count) \n\n        # increment count and divide n by 2 \n        count += 1 \n        n = n // 2 \n\n        # continue until n becomes 0 \n    # return even_bits \n\n    # set all even bits of n to 1 \n    return even_bits "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n\n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is 0, append it to the even_bits list\n        if int(bit) == 0:\n            even_bits.append(bit)\n        # If the bit is 1, check if it's the only bit set to 1\n        elif int(bit) == 1 and len(even_bits) == 0:\n            even_bits.append(bit)\n        # If the bit is 1, check if it's already in the even_bits list\n        elif int(bit) == 1 and bit not in even_bits:\n            even_bits.append(bit)\n\n    # Convert the even_bits list to an integer and return it\n    return int(''.join(even_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of n\n    even_bits = 0\n    \n    # Iterate over the bits of n from right to left\n    for i in range(32):\n        # If the bit is even, set its position in the even_bits variable to 1\n        if n & (1 << i) == 0:\n            even_bits |= (1 << i)\n            \n    # Return the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (2 ** i for i in range(n.bit_length()) if n & (1 << i)!= 0)\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits of the number\n    even_bits = 0\n    # Iterate over each bit of the number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) == 0:\n            even_bits |= 1 << int(bit)\n    # Return the result\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n ^ 0b1000000000000000)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each unique tuple\n    count_dict = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Check if the current tuple is already in the dictionary\n        if tup not in counts:\n            # If not, add it with a count of 1\n            counts[tup] = 1\n        else:\n            # If it is, increment the count\n            counts[tup] += 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # loop through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # increment the count if it is already in the dictionary\n            counts[tup] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            counts[tup] = 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Use the Counter function from the collections module to count the occurrences of each unique tuple\n    count_dict = Counter(unique_tuples)\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    # Initialize a variable to store the number of substrings\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the character is not a whitespace character, add one to the count\n        if str[i]!='':\n            count += 1\n    \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    for i in range(len(str) - 1):\n        for j in range(i + 1, len(str)):\n            count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    # Initialize a variable to store the count of non-empty substrings\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Check if the current character is a whitespace character\n        if str[i].isspace(): \n            # Skip any whitespace characters\n            continue \n        # Initialize a variable to store the current substring\n        current_substring = ''\n        # Loop through each subsequent character in the string\n        for j in range(i, len(str)): \n            # Check if the current character is whitespace or the end of the string has been reached\n            if str[j].isspace() or j == len(str) - 1: \n                # Append the current substring to the count variable\n                count += 1 \n                # Append the current character to the current substring\n                current_substring += str[j]\n                # Check if the current substring is non-empty\n                if current_substring: \n                    # Reset the current substring and continue to the next iteration of the outer loop\n                    current_substring = ''\n                    continue\n            # Append the current character to the current substring\n            current_substring += str[j]\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    n = len(str)\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring!= \"\":\n                count += 1\n                \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    # initialize an empty dictionary to store the frequency of characters\n    freq = {}\n    # loop through each character in the string\n    for char in str:\n        # if the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # initialize a counter for the number of non-empty substrings\n    count = 0\n    # loop through each substring in the dictionary and check if it is non-empty\n    for substring in freq:\n        if freq[substring] > 0:\n            count += 1\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    total_sequences = 0\n\n    for i in range(n, 2 * m - n + 1):\n        sequences = 0\n        for j in range(2 * m - n + 1):\n            if i >= 2 * j <= m:\n                sequences += 1\n        total_sequences += sequences\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize counter and memoization\n    count = 0\n    memo = {}\n\n    # Helper function to find all possible sequences\n    def helper(start, length):\n        # Base case: if length is zero, add sequence to memo and return\n        if length == 0:\n            count += 1\n            memo[(start, length)] = True\n            return\n\n        # Recursive case: check if we have seen this sequence before\n        if (start, length) in memo:\n            return\n\n        # Check if the first element is greater than or equal to twice the previous element but less than or equal to m\n        if start >= 2 * (start - 1) + 2 and start <= m:\n            # Add the sequence to the memo and recurse with the rest of the sequence\n            helper(start + 1, length - 1)\n            memo[(start, length)] = True\n\n    # Helper function to check if a sequence is valid\n    def is_valid_sequence(seq):\n        # Check if the first element is greater than or equal to twice the previous element but less than or equal to m\n        if seq[0] >= 2 * (seq[0] - 1) + 2 and seq[0] <= m:\n            # Check if all elements are positive integers greater than or equal to two\n            for i in range(1, len(seq)):\n                if seq[i] < 2 or seq[i] > m:\n                    return False\n            return True\n        return False\n\n    # Loop through all possible starting numbers\n    for i in range(1, m + 1):\n        # If the starting number is valid, add all possible sequences to the memo\n        if is_valid_sequence((i, n)):\n            helper(i, n)\n\n    # Return the total number of sequences found\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m+1):\n        for j in range(i+1, min(m, n+1)+1):\n            if i % 2 == 0 and j % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev_num = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # if i is even, then it can be replaced by any number between prev_num and m\n            for j in range(max(prev_num+2, 2), min(m, i+1)):\n                count += 1\n        else:\n            # if i is odd, then it can be replaced by any number between prev_num and (m-1)\n            for j in range(max(prev_num+2, 2), min(m-1, i+1)):\n                count += 1\n        prev_num = i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev = -1\n    for i in range(n):\n        if i % 2 == 0:\n            if prev <= m:\n                count += 1\n        prev = i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    total_sequences = 0\n    current_sequence = [0, 0]\n\n    # Check if m is greater than n, return 0\n    if m <= n:\n        return 0\n\n    # Loop through all possible sequences of length n\n    for i in range(n - 1):\n        # Check if the current element is within the range\n        if current_sequence[i] <= m and current_sequence[i] % 2 == 0:\n            # If the current element is valid, increment the total number of sequences\n            total_sequences += 1\n            # Generate the next sequence element\n            if current_sequence[i] + 2 <= m:\n                current_sequence.append(current_sequence[i] + 2)\n            else:\n                current_sequence.append(2)\n        else:\n            # If the current element is not valid, generate the next sequence element\n            if current_sequence[i] + 2 <= m:\n                current_sequence.append(current_sequence[i] + 2)\n            else:\n                current_sequence.append(2)\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        return m + (2 * n - 1) * get_total_number_of_sequences(m, n - 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Function to get the total number of sequences of length n\n    def get_total_sequences(prev_num):\n        # Base case: if n is 0, return 1\n        if n == 0:\n            return 1\n        \n        # If n is not 0, check if the previous element is less than or equal to m\n        if prev_num <= m:\n            # If it is, return the sum of the number of sequences of length n-1 and the number of sequences of length n-1 and previous element\n            return get_total_sequences(prev_num) + get_total_sequences(prev_num - 2*prev_num)\n        \n        # If it is not, return the number of sequences of length n-1\n        return get_total_sequences(prev_num - 2*prev_num)\n    \n    # Return the result of calling the get_total_sequences function with the first element of the sequence\n    return get_total_sequences(2*m)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(1, m+1):\n        if i < n:\n            count += 1\n        else:\n            for j in range(2, i):\n                if i - j >= n:\n                    count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Helper function to check if a number is within range and is greater than or equal to twice the previous element\n    def is_valid_sequence(prev_num, curr_num):\n        return (curr_num >= 2 * prev_num and curr_num <= m)\n\n    # Initialize the number of valid sequences to 1\n    total_valid_sequences = 1\n\n    # Iterate through each number from 1 to n-1\n    for i in range(1, n):\n        # Check if the current number is a valid sequence\n        if is_valid_sequence(i - 1, i):\n            # Increment the total number of valid sequences\n            total_valid_sequences += 1\n\n    return total_valid_sequences\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the list1\n    length = len(list1)\n    \n    # Check if the length of list1 is greater than 1\n    if length > 1:\n        # Remove the last element of list1\n        list1.pop()\n        \n        # Append the elements of list2 to the end of list1\n        list1.extend(list2)\n        \n        # Print the updated list1\n        print(\"Updated list1:\", list1)\n    else:\n        print(\"Error: The length of list1 must be greater than 1.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Reverse the second list to start from the last element\n    list2 = list2[::-1]\n\n    # Loop through the first list, replacing the last element with the elements of the second list\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[0]\n        list2 = list2[1:]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Loop through the first list to replace the last element\n    for i in range(length-1):\n        list1[i] = list2[i]\n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Find the length of the second list\n    length = len(list2)\n    # Set the index of the last element of the first list\n    last_index = len(list1)-1\n    # Loop through the second list and add each element to the last element of the first list\n    for i in range(length-1, -1, -1):\n        list1[last_index].append(list2[i])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        N = N + 1\n        if is_Perfect_Square(N):\n            return N\n\ndef is_Perfect_Square(num):\n    \"\"\"\n    A function to check if a given number is a perfect square.\n    \"\"\"\n    root = math.sqrt(num)\n    return root == int(root)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Helper function to find the next integer greater than or equal to a given integer\n    def next_integer(n):\n        return math.ceil(n)\n\n    # Helper function to check if a given integer is a perfect square\n    def is_perfect_square(n):\n        return math.sqrt(n) == math.floor(math.sqrt(n))\n\n    # Helper function to check if a given integer is a prime number\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if the given integer is a prime number\n    if is_prime(N):\n        # If the given integer is a prime number, find the next prime number greater than the given integer\n        next_prime = next_integer(N)\n        while is_prime(next_prime):\n            next_prime = next_integer(next_prime)\n\n        # Find the next perfect square greater than the next prime number\n        while True:\n            next_perfect_square = next_integer(next_prime)\n            if is_perfect_square(next_perfect_square) and next_perfect_square > N:\n                return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    if N == 1:\n        return 1\n\n    # check if N is a perfect square or not\n    if math.isqrt(N) ** 2 == N:\n        # N is a perfect square, return N+1\n        return N + 1\n\n    # N is not a perfect square\n    # divide N by 2 and check if it is a perfect square or not\n    N /= 2\n    while math.isqrt(N) ** 2!= N:\n        N /= 2\n\n    # return N+1\n    return N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        N += 1\n        if int(math.sqrt(N)) == sqrt_N:\n            return N\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    if N == 1:\n        return 2\n    \n    # find the square root of N\n    root = math.sqrt(N)\n    \n    # find the next perfect square greater than root\n    next_root = int(root + 1) ** 2\n    \n    # check if the next perfect square greater than root is greater than N\n    if next_root > N:\n        return next_root\n    else:\n        # return the square of the root\n        return int(root ** 2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = int(math.sqrt(N)) + 1\n    while i * i <= N:\n        i += 1\n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    sqrt_N = int(math.sqrt(N))\n    next_square = sqrt_N + 1\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_perfect_square(num):\n        '''\n        Check if a given number is a perfect square.\n        '''\n        root = math.sqrt(num)\n        return root == int(root)\n\n    def generate_square(num):\n        '''\n        Generate the next perfect square greater than a given number.\n        '''\n        return 2 * num + 1\n\n    def is_greater_than_square(num):\n        '''\n        Check if a given number is greater than the next perfect square greater than the given number.\n        '''\n        next_square = generate_square(num)\n        return num > next_square\n\n    i = N\n    while i < 2**31 and not is_perfect_square(i) or not is_greater_than_square(i):\n        i += 1\n\n    if i >= 2**31:\n        return None\n\n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        sqrt_N += 1\n        if int(sqrt_N * sqrt_N) == N:\n            break\n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    def is_perfect_square(n):\n        return math.sqrt(n) == int(math.sqrt(n))\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_square(n):\n        i = int(math.sqrt(n))+1\n        while True:\n            if is_perfect_square(i*i) and is_prime(i):\n                return i*i\n            i += 1\n\n    next_square_N = next_square(N)\n    return next_square_N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n\n    Parameters:\n    arr (list): a list of integers\n\n    Returns:\n    int: the maximum sum of a bitonic subsequence for the given array\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    prev_val = float('-inf')\n\n    for i in range(n):\n        dp[i] = arr[i]\n\n        if i > 0:\n            if dp[i] > dp[i - 1] and arr[i] < dp[i - 1]:\n                dp[i] = dp[i - 1] + arr[i]\n            elif dp[i] < dp[i - 1] and arr[i] > dp[i - 1]:\n                dp[i] = dp[i - 1] + arr[i]\n\n        if dp[i] > prev_val and i < n - 1:\n            prev_val = dp[i]\n\n    return prev_val"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # Find the maximum sum ending at the i-th element\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        # If the current element is greater than the maximum ending here, then update the maximum ending here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        # If the current element is less than or equal to the maximum ending here, then we can update the maximum ending here only if it is greater than the current element\n        elif arr[i] <= max_ending_here:\n            max_ending_here = max(max_ending_here, arr[i])\n\n        # Update the maximum sum so far if the maximum ending here is greater than the current element\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Calculate the sum of the first and last element of the array\n    first_sum = arr[0]\n    last_sum = arr[-1]\n    # Initialize the maximum sum to the sum of the first and last elements\n    max_sum = first_sum + last_sum\n    # Initialize the sum of the previous elements to 0\n    prev_sum = 0\n    # Loop through the array starting from the second element\n    for i in range(1, len(arr) - 1):\n        # Calculate the sum of the current element and the sum of the previous elements\n        curr_sum = arr[i] + prev_sum\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        # Update the sum of the previous elements\n        prev_sum = curr_sum\n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Initialize two pointers to the beginning and end of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the maximum sum to the first element in the array\n    max_sum = arr[0]\n\n    # Iterate through the array\n    while left < right:\n\n        # Check if the subarray is increasing or decreasing\n        if arr[left] < arr[right]:\n            # If it's increasing, check if it's a decreasing subarray\n            if arr[left] < arr[left + 1]:\n                # If it's a decreasing subarray, check if it's the best so far\n                if arr[left] + arr[right] > max_sum:\n                    max_sum = arr[left] + arr[right]\n\n            # If it's decreasing, check if it's a decreasing subarray\n            elif arr[right] < arr[right - 1]:\n                # If it's a decreasing subarray, check if it's the best so far\n                if arr[left] + arr[right] > max_sum:\n                    max_sum = arr[left] + arr[right]\n\n        # If the subarray is decreasing, move the right pointer\n        else:\n            right -= 1\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_sum = float('-inf')\n    prev_i = -1\n\n    for i in range(n):\n        if arr[i] < arr[prev_i]:\n            temp = arr[i] + max_sum\n            max_sum = max(temp, arr[prev_i])\n        else:\n            temp = arr[prev_i] + max_sum\n            max_sum = max(temp, arr[i])\n\n        prev_i = i\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    # Convert the array to a set to remove duplicates\n    arr = list(set(arr))\n\n    # Check if the array is already bitonic\n    if len(arr) <= 3 and all(arr[i] <= arr[i+1] <= arr[i+2] for i in range(len(arr)-2)):\n        return max(arr)\n\n    # Initialize variables for the maximum sum and the maximum subsequence\n    max_sum = 0\n    subsequence = []\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is greater than the next element, then check if the next element is also greater than the next-next element\n        if arr[i] > arr[i+1] and arr[i+1] > arr[i+2]:\n            # If both conditions are satisfied, add the next element to the subsequence and calculate the sum of the subsequence\n            subsequence.append(arr[i+2])\n            max_sum = max(max_sum, sum(subsequence))\n\n            # If the sum of the subsequence is greater than the maximum sum, then update the maximum sum and the maximum subsequence\n            if max_sum < sum(arr[i:i+3]):\n                max_sum = sum(arr[i:i+3])\n                subsequence = [arr[i]]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    # Check if the array is empty or contains only one element\n    if len(arr) < 2:\n        return 0\n    \n    # Initialize variables to store the maximum sum and its indices\n    max_sum = arr[0]\n    max_sum_start = 0\n    max_sum_end = 0\n    \n    # Check each pair of adjacent elements in the array\n    for i in range(1, len(arr)-1):\n        # If the current element is increasing and the next element is decreasing,\n        # update the maximum sum and its indices\n        if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n            if arr[i] + arr[i-1] > max_sum:\n                max_sum = arr[i] + arr[i-1]\n                max_sum_start = i\n                max_sum_end = i+1\n    \n    # If the last two elements are increasing, check if the third one is also increasing\n    if arr[len(arr)-1] > arr[len(arr)-2] and arr[len(arr)-1] < arr[0]:\n        max_sum = max(arr[len(arr)-1], max_sum)\n        max_sum_start = len(arr)-1\n        max_sum_end = 0\n    \n    # If the last two elements are decreasing, check if the third one is also decreasing\n    if arr[len(arr)-1] < arr[len(arr)-2] and arr[len(arr)-1] > arr[0]:\n        max_sum = max(arr[len(arr)-1], max_sum)\n        max_sum_start = len(arr)-1\n        max_sum_end = 0\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    inc_seq = 0\n    dec_seq = 0\n    curr_sum = 0\n\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        else:\n            inc_seq += 1\n            curr_sum = arr[i]\n\n        if i == n-1 or arr[i] < arr[i+1]:\n            curr_sum -= arr[i]\n        else:\n            dec_seq += 1\n            curr_sum = arr[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [[0]*n for i in range(n)]\n    max_sum = float('-inf')\n\n    for i in range(n):\n        if i == 0 or arr[i-1] < arr[i]:\n            dp[i][i] = arr[i]\n            max_sum = max(max_sum, arr[i])\n        elif i == n-1 or arr[i] > arr[i+1]:\n            dp[i][i] = arr[i]\n            max_sum = max(max_sum, arr[i])\n        else:\n            dp[i][i] = arr[i]\n            max_sum = max(max_sum, arr[i])\n            for j in range(i+1):\n                dp[i][j] = max(dp[i][j], dp[i][j+1])\n                if i-j >= 0 and arr[i-j] < arr[i] and arr[i] < arr[i+1]:\n                    dp[i][j] += arr[i-j]\n                max_sum = max(max_sum, dp[i][j])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    # Initialize the first element of each row as 0\n    for i in range(n):\n        dp[i][0] = arr[i]\n    # Initialize the first column of each row as 0\n    for j in range(n):\n        dp[0][j] = arr[j]\n    # Fill the rest of the matrix using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            if arr[i-1] < arr[j-1]:\n                dp[i][j] = dp[i-1][j] + arr[i]\n            else:\n                dp[i][j] = dp[i][j-1] + arr[j]\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = max(dp[n-1][n-1], dp[n-1][0])\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute square roots using the Babylonian method.\n    \"\"\"\n\n    # Initialize variables\n    x_guess = 0\n    x_prev = 0\n    x_new = 0\n\n    # Compute square root using the Babylonian method\n    while abs(x_new**2 - number) > 0.001:\n        x_prev = x_guess\n        x_guess = (x_prev + number/x_prev) / 2\n        x_new = x_guess\n\n    # Return the estimated square root\n    return x_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Square roots can only be computed for non-negative numbers\")\n    guess = number / 2\n    i = 0\n    while guess * guess > number:\n        i += 1\n        guess = (number / guess + guess) / 2\n    return round(guess, 2), i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    guess = number / 2\n    while abs(guess * guess - number) > 0.000001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 1e-6:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    Args:\n    number: The number whose square root is to be computed.\n\n    Returns:\n    The square root of the input number using the babylonian method.\n    \"\"\"\n    # Initialize the upper and lower limits for the search interval\n    lower_limit = 0\n    upper_limit = number\n\n    # Initialize the current estimate of the square root\n    current_estimate = (lower_limit + upper_limit) / 2\n\n    # Initialize the maximum error in the estimate\n    max_error = 1\n\n    # Loop until the maximum error is less than a tolerance level\n    while max_error > 1e-6:\n        # Evaluate the current estimate as the square of the babylonian method\n        estimate_square = (3 * current_estimate**2 - number) / 2\n\n        # Compute the difference between the estimate and the actual square root\n        difference = estimate_square - number\n\n        # Update the estimate based on the difference between the estimate and the actual square root\n        if difference < 0:\n            lower_limit = current_estimate\n        else:\n            upper_limit = current_estimate\n\n        # Update the current estimate\n        current_estimate = (lower_limit + upper_limit) / 2\n\n        # Update the maximum error in the estimate\n        max_error = abs(difference)\n\n    # Return the final estimate of the square root\n    return current_estimate"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize the variable to keep track of the current approximation\n    current_approximation = number / 2\n    # initialize the variable to keep track of the number of iterations\n    iteration_count = 0\n    # initialize the variable to keep track of the absolute error\n    error = 1000\n    # loop while the error is greater than the tolerance level\n    while error > 10 ** -10:\n        # compute the new approximation\n        new_approximation = current_approximation - (number / current_approximation) ** 2\n        # update the current approximation\n        current_approximation = new_approximation\n        # update the number of iterations\n        iteration_count += 1\n        # update the absolute error\n        error = abs(current_approximation - new_approximation)\n    # return the final approximation and the number of iterations taken\n    return current_approximation, iteration_count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number / 2\n    x = 0\n    y = 0\n    i = 0\n\n    # loop until the guess is within an error of 0.0001 of the actual value\n    while abs(guess**2 - number) > 0.0001:\n        # update guess and calculate y\n        guess = (guess + number / guess) / 2\n        y = guess**2\n\n        # update x and update i\n        x = number / y\n        i += 1\n\n    # return the square root and the number of iterations\n    return round(x, 10), i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    while abs(x*x - number) > 0.0001:\n        x = (x + number / x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n\n    This function takes a number as input and returns the square root of that number using the babylonian method.\n\n    Args:\n        number: the number whose square root is to be found.\n\n    Returns:\n        The square root of the input number.\n    \"\"\"\n    x0 = number/2\n    for i in range(20):\n        x1 = (x0 + number/x0)/2\n        if abs(x1 - x0) < 0.000001:\n            break\n        x0 = x1\n    return x1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if str[j] == str[i] and (i-j <= 2 or dp[j+1] == 1):\n                dp[i] = max(dp[i], dp[j]+2)\n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    # Create a list to store the lengths of longest palindromic subsequences ending at each index\n    len_list = [1] * len(str)\n    # Initialize the start index of the longest palindromic subsequence to 0\n    start = 0\n    # Loop through the string\n    for i in range(1, len(str)):\n        # Check if the previous character is a palindrome\n        if str[i] == str[i-1]:\n            # If yes, check if the current substring is a palindrome\n            if len_list[i-1] < 2:\n                len_list[i] = 2\n            else:\n                len_list[i] = len_list[i-1] + 2\n            # If the current substring is longer than the previous longest, update the start index\n            if len_list[i] > len_list[start]:\n                start = i\n        else:\n            # If not, update the start index and reset the length of the current substring\n            len_list[i] = 1\n            if i > start + 1:\n                start = i-1\n    # Return the length of the longest palindromic subsequence\n    return len_list[len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n\n    # Create a 2D table to store the length of LPS for substrings. \n    # The table is initialized with 1's as base case. \n    table = [[1 for j in range(n)] for i in range(n)] \n\n    # Fill the table in bottom up manner. \n    # The base case is when the length of the substring is 1 or 0. \n    for i in range(1, n): \n        for j in range(1, n): \n            if str[i-1] == str[j-1]: \n                table[i][j] = table[i-1][j-1] + 1 \n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n\n    # Return the length of the longest palindromic subsequence. \n    return table[n-1][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D table to store length of longest palindromic subsequence for each substring of length i\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the table with 0s\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for length in range(3, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n    max_len = 1\n    \n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            dp[i] = 2\n            max_len = 2\n        elif i > 1 and s[i] == s[i-2] and dp[i-1] > dp[i-2]:\n            dp[i] = dp[i-1] + 1\n            max_len = max(max_len, dp[i])\n        else:\n            dp[i] = 1\n            max_len = max(max_len, dp[i])\n            \n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    lps_list = [1] * n\n    \n    # Find length of LPS ending at index i\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps_list[i] = lps_list[i-1] + 1\n        else:\n            # Find the length of LPS ending at index j\n            j = lps_list[i-1]\n            while j >= 1 and str[i]!= str[j-1]:\n                j = lps_list[j-1]\n            if str[i] == str[j-1]:\n                lps_list[i] = j + 1\n            else:\n                lps_list[i] = 1\n    \n    return max(lps_list)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n\n    Args:\n    str (str): A string consisting of characters.\n\n    Returns:\n    int: The length of the longest palindromic subsequence in the string.\n\n    \"\"\"\n    n = len(str)\n    # create a 2D table to store lengths of longest palindromic subsequences for substrings of length 1, 2,..., n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # fill the table using dynamic programming approach\n    for i in range(n + 1):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n < 2:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            dp[i] = 2 + dp[i-2]\n        else:\n            dp[i] = max(dp[i-1], dp[i])\n    return dp[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_len = 1\n    start = 0\n\n    for i in range(1, len(str)):\n        if str[i] == str[i-1]:\n            max_len += 1\n            if max_len > 2:\n                start = i - 2\n        else:\n            max_len = 1\n            if max_len > 2:\n                start = i - 1\n    \n    if max_len > 2:\n        return max_len\n    else:\n        return 1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    n = len(s)\n    L = [0] * n\n    L[0] = 0\n    \n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            L[i] = L[i-1] + 2\n        else:\n            L[i] = max(L[i-1], L[i-2])\n            \n    return L[n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n-1)*(1/n))**(1/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/n)**2) + ((1/n)**3) +... + ((1/n)**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Calculate the harmonic sum of n-1 using the formula:\n    # (1/n) + (1/n-1) +... + (1/1) = 1/n\n    # where n-1 is the number of terms to sum.\n    harmonic_sum = 1/n\n    for i in range(2, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1 using the definition:\n    H(n) = 1/n * (1 + 1/n +... + 1/n^(n-1))\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than or equal to 2\")\n    else:\n        harmonic_sum = 1 / n\n        for i in range(1, n):\n            harmonic_sum += 1 / (i + 1)\n        return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1.0 / n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / (1 - 1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to store the count of each element in array_nums2\n    count_dict = {}\n    for num in array_nums2:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # create an empty list to store the intersection of the arrays\n    intersection = []\n    \n    # iterate through each element in array_nums1\n    for num in array_nums1:\n        if num in count_dict and count_dict[num] > 0:\n            # add the element to the intersection list and decrement its count in the count_dict\n            intersection.append(num)\n            count_dict[num] -= 1\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array containing only the elements that are present in both arrays.\n    \"\"\"\n    intersection_set = set(array_nums1).intersection(set(array_nums2))\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each number in array_nums2\n    freq_dict = {}\n    for num in array_nums2:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # create an empty list to store the intersection\n    intersection = []\n    \n    # iterate over each number in array_nums1 and check if it is present in freq_dict\n    for num in array_nums1:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n    \n    # return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays of numbers and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a dictionary to store the count of each number in the second array\n    count_dict = {}\n    for num in array_nums2:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Create an empty list to store the intersection of the two arrays\n    intersection_list = []\n    \n    # Loop through the first array and check if each number is in the count dictionary\n    for num in array_nums1:\n        if num in count_dict and count_dict[num] > 0:\n            intersection_list.append(num)\n            count_dict[num] -= 1\n    \n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Iterate over each element of the first array\n    for num1 in array_nums1:\n        # Check if the element is also in the second array\n        if num1 in array_nums2:\n            # If it is, add it to the set of common elements\n            common_elements.add(num1)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from the first array and initialize an empty list to store the common elements\n    common_elements = set(array_nums1[0:array_nums1.index(max(array_nums1))])\n    for num in array_nums1:\n        if num in common_elements:\n            common_elements.remove(num)\n\n    # Check if all elements of the second array are also present in the common elements set\n    for num in array_nums2:\n        if num in common_elements:\n            common_elements.remove(num)\n\n    # Convert the set back to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set to store unique elements of array1\n    set_nums1 = set(array_nums1)\n    # create an empty list to store intersection elements\n    intersection_list = []\n    # loop through array2 and check if each element is present in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection_list.append(num)\n    # return the intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store the unique elements of array_nums2\n    set_nums2 = set(array_nums2)\n    # Create an empty set to store the intersection of array_nums1 and array_nums2\n    intersection = set()\n    # Iterate through array_nums1\n    for num in array_nums1:\n        # If num is in set_nums2, add it to the intersection set\n        if num in set_nums2:\n            intersection.add(num)\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    '''\n    \n    # Create a set from each array to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection_set = set_nums1.intersection(set_nums2)\n    \n    # Convert the set back to a list\n    intersection_list = list(intersection_set)\n    \n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array that contains the intersection of the two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Create a new list to store the modified list\n    modified_list = []\n\n    # Loop through each element in the original list\n    for i in range(len(list)):\n        # Add the current element to the modified list\n        modified_list.append(list[i])\n\n        # Add the element to the beginning of the modified list\n        modified_list.insert(0, element)\n\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(i, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n            result.append(list[i])\n        else:\n            result.append(list[i])\n            result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(1, len(list)+1):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imaginary = num\n        polar_num = cmath.polar(num)\n        print(f\"The polar representation of ({real}, {imaginary}) is ({polar_num[0]:.2f} + {polar_num[1]:.2f}j)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        x = number.real\n        y = number.imag\n        r = cmath.sqrt(x**2 + y**2)\n        theta = cmath.phase(complex(x, y))\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # convert to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        \n        # print result\n        print(f\"Polar form of {number} is ({r:.2f}+{r:.2fi})\")\n        print(f\"Polar angle of {number} is {theta} radians\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    This function converts a list of complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n\n    # Iterate through each number in the input list and convert it to polar coordinates\n    polar_coordinates = []\n    for number in numbers:\n        # Extract the real and imaginary parts of the number\n        real = number.real\n        imag = number.imag\n        # Calculate the magnitude and angle of the number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        # Add the polar coordinate to the list\n        polar_coordinates.append((magnitude, angle))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        if real == 0:\n            angle = 0\n        else:\n            angle = cmath.phase(number)\n        result.append((complex(real, imag), angle))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        print(f\"{num} in polar coordinates: r = {r}, theta = {theta}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns the polar coordinates of each complex number.\n    The polar coordinates are returned as a list of tuples.\n    '''\n    result = []\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # Add the polar coordinates to the result list\n        result.append((r, theta))\n\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # Loop through each number in the input list\n    for num in numbers:\n\n        # Convert the number to polar coordinates using the cmath module\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # Print the polar coordinates of the number\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # extract real and imaginary parts\n        real, imag = num.real, num.imag\n        \n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        \n        # calculate the angle of the complex number in radians\n        angle = cmath.phase(num)\n        \n        # convert the angle from radians to degrees\n        angle = angle * 180/cmath.pi\n        \n        # print the polar coordinates in degrees\n        print(f\"{num} ({magnitude:.2f} + {angle:.2f}\u00b0)\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Combinations with replacement function from itertools\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        color_combination = tuple(l[j] for j in range(i, i + n))\n        color_combinations.append(color_combination)\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations of length n using itertools.combinations_with_replacement\n    comb = combinations_with_replacement(l, n)\n\n    # Convert each combination to a tuple\n    result = [tuple(c) for c in comb]\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = combinations_with_replacement(l, n)\n    return list(combinations)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i + 1, len(l) + 1):\n            combinations.append((l[i], l[j-1]))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        color_combinations.append(combination)\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Combinations with repetition of n elements from list l\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    prime_count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks whether a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    max_tup = ()\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == max1:\n            max_tup += (test_tup2[i],)\n        elif test_tup2[i] == max2:\n            max_tup += (test_tup1[i],)\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple of elements\n    that maximizes the product of their values. If there are two elements in\n    the tuples that have the same value, the function returns the first one.\n    \"\"\"\n    max_value = 0\n    max_element = None\n    for element in test_tup1:\n        if element * max_value >= max_value:\n            max_value = element\n            max_element = element\n        elif element * max_value == max_value:\n            max_element = element\n\n    for element in test_tup2:\n        if element * max_value >= max_value:\n            max_value = element\n            max_element = element\n        elif element * max_value == max_value:\n            max_element = element\n\n    if max_element is None:\n        return None\n    else:\n        return (max_element, max_value)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the given tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The given tuples must be of the same length.\")\n        return\n    \n    # convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # iterate over the tuples and find the maximum element\n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            list1[i], list2[i] = list2[i], list1[i]\n    \n    # convert the lists back to tuples and return\n    return tuple(list1), tuple(list2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n    if max_1 >= max_2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n\n    # find the index of the maximum element in each tuple\n    max_index1 = max_index2 = None\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_index1 = i\n        elif test_tup2[i] > test_tup1[i]:\n            max_index2 = i\n\n    # swap the maximum elements if necessary\n    if max_index1 is not None and max_index2 is not None:\n        test_tup1[max_index1], test_tup1[max_index2] = test_tup1[max_index2], test_tup1[max_index1]\n        test_tup2[max_index1], test_tup2[max_index2] = test_tup2[max_index2], test_tup2[max_index1]\n\n    # return the two maximized tuples\n    return test_tup1, test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert tuples to lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    \n    # Sort the lists in descending order\n    lst1.sort(reverse=True)\n    lst2.sort(reverse=True)\n    \n    # Convert the lists back to tuples\n    max_tup1 = tuple(lst1)\n    max_tup2 = tuple(lst2)\n    \n    return max_tup1, max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return None"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables\n    max1 = max2 = 0\n    \n    # Iterate through both tuples and compare elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n            \n    # Return the maximum element\n    if max1 >= max2:\n        return max1\n    else:\n        return max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize the maximum value for each tuple\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    \n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # If the current element of the first tuple is greater than the maximum element of the second tuple, update the maximum value\n        if test_tup1[i] > max_tup2:\n            max_tup1 = test_tup1[i]\n        # If the current element of the second tuple is greater than the maximum element of the first tuple, update the maximum value\n        elif test_tup2[i] > max_tup1:\n            max_tup2 = test_tup2[i]\n        \n        # If the maximum value of the current element of the first tuple is greater than the maximum value of the result tuple, update the result tuple\n        if max_tup1 > result_tup[i]:\n            result_tup = (test_tup1[i], max_tup1)\n        \n        # If the maximum value of the current element of the second tuple is greater than the maximum value of the result tuple, update the result tuple\n        if max_tup2 > result_tup[i]:\n            result_tup = (test_tup2[i], max_tup2)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables to hold the maximum elements\n    max1, max2 = None, None\n    \n    # Loop through the tuples and compare their elements\n    for tup in [test_tup1, test_tup2]:\n        if max1 is None or tup[0] > max1:\n            max2 = max1\n            max1 = tup[0]\n        elif max2 is None or tup[0] > max2:\n            max2 = tup[0]\n            \n    return max1, max2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n\n    # Calculate the nth Newman prime\n    count = 0\n    num = 5\n    while count < n:\n        count += 1\n        num += 2\n\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            if n == 1:\n                return p\n            else:\n                n -= 1\n        p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a boolean list of length n+1\n    is_prime = [True] * (n+1)\n    is_prime[0], is_prime[1] = False, False\n\n    # Initialize the count of prime numbers\n    prime_count = 0\n\n    # Loop through the boolean list\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            # Check if i is prime\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n\n            # Update the count of prime numbers\n            prime_count += 1\n\n            # If we've reached the nth prime number, return it\n            if prime_count == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    return primes[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th newman-shanks-williams prime number is\", newman_prime(n))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = [2]\n    current_prime = 3\n\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if prime * prime > current_prime:\n                break\n            if current_prime % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(current_prime)\n        current_prime += 2\n\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2\n    count = 0\n    while count < n:\n        if is_prime(p) and is_prime(p - 1):\n            count += 1\n        p += 2\n    return p - 2\n\n\ndef is_prime(n):\n    \"\"\"\n    Write a helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    \n    # Helper function to check if a number is a newman\u2013shanks\u2013williams prime\n    def is_prime(num): \n        if num <= 1: \n            return False\n        for i in range(2, num): \n            if num % i == 0: \n                return False\n        return True\n    \n    # Initialize a counter and a list to store the newman\u2013shanks\u2013williams primes\n    count = 0\n    primes = []\n    \n    # Iterate until the counter reaches the nth newman\u2013shanks\u2013williams prime\n    while count < n:\n        # Generate a new random number\n        num = 1 + int(100 * random.random())\n        \n        # Check if the number is a newman\u2013shanks\u2013williams prime\n        if is_prime(num):\n            primes.append(num)\n            count += 1\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return primes[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # First, check if the input is a valid integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # If the input is not a valid integer, raise an error\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Initialize variables to keep track of the current prime and the current count\n    current_prime = 2\n    current_count = 0\n\n    # Iterate until the desired number of primes is found\n    while current_count < n:\n        # Check if the current number is prime\n        is_prime = True\n        for i in range(2, int(current_prime ** 0.5) + 1):\n            if current_prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If the current number is prime, add it to the list of primes and increment the count\n            primes.append(current_prime)\n            current_count += 1\n        # If the current number is not prime, increment the count and continue iterating\n        else:\n            current_count += 1\n        # Increment the current prime and continue iterating\n        current_prime += 1\n\n    # If there are not enough primes to find the nth newman\u2013shanks\u2013williams prime number, return None\n    if len(primes) < n:\n        return None\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # The first three newman\u2013shanks\u2013williams primes are 2, 3, and 5.\n    if n < 4:\n        return None\n    elif n == 4:\n        return 2\n    elif n == 5:\n        return 3\n    elif n == 6:\n        return 5\n\n    # Starting with 7, check if the next number is a newman\u2013shanks\u2013williams prime.\n    i = 7\n    while True:\n        # Check if the next number is a newman\u2013shanks\u2013williams prime.\n        if i * i > n:\n            return i - 1\n        elif n % i == 0:\n            return None\n        else:\n            i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, int(i**(1/2))+1):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], float) and isinstance(test_tup2[i], float):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of tuples are not equal.\")\n        return\n    \n    # Perform element-wise division\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result.append(\"Error: Cannot divide by 0.\")\n            continue\n        else:\n            result.append(test_tup1[i] / test_tup2[i])\n    \n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], (int, float)) and isinstance(test_tup2[i], (int, float)):\n            division_result.append(test_tup1[i] / test_tup2[i])\n        else:\n            raise TypeError(\"Both tuples must contain elements that can be divided.\")\n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be the same length.\")\n        return\n    \n    # Perform element-wise division of the tuples\n    result_tup = tuple(x/y for x, y in zip(test_tup1, test_tup2))\n    \n    # Return the result as a tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length\")\n        return\n\n    # perform element-wise division of the two tuples\n    result_tup = tuple([num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        result_tup += (num1 / num2,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + ((test_tup1[i]/test_tup2[i]),)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Perform element-wise division operation across the given tuples\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Sort the list in ascending order\n    list1.sort()\n    # Create two empty lists\n    part1 = []\n    part2 = []\n    # Iterate through the list and add elements to the appropriate list\n    i = 0\n    while i < len(list1):\n        if i+L <= len(list1):\n            part1.extend(list1[i:i+L])\n            i += L\n        else:\n            part1.extend(list1[i:])\n            break\n    i = 0\n    while i < len(list1):\n        if i+L <= len(list1):\n            part2.extend(list1[i:i+L])\n            i += L\n        else:\n            part2.extend(list1[i:])\n            break\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) < L:\n        raise ValueError(\"Length of the list cannot be less than the given length L.\")\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"List is too small\")\n    mid = len(list1) // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(lst) % 2 == 0:\n        mid = len(lst)//2\n        return (lst[:mid], lst[mid:])\n    else:\n        mid = len(lst)//2\n        return (lst[:mid], lst[mid+1:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1) // 2\n    first_part = list1[:half]\n    second_part = list1[half:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if the length of the list is greater than L\n    if len(lst) > L:\n        # slice the list at index 0 to L-1\n        first_part = lst[:L]\n        # slice the list at index L to the end\n        second_part = lst[L:]\n        # return the two parts as a tuple\n        return (first_part, second_part)\n    else:\n        # if the length of the list is less than or equal to L, return the list as a tuple\n        return (lst, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts where the length of the first part of the list is L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    # Split the list into two parts of length L\n    part1 = lst[:L]\n    part2 = lst[L:]\n    \n    # Return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # initialize two empty lists for the first part and the second part\n    part1 = []\n    part2 = []\n    # iterate through the original list and add each element to the appropriate part list\n    for i in list1:\n        if len(part1) < L:\n            part1.append(i)\n        else:\n            part2.append(i)\n    # concatenate the two part lists into one list and return the resulting tuple\n    return part1 + part2"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = int(h_age / 7)\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7\n    dogs_per_year = 12\n    age_in_dogs = int(h_age) / dogs_per_year\n    age_in_years = age_in_dogs * years\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 + h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_per_month = 12\n    years_per_month = 365\n\n    dog_age_in_months = h_age * dogs_per_month\n    dog_age_in_years = dog_age_in_months / years_per_month\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    b_years = 7  # Assume birth year is always 2020\n    age = h_age - b_years  # Calculate age in dog's years\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = 7 * h_age\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * int(h_age)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 * h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Calculate the age of a dog in dog years given their height in inches.\n    '''\n    feet = h_age / 12\n    inches = h_age % 12\n    return feet + inches / 12"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Split S into sublists of length step\n    sublists = [S[i:i+step] for i in range(0, len(S), step)]\n    # Remove the last sublist if its length is not a multiple of step\n    if len(sublists[-1]) % step!= 0:\n        sublists = sublists[:-1]\n    return sublists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # create an empty list to store the resulting lists\n    result = []\n\n    # loop through each element in the input list\n    for i in range(0, len(S), step):\n        # create a new list containing only the current element\n        new_list = [S[i]]\n\n        # loop through each subsequent element up to the end of the list and add them to the new list\n        for j in range(i+1, len(S), step):\n            new_list.append(S[j])\n\n        # append the new list to the result list\n        result.append(new_list)\n\n    # return the resulting list of lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 1:\n        return [S]\n    else:\n        n = len(S)\n        S_split = []\n        i = 0\n        while i < n:\n            if i % step == 0:\n                S_split.append(S[i:i+step])\n            i += 1\n        return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S)\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    while n <= len(S):\n        result.append(S[::n])\n        n += step\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the volume of the cube\n    volume = l**3\n    # Calculate the lateral surface area of the cube\n    lateral_surface_area = 6 * (l**2)\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Compute the lateral surface area of the cube\n    area = 6 * l * l + 2 * l * l + 6 * l * l + 2 * l * l + 6 * l * l + 2 * l * l\n\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the surface area of a cube by multiplying the side length with its square\n    surface_area = l * l * l\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_num = 1\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n        odd_num += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    number = 1\n    \n    while count < n:\n        sum_of_squares += number**2\n        count += 1\n        number += 2\n        \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    # initialize sum to zero\n    sum = 0\n    # iterate over first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of each odd natural number to the sum\n        sum += i**2\n    # return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    # Function to calculate the sum of squares of odd natural numbers\n    def odd_sum_squares(n):\n        # Initialize a variable to store the sum of squares of odd natural numbers\n        sum_squares = 0\n        # Iterate n times and add the square of each odd number to sum_squares\n        for i in range(2, n+1, 2):\n            sum_squares += i*i\n        return sum_squares\n\n    # Calculate the sum of squares of odd natural numbers and return the result\n    return odd_sum_squares(n)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initializing the sum of squares to 0\n    square_sum = 0\n\n    # iterating from 1 to n\n    for i in range(1, n+1):\n\n        # checking if the number is odd\n        if i % 2!= 0:\n\n            # calculating the square of the number\n            square = i**2\n\n            # adding the square to the sum of squares\n            square_sum += square\n\n    # returning the sum of squares\n    return square_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the count to zero\n    count = 0\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a multiple of 3 and 5\n        if i % 3 == 0 and i % 5 == 0:\n            # If it is, increment the count\n            count += 1\n    \n    # Return the count as then'th star number\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1: \n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1: \n        return 1\n    else: \n        return n * (find_star_num(n-1) + find_star_num(n-2)) + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    i = 1\n    while i <= n:\n        print('*' * i)\n        i += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # loop through each row of the pyramid and print the appropriate number of stars\n    for i in range(1, n+1):\n        # calculate the number of stars to print in each row\n        stars_to_print = n - i + 1\n        # print the appropriate number of stars for each row\n        print('*' * stars_to_print)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize a counter variable\n    counter = 1\n    \n    # loop through the first n-1 rows\n    for i in range(1, n):\n        # add the current row to the counter variable\n        counter += i\n    \n    # add the last row to the counter variable\n    counter += (n - 1) * 2\n    \n    # return the final counter value\n    return counter"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the result variable to 0\n    result = 0\n    # Loop from 1 to n-1 and multiply the result by 2\n    for i in range(1, n): \n        result = result * 2\n    # Add 1 to the result to get then'th star number\n    return result + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Base case: if n is 1, return \"*\"\n    if n == 1:\n        return \"*\"\n\n    # Recursive case: return the nth star plus the nth-1 star\n    return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    i = 1\n    while i <= n:\n        print('*' * i)\n        i += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return '1'\n    else:\n        return str(n) +'' + find_star_num(n-1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the input string to uppercase to ensure the function works for both lowercase and uppercase\n    k = k.upper()\n    # Convert the input string to a list of characters\n    k_list = list(k)\n    # Initialize an empty string to store the ascii values of each character in the input string\n    ascii_values = ''\n    # Loop through each character in the input string\n    for char in k_list:\n        # Convert each character to its corresponding ascii value\n        char_ascii = ord(char)\n        # Append the ascii value to the ascii_values string\n        ascii_values += str(char_ascii)\n    # Return the ascii_values string as an integer\n    return int(ascii_values)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0  # variable to store the sum of even numbers\n\n    for i in range(len(arr)):  # iterate through the list\n        if i % 2 == 0:  # check if the index is even\n            if arr[i] % 2 == 0:  # check if the number at even index is even\n                even_sum += arr[i]  # add the even number to the sum\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even_at_even_index = 0\n    \n    # Loop through the list and add the even numbers at even positions to the sum\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even_at_even_index += arr[i]\n    \n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += 1\n            if count % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_even += arr[i]\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n        if i % 2 == 0 and i == even_index:\n            even_index += 1\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum_of_powers = 0\n    i = 2\n    \n    while i <= n:\n        sum_of_powers += i ** 5\n        i += 2\n    \n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize a variable to store the sum of even numbers raised to the fifth power\n    even_sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(n):\n        # Check if the number is even\n        if i % 2 == 0:\n            # If it is, add it to the even_sum\n            even_sum += i ** 5\n    # Return the even_sum\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    # initialize the sum of even natural numbers to 0\n    sum_even = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the sum of the i^5 even natural numbers\n        sum_even += i**5\n        \n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize the sum to zero\n    power_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Compute the power of i to the fifth\n        power = i ** 5\n        \n        # If the power is even, add it to the sum\n        if power % 2 == 0:\n            power_sum += power\n    \n    # Return the sum of the even powers of the first n even natural numbers\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same length.\"\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for index, value in enumerate(test_tup1):\n        result_list.append(value - test_tup2[index])\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x - y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    subtraction = []\n    for i in range(len(test_tup1)):\n        subtraction.append(test_tup1[i] - test_tup2[i])\n    return tuple(subtraction)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # if the element at the same index exists in the second tuple, subtract it from the first tuple element\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    i = 0\n    while i <= n:\n        j = 0\n        while j <= i:\n            coeff_sum += math.comb(i, j) * math.comb(n, i - j)\n            j += 1\n        i += 1\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    count = 0\n    sum_even = 0\n    \n    # Calculate the sum of even index binomial coefficients using a nested loop\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j % 2 == 0:\n                sum_even += math.comb(n, j)\n    \n    # Return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    for i in range(1, n+1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial += binomial_coeff\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += math.comb(i, 2)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Create a list of lists to store the binomial coefficients\n    binomial_list = []\n    for i in range(2, n+1):\n        binomial_list.append([1])\n        for j in range(1, i):\n            binomial_list[i-1].append(binomial_list[i-1][j] + binomial_list[i-1][j-1])\n\n    # Find the sum of even index binomial coefficients\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        sum_even += binomial_list[i-2][0]\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeff_sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_binomial_coeff_sum += math.comb(i, 2)\n    return even_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(1, n+1):\n        coeff = math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n        if i % 2 == 0:\n            sum_even += coeff\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_index_coeffs = 0\n    num_terms = 2 * n - 1\n\n    for i in range(2, num_terms, 2):\n        term = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_index_coeffs += term\n\n    return sum_even_index_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum(n): \n  \n    # initialize variables \n    sum = 0 \n    count = 0 \n  \n    # loop through each term in the series \n    for i in range(1, n+1): \n  \n        # calculate the binomial coefficient \n        binomial_coeff = math.comb(n, i) \n  \n        # check if the index is even \n        if i % 2 == 0: \n  \n            # add the even term to the sum \n            sum += binomial_coeff \n  \n            # increment the count of even terms \n            count += 1 \n  \n    # return the sum of even terms \n    return sum, count "
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (3.14 * r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3)*pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume\n\nradius = 5.0\nheight = 10.0\n\nprint(\"The volume of a cylinder with radius\", radius, \"and height\", height, \"is:\", volume_cylinder(radius, height))"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            break\n    for j in range(i, len(test_tup)):\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue  # skip the first element (tuple element)\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n and returns True if n is a decagonal number, otherwise it returns False.\n    A decagonal number is a positive integer whose sum of its digits is equal to the number itself.\n    For example, 15 is a decagonal number because 1 + 5 = 6.\n    '''\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Check if n is a positive integer\n    if n < 1:\n        return False\n\n    # Check if n is a decagonal number\n    dec_sum = 0\n    for i in range(1, n+1):\n        dec_sum += i\n        if dec_sum == n:\n            return True\n\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 0\n    for i in range(1, n+1):\n        dec_num = dec_num + (i * (2 * i - 1)) // 2\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0: \n        return None\n    else:\n        count = 1\n        decagonal_num = 1\n        while count < n:\n            decagonal_num += (count * (count + 1)) / 2\n            count += 1\n        return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables\n    count = 1\n    decagonal_num = 1\n\n    # Calculate the decagonal number\n    while count <= n:\n        decagonal_num = 4 * decagonal_num + 1\n        count += 1\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_number = (n * (3 * n - 1)) // 2\n    return decagonal_number\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"The\", n, \"th decagonal number is\", is_num_decagonal(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = [0, 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, 176, 210, 247, 287, 330, 376, 425, 477, 532, 590, 651, 715, 782, 852, 925, 1001, 1080, 1162, 1247, 1335, 1426, 1520, 1617, 1717, 1820, 1926, 2035, 2147, 2262, 2380, 2501, 2625, 2752, 2882, 3015, 3151, 3290, 3432, 3577, 3725, 3876, 4030, 4187, 4347, 4510, 4676, 4845, 5017, 5192, 5370, 5551, 5735, 5922, 6112, 6305, 6501, 6700, 6902, 7107, 7315, 7526, 7740, 7957, 8177, 8400, 8626, 8855, 9087, 9322, 9560, 9801, 10045, 10292, 10542, 10795, 11051, 11310, 11572, 11837, 12105, 12376, 12650, 12927, 13207, 13490, 13776, 14065, 14357, 14652, 14950, 15251, 15555, 15862, 16172, 16485, 16801, 17120, 17442, 17767, 18095, 18426, 18760, 19097, 19437, 19780, 20126, 20475, 20827, 21182, 21540, 21899, 22262, 22628, 22997, 23369, 23743, 24120, 24499, 24881, 25265, 25652, 26041, 26433, 26827, 27224, 27623, 28025, 28429, 28836, 29245, 29657, 30071, 30488, 30907, 31329, 31753, 32180, 32610, 33042, 33477, 33914, 34353, 34795, 35240,"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the variables for decagonal numbers\n    a = 1\n    b = 1\n    c = 2\n\n    # loop till n is greater than 1\n    while n > 1:\n        # add the previous two numbers to get the current number\n        a, b = b, a + b\n        # add 2 to the current number to get the next number\n        c = c + 2\n        # decrement n by 1\n        n = n - 1\n\n    # return the current number which is the nth decagonal number\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # Calculate the number of rows required for the decagonal number\n    num_rows = int((n * (n + 1)) / 2)\n\n    # Calculate the first row of the decagonal number\n    first_row = 1\n\n    # Initialize a list to store the decagonal numbers\n    decagonal_numbers = []\n\n    # Loop through each row of the decagonal number\n    for i in range(1, num_rows + 1):\n\n        # Calculate the nth column number of the decagonal number\n        col = (num_rows - i) * 2 - 1\n\n        # Add the nth column number to the list\n        decagonal_numbers.append(col)\n\n        # Calculate the nth row number of the decagonal number\n        row = i\n\n        # Add the nth row number to the list\n        decagonal_numbers.append(row)\n\n    # Return the nth decagonal number\n    return decagonal_numbers[n - 1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return n * (n * 2 - 1) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # get the sum of the first n positive integers\n    sum_n = (n * (3 * n - 1)) // 2\n\n    # check if the sum of the first n positive integers is a decagonal number\n    if sum_n % 10 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    # Check if the array is empty\n    if len(dlist) == 0:\n        return False, -1\n\n    # Initialize the index of the element and the boolean to False\n    index = 0\n    found = False\n\n    # Loop through the array\n    while index < len(dlist) and not found:\n        # If the element is found, set the boolean to True and break out of the loop\n        if dlist[index] == item:\n            found = True\n        else:\n            # Otherwise, increment the index and continue looping\n            index += 1\n\n    # Return a tuple containing the boolean and the index\n    return found, index"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique and False otherwise.\n    \"\"\"\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Initialize an empty set to store the unique elements\n    unique_set = set()\n\n    # Iterate over each element in the list\n    for element in test_list:\n        # If the element is already in the set, the element is not unique\n        if element in unique_set:\n            return False\n        # If the element is not in the set, add it to the set\n        else:\n            unique_set.add(element)\n\n    # If all elements in the list are unique, the function returns True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Initialize an empty set to store unique elements\n    unique_elements = set()\n\n    # Loop through each element of the list\n    for element in test_list:\n        # Check if the element is already in the set\n        if element in unique_elements:\n            # If it is, then the list contains duplicate elements\n            return False\n        # If the element is not already in the set, add it to the set\n        else:\n            unique_elements.add(element)\n\n    # If no duplicates were found, then the list contains no duplicate elements\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as an argument and returns a boolean value indicating whether all the elements in the list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # converting the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # checking if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    else:\n        for i in range(len(nums1)):\n            nums1[i] -= nums2[i]\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # check if the length of both lists is same\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have same length\")\n\n    # loop through both lists and subtract the element-wise difference\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are of different lengths.\")\n        return None\n    \n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n        \n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Convert integer to string\n    s = str(n)\n\n    # Initialize frequency list\n    freq = [0] * 10\n\n    # Iterate through each digit and increment its frequency in the list\n    for d in s:\n        freq[int(d)] += 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    # If all digits are valid, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10  # Initialize frequency array with zeros\n    for i in range(len(str(n))):  # Iterate through each digit of the number\n        freq[int(str(n)[i])] += 1  # Increment frequency count of the digit in the array\n    for i in range(10):  # Iterate through each digit\n        if freq[i] > i:  # Check if frequency count is greater than the digit itself\n            return False  # If any digit has frequency greater than itself, return False\n    return True  # If all digits have frequency less than or equal to themselves, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0, 0, 0, 0, 0, 0]\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for i in range(len(freq)):\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit in freq:\n        if freq[digit] > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string and split it into individual digits\n    digits = str(n)\n    # Initialize an empty dictionary to store the frequency of each digit\n    freq = {}\n    # Loop through each digit and increment its frequency in the dictionary\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n    # Loop through each digit in the dictionary and check if its frequency is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    # If no digit in the dictionary has a frequency greater than itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    frequency = {}\n    for digit in digits:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n\n    for digit in frequency:\n        if frequency[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # initialize the frequency of each digit to 0\n    freq = [0] * 10\n    # iterate through the list of digits\n    for digit in digits:\n        # increment the frequency of the digit\n        freq[digit] += 1\n    # iterate through the list of digits again to check if the frequency is less than or equal to the digit itself\n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n    # if all digits have the same frequency as the digit itself, the function returns True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Create an empty dictionary to store the frequency of each digit\n    freq_dict = {}\n    \n    # Loop through each digit in the number and increment the frequency in the dictionary\n    for digit in str(n):\n        freq_dict[digit] = freq_dict.get(digit, 0) + 1\n    \n    # Loop through each digit in the number and check whether its frequency in the dictionary is less than or equal to the digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n    \n    # If all digits pass, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # initialize a dictionary to store the frequency of each digit in the number\n    freq = {}\n    for i in str(n):\n        # if the digit is already in the dictionary, increment its value by 1\n        if i in freq:\n            freq[i] += 1\n        # otherwise, add the digit to the dictionary with a value of 1\n        else:\n            freq[i] = 1\n    \n    # iterate through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for i in freq:\n        if freq[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    all_elements_equal = True\n    for item in list:\n        if item!= element:\n            all_elements_equal = False\n            break\n    return all_elements_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element as parameters and returns True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    if len(lst) == 0:\n        return True\n    if lst[0] == elem:\n        return check_element(lst[1:], elem)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Check whether all elements in a list are equal to a given element.\n\n    :param list: a list to be checked for equality with the element\n    :param element: the element to check for equality\n    :return: True if all elements in the list are equal to the element, False otherwise\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element,\n    else it returns False.\n    '''\n    for i in lst:\n        if i!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Some items in the list are not equal to the given element.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)(?:b{2,3})(?=\\s|$)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*?b(?:{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b[23].*'\n    return re.match(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?=.*a)(?=.*b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    prev_sum = float('-inf')\n\n    for i in range(k):\n        for j in range(n):\n            prev_sum += a[j]\n            if prev_sum > max_sum:\n                max_sum = prev_sum\n            elif prev_sum < 0:\n                prev_sum = 0\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the sum of the first n elements as 0\n    sum_first_n = 0\n    # Initialize the maximum sum of the first n elements as 0\n    max_sum_first_n = 0\n    # Initialize the sum of the modified array as 0\n    sum_modified_array = 0\n    # Initialize the maximum sum of the modified array as 0\n    max_sum_modified_array = 0\n    # Repeat the given array k times and calculate the sum and maximum sum of the modified array\n    for i in range(k):\n        modified_array = [a[0]]*n + a + [a[-1]]*n\n        sum_modified_array += sum(modified_array)\n        max_sum_modified_array = max(max_sum_modified_array, sum_modified_array)\n    # Find the largest sum of the first n elements in the modified array\n    for i in range(n):\n        sum_first_n += a[i]\n        max_sum_first_n = max(max_sum_first_n, sum_first_n)\n    # Return the maximum sum of the first n elements in the modified array\n    return max_sum_first_n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Given an array a of size n, find the largest sum of a contiguous array in the modified array\n    formed by repeating the given array k times.\n    \"\"\"\n    # Create a modified array by repeating the given array k times\n    modified_array = a * k\n    \n    # Initialize variables to store the maximum sum of a contiguous subarray and the current sum of a contiguous subarray\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the modified array, adding each element to the current sum and updating the maximum sum if necessary\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Check if the current sum is greater than the sum of the modified array\n        if current_sum > modified_array[i]:\n            current_sum -= a[i]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = sum(a)\n\n    for i in range(n):\n        for j in range(k):\n            temp_sum = a[i] + current_sum\n            current_sum = temp_sum % 1000000007\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Get the maximum sum of an array of length n, by finding the maximum sum of a single array.\n    max_sum = max_sum_of_array(a, n)\n\n    # Modify the array by repeating it k times.\n    modified_array = [a[0] for _ in range(k)]\n    modified_array.extend(a[1:])\n\n    # Find the maximum sum of the modified array by finding the maximum sum of a single array.\n    modified_max_sum = max_sum_of_array(modified_array, k)\n\n    # Return the maximum sum of the modified array.\n    return modified_max_sum\n\n\ndef max_sum_of_array(a, n):\n    # Initialize the maximum sum of the array to be the first element.\n    max_sum = a[0]\n\n    # Loop through the array and update the maximum sum whenever a sub-array of the same sum is found.\n    for i in range(1, n):\n        max_sum = max(max_sum + a[i], a[i])\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of all the elements in the array\n    total_sum = sum(a)\n\n    # Initialize the maximum sum to be the sum of the first k elements\n    max_sum = sum(a[:k])\n\n    # Initialize a variable to store the current subarray sum\n    curr_sum = sum(a[:k])\n\n    # Iterate through the remaining elements in the array\n    for i in range(n-k):\n        # Calculate the new sum by adding the next element to the current subarray sum\n        new_sum = curr_sum + a[i+k]\n\n        # If the new sum is greater than the current maximum sum, update the maximum sum\n        if new_sum > max_sum:\n            max_sum = new_sum\n\n        # Update the current subarray sum with the new sum\n        curr_sum = new_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Input:\n    a: array of integers\n    n: length of the array\n    k: number of times the array should be repeated\n\n    Output:\n    The largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Algorithm:\n    We can repeat the given array k times to form the modified array. The sum of the modified array is simply the sum of the original array multiplied by k.\n\n    To find the largest sum of a contiguous array in the modified array, we can iterate over all possible sub-arrays of the modified array and keep track of the maximum sum.\n\n    Time Complexity: O(nk), where n is the length of the original array and k is the number of times the array should be repeated.\n\n    Space Complexity: O(1), since we only need to store the current maximum sum and the maximum sum of all possible sub-arrays.\n    '''\n\n    # find the sum of the original array\n    original_sum = sum(a)\n\n    # repeat the original array k times to form the modified array\n    modified_sum = original_sum * k\n\n    # initialize the maximum sum and the current maximum sum\n    max_sum = max(original_sum, modified_sum)\n    current_sum = max_sum\n\n    # iterate over all possible sub-arrays of the modified array\n    for i in range(k):\n        # update the current maximum sum\n        current_sum = max(a[i], current_sum + a[i])\n        # update the maximum sum if needed\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum to 0 and initialize the sum of the first k elements to 0\n    max_sum = 0\n    curr_sum = 0\n    \n    # Iterate through the array and calculate the sum of each window of length k\n    for i in range(n):\n        curr_sum += a[i]\n        \n        # If the sum exceeds the current maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # If the sum becomes negative after k elements, calculate the sum of the first k elements again\n        if i >= k - 1:\n            curr_sum -= a[i - k + 1]\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array\n    for i in range(k):\n        # Add the current element to the sum\n        current_sum += a[i]\n        \n        # Check if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Subtract the element from the sum as we are repeating the array\n        current_sum -= a[i]\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize two variables to store the maximum sum and the sum of the current subarray\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array n times\n    for i in range(n): \n        \n        # Check if the current subarray is greater than the maximum sum so far\n        if current_sum > max_sum: \n            max_sum = current_sum\n        \n        # Add the current element to the sum of the current subarray\n        current_sum += a[i]\n        \n        # If the current sum exceeds k times, subtract the element at the beginning of the subarray\n        if current_sum > k*n: \n            current_sum -= a[0]\n            \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    i = 0\n    while count < n:\n        i += 2\n        count += 1\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_squares = 0\n    for i in range(2, n+1, 2):\n        even_squares += i**2\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        square = i ** 2\n        sum += square\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum_of_squares += i**2\n        i += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize the sum to 0\n    sum_of_squares = 0\n\n    # iterate from 0 to n-1\n    for i in range(n):\n        # calculate the square of the current even number i\n        square_i = i**2\n        # add the square of the current even number to the sum_of_squares\n        sum_of_squares += square_i\n\n    # return the sum_of_squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initializing sum variable to 0\n    total_sum = 0\n    \n    # iterating from 0 to n-1\n    for i in range(n):\n        \n        # checking if the current number is even\n        if i % 2 == 0:\n            \n            # raising the number to the power of 2 and adding it to the total sum\n            total_sum += i ** 2\n            \n    # returning the total sum\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize sum to zero\n    total = 0\n    # Loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the square of the current number\n        square = i*i\n        # Add the square to the total sum\n        total += square\n    # Return the total sum\n    return total"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths) or not max_lengths:\n            max_lengths = [len(sublist)]\n        else:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(x) for x in lst]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of the maximum length in the input list.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = max(len(sublist), len(max_lengths))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # Iterate over each sublist in the input list\n    for sublist in list1:\n        # Find the maximum length of this sublist\n        max_length = max(len(sublist), key=len)\n        # Append the maximum length to the list of maximum lengths\n        max_lengths.append(max_length)\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxLength = 0\n    maxLengthList = []\n    \n    for lst in list1:\n        if len(lst) > maxLength:\n            maxLength = len(lst)\n            maxLengthList = lst\n            \n    return maxLengthList"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize maximum length to zero\n    max_length = 0\n\n    # loop through each list in the list of lists\n    for lst in list1:\n        # loop through each element in the list\n        for element in lst:\n            # update the maximum length if the current element is longer\n            if len(element) > max_length:\n                max_length = len(element)\n\n    # return the list of maximum lengths\n    return list1[max_length_index]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths) or max_lengths == []:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D matrix to store the number of ways of painting the fence with k colors and n posts\n    count_matrix = [[0 for i in range(k+1)] for j in range(n+1)]\n\n    # Initialize the count of ways for the first 2 posts\n    count_matrix[1][1] = 1\n\n    # Calculate the count of ways for the remaining posts\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            count_matrix[i][j] = count_matrix[i-1][j-1] + count_matrix[i-1][j]\n\n    # Return the count of ways for the last post\n    return count_matrix[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    # Helper function to check if two adjacent posts have the same color\n    def same_color(a, b):\n        return a[1] == b[1]\n\n    # Helper function to check if a color is already used in the given fence\n    def is_used(color, fence):\n        for i in range(len(fence)):\n            if fence[i][0] == color:\n                return True\n        return False\n\n    # Base case: if there are less than 2 colors in the fence, there are no ways\n    if k < 2:\n        return 0\n\n    # Base case: if the fence has only one post, there are only 1 way\n    if n == 1:\n        return 1\n\n    # Initialize the number of ways to 0\n    ways = 0\n\n    # Loop through all possible colors\n    for color in range(1, k+1):\n        # Check if the color is already used in the fence\n        if is_used(color, [[1, color]]):\n            continue\n\n        # Loop through all possible ways to paint the fence with the current color\n        for i in range(n):\n            # Check if the current post is adjacent to the previous post with the same color\n            if i > 0 and same_color(fence[i-1], fence[i]):\n                continue\n\n            # Add the number of ways to paint the fence with the current post and the same color\n            ways += count_no_of_ways(n-1, k-1)\n\n            # If the current post is adjacent to the next post with the same color, add the number of ways to paint the fence with the current post and the next post with a different color\n            if i < n-1 and same_color(fence[i], fence[i+1]):\n                ways += count_no_of_ways(n-2, k-1)\n\n    # Return the final answer\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Check if the given condition is true\n    if n <= 4 or k <= 2:\n        return 0\n\n    # Initialize the count variable to 1\n    count = 1\n\n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Calculate the factorial of k\n    factorial_k = 1\n    for i in range(1, k+1):\n        factorial_k *= i\n\n    # Calculate the factorial of n-k\n    factorial_n_k = 1\n    for i in range(1, n-k+1):\n        factorial_n_k *= i\n\n    # Calculate the factorial of (n-k)/(k-1)\n    factorial_n_k_minus_k_minus_1 = 1\n    for i in range(1, n-k+1):\n        factorial_n_k_minus_k_minus_1 *= (n-k-i)\n\n    # Calculate the factorial of (n-k)/(k-1)\n    factorial_k_minus_1 = 1\n    for i in range(1, k-1):\n        factorial_k_minus_1 *= (k-i)\n\n    # Calculate the number of ways to paint the fence\n    count *= factorial_n_k // (factorial_k_minus_1 * factorial_n_k_minus_k_minus_1)\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a dictionary to store the count of ways for each color\n    counts = {}\n\n    # Iterate through all possible colors\n    for color in range(1, k+1):\n        # Initialize a variable to keep track of the count of ways\n        count = 0\n\n        # Iterate through all possible ways of painting the fence with k colors\n        for i in range(n+1):\n            # If the current color is the same as the previous color, add 2 to the count\n            if i > 0 and i < n and color == colors[i-1]:\n                count += 2\n            # If the current color is different from the previous color, add 1 to the count\n            else:\n                count += 1\n\n        # Update the count for the current color in the dictionary\n        counts[color] = count\n\n    # Return the maximum count of ways\n    return max(counts.values())"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    # If there are no colors, there is only one way to paint the fence\n    if k == 0: \n        return 1\n    \n    # Initialize a table to store the number of ways for each number of colors\n    table = [[0] * (k + 1) for i in range(n + 1)]\n    \n    # Initialize the first row and column of the table\n    for i in range(1, n + 1): \n        table[i][0] = 1\n    \n    # Fill in the rest of the table using the recurrence relation\n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if i == 1: \n                table[i][j] = 1\n            elif j == 1: \n                table[i][j] = table[i - 1][1]\n            else: \n                table[i][j] = table[i - 1][j] + table[i - 1][j - 1]\n    \n    # Return the number of ways to paint the fence with n posts and k colors\n    return table[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Calculate the number of ways to paint the fence\n    ways = 0\n    # Initialize a boolean array of size n\n    fence = [False] * n\n    for i in range(n):\n        # Check if the fence is already painted\n        if fence[i]:\n            # If fence is painted, check if the adjacent posts have same color\n            for j in range(i+1, n):\n                if fence[j] and fence[j] == fence[i]:\n                    ways += 1\n                    # If the adjacent posts have same color, break the loop\n                    break\n    # Return the number of ways\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a dictionary to store the count of ways for each combination of colors and positions\n    ways = {\n        (0, 0): 1,  # Base case when n=0 and k=0\n        (0, 1): 0,\n        (0, 2): 0,\n        (0, 3): 0,\n        (0, 4): 0,\n        (0, 5): 0,\n        (0, 6): 0,\n        (0, 7): 0,\n        (0, 8): 0,\n        (0, 9): 0,\n        (1, 0): 0,\n        (1, 1): 0,\n        (1, 2): 0,\n        (1, 3): 0,\n        (1, 4): 0,\n        (1, 5): 0,\n        (1, 6): 0,\n        (1, 7): 0,\n        (1, 8): 0,\n        (1, 9): 0,\n        (2, 0): 0,\n        (2, 1): 0,\n        (2, 2): 0,\n        (2, 3): 0,\n        (2, 4): 0,\n        (2, 5): 0,\n        (2, 6): 0,\n        (2, 7): 0,\n        (2, 8): 0,\n        (2, 9): 0,\n        (3, 0): 0,\n        (3, 1): 0,\n        (3, 2): 0,\n        (3, 3): 0,\n        (3, 4): 0,\n        (3, 5): 0,\n        (3, 6): 0,\n        (3, 7): 0,\n        (3, 8): 0,\n        (3, 9): 0,\n        (4, 0): 0,\n        (4, 1): 0,\n        (4, 2): 0,\n        (4, 3): 0,\n        (4, 4): 0,\n        (4, 5): 0,\n        (4, 6): 0,\n        (4, 7): 0,\n        (4, 8): 0,\n        (4, 9): 0,\n        (5, 0): 0,\n        (5, 1): 0,\n        (5, 2): 0,\n        (5, 3): 0,\n        (5, 4): 0,\n        (5, 5): 0,\n        (5, 6): 0,\n        (5, 7): 0,\n        (5, 8): 0,\n        (5, 9): 0,\n        (6, 0): 0,\n        (6, 1): 0,\n        (6, 2): 0,\n        (6, 3): 0,\n        (6, 4): 0,\n        (6, 5): 0,\n        (6, 6): 0,\n        (6, 7): 0,\n        (6, 8): 0,\n        (6, 9): 0,\n        (7, 0): 0,\n        (7, 1): 0,\n        (7, 2): 0,\n        (7, 3): 0,\n        (7, 4): 0,\n        (7, 5): 0,\n        (7, 6): 0,\n        (7, 7): 0,\n        (7, 8): 0,\n        (7, 9): 0,\n        (8, 0): 0,\n        (8, 1): 0,\n        (8, 2): 0,\n        (8, 3): 0,\n        (8, 4): 0,\n        (8, 5): 0,\n        (8, 6): 0,\n        (8, 7): 0,\n        (8, 8): 0,\n        (8, 9): 0,\n        (9, 0): 0,\n        (9, 1"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a 2D matrix to store the number of ways of painting the fence\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base case: if there are no colors left, there is only 1 way\n    for i in range(n + 1):\n        dp[i][0] = 1\n\n    # Base case: if there is only one color left, there is only 1 way\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n\n    # Fill the rest of the matrix using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            if i == 2:  # if there is only 1 post left, there is only 1 way to paint it with that color\n                dp[i][j] = 1\n            else:\n                # If we have i - 1 posts and j colors left, we can paint the last post with color j and i - 1 posts with color j - 1\n                # and also paint the last post with color j and i posts with color j\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i][j]\n\n    # Return the number of ways of painting the fence\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Function to count the number of ways of painting the fence\n    def count_ways(n, k, post, color):\n        # Base case: If the fence is empty, there is only one way to paint it with k colors\n        if n == 0:\n            return k\n        # Base case: If the fence is already painted with the color, there is only one way to paint it with k-1 colors\n        if post >= n and color in post_colors[post]:\n            return count_ways(n, k-1, post, color)\n        # Recursive case: Check if the next post can be painted with the color or not\n        else:\n            if post_colors[post].count(color) == 0:\n                return count_ways(n-1, k, post+1, color)\n            else:\n                return count_ways(n, k, post+1, color)\n\n    # Initialize the dictionary to store the number of ways of painting the fence for each possible post color\n    post_colors = {}\n\n    # Find all possible post colors for the given fence size and number of colors\n    for i in range(n+1):\n        for j in range(k+1):\n            post_colors[(i, j)] = list(set([str(i+1), str(j+1)]))\n\n    # Call the function to count the number of ways of painting the fence\n    return count_ways(n, k, 0, None)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize the number of ways of painting the fence\n    count = 0\n    \n    # Iterate through all possible pairs of adjacent posts\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # If the two adjacent posts have the same color, then increment the count\n            if k % 2 == 1 and (i==j-1 or i==j+1):\n                count += 1\n                k -= 1\n    \n    # Return the count of ways\n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = int(n/m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient\n    quotient = n // m\n\n    # Calculate the remainder using the modulo operator\n    remainder = n % m\n\n    # If the remainder is 0, return the quotient\n    if remainder == 0:\n        return quotient\n\n    # Otherwise, calculate the quotient with the remainder and return the result\n    else:\n        return quotient + 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # check if n is zero\n    if n == 0:\n        return 0\n    \n    # initialize quotient and remainder\n    quotient = 0\n    remainder = n\n    \n    # iterate until remainder is less than or equal to m\n    while remainder <= m:\n        # add 1 to the quotient and subtract the remainder from n\n        quotient += 1\n        n -= remainder\n        \n        # calculate the remainder of n divided by m\n        remainder = n % m\n    \n    # return the quotient\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula for the hypotenuse\n    hypotenuse = math.sqrt((w ** 2) + (h ** 2))\n\n    # Return the third side\n    return hypotenuse"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w*w + h*h)\n    third_side = 2*w*s\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using the law of cosines\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s**2 + w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(w**2 + (h/2)**2)\n    c = math.sqrt(h**2 + (w/2)**2)\n\n    if w <= h:\n        if h <= w:\n            if w <= (h/2):\n                return b\n            else:\n                return c\n        else:\n            if w <= (h/2):\n                return a\n            else:\n                return c\n    else:\n        if h <= w:\n            if h <= (w/2):\n                return a\n            else:\n                return b\n        else:\n            if w <= (h/2):\n                return b\n            else:\n                return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula to find the third side\n    c = (w**2 + h**2) ** 0.5\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the area of the triangle\n    A = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the third side of the triangle\n    b = math.sqrt(A)\n\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h) * (s - w + h))\n    # Calculate the semi-perimeter of the rectangle formed by the triangle\n    s_rect = math.sqrt(w * w + h * h - area)\n    # Return the third side of the triangle\n    return s_rect"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n\n    Parameters:\n        w (float): the length of the base of the right angled triangle\n        h (float): the length of the hypotenuse of the right angled triangle\n\n    Returns:\n        float: the third side of the right angled triangle\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the third side of the triangle\n    t = math.sqrt(s ** 2 - h ** 2)\n\n    return t"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(lst):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for value in listval:\n        if max_val is None or value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as input and returns the maximum value in it.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None #initialize maxval to None\n    for i in listval: #iterate over the list\n        if maxval is None or i > maxval: #if maxval is None or the current value is greater than maxval\n            maxval = i #update maxval with the current value\n    return maxval #return the maxval"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = [1]\n    limit = number // 2\n    for i in range(2, limit + 1):\n        if number % i == 0:\n            divisors.append(i)\n            divisors.append(number // i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    i = 1\n    while i <= number:\n        if number % i == 0:\n            divisor_sum += i\n        i += 1\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    sum_div = 0\n\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n            sum_div += divisor\n        divisor += 1\n\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # initialize the sum of divisors to zero\n    div_sum = 0\n    \n    # loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number**0.5)+1):\n        # check if the input number is divisible by the current number\n        if number % i == 0:\n            # add the current number to the sum of divisors\n            div_sum += i\n    \n    # return the sum of divisors\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        left = 0\n        right = i\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[i]:\n                left = mid + 1\n            else:\n                right = mid\n        # swap the first i elements with the position of i in the sorted part of the array\n        for j in range(i):\n            if arr[j] > arr[i]:\n                inv_count += right - i\n                arr[j], arr[right - 1] = arr[right - 1], arr[j]\n        inv_count += right - left\n        # swap the first i elements with the position of left in the original array\n        for j in range(i, left):\n            if arr[j] > arr[left]:\n                inv_count += right - left\n                arr[j], arr[left] = arr[left], arr[j]\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            if arr[left] > arr[i]:\n                inv_count += right - left\n                left += 1\n            elif arr[right] > arr[i]:\n                inv_count += right - left\n                right -= 1\n            else:\n                left += 1\n                right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Iterate through the array and calculate inversions\n    for i in range(n):\n        left = 0\n        right = i\n        while left < right:\n            if arr[left] < arr[right]:\n                left += 1\n            elif arr[left] > arr[right]:\n                inv_count += (right - left)\n                right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i + 1)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        left = merge_sort(left)\n        right = merge_sort(right)\n\n        return merge(left, right)\n\n    def merge(left, right):\n        inv_count = 0\n        i = j = k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                inv_count += len(left) - i\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n        return arr, inv_count\n\n    arr = list(map(int, input(\"Enter the elements of the array separated by space: \").split()))\n    merged_arr, inv_count = merge_sort(arr)\n    print(\"Inversions count:\", inv_count)\n    print(\"Sorted array:\", merged_arr)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Sort the array in increasing order\n    arr.sort()\n    # Count the number of inversions in the sorted array\n    inv_count = 0\n    left, right = 0, n-1\n    while left < right:\n        # If the left and right subarrays have elements in the same position,\n        # it means that the array is already sorted, so no inversions are needed\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            right -= 1\n            inv_count += (right - left + 1)\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n  \n    # To count inversions \n    inv_count = 0 \n  \n    # To sort the array in ascending order \n    arr.sort() \n  \n    for i in range(n): \n        # Traverse the array from the right-most element \n        # and calculate the inversions \n        for j in range(i+1, n): \n            inv_count += min(i, j) - j \n  \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in the given array.\n\n    Parameters:\n    arr: list\n        The array to count inversions in.\n\n    Returns:\n    int\n        The number of inversions in the array.\n    \"\"\"\n    def merge(left, right):\n        \"\"\"\n        Merges two sorted arrays into a single sorted array.\n\n        Parameters:\n        left: list\n            The left sorted array.\n        right: list\n            The right sorted array.\n\n        Returns:\n        list\n            The merged sorted array.\n        \"\"\"\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    def merge_sort(arr):\n        \"\"\"\n        Sorts the given array using a merge sort algorithm.\n\n        Parameters:\n        arr: list\n            The array to sort.\n\n        Returns:\n        list\n            The sorted array.\n        \"\"\"\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge_inv_count(left, right):\n        \"\"\"\n        Counts the inversions between two sorted arrays.\n\n        Parameters:\n        left: list\n            The left sorted array.\n        right: list\n            The right sorted array.\n\n        Returns:\n        int\n            The number of inversions between the two sorted arrays.\n        \"\"\"\n        i = j = k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                inv_count = k\n                k += 1\n                i += 1\n            else:\n                inv_count = k\n                k += len(left) - i\n                j += 1\n\n        return k\n\n    inv_count = 0\n    sorted_arr = merge_sort(arr)\n\n    for i in range(len(arr)):\n        inv_count += merge_inv_count(sorted_arr[:i], sorted_arr[i:])\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n            elif arr[j] > arr[i]:\n                inv_count += j - i\n    \n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate and the count of items in each group\n    agg_max = defaultdict(int)\n\n    # iterate through each item in the list of tuples\n    for item in stdata:\n        # calculate the maximum aggregate for the current group of items\n        max_agg = max(item[0], item[1], item[2])\n        # update the count of items in the current group\n        agg_max[item] = agg_max[item] + 1\n\n        # update the maximum aggregate for the entire list of items\n        if agg_max[item] > agg_max[max_agg]:\n            agg_max[max_agg] = agg_max[item]\n\n    # find the maximum aggregate from the defaultdict\n    max_agg = max(agg_max.values())\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for name, age, salary in stdata:\n        if age < 30:\n            max_dict[name] += salary\n\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for _, st, ag in stdata:\n        max_dict[st] += ag\n    \n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from a list of tuples.\n    \n    Parameters:\n    stdata (list of tuples): List of tuples containing the sales data. Each tuple contains the product name, quantity, and price for a given sale.\n    \n    Returns:\n    max_agg (float): Maximum aggregate value.\n    '''\n    \n    # Create a defaultdict to store the aggregate value and count of each product\n    agg_dict = defaultdict(int)\n    \n    # Iterate through each tuple in the list of tuples\n    for item in stdata:\n        # Add the aggregate value and count to the defaultdict\n        agg_dict[item[0]] += item[1] * item[2]\n    \n    # Initialize the maximum aggregate value\n    max_agg = 0\n    \n    # Iterate through the defaultdict and update the maximum aggregate value if necessary\n    for key in agg_dict:\n        if agg_dict[key] > max_agg:\n            max_agg = agg_dict[key]\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        for i in item:\n            max_agg[i] += item[i]\n\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the aggregate values and their corresponding count\n    agg_count = defaultdict(int)\n    # iterate over the list of tuples\n    for t in stdata:\n        # extract the aggregate and count values\n        agg, count = t\n        # add the count to the count of the corresponding aggregate\n        agg_count[agg] += count\n    # extract the maximum aggregate value from the defaultdict and return it\n    return max(agg_count, key=agg_count.get)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each year and month\n    max_aggregate_dict = defaultdict(lambda: defaultdict(int))\n\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Extract the year and month from the tuple\n        year, month, aggregate = item\n\n        # Update the maximum aggregate for the current year and month\n        max_aggregate_dict[year][month] = max(max_aggregate_dict[year][month], aggregate)\n\n    # Find the maximum aggregate for all the years and months\n    max_aggregate_sum = max(sum(max_aggregate_dict[year][month] for month in max_aggregate_dict[year]) for year in max_aggregate_dict)\n\n    return max_aggregate_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n\n    # iterate over all the tuples in the list\n    for subtotal, item, price in stdata:\n        # update the max aggregate for each item\n        max_agg[item] = max(max_agg[item], subtotal * price)\n\n    # calculate the overall maximum aggregate\n    max_aggr = max(max_agg.values())\n\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each day\n    max_aggr = defaultdict(int)\n    # Loop through the list of tuples\n    for tup in stdata:\n        # Get the date and the aggregate for that day\n        date, aggregate = tup\n        # Update the max_aggr dictionary with the new value\n        max_aggr[date] = max(aggregate, max_aggr[date])\n    # Return the max aggregate value for each day\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for stock, price in stdata:\n        max_dict[stock] += price\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total_count = 0\n    for i in range(1, 2**n+1):\n        first_half = i // 2\n        last_half = i % 2\n        if (i % (2**n-i+1) == 0 and (i // 2 == 0 or (i // 2 - 1) % 2!= 0)) or (first_half == 0 and last_half == 0):\n            total_count += 1\n    return total_count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_half = i // 2\n        second_half = i % 2\n        if first_half + second_half == 1:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables to store count and previous sum\n    count = 0\n    prev_sum = 0\n\n    # Iterate through all binary numbers of length 2n\n    for i in range(1, (1 << 2 * n)):\n        # Extract first n bits and last n bits\n        first = i & ((1 << n) - 1)\n        last = i >> n\n\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if first == prev_sum:\n            count += 1\n\n        # Update the previous sum\n        prev_sum = first\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Count of binary sequences of length 2n where sum of first n bits is same as sum of last n bits\n    count = 0\n\n    # Generate all binary sequences of length 2n\n    for i in range(2**n): \n        seq = bin(i)[2:].zfill(n*2) # Convert integer to binary string with leading zeros\n\n        # Check if sum of first n bits is same as sum of last n bits\n        if int(seq[:n]) == int(seq[-n:]):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    # Initialize count to 0\n    count = 0\n\n    # Iterate through all possible binary numbers\n    for i in range(2 ** n):\n        # Convert binary number to a list of digits\n        num_list = [int(d) for d in bin(i)[2:]]\n\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if sum(num_list[:n]) == sum(num_list[-n:]):\n            # Increment the count if the sequence is valid\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)): \n        sum1 = 0\n        sum2 = 0\n        for j in range(n): \n            if (i >> j) & 1 == 1: \n                sum1 += 1 \n        for k in range(n): \n            if (i >> (n+k)) & 1 == 1: \n                sum2 += 1 \n        if sum1 == sum2: \n            count += 1 \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum1 = 0\n        sum2 = 0\n        for j in range(n):\n            if i & (1 << j):\n                sum1 += 2**j\n        for k in range(n):\n            if i & (1 << k):\n                sum2 += 2**(n-1-k)\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n-1, -1, -1):\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i-2**n+1)[2:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    This function finds the count of all binary sequences of length 2n such that the sum of first n bits is same as the sum of the last n bits.\n\n    Args:\n        n: An integer representing the number of bits in the binary sequence.\n\n    Returns:\n        A list of integers representing the count of binary sequences of length 2n.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        first_half = i >> n\n        second_half = i & ((1 << n) - 1)\n        if first_half == second_half:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables to keep track of the current sum and the count of sequences\n    current_sum = 0\n    count = 0\n    \n    # Loop through all possible combinations of binary sequences\n    for i in range(2**n):\n        # Extract the last n bits of the current binary sequence\n        last_bits = bin(i)[2:].zfill(n)\n        \n        # Calculate the sum of the first n bits\n        first_sum = int(last_bits[:n], 2)\n        \n        # If the first sum is equal to the current sum, add to the count\n        if first_sum == current_sum:\n            count += 1\n            \n        # Update the current sum\n        current_sum = first_sum\n    \n    # Return the count of sequences\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 1\n        for key, value in d.items():\n            depth = max(depth, dict_depth(value))\n        return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(value) for value in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # Initialize a depth counter to zero\n    depth = 0\n    # Recursively check the depth of each dictionary key-value pair\n    for key, value in d.items():\n        # Check if the value is a dictionary\n        if isinstance(value, dict):\n            # If it is, add one to the depth counter\n            depth += 1\n        # If the value is not a dictionary, add zero to the depth counter\n        else:\n            depth += 0\n    # Return the final depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for value in d.values():\n            if isinstance(value, dict):\n                depth += 1\n                depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth = max(depth, dict_depth(item) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth to zero\n    depth = 0\n    # Loop through each key-value pair in the dictionary\n    for key, value in d.items():\n        # If the value is a dictionary, recursively call the function\n        if isinstance(value, dict):\n            # Add one to the depth count\n            depth += 1\n            # Recursively call the function on the nested dictionary\n            dict_depth(value)\n    # Return the depth count\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges and rotations and an index to find the element after rotations.\n    '''\n    # Initialize variables\n    current_index = 0\n    rotations_completed = 0\n    current_range = ranges[0]\n    last_element = arr[0]\n\n    # Traverse through the array and find the element at the given index\n    for i in range(len(arr)):\n        # If the current index is greater than the given index\n        if current_index > index:\n            # If the current range is not empty, find the element in the current range\n            if current_range:\n                element = arr[current_range[0]]\n                for j in range(1, len(current_range)):\n                    element = element * arr[current_range[j]]\n                current_index -= len(current_range)\n                current_range = None\n            # Increment the rotation count\n            rotations_completed += 1\n            # Find the next range of elements to rotate in\n            if rotations_completed < rotations:\n                current_range = ranges[rotations_completed]\n            # If the current range is empty, rotate the last element\n            else:\n                current_index = 0\n                current_range = None\n                last_element = arr[i]\n        # If the current index is equal to the given index, find the element in the current range\n        elif current_index == index:\n            if current_range:\n                element = arr[current_range[0]]\n                for j in range(1, len(current_range)):\n                    element = element * arr[current_range[j]]\n                current_index -= len(current_range)\n                current_range = None\n            else:\n                element = last_element\n            break\n\n    # Return the element found\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Finding the sum of numbers at each index\n    total_sum = sum(arr[i] for i in range(len(arr)))\n\n    # Finding the sum of numbers after rotations\n    total_sum_after_rotations = sum(arr[i] for i in range(index + 1, len(arr)))\n\n    # Finding the element at the given index after rotations\n    element_at_index = (total_sum_after_rotations - total_sum) % rotations\n\n    return element_at_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, a number of rotations, and the index of the element\n    that needs to be found.\n\n    The function then loops through the array, checking if each element is within a range. If it is, it\n    checks if the element has already been found at a previous index. If it hasn't, it checks if the\n    element is at the index given by the user and if it is, it returns the element.\n\n    If the element is not at the index given by the user or if it has already been found at a previous\n    index, it checks if the element has been rotated at least the number of times specified by the\n    rotations list. If it has, it checks if the element is at the index given by the user or if it has\n    already been found at a previous index. If it hasn't, it checks if the element is at the index\n    given by the user and if it is, it returns the element.\n\n    If the element is not at the index given by the user or if it has already been found at a previous\n    index, it checks if the element has been rotated more than the number of times specified by the\n    rotations list. If it has, it returns None.\n\n    Args:\n    arr (list): the array of elements\n    ranges (list): a list of tuples containing the lower and upper bounds of each range\n    rotations (int): the number of times the element needs to be rotated before being found\n    index (int): the index of the element that needs to be found\n\n    Returns:\n    The element at the index given by the user if it is within a range, rotated the minimum number of\n    times specified by the rotations list, and hasn't been found at a previous index. Otherwise,\n    it returns None.\n    \"\"\"\n    element = None\n    found_index = -1\n\n    for i in range(len(arr)):\n        if i in ranges:\n            if i > found_index and arr[i] == index:\n                element = arr[i]\n                found_index = i\n                break\n\n    for _ in range(rotations):\n        for i in range(len(arr)):\n            if i in ranges and i > found_index:\n                if arr[i] == index:\n                    element = arr[i]\n                    found_index = i\n                    break\n                elif i == found_index and arr[i] == index:\n                    element = arr[i]\n                    found_index = i\n                    break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in the array, ranges of rotations, index and returns the element at the given index\n    after the specified number of rotations.\n    '''\n    arr = arr.copy()\n    # Initialize the current rotation count and the current element\n    curr_rotation = 0\n    curr_elem = arr[0]\n    # Loop through the array and perform the specified number of rotations\n    for i in range(rotations):\n        # Rotate the array by appending the last element to the beginning\n        arr.append(arr.pop(0))\n        # Increment the current rotation count\n        curr_rotation += 1\n        # Update the current element\n        curr_elem = arr[-1]\n        # Loop through the range of rotations and perform the rotation\n        for j in range(len(ranges)):\n            # Determine the current range of rotations for the current element\n            curr_range = ranges[j]\n            # If the current range includes the index, then perform the rotation\n            if index in curr_range:\n                # Rotate the array by the number of elements in the range\n                for k in range(curr_range[1] - curr_range[0]):\n                    # Append the element at the end of the array to the beginning of the array\n                    arr.insert(0, arr.pop())\n                    # Increment the current rotation count\n                    curr_rotation += 1\n                    # Update the current element\n                    curr_elem = arr[-1]\n    # Return the element at the specified index after the specified number of rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and rotations and an index as input and returns the element at the given index after applying the specified rotations.\n    \"\"\"\n\n    for i in range(len(rotations)):\n        if rotations[i] > 0:\n            # rotate the array\n            arr = rotate(arr, rotations[i])\n\n        # find the element at the given index\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            element = arr[index - ranges[i][0]]\n            return element\n\n    # if the index is outside the range of the original array\n    return -1\n\n\ndef rotate(arr, n):\n    \"\"\"\n    This function takes an array and a rotation factor and returns the rotated array.\n    \"\"\"\n    return arr[-n:] + arr[:-n]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the given array, ranges of rotations, and the index to find the element after rotations.\n    \"\"\"\n    # Find the index of the element after rotations\n    element_index = index % len(arr)\n    for i in range(rotations):\n        # Find the number of rotations\n        num_rotations = (i + 1) % len(ranges)\n        # Find the index of the element after rotations\n        element_index = element_index + ranges[num_rotations - 1]\n        element_index = element_index % len(arr)\n    # Return the element at the given index after rotations\n    return arr[element_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a certain number of rotations.\n    :param arr: A list of integers.\n    :param ranges: A list of tuples representing ranges of values that are being rotated.\n    :param rotations: An integer representing the number of rotations to be performed.\n    :param index: An integer representing the index of the element that we want to find after rotations.\n    :return: The element at the given index after rotations.\n    \"\"\"\n    # Initialize the current index to the starting index.\n    current_index = index\n\n    # Loop through the rotations number of times.\n    for i in range(rotations):\n        # Find the start and end indices for the current range.\n        start = ranges[i][0]\n        end = ranges[i][1]\n\n        # Reverse the range.\n        arr[start:end+1] = arr[start:end+1][::-1]\n\n        # Find the new index for the current element.\n        if start <= current_index < end:\n            current_index = current_index - (start - current_index)\n\n    # Return the element at the given index after rotations.\n    return arr[current_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n\n    def find_element_helper(arr, ranges, rotations, index, current_index, current_range, current_rotations) : \n\n        # base case\n        if current_index == index : \n            return arr[current_index]\n\n        # check if the current range is valid\n        if current_range == 0 : return None\n\n        # rotate the current range\n        rotations -= 1\n        current_range = current_range - 1\n\n        # find the element at the new index\n        if rotations == 0 : \n            return arr[current_index + current_range]\n        else :\n            return find_element_helper(arr, ranges, rotations, index, current_index, current_range, current_rotations)\n\n    # calculate the current rotations\n    current_rotations = rotations\n    for i in range(len(ranges)) : \n        current_rotations += ranges[i]\n\n    # find the element at the given index\n    return find_element_helper(arr, ranges, current_rotations, index, 0, 0, 0)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, range of rotations, and index as input.\n    It returns the element at the given index after rotating the array by the specified number of rotations.\n\n    Args:\n    arr (list): An array of integers.\n    ranges (list): A list of tuples containing the start and end indices of each range of rotations.\n    rotations (int): The number of rotations to apply to the array.\n    index (int): The index of the element to be found.\n\n    Returns:\n    int: The element at the given index after rotating the array by the specified number of rotations.\n\n    \"\"\"\n    # Helper function to find the element at a given index after a rotation\n    def find_element(arr, ranges, rotations, index):\n        # Initialize the current index and count of rotations\n        current_index = index\n        current_rotations = 0\n\n        # Iterate through the ranges of rotations\n        for start_index, end_index in ranges:\n            # If the current index is within the range of rotations, rotate the array by the specified number of rotations and return the element at the given index\n            if start_index <= current_index < end_index:\n                arr = rotate_array(arr, rotations)\n                return arr[current_index - start_index]\n\n            # If the current index is outside the range of rotations, decrement the count of rotations and continue iterating through the ranges\n            current_rotations -= 1\n            current_index -= 1\n\n        # If the current index is not within any range of rotations, return None\n        return None\n\n    # Helper function to rotate an array by the specified number of rotations\n    def rotate_array(arr, rotations):\n        \"\"\"\n        This function takes an array and a number of rotations as input.\n        It returns the rotated array.\n\n        Args:\n        arr (list): An array of integers.\n        rotations (int): The number of rotations to apply to the array.\n\n        Returns:\n        list: The rotated array.\n\n        \"\"\"\n        # If the number of rotations is 0, return the original array\n        if rotations == 0:\n            return arr\n\n        # If the number of rotations is odd, rotate the array by the same number of times\n        if rotations % 2 == 1:\n            return arr[rotations:] + arr[:rotations]\n\n        # If the number of rotations is even, rotate the array by half the number of times and then rotate it by the same number of times\n        else:\n            return arr[rotations // 2:] + arr[:rotations // 2] + arr[rotations // 2:]\n\n    # Find the element at the given index after rotating the array by the specified number of rotations\n    return find_element(arr, ranges, rotations, index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    n = len(arr)\n    temp = 0\n    k = 0\n    flag = False\n    \n    # Iterate through rotations and find the corresponding index\n    for i in range(rotations):\n        if flag == True:\n            k += 1\n            continue\n        if k == index:\n            flag = True\n            temp = arr[i][k]\n        else:\n            k += 1\n    \n    # Find the element at the final index\n    for j in range(n):\n        if j in ranges:\n            if temp == arr[j][k]:\n                return arr[j][k]\n    \n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) == 0:\n        return None\n    else:\n        return p_words[0], p_words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'^p\\w+', words)\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(r'^p', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'^p\\w+'\n\n    # Use the findall() method to find all the words in the list that match the pattern\n    matches = re.findall(pattern, words)\n\n    # Return the first two matches\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match(r'^p.*', word)]\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word.startswith('p'):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p.*')\n    result = [word for word in words if pattern.match(word)]\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    for word in words:\n        if pattern.match(word):\n            return [word, word[3:]]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    pattern = re.compile(r'^p[a-z]*')\n    result = list(filter(pattern.match, words))\n    \n    if len(result) == 2:\n        return result[0], result[1]\n    else:\n        return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match('^p', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function takes an array a, its length n, the current index, and the kth element which is after the index i.\n    It returns the maximum sum of increasing subsequence from prefix until the ith index and including the kth element.\n    '''\n    if index == n:\n        return 0, []\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    if a[index] <= a[k]:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index]+max_sum_increasing_subseq(a, n, index+1, k-1)), [a[index]]+max_sum_increasing_subseq(a, n, index+1, k-1)[1]\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        # if k is greater than i, then it is not possible to find a maximum sum\n        return float('-inf')\n    \n    # create a dictionary to store the maximum sum of increasing subsequence ending at each index\n    max_sum_dict = {0: 0}\n    current_sum = 0\n    \n    # iterate through the array from index to n-1\n    for i in range(index, n):\n        # if the next element is greater than k, then the current subsequence ends here\n        if a[i] > k:\n            # add the current subsequence sum to the maximum sum of any subsequence ending at the previous index\n            current_sum += max_sum_dict[i-1]\n            # update the maximum sum of increasing subsequence ending at the current index\n            max_sum_dict[i] = current_sum\n    \n    # return the maximum sum of increasing subsequence ending at index\n    return max_sum_dict[n-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    \n    dp = [[0]*n for _ in range(n)]\n    max_sum = float('-inf')\n    \n    for i in range(n):\n        if a[i] >= a[k]:\n            dp[i][i] = 1\n        else:\n            dp[i][i] = 0\n        if i > index:\n            dp[i][i] += dp[i-1][i-1]\n            \n    for gap in range(1, n-index+1):\n        for i in range(n-gap-1):\n            j = i+gap\n            if a[j] > a[i] and dp[i][j] < dp[i][j-1] + a[j]:\n                dp[i][j] = dp[i][j-1] + a[j]\n                \n    for i in range(index, n):\n        max_sum = max(max_sum, dp[i][i])\n        \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    prefix_sum = [0] * (n+1)\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n\n    max_sum = float('-inf')\n    max_subseq = []\n\n    for i in range(index, n+1):\n        if a[i] > a[i-k]:\n            temp_sum = prefix_sum[i-1] + a[i]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_subseq = [a[i]]\n            elif temp_sum == max_sum:\n                max_subseq.append(a[i])\n\n    if k <= index:\n        max_sum = prefix_sum[n]\n\n    return max_subseq, max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n    \n    max_sum = 0\n    prefix_sum = 0\n    \n    for i in range(index, n):\n        if i == k:\n            prefix_sum += a[i]\n        else:\n            prefix_sum += a[i] - a[i-1]\n        \n        max_sum = max(max_sum, prefix_sum)\n        \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    :param a: A list of integers.\n    :param n: Size of the list a.\n    :param index: Integer, representing the index where the maximum sum of increasing subsequence is to be found.\n    :param k: Integer, representing the index of the kth element which is after index.\n\n    :return: Integer, representing the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n\n    if k == index:\n        return a[k]\n\n    max_sum = float('-inf')\n    for i in range(index, n):\n        if i == k:\n            continue\n        sub_sum = max_sum_increasing_subseq(a, n, i + 1, k) + a[i]\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the prefix sum array with zeros\n    prefix_sum = [0] * (n + 1)\n\n    # Fill the prefix sum array using the formula\n    for i in range(1, n + 1):\n        prefix_sum[i] = max(prefix_sum[i - 1] + a[i - 1], 0)\n\n    # Initialize the maximum sum with the first element\n    max_sum = prefix_sum[1]\n\n    # Initialize the maximum sum array with zeros\n    max_sum_arr = [0] * (n + 1)\n\n    # Fill the maximum sum array using the formula\n    for i in range(1, n + 1):\n        if i <= k:\n            max_sum_arr[i] = max_sum_arr[i - 1] + prefix_sum[i]\n        else:\n            max_sum_arr[i] = max(max_sum_arr[i - 1] + prefix_sum[i], max_sum_arr[i - 1])\n\n        max_sum = max(max_sum, max_sum_arr[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if k <= index:\n        return 0\n\n    # Initialize the maximum sum of increasing subsequence as the sum of the first element\n    max_sum = a[index]\n\n    # Initialize the length of the increasing subsequence as 1\n    length = 1\n\n    # Initialize the window sum\n    window_sum = a[index]\n\n    # Traverse through the array and find the maximum sum of increasing subsequence from prefix until i-th index and also including the given kth element\n    for i in range(index+1, n):\n\n        if i == k:\n            continue\n\n        # Update the window sum\n        window_sum += a[i]\n\n        # If the window sum is greater than the maximum sum, update the maximum sum\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n            # If the new maximum sum is the same as the previous maximum sum and the length is greater, update the length\n            if max_sum == a[index] and length < i-index:\n                length = i-index\n\n    return max_sum + a[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return -1\n\n    dp = [0] * n\n    dp[index] = a[index]\n\n    for i in range(index+1, n):\n        if a[i] > a[index]:\n            dp[i] = a[i] + max(dp[i-1], dp[i])\n        else:\n            dp[i] = dp[i-1]\n\n    max_sum = max(dp[i] for i in range(n))\n    if max_sum < 0:\n        return -1\n\n    subseq = []\n    start = index\n    while dp[start] == max_sum:\n        subseq.append(a[start])\n        start += 1\n\n    return max_sum, subseq[::-1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the maximum sum\n    max_sum = float('-inf')\n\n    # Initialize an array to store the sum of increasing subsequence\n    sum_arr = [0] * (k + 1)\n\n    # Initialize an array to store the end index of each increasing subsequence\n    end_index_arr = [0] * (k + 1)\n\n    # Initialize the current subsequence sum\n    curr_sum = a[index]\n\n    # Initialize the current subsequence end index\n    curr_end_index = index\n\n    # Loop through the array\n    for i in range(index + 1, n):\n        # If the current element is greater than the kth element, update the current subsequence sum, end index and sum array\n        if a[i] > k:\n            curr_sum = a[i]\n            curr_end_index = i\n            sum_arr[i] = curr_sum\n\n        # If the current element is greater than the current subsequence sum and the sum array is not full\n        if a[i] > curr_sum and i < k:\n            # Update the current subsequence sum, end index, and sum array\n            curr_sum += a[i]\n            curr_end_index = i\n            sum_arr[i] = curr_sum\n\n        # If the current element is less than the current subsequence sum and the sum array is not full\n        elif a[i] < curr_sum and i < k:\n            # Update the current subsequence sum and end index\n            curr_sum = a[i]\n            curr_end_index = i\n            sum_arr[i] = curr_sum\n\n        # If the current element is greater than or equal to the current subsequence sum and the sum array is full\n        elif a[i] >= curr_sum and i < k:\n            # Update the current subsequence end index\n            curr_end_index = i\n            # Update the maximum sum if the new subsequence sum is greater\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                end_index_arr[i] = curr_end_index\n\n        # If the current element is greater than the current subsequence sum and the sum array is full\n        elif a[i] > curr_sum and i >= k:\n            # Update the current subsequence sum and end index\n            curr_sum += a[i]\n            curr_end_index = i\n            sum_arr[i] = curr_sum\n            # Update the maximum sum if the new subsequence sum is greater\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                end_index_arr[i] = curr_end_index\n\n        # If the current element is less than the current subsequence sum and the sum array is full\n        elif a[i] < curr_sum and i >= k:\n            # Update the current subsequence sum and end index\n            curr_sum = a[i]\n            curr_end_index = i\n            sum_arr[i] = curr_sum\n            # Update the maximum sum if the new subsequence sum is greater\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                end_index_arr[i] = curr_end_index\n\n    # Initialize the current subsequence sum\n    curr_sum = a[index]\n\n    # Initialize the current subsequence end index\n    curr_end_index = index\n\n    # Loop through the array\n    for i in range(index + 1, k + 1):\n        # If the current element is greater than the kth element, update the current subsequence sum, end index and sum array\n        if a[i] > k:\n            curr_sum = a[i]\n            curr_end_index = i\n            sum_arr[i] = curr_sum\n\n        # If the current element is greater than the current subsequence sum and the sum array is not full\n        if a[i] > curr_sum and i < k:\n            # Update the current subsequence sum, end index, and sum array\n            curr_sum += a[i]\n            curr_end_index = i\n            sum_arr["
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        new_tuplex = deepcopy(tuplex)\n        new_tuplex = new_tuplex[:i] + (None,) + new_tuplex[i+1:]\n        colon.append(tuple(new_tuplex))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new list to store the colon\n    colon = []\n\n    # Iterate over the first n elements of the tuple\n    for i in range(m):\n        # Create a new list to store the first m elements of the tuple\n        new_list = []\n        # Iterate over the first m elements of the tuple\n        for j in range(i, min(i+m, n)):\n            # Append the jth element of the original tuple to the new list\n            new_list.append(tuplex[j])\n        # Append the new list to the colon list\n        colon.append(new_list)\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(tuplex_copy)\n\n    # get the number of columns\n    num_cols = n\n\n    # get the number of rows\n    num_rows = int(length / num_cols)\n\n    # initialize the list to hold the colon\n    colon_list = []\n\n    # loop through each row of the colon\n    for row in range(num_rows):\n\n        # initialize a list to hold the cells in the row\n        row_list = []\n\n        # loop through each cell in the row\n        for col in range(num_cols):\n\n            # get the index of the current cell in the original tuple\n            curr_index = row * num_cols + col\n\n            # get the value of the current cell in the original tuple\n            curr_val = tuplex_copy[curr_index]\n\n            # add the value to the row list\n            row_list.append(curr_val)\n\n        # add the row list to the colon list\n        colon_list.append(row_list)\n\n    # return the colon list\n    return colon_list"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple x and returns a copy of x with the nth colon replaced by the mth element.\n    '''\n\n    # Create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Replace the nth colon with the mth element\n    new_tuplex[n] = m\n\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:i+m] for i in range(0, len(tuplex), n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append([])\n    for i in range(m):\n        for j in range(n):\n            col[i].append(tuplex[i][j])\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    copy = deepcopy(tuplex)\n\n    # Get the number of elements in the tuple\n    n = len(copy)\n\n    # Loop through each element in the tuple\n    for i in range(n):\n        # Get the index of the current element\n        index = i % m\n\n        # Get the offset of the current element\n        offset = i // m\n\n        # Check if the offset is greater than the current element\n        if offset > copy[index]:\n            # If it is, set it to 0\n            copy[index] = 0\n        # Otherwise, decrement the offset by 1\n        else:\n            copy[index] -= 1\n\n    # Return the tuple with the colon\n    return tuple(copy)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = []\n    for i in range(m):\n        new_tuplex.append(deepcopy(tuplex[i]))\n    for i in range(m, m+n):\n        new_tuplex.append(tuplex[i-m])\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n    # Create a list to hold the new tuple\n    new_tuplex = []\n    # Loop through the tuple, adding elements to the new tuple\n    for i in range(length):\n        # If we have added m elements to the new tuple, break the loop\n        if len(new_tuplex) == m:\n            break\n        # Add the next element to the new tuple\n        new_tuplex.append(tuplex_copy[i % n])\n    # Return the new tuple\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deepcopy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(new_tuplex)\n    # Get the number of columns to print\n    num_cols = m if m <= n else n\n    # Initialize the output list\n    output = []\n    # Loop through each row of the tuple\n    for i in range(0, length, num_cols):\n        # Create a new list for each row\n        row = []\n        # Loop through each column to print\n        for j in range(i, i+num_cols):\n            # If the column index is valid\n            if j < length:\n                # Add the element to the row list\n                row.append(new_tuplex[j])\n        # Append the row list to the output list\n        output.append(row)\n    # Return the output list of tuples\n    return output"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize a list to store the products\n    products = []\n    \n    # Iterate over all possible combinations of the two lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            \n            # Calculate the product of the two selected factors\n            product = nums1[i] * nums2[j]\n            \n            # Add the product to the list of products if it's the largest so far\n            if product > max(products) or (product == max(products) and product > products[-1]):\n                products = [product] * (N + 1)\n                products.append(product)\n            \n    # Return the list of products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest1 = []\n    largest2 = []\n    for i in range(N):\n        largest1.append(max(nums1))\n        largest2.append(max(nums2))\n        nums1.remove(max(nums1))\n        nums2.remove(max(nums2))\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the sum of products to 0\n    total_sum = 0\n\n    # Loop through the desired number of products\n    for i in range(N):\n        # Calculate the product of the two largest numbers from each list\n        product = nums1[-1] * nums2[-1]\n\n        # Add the product to the running total sum\n        total_sum += product\n\n        # Remove the two largest numbers from each list\n        nums1.pop(-1)\n        nums2.pop(-1)\n\n    # Return the total sum of the products\n    return total_sum"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    largest_products = []\n    for _ in range(N):\n        product1 = nums1[0] * nums2[0]\n        product2 = nums1[1] * nums2[1]\n        largest_products.append(product1)\n        largest_products.append(product2)\n        nums1.pop(0)\n        nums2.pop(0)\n        \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize maximum product variables\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    \n    # Loop through each factor\n    for i in range(len(nums1)):\n        # Initialize variables for current factor\n        current_product1 = float('-inf')\n        current_product2 = float('-inf')\n        \n        # Loop through each number in the list\n        for j in range(len(nums1[i])):\n            # Calculate the product of the current factor and the number in the list\n            current_product1 = max(current_product1, current_product1 + nums1[i][j])\n            current_product2 = max(current_product2, current_product2 + nums2[i][j])\n        \n        # Update the maximum product variables if the current product is greater\n        max_product1 = max(max_product1, current_product1)\n        max_product2 = max(max_product2, current_product2)\n    \n    # Return the maximum product\n    return max(max_product1, max_product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Loop through each number from 1 to N\n    for i in range(1, N+1):\n        # Calculate the product of the i-th largest number in nums1 and the i-th largest number in nums2\n        product = nums1[i-1] * nums2[i-1]\n\n        # Check if the product is greater than the current largest product in the result list\n        if len(result) == 0 or product > result[-1]:\n            result.append(product)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two lists in non-decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables to store the largest products and indices\n    largest_products = []\n    indices = []\n    \n    # Iterate through each index in the list\n    for i in range(N):\n        # Calculate the product of the two largest factors in the two lists\n        product = nums1[i] * nums2[i]\n        \n        # Check if this product is the largest we've seen so far\n        if product not in largest_products:\n            largest_products.append(product)\n            indices.append([i, i])\n        else:\n            # If not, check if the current product is larger than the largest we've seen so far\n            if product > largest_products[-1]:\n                largest_products[-1] = product\n                indices[-1][1] = i\n    \n    # Return the list of largest products and their indices\n    return largest_products, indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the maximum product list with zeros\n    max_product = [0] * N\n\n    # Loop through the two lists and calculate the maximum product for each combination of factors\n    for i in range(N):\n        for j in range(N):\n            # Calculate the product of the corresponding factors\n            product = nums1[i] * nums2[j]\n            # If the product is greater than the current maximum, update the maximum\n            if product > max_product[i]:\n                max_product[i] = product\n\n    # Return the maximum product list\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize variables\n    max1 = 0\n    max2 = 0\n    max3 = 0\n    max4 = 0\n\n    # Iterate through all possible combinations of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two factors and add it to the appropriate variable\n            product1 = nums1[i] * nums2[j]\n            product2 = nums1[j] * nums2[i]\n\n            if product1 > max1:\n                max3 = max2\n                max2 = max1\n                max1 = product1\n\n            elif product1 > max2:\n                max3 = max2\n                max2 = product1\n\n            elif product2 > max2:\n                max3 = product2\n\n            if product1 > max1 and product2 > max2 and product2 > max3:\n                max4 = product1\n\n    # Return the maximum of the specified number of products\n    return max1, max2, max3, max4"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check that the numbers of elements in the two lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same number of elements\")\n\n    # Create a list of pairs (product, index)\n    products = [(nums1[i] * nums2[j], i) for i in range(len(nums1)) for j in range(len(nums2))]\n\n    # Sort the pairs by product in descending order\n    products.sort(reverse=True)\n\n    # Find the largest N products and return them\n    return [products[i][0] for i in range(N)]"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_list = list(str1)\n    return tuple(str_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    lst = list(str1)\n    # convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit index to -1\n    left_most_unset_bit_index = -1\n    \n    # Iterate through each bit in the integer n\n    for i in range(32):\n        # Check if the i-th bit is set to 1\n        if (n & (1 << i))!= 0:\n            # If the i-th bit is set to 1, then the leftmost unset bit index is i\n            left_most_unset_bit_index = i\n    \n    # If the leftmost unset bit index is -1, then all bits are already set to 1\n    if left_most_unset_bit_index == -1:\n        return n\n    \n    # Set the i-th bit to 1 where i is the leftmost unset bit index\n    n |= 1 << left_most_unset_bit_index\n    \n    # Return the modified integer n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the bit count to 0\n    count = 0\n    # Loop through the bits of the integer n\n    for i in range(32):\n        # If the current bit is 0, increment the count\n        if n & (1 << i) == 0:\n            count += 1\n        # If the count is greater than 0, exit the loop\n        else:\n            break\n    # If the count is 0, the integer n has all its bits set to 1\n    if count == 0:\n        return n\n    # Otherwise, set the leftmost unset bit to 1\n    else:\n        return n | (1 << count)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the least significant bit that is set to 1 in the binary representation of n\n    least_significant_set_bit = n & -(n & 1)\n    \n    # Set the least significant set bit to 1 in n\n    n |= least_significant_set_bit\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the unset bit index to -1 \n    unset_bit_index = -1 \n\n    # Iterate over the binary representation of n and check if the current bit is unset \n    for bit in bin(n)[2:]: \n        if bit == '0': \n            unset_bit_index += 1 \n\n        # If the bit is set, exit the loop \n        else: \n            break \n\n    # If the unset bit index is -1, there is no unset bit \n    if unset_bit_index == -1: \n        return n\n\n    # Set the unset bit to 1 and shift all the remaining bits to the left by one position \n    return n ^ (1 << unset_bit_index)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index and mask to 0\n    index = 0\n    mask = 0b1\n    \n    # Iterate through the bits of the binary representation of n\n    while n & mask!= 0:\n        # Check if the bit is unset\n        if n & mask == 0:\n            # Set the left most unset bit\n            n |= mask\n            \n            # Exit the loop since all bits have been checked\n            break\n        \n        # Shift the mask to the next bit position\n        mask <<= 1\n    \n    # Return the modified binary representation of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a Python function to set the left most unset bit in a given number n.\n    \"\"\"\n\n    # Initialize count of unset bits\n    unset_bits = 0\n\n    # Iterate through each bit in the binary representation of n\n    while n > 0:\n\n        # Check if the current bit is unset\n        if n & 1 == 0:\n            unset_bits += 1\n\n        # Shift n to the right by 1\n        n >>= 1\n\n    # Set the left most unset bit to 1\n    return 1 << unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the number of set bits\n    count = 0\n    # iterate through each bit of the number\n    while n:\n        n &= (n - 1)\n        count += 1\n    # set the left most unset bit\n    return n << (32 - count)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Convert the integer to binary string\n    binary_str = bin(n)[2:]\n\n    # Initialize the left most unset bit\n    unset_bit = None\n\n    # Iterate through the binary string from left to right\n    for i in range(len(binary_str)):\n        # If the bit is unset, set the unset_bit and break out of the loop\n        if binary_str[i] == '0':\n            unset_bit = i\n            break\n\n    # If no unset bit was found, return the original integer\n    if unset_bit is None:\n        return n\n\n    # Set the left most unset bit to 1 and the rest of the bits to 0\n    left_most_unset_bit_index = len(binary_str) - unset_bit - 1\n    binary_str = binary_str[:left_most_unset_bit_index] + '1' + binary_str[left_most_unset_bit_index+1:]\n\n    # Convert the binary string back to an integer and return it\n    return int(binary_str, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function will set the left most unset bit in the given number.\n    '''\n\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n\n    # Initialize the leftmost unset bit to 0\n    leftmost_unset_bit = 0\n\n    # Iterate through the binary string\n    for i in range(len(binary_str)):\n\n        # If the current bit is 1, then the leftmost unset bit is the current index\n        if binary_str[i] == '1':\n            leftmost_unset_bit = i\n            break\n\n    # Set the leftmost unset bit to 1\n    binary_str = binary_str[:leftmost_unset_bit] + '1' + binary_str[leftmost_unset_bit+1:]\n    n = int(binary_str, 2)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a positive integer.\n    \"\"\"\n    # Check if n is negative\n    if n < 0:\n        n = abs(n)\n    \n    # Iterate over the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the i-th bit is unset\n        if (n & (1 << i)) == 0:\n            # Set the i-th bit to 1\n            n |= (1 << i)\n            break\n    \n    # Check if the leftmost unset bit has been found\n    if n == 0:\n        raise ValueError(\"No unset bit found in {}\".format(n))\n    \n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two parameters, r and h, which represent the radius and height of the cone respectively.\n    The function returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * (r**2) * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3) * math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two parameters, r (radius) and h (height), and returns the volume of a cone with these dimensions.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    '''\n    # Formula to find the volume of the cone\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2**(highest_Power_of_2(n//2))"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize power variable to 1\n    power = 1\n    # Loop through all integers from 1 to n\n    for i in range(2, n+1):\n        # If i is a power of 2, set power to i\n        if i == 2**power:\n            break\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    \n    while n > 0:\n        highest_power += 1\n        n >>= 1\n    \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    # if n is already a power of 2, return it directly\n    if n & (n-1) == 0:\n        return n\n\n    # compute the smallest power of 2 that is greater than or equal to n\n    power = 1\n    while power <= n:\n        power <<= 1\n\n    # return the smallest power of 2 that is less than or equal to n\n    return power-1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize variables\n    max_power_of_2 = 1\n    power_of_2 = 1\n    # loop through the number of bits in the number\n    while power_of_2 <= n:\n        # if the current power of 2 is greater than n, break the loop\n        if power_of_2 > n:\n            break\n        # update the maximum power of 2 found so far\n        max_power_of_2 = power_of_2\n        # calculate the next power of 2\n        power_of_2 = 2 * power_of_2\n    # return the maximum power of 2 found\n    return max_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # binary search for the highest power of 2 <= n\n        lo, hi = 1, n\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if mid * mid > n:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # loop through all powers of 2 from 1 to n \n    for i in range(1, n+1): \n        if i >= 2**i: \n            return i "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n\n    # Initialize the highest power of 2 to 1\n    highest_power = 1\n\n    # Loop through all powers of 2 from 2 to n\n    for power in range(2, n+1):\n        # If the power is greater than the current highest power, update the highest power\n        if power > highest_power:\n            highest_power = power\n\n    # Return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 0\n    while (n >> i) > 0:\n        i += 1\n    return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power // 2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas_num = [0, 2]\n    for i in range(2, n):\n        lucas_num.append(lucas_num[i-1] + lucas_num[i-2])\n    return lucas_num[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    This function calculates the nth Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Initialize the first two Lucas numbers as 2 and 1\n    a, b = 2, 1\n\n    # Loop through n-1 times and update the next Lucas number\n    for i in range(n-1):\n        # Calculate the next Lucas number as the sum of the previous two\n        c = a + b\n        a, b = b, c\n\n    # Return the n-th Lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(item) for item in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, elem in enumerate(list_):\n        list_[i] = string.format(elem)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Check if the list is empty\n    if not list_:\n        return None\n    \n    # Apply the format string to each element of the list\n    formatted_list = []\n    for element in list_:\n        formatted_element = string.format(element)\n        formatted_list.append(formatted_element)\n    \n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key = str(l1[i])\n        value = {}\n        for j in range(len(l2)):\n            key2 = str(l2[j])\n            value2 = l3[i][j]\n            value[key2] = value2\n        result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # create a dictionary to store the data\n    data = {}\n\n    # iterate over the list and add the data to the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = l2[i]\n        data[l1[i]].append(l3[i])\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create empty dictionary to hold the nested dictionary\n    nested_dict = {}\n    # loop through the three lists\n    for i in range(len(l1)):\n        # create a new dictionary for this list\n        inner_dict = {}\n        # loop through the items in the list\n        for j in range(len(l1[i])):\n            # add the item to the dictionary as key:value\n            inner_dict[l1[i][j]] = l2[i][j]\n        # add the nested dictionary to the main dictionary\n        nested_dict[l3[i]] = inner_dict\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n\n    # Combine all the lists into one dictionary\n    dict_all = {**l1, **l2, **l3}\n\n    # Create empty dictionary to store nested dictionary\n    dict_nested = {}\n\n    # Iterate through each key-value pair in the combined dictionary\n    for key, value in dict_all.items():\n\n        # If the value is a list, create a new key in the nested dictionary\n        if isinstance(value, list):\n            for index, item in enumerate(value):\n                dict_nested[f\"{key}_{index}\"] = item\n\n        # If the value is not a list, create a new key in the nested dictionary\n        else:\n            dict_nested[key] = value\n\n    return dict_nested"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        sub_dict = {}\n        sub_dict[key] = value\n        result[i] = sub_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Initialize an empty dictionary\n    result = {}\n    \n    # Iterate through the three lists\n    for i in range(len(l1)):\n        \n        # Initialize a new dictionary to store the current list\n        current_list = {}\n        \n        # Add each element of the current list to the nested dictionary\n        for j in range(len(l1[i])):\n            current_list[l2[i][j]] = l3[i][j]\n        \n        # Add the current list to the result dictionary\n        result[l1[i]] = current_list\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        inner_dict = {}\n        for j in range(len(l2)):\n            inner_dict[l2[j]] = l3[i][j]\n        result[l1[i]] = inner_dict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    dict2 = {}\n    dict3 = {}\n    dict1['list1'] = l1\n    dict2['list2'] = l2\n    dict3['list3'] = l3\n    return {'dict1':dict1, 'dict2':dict2, 'dict3':dict3}"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create an empty dictionary\n    nested_dict = {}\n    # iterate through the lists\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n) is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n <= 1:\n            return n\n        else:\n            return max(f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5), n)\n\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 0\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + n, get_max_sum(n//3) + n, get_max_sum(n//4) + n, get_max_sum(n//5) + n) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    first_half = get_max_sum(n/2)\n    second_half = get_max_sum(n/2)\n    third_half = get_max_sum(n/2)\n    fourth_half = get_max_sum(n/2)\n\n    return max(first_half + second_half + third_half + fourth_half, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 18\n    elif n == 4:\n        return 36\n    elif n == 5:\n        return 60\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    f = lambda n: max((fibonacci(n/2) + fibonacci(n/3) + fibonacci(n/4) + fibonacci(n/5)), n)\n\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def get_max_sum_helper(n, index, memo):\n        if n == 1:\n            return n\n        if index in memo:\n            return memo[index]\n        if index == 0:\n            memo[index] = max(get_max_sum_helper(n//2, index, memo), get_max_sum_helper(n//3, index, memo), get_max_sum_helper(n//4, index, memo), get_max_sum_helper(n//5, index, memo))\n            return memo[index]\n        memo[index] = max(get_max_sum_helper(n, index-1, memo), get_max_sum_helper(n//2, index, memo), get_max_sum_helper(n//3, index, memo), get_max_sum_helper(n//4, index, memo), get_max_sum_helper(n//5, index, memo))\n        return memo[index]\n\n    return get_max_sum_helper(n, 0, {})"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 14\n    elif n == 4:\n        return 25\n    elif n == 5:\n        return 38\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 3\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    # Initialize a variable to store the maximum length\n    max_length = 0\n    \n    # Loop through each element in the list\n    for item in input_list:\n        # If the length of the current element is greater than the maximum length, update the maximum length\n        if len(item) > max_length:\n            max_length = len(item)\n    \n    # Return the list with maximum length\n    return input_list[input_list.index(max(input_list))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize the variable to store the length of the list with maximum length\n    max_length = 0\n    # Iterate through the input list and find the length of the list with maximum length\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    # Return the list with maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    result = None\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            result = item\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # use a set to remove duplicates from the tuple\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set and check if its length is equal to the length of the original tuple\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    \n    # loop through tuple elements\n    for element in test_tup:\n        # add each element to the set\n        unique_set.add(element)\n    \n    # if the length of the set is equal to the length of the tuple, it means no duplicates were found\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # convert the string to a list of characters\n    char_list = list(str1)\n\n    # create a dictionary to keep track of the count of each character\n    char_count = {}\n\n    # loop through each character in the string and update the count in the dictionary\n    for char in char_list:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # loop through the dictionary and find the first non-repeated character\n    for key, value in char_count.items():\n        if value == 1:\n            return key\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the dictionary and find the first non-repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = list(str1) # Convert string to list\n    freq = {} # Create empty dictionary to store frequency of characters\n    \n    # Iterate through the list and count frequency of characters\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the list again and find first non-repeated character\n    for i, char in enumerate(str1):\n        if freq[char] == 1:\n            return char\n    \n    return None # If no non-repeated character found, return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # find the first non-repeating character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # iterate through the string and update the frequency of each character\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    # iterate through the string again and find the first non-repeated character\n    for i, char in enumerate(str1):\n        if freq[char] == 1:\n            return char\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    # Initialize a variable to store the first non-repeating character\n    first = None\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in freq:\n            freq[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            freq[char] += 1\n    # Loop through the dictionary and find the first non-repeating character\n    for char, freq_count in freq.items():\n        if freq_count == 1 and first is None:\n            first = char\n        elif freq_count > 1 and first is not None:\n            break\n    # Return the first non-repeating character\n    return first"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_char(string):\n    print(\"The given string starts and ends with the same character.\")\nelse:\n    print(\"The given string does not start and end with the same character.\")"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    This function takes a string as input and returns True if the string starts and ends with the same character,\n    otherwise it returns False.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle two numbers\n    middle_numbers = sorted_numbers[1:-1]\n\n    # Calculate the median\n    median = sum(middle_numbers) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # Calculate the median\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        # If the number of elements is even\n        median = (sorted_numbers[n//2] + sorted_numbers[n//2 - 1])/2\n    else:\n        # If the number of elements is odd\n        median = sorted_numbers[n//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # First, sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the sorted array\n    n = len(sorted_numbers)\n\n    # If the length of the array is odd, the median is the middle number\n    if n % 2 == 1:\n        median = sorted_numbers[n//2]\n    # If the length of the array is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # Calculate the median\n    median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the length of the sorted array\n    n = len(sorted_numbers)\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2] + sorted_numbers[n//2 - 1]) / 2\n    else:\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # get the length of the sorted list\n    length = len(sorted_numbers)\n\n    # check if the length of the list is odd or even\n    if length % 2 == 0:\n        # get the average of the two middle numbers\n        median = (sorted_numbers[length // 2 - 1] + sorted_numbers[length // 2]) / 2\n    else:\n        # get the middle number\n        median = sorted_numbers[length // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2\n    else:\n        median = sorted_numbers[n // 2]\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        num_str = str(num)\n        sum += sum(int(digit) for digit in num_str)\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        if isinstance(num, int):\n            total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into a list of digits\n        digits = [int(d) for d in str(num)]\n        # add up all the digits in the list\n        total_sum += sum(digits)\n        \n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits of each number\n    sum_list = []\n\n    # Loop through each number in the input list\n    for num in nums:\n        # Convert the number to a string and loop through each character in the string\n        for char in str(num):\n            # Convert the character to an integer and add it to the running total\n            sum_list.append(int(char))\n\n    # Return the sum of digits of each number in the input list\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum_digits = sum(digits)\n        result.append(sum_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        sum_of_digits.append(digits_sum)\n    return sum_of_digits"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuples must have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # perform bitwise xor across all elements in the tuples\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0, 0)\n\n    # Iterate over each element in the input tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation between the corresponding elements\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    \"\"\"\n    freq_dict = {}\n    for i in test_list:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    \n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] + test_tup2[i])\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the two input tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples have different lengths.\")\n        return\n    \n    # Initialize a new empty tuple to store the result of index wise addition\n    result = ()\n    \n    # Iterate over each index in the two input tuples\n    for i in range(len(test_tup1)):\n        # Append the sum of the corresponding elements of the two input tuples to the new result tuple\n        result += (test_tup1[i] + test_tup2[i],)\n    \n    # Return the new result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # initialize an empty list to store the sum of the elements of the two tuples\n    result = []\n\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # initialize a variable to store the sum of the current element and the value of the element at the same index in the second tuple\n        temp = test_tup1[i] + test_tup2[i]\n        # add the current element of the first tuple to the current element of the second tuple to get the sum of the current element and the value of the element at the same index in the second tuple\n        result.append(temp)\n\n    # return the sum of the two tuples\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row1 = test_tup1[i]\n        row2 = test_tup2[i]\n        new_row = []\n        for j in range(len(row1)):\n            new_row.append(row1[j] + row2[j])\n        result.append(tuple(new_row))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            result_tup.append(test_tup1[i][j] + test_tup2[i][j])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        tup_sum = tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i]))\n        result_tup.append(tup_sum)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length\")\n        return\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], tuple) or not isinstance(test_tup2[i], tuple):\n            print(\"Both tuple elements should be tuples\")\n            return\n        add_nested_tuples(test_tup1[i], test_tup2[i])\n    result = []\n    for i in range(len(test_tup1[0])):\n        temp = 0\n        for j in range(len(test_tup1)):\n            temp += test_tup1[j][i] + test_tup2[j][i]\n        result.append(temp)\n    print(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have same length.\")\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through each element of both tuples\n    for i in range(len(test_tup1)):\n        # Append the sum of the corresponding elements to the result list\n        result_list.append(test_tup1[i] + test_tup2[i])\n    # Convert the result list to a tuple\n    result_tup = tuple(result_list)\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the smaller of them.\n    \"\"\"\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers.\n    \"\"\"\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(\"Element exists in tuple\")\n    else: \n        print(\"Element does not exist in tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes in a tuple and a tuple of elements to search for. It returns a boolean indicating whether or not an element exists within the tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists within the tuple\")\n    else:\n        print(f\"{tuplex} does not exist within the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} is present in {tuple1}\")\n    else:\n        print(f\"{tuplex} is not present in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element Exists\")\n    else:\n        print(\"Element Not Found\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(tuplex, \"exists in\", tuple1)\n    else:\n        print(tuplex, \"does not exist in\", tuple1)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(\"Element exists in the tuple.\")\n    else: \n        print(\"Element does not exist in the tuple.\") "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The parity of {0} is even\".format(x)\n    else:\n        return \"The parity of {0} is odd\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(x, \"is even\")\n        return 0\n    else: \n        print(x, \"is odd\")\n        return 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return 'The number is odd'\n    else:\n        return 'The number is even'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = (x % 2)\n    if parity == 1:\n        print(\"The parity of the number\", x, \"is odd.\")\n    else:\n        print(\"The parity of the number\", x, \"is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"The number is even.\")\n    else: \n        print(\"The number is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # checking if the input number is odd or even\n    if x % 2!= 0:\n        print(x, \"is odd.\")\n    else:\n        print(x, \"is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(x, \"is an even number.\")\n    else:\n        print(x, \"is an odd number.\")"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # Create a list of digits of the input number\n    digits = [int(d) for d in str(n)]\n\n    # Rearrange the digits in decreasing order\n    for i in range(len(digits)):\n        j = len(digits) - 1 - i\n        digits[i], digits[j] = digits[j], digits[i]\n\n    # Convert the digits back to a number and return the result\n    return int(\"\".join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number into a string\n    num = str(n)\n    # Get the length of the number\n    length = len(num)\n    # Initialize an empty list to store the digits of the number in reverse order\n    reversed_digits = []\n    # Iterate over the digits of the number in reverse order\n    for digit in num[::-1]:\n        # If the digit is not zero, append it to the list\n        if digit!= '0':\n            reversed_digits.append(digit)\n    # Reverse the list of reversed digits to obtain the digits of the next bigger number\n    next_bigger_digits = reversed_digits[::-1]\n    # If the next bigger number has more than one digit, add zeros at the beginning of it to make it the same length as the original number\n    while len(next_bigger_digits) < length:\n        next_bigger_digits.insert(0, '0')\n    # Convert the list of digits into a string and return it as the next bigger number\n    next_bigger = ''.join(next_bigger_digits)\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize the largest digit and the position of the largest digit\n    max_digit = 0\n    position = 0\n    # Iterate over the digits of the number\n    for i in range(len(str(n))):\n        # Check if the current digit is greater than the largest digit\n        if int(str(n)[i]) > max_digit:\n            # Update the largest digit and its position\n            max_digit = int(str(n)[i])\n            position = i\n\n    # Create the new number by rearranging the digits\n    new_number = \"\"\n    for i in range(position):\n        new_number += str(n)[i]\n    new_number += str(max_digit + 1)\n    for i in range(position, len(str(n))):\n        new_number += str(n)[i]\n\n    # Convert the new number to an integer and return it\n    return int(new_number)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    n = str(n)\n    num_digits = len(n)\n\n    if num_digits == 1:\n        return 10\n\n    new_digits = \"\"\n    for digit in n:\n        if int(digit) < 5:\n            new_digits += str(int(digit) + 1)\n        else:\n            new_digits += str(int(digit))\n\n    return int(new_digits)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Get the number of digits in the given number\n    num_digits = len(str(n))\n\n    # If the given number has only one digit, it's the next bigger number\n    if num_digits == 1:\n        return n + 1\n\n    # Get the first digit\n    first_digit = str(n)[0]\n\n    # Get the position of the first digit in the number\n    first_digit_position = num_digits - 1 - first_digit.index('1')\n\n    # Create the new number by rearranging the digits\n    new_number = str(n)\n    new_number = new_number[:first_digit_position] + '0' + new_number[first_digit_position + 1:]\n\n    # If the new number is less than 10, add a leading zero\n    if int(new_number) < 10:\n        new_number = '0' + new_number\n\n    # Convert the new number to an integer\n    next_bigger = int(new_number)\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # convert the given number to a string\n    num = str(n)\n    \n    # iterate through each digit in the string\n    for i in range(len(num)-1, -1, -1):\n        \n        # if the current digit is the highest digit, move on\n        if num[i] == str(len(num)):\n            break\n        \n        # if the next digit is already the lowest digit, move on\n        if num[i+1] == str(1):\n            break\n        \n        # swap the current and next digits\n        num = num[:i] + num[i+1] + num[i] + num[i+1] + num[:i]\n    \n    # convert the string back to an integer\n    next_bigger = int(num)\n    \n    # return the next bigger number\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    digits.reverse()\n    num = int(''.join(digits))\n    return num+1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Get the digits of the number\n    digits = [int(digit) for digit in str(n)]\n    # Find the last non-zero digit\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i]!= 0:\n            break\n    # Swap the digits until the last non-zero digit is reached\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] == 0:\n            break\n        digits[i], digits[i - 1] = digits[i - 1], digits[i]\n    # Convert the digits back to a number and add 1\n    next_bigger = int(''.join(str(digit) for digit in digits)) + 1\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Find the digits of the input number\n    digits = [int(digit) for digit in str(n)]\n    # Reverse the order of digits\n    digits.reverse()\n    # Find the position of the highest digit\n    index = digits.index(max(digits))\n    # Create a new list with the digits in the correct order\n    new_digits = digits[:index] + digits[index+1:]\n    # Convert the list of digits to a number and return it\n    return int(''.join(str(digit) for digit in new_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # convert number to a string\n    num_str = str(n)\n    \n    # get the number of digits in the string\n    num_digits = len(num_str)\n    \n    # find the largest digit\n    max_digit = 0\n    for digit in num_str:\n        if int(digit) > int(max_digit):\n            max_digit = digit\n    \n    # find the next number with the same number of digits\n    next_num = 0\n    for i in range(10**(num_digits-1), 10**(num_digits)):\n        if i < int(max_digit)*10**(num_digits-1):\n            next_num = i\n            break\n    \n    # rearrange the digits of the next number to make it the next bigger\n    num_str = str(next_num)\n    if int(max_digit) < 9:\n        num_str = max_digit + num_str[1:]\n    else:\n        num_str = max_digit + num_str[2:]\n    num_str = num_str[::-1]\n    \n    # convert the rearranged number back to an integer\n    next_bigger = int(num_str)\n    \n    return next_bigger"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    count = 0\n    for num in nums1:\n        heapq.heappush(min_heap, (-num, -1))\n    for num in nums2:\n        if count < k:\n            if num > min_heap[0][0]:\n                heapq.heappushpop(min_heap, (-num, -1))\n                count += 1\n        elif num > min_heap[0][0]:\n            if count == k:\n                heapq.heappushpop(min_heap, (-num, -1))\n            else:\n                heapq.heappush(min_heap, (-num, -1))\n                count += 1\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Create a min heap of size k to store the smallest elements in the pairs\n    min_heap = []\n\n    # Loop through both arrays and add elements to the heap as per the given conditions\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            elif num1 + num2 < min_heap[0][0]:\n                heapq.heappushpop(min_heap, (num1 + num2, (num1, num2)))\n\n    # Extract the smallest k elements from the heap and return as a list of tuples\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(min_heap)[1])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Find the total number of pairs\n    n = len(nums1) * len(nums2)\n\n    # Create a min heap for finding the k smallest elements\n    min_heap = []\n\n    # Initialize the priority queue with the first element from each array\n    for num in nums1:\n        heapq.heappush(min_heap, (num, 0))\n\n    for num in nums2:\n        heapq.heappush(min_heap, (float('-inf'), 1))\n\n    # Initialize the result list\n    result = []\n\n    # Find k smallest pairs\n    for i in range(k):\n        # Pop the smallest element from both heaps and add them to the result list\n        num1, index1 = heapq.heappop(min_heap)\n        num2, index2 = heapq.heappop(min_heap)\n        result.append([num1, num2])\n        # Add the smaller element to the min heap of the corresponding index\n        if index1 < index2:\n            heapq.heappush(min_heap, (num1, index1+1))\n        else:\n            heapq.heappush(min_heap, (num2, index2+1))\n\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min-heap of size k to store the smallest pairs\n    min_heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        \n        # Iterate through the second array\n        for num2 in nums2:\n            \n            # Calculate the sum of the current pair\n            current_sum = num1 + num2\n            \n            # If the current sum is greater than or equal to the minimum sum, add the pair to the heap\n            if current_sum >= min_heap[0][0]:\n                heapq.heappushpop(min_heap, (current_sum, (num1, num2)))\n            \n            # If the heap size is greater than or equal to k, remove the minimum sum from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n                \n    # Return the list of pairs\n    return [pair for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n    result = []\n    for _ in range(k):\n        pair = heapq.heappop(heap)\n        result.append((pair[1][0], pair[1][1], pair[0]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert the lists into sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    \n    # create a heap with tuples of (difference, (index1, index2))\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            diff = abs(nums1[i] - nums2[j])\n            heapq.heappush(heap, (-diff, (i, j)))\n    \n    # extract the k smallest pairs and return them\n    result = []\n    for i in range(k):\n        diff, (index1, index2) = heapq.heappop(heap)\n        result.append((nums1[index1], nums2[index2]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the k smallest pairs\n    min_heap = []\n    # Initialize the min heap with the first element from the first array\n    heapq.heappush(min_heap, (nums1[0], 0))\n    # Initialize variables to store the answer\n    count = 0\n    # Iterate through the second array\n    for i in range(1, len(nums2)):\n        # If the size of the min heap is less than k, add the next smallest element from the second array\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (nums2[i], i))\n        # Otherwise, compare the smallest element with the current element from the second array and add the smaller element to the min heap\n        else:\n            if nums2[i] > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (nums2[i], i))\n        # If the size of the min heap is equal to k, add the pair to the answer and remove the first element from the min heap\n        if len(min_heap) == k:\n            count += 1\n            nums1_min, index1 = heapq.heappop(min_heap)\n            nums2_min, index2 = min_heap[0]\n            heapq.heappush(min_heap, (nums1_min, index1))\n            min_heap.remove((nums1_min, index1-1))\n            count += 1\n            nums1_min, index1 = min_heap[0]\n            nums2_min, index2 = heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (nums1_min, index1))\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize a min heap to store the k smallest numbers found so far\n    min_heap = []\n    # Initialize two pointers to iterate over the two arrays\n    i, j = 0, 0\n    # Initialize a count variable to keep track of the number of pairs found so far\n    count = 0\n    \n    # Iterate over the array of numbers\n    while count < k and i < len(nums1) and j < len(nums2):\n        # Calculate the sum of the current pair\n        current_sum = nums1[i] + nums2[j]\n        # If the sum is smaller than the smallest number in the heap, add it to the heap and increment the count\n        if not min_heap or current_sum < min_heap[0]:\n            heapq.heappush(min_heap, current_sum)\n            count += 1\n        # If the sum is greater than the smallest number in the heap, remove the smallest number from the heap and decrement the count\n        else:\n            heapq.heappop(min_heap)\n            count -= 1\n        # Move the pointers to the next pair of numbers in the arrays\n        i += 1\n        j += 1\n    \n    # Convert the heap to a list and return it\n    return list(min_heap)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = [(nums1[0], 0, 0)]\n\n    for i in range(1, len(nums1)):\n        heapq.heapify(heap)\n\n        while len(heap) > 1 and nums1[i] + heap[0][0] > nums2[heap[0][1]]:\n            heapq.heappop(heap)\n\n        if len(heap) == k:\n            break\n\n        heapq.heappush(heap, (nums1[i], i, 0))\n\n    res = []\n    while heap:\n        res.append((heap[0][0], nums2[heap[0][1]]))\n        heapq.heappop(heap)\n\n    return res[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Convert the input lists to sets so that duplicates are removed\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # Create a heap to store the smallest pairs\n    min_heap = []\n\n    # Initialize two pointers to the first and second elements of the arrays\n    i = 0\n    j = 0\n\n    # Loop until we have found k smallest pairs\n    while k > 0:\n        # If the current pair is smaller than the smallest pair in the heap, add it to the heap\n        if nums1[i] < nums2[j]:\n            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            k -= 1\n\n        # If the current pair is larger than the smallest pair in the heap, move the pointer to the next smaller number in the second array\n        elif nums1[i] > nums2[j]:\n            i += 1\n\n        # If the current pair is equal to the smallest pair in the heap, add it to the heap and move the pointers to the next smaller numbers\n        else:\n            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            i += 1\n            j += 1\n            k -= 1\n\n    # Initialize an empty list to store the smallest pairs\n    result = []\n\n    # Extract the smallest pairs from the heap and append them to the result list\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    # Return the result list\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a variable to store the minimum product\n    min_product = float('inf')\n\n    # Iterate through each pair of tuples within the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and store the result\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    # Initialize the minimum product to a large value\n    min_product = float('inf')\n\n    # Iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Compute the product of the two tuples and compare it to the current minimum\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product and minimum value\n    min_product = float('inf')\n    min_value = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            # Find the product of the element and the value\n            product = list1[i][j] * list1[j][i]\n            \n            # Check if the product is smaller than the minimum product found so far\n            if product < min_product:\n                min_product = product\n                min_value = list1[i][j]\n                \n    # Return the minimum product and the minimum value\n    return min_product, min_value"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    product = 1\n\n    # Iterate over the list of tuples\n    for tup1, tup2 in zip(list1, list1[1:]):\n        # Calculate the product of the pairs of tuples\n        product = tup1[0] * tup2[1]\n\n        # Update the minimum product if necessary\n        if product < min_product:\n            min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to a large value\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = float('inf')\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                prod = list1[i][0]*list1[j][1]\n                if prod < min_product:\n                    min_product = prod\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Check if the list is empty\n    if not list1:\n        return None\n    \n    # Initialize variables\n    min_product = float('inf')\n    product_tuple = None\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuple\n            product = list1[i][0] * list1[j][0]\n            # Check if the product is smaller than the current minimum product\n            if product < min_product:\n                min_product = product\n                # Store the tuple that produced the minimum product\n                product_tuple = (list1[i], list1[j])\n    \n    # Return the minimum product and the corresponding tuple\n    return min_product, product_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Find the length of the list\n    n = len(list1)\n\n    # Initialize two variables to store the minimum and maximum values for each tuple\n    min_product = float('inf')\n    max_product = float('-inf')\n\n    # Iterate through the list of tuples\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the product of the two tuples and store it in a variable\n            product = list1[i] * list1[j]\n\n            # Update the minimum and maximum values of the product if it's less than the current minimum\n            if product < min_product:\n                min_product = product\n\n            # Update the minimum and maximum values of the product if it's greater than the current maximum\n            if product > max_product:\n                max_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns the minimum product\n    of pairs of tuples from the list.\n    \"\"\"\n    # initialize the minimum product to be a very large number\n    min_product = float('inf')\n    # initialize a list to store the products of the pairs of tuples\n    product_lst = []\n    # loop through the list of tuples\n    for i in range(len(lst)-1):\n        # loop through the remaining tuples in the list\n        for j in range(i+1, len(lst)):\n            # calculate the product of the current pair of tuples and append it to the product list\n            product_lst.append(lst[i][0] * lst[j][1])\n            # update the minimum product if the current product is smaller\n            if product_lst[-1] < min_product:\n                min_product = product_lst[-1]\n    # return the minimum product of the pairs of tuples\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function takes a list of any type (int, float, string, etc.) as input and returns the minimum value in the list.\n    \"\"\"\n    # Initialize the minimum value to the first element of the list\n    min_val = lst[0]\n\n    # Loop through the list and compare each element with the current minimum value\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list of any type of values as input and returns the minimum value in the list.\n    \"\"\"\n    # Initialize the minimum value variable\n    min_val = listval[0]\n    # Loop through the list and compare each value to the current minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        raise ValueError(\"Input is not a list\")\n    if len(listval) == 0:\n        raise ValueError(\"Input list is empty\")\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    min_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]  # initialize minimum value to first element in list\n    for i in range(1, len(listval)):  # iterate over remaining elements in list\n        if listval[i] < min_val:  # if current element is smaller than minimum, update minimum\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the input list is empty\n    if not listval:\n        print(\"List is empty\")\n        return\n    \n    # Initialize the minimum value to the first element\n    min_val = listval[0]\n    \n    # Iterate over the remaining elements of the list\n    for i in range(1, len(listval)):\n        # If the current element is less than the minimum value, update it\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words using the snake case separator\n    words = re.findall(r'_(.?)', word)\n\n    # Convert the list of words into camel case\n    camel_case = []\n    for word in words:\n        camel_case.append(word.capitalize())\n\n    # Join the camel case words back into a single string\n    return ''.join(camel_case)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all the words to lower case\n    word = word.lower()\n    # Split the words by underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Convert the first word to capital\n    words[0] = words[0][0].upper() + words[0][1:]\n    # Convert the rest of the words to camel case\n    for i in range(1, len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n    # Join the words with underscores\n    camel_case_word = '_'.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into individual words using underscores as separators\n    words = re.findall(r'_(\\w)', word)\n    # Convert the individual words to camel case\n    camel_case = words[0] + ''.join(x.title() for x in words[1:])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Split the word by '_' character and remove first character of each element\n    words = re.findall('([a-z]+)', word)\n\n    # Capitalize first letter of each element\n    words = [word.capitalize() for word in words]\n\n    # Join the elements of the list with an empty space\n    result = ''.join(words)\n\n    # Return the camel case string\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words\n    words = word.split('_')\n    \n    # capitalize the first word\n    words[0] = words[0][0].upper() + words[0][1:]\n    \n    # join the words with camel case\n    camel_case_word = ''.join(words)\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words by underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n    # convert the words to camel case\n    camel_case = ''.join(words[0].capitalize() + w.lower() for w in words[1:])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the first letter to uppercase\n    first_letter = word[0].upper()\n    # Remove the first underscore\n    word = word[1:]\n    # Convert the remaining letters to lowercase\n    rest_of_word = ''.join([letter.lower() for letter in word])\n    # Combine the first letter and the rest of the word\n    camel_case_word = first_letter + rest_of_word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words separated by underscores\n    words = re.findall(r'_(.?)', word)\n    # Capitalize the first letter of each word except the first one\n    camel_case = ''.join([word.capitalize() if i!= 0 else word for i, word in enumerate(words)])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), *re.findall('([A-Z][a-z]+)', word[1:])])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # convert the snake case string to camel case string\n    camel_case_word = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a new list containing only the even numbers from the original list.\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # Create an empty list to store the even numbers\n    even_list = []\n    # Loop through each element in the input list\n    for num in l:\n        # Check if the number is odd\n        if num % 2 == 0:\n            # If the number is even, append it to the even_list\n            even_list.append(num)\n        # If the number is odd, do nothing\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        print(\"Index out of range.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list) or not isinstance(n, int) or n < 1:\n        return None\n\n    for i in range(len(list1)):\n        if n == 1:\n            return list1[i][1]\n        n -= 1\n\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if isinstance(list1, list):\n        if isinstance(list1[0], tuple):\n            return list1[n]\n    return None\n"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1][1]\n    except IndexError:\n        print(f\"The list does not contain an element at index {n}.\")\n"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes in a list of tuples and an integer n, and returns the nth element of the list.\n    If n is greater than the length of the list, the function will return None.\n    '''\n    if n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if type(list1)!= list:\n        return \"Error: Invalid input type. Please pass a list.\"\n    if type(n)!= int:\n        return \"Error: Invalid input type. Please pass an integer.\"\n    if n > len(list1):\n        return \"Error: Invalid input. The index is greater than the length of the list.\"\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a boolean value indicating whether any value in the first list exists in the second list or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and checks whether there is any overlapping between them or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input, and returns a boolean value indicating whether there is any value in the first list that exists in the second list or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a set to store the values in list1\n    set1 = set(list1)\n\n    # Iterate through the values in list2\n    for value in list2:\n        # If the value is in set1, return True\n        if value in set1:\n            return True\n\n    # If no value in list2 is found in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a dictionary to store the count of each element in list1\n    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # Iterate through list2 and check if any element exists in count_dict\n    for item in list2:\n        if item in count_dict and count_dict[item] > 0:\n            print(f\"{item} is present in both lists.\")\n            count_dict[item] -= 1\n        elif item not in count_dict:\n            print(f\"{item} is present in only the first list.\")\n        elif item in count_dict and count_dict[item] == 0:\n            print(f\"{item} is present in the second list but not the first list.\")\n\n    # Check if any element in count_dict is not zero\n    for key, value in count_dict.items():\n        if value!= 0:\n            print(f\"{key} is present in the first list but not the second list.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in the first list is present in the second list,\n    and False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize two variables to store the maximum product of any two elements of the array\n    max_product_1 = float('-inf')\n    max_product_2 = float('-inf')\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Initialize two variables to store the maximum product of any two elements of the array except for the current element\n        max_product_1 = max(max_product_1, max_product_2*arr[i])\n        max_product_2 = max(max_product_2, max_product_1*arr[i])\n\n    # Return the pair with the highest product\n    return max_product_1, max_product_2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the indices of the two elements in the array that have the highest product.\n    '''\n    max_prod = float('-inf')\n    max_indices = (0, 1)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_prod:\n                max_prod = product\n                max_indices = (i, j)\n    return max_indices"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # initialize the maximum product and the pair with highest product\n    max_product = max_val * min_val\n    pair = (0, 0)\n\n    # loop through the array and find the pair with the highest product\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                # calculate the product of the pair\n                product = arr[i] * arr[j]\n                # update the maximum product if the product is greater than the current maximum\n                if product > max_product:\n                    max_product = product\n                    pair = (i, j)\n\n    # return the pair with highest product\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize variables to store the maximum product and the pair of numbers with maximum product\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n\n    # Loop through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the two numbers and compare it to the current maximum product\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    # Return the pair of numbers with highest product\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    # Initialize two variables to keep track of the maximum product seen so far and the minimum product seen so far\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    # Loop through the array and update the maximum and minimum product seen so far\n    for i in range(2, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i+1])\n        min_product = min(min_product, arr[i] * arr[i+1])\n\n    # Return the pair with the highest product\n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers and returns the pair with the highest product.\n    \"\"\"\n\n    # Initialize variables to store the maximum product and the first and second indices of the array\n    max_product = float('-inf')\n    index1 = 0\n    index2 = 0\n\n    # Loop through the array and find the maximum product and the two indices with the highest product\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            # Calculate the product of the two arrays\n            product = arr[i] * arr[j]\n\n            # Update the maximum product if the current product is greater than the maximum\n            if product > max_product:\n                max_product = product\n                index1 = i\n                index2 = j\n\n    # Return the pair with the highest product\n    return (arr[index1], arr[index2])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    if max1 > max2:\n        return (max1, min1)\n    else:\n        return (max2, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Initialize max1 and max2 variables to negative infinity\n    max1, max2 = float('-inf'), float('-inf')\n\n    # Iterate through the array and find the maximum and second maximum products\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    # Return the maximum product\n    return max1 * max2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Function to find common first element in list of tuples\n    def find_common_first(lst): \n        # Initialize variables\n        common_elem = None\n        count = 0\n\n        # Iterate through the list and count the number of occurrences of each common element\n        for tup in lst: \n            if common_elem == None: \n                common_elem = tup[0] \n                count += 1\n            elif tup[0] == common_elem: \n                count += 1\n            else: \n                count = 0 \n                break\n\n        # Return the common element and its count\n        return common_elem, count\n\n    # Initialize variables\n    count = 0\n    common_element = None\n\n    # Iterate through the list of tuples and count the number of common elements\n    for tup in Input: \n        elem, count_elem = find_common_first(tup) \n        if common_element == None: \n            common_element = elem \n        elif elem == common_element: \n            count += 1\n        else: \n            count = 0 \n            break\n\n    # Return the common element and its count\n    return common_element, count"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a dictionary where\n    the keys are common first elements of the tuples in the list and the values are lists\n    containing all tuples with that common first element.\n    \"\"\"\n    # Create an empty dictionary\n    common_dict = {}\n\n    # Loop through the input list\n    for tup in Input:\n        # Get the first element of the tuple\n        first = tup[0]\n\n        # Check if the first element is already in the dictionary\n        if first in common_dict:\n            # If it is, append the tuple to the list of tuples associated with the first element\n            common_dict[first].append(tup)\n        else:\n            # If it's not, create a new list for the first element and append the tuple to it\n            common_dict[first] = [tup]\n\n    return common_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and groups them based on the first element of the tuples.\n    \"\"\"\n    grouped_tuples = []\n    for i in Input:\n        for j in i:\n            grouped_tuples.append(j)\n    return grouped_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary\n    common_dict = {}\n\n    # Loop through the input list of tuples\n    for tup in Input:\n        # Get the first element of the tuple\n        first_element = tup[0]\n        # If the first element exists in the dictionary, increment its value\n        if first_element in common_dict:\n            common_dict[first_element] += 1\n        # If the first element does not exist in the dictionary, add it with a value of 1\n        else:\n            common_dict[first_element] = 1\n\n    # Find the first element with the highest count\n    max_count = max(common_dict.values())\n    common_keys = [key for key, value in common_dict.items() if value == max_count]\n\n    return common_keys"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Find common first element in a list of tuples.\n\n    :param Input: list of tuples\n    :return: common first element or None if no common elements are found\n    \"\"\"\n    common_first = None\n    for tup in Input:\n        if common_first is None:\n            common_first = tup[0]\n        elif tup[0] == common_first:\n            # if we find a match, continue to the next tuple\n            continue\n        else:\n            # if we have found a different element for the first element, return the current common_first\n            return common_first\n    # if we have not found a match for the first element, return None\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if i[0] in common_elements:\n            common_elements.remove(i[0])\n        else:\n            common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples containing the common first element.\n    '''\n\n    # Create an empty list to store the common first element\n    common_first = []\n\n    # Iterate through each tuple in the input list\n    for t in Input:\n        # Check if the tuple contains common first element\n        if t[0] in common_first:\n            # If it does, append it to the common_first list\n            common_first.append(t[0])\n        else:\n            # If it doesn't, append the tuple to the common_first list\n            common_first.append(t)\n\n    # Return the common_first list\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elem = None\n    for tup in Input:\n        if common_elem is None:\n            common_elem = tup[0]\n        elif tup[0] == common_elem:\n            common_elem = None\n            break\n    return common_elem"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    # Finding common first element in a list of tuples\n    common_element = None\n    for tuple1 in Input:\n        for tuple2 in Input:\n            if tuple1[0] == tuple2[0]:\n                if common_element is None:\n                    common_element = tuple1[0]\n                elif common_element!= tuple1[0]:\n                    common_element = None\n                    break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of lists containing tuples \n    where each inner list contains tuples from the input list that have the same common \n    first element.\n    '''\n    common_elements = []\n    for tup in Input:\n        first_element = tup[0]\n        if first_element not in common_elements:\n            common_elements.append(first_element)\n    result = []\n    for element in common_elements:\n        inner_list = []\n        for tup in Input:\n            if tup[0] == element:\n                inner_list.append(tup)\n        result.append(inner_list)\n    return result"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    for i in lst: \n        if len(i) > max_length: \n            max_length = len(i) \n            max_element = i \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list with maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    # Iterate through the list to find the maximum length and the maximum element\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an input and returns the element having the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for item in lst:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_element = item\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    return total_sum * len(lst)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total*len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # initialize variables\n    rounded_list = []\n    total = 0\n    \n    # loop through the list of numbers\n    for num in list1:\n        # round the number to the nearest integer\n        rounded_num = round(num)\n        # add the rounded number to the total\n        total += rounded_num\n        # add the rounded number to the rounded_list\n        rounded_list.append(rounded_num)\n    \n    # print the total sum and length of the rounded_list\n    print(\"The total sum of the rounded list is:\", total)\n    print(\"The length of the rounded list is:\", len(rounded_list))\n    \n    # multiply the total sum by the length of the rounded_list\n    result = total * len(rounded_list)\n    # print the result\n    print(\"The result is:\", result)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize a variable to store the sum of cubes of even natural numbers\n    cube_sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the cube of the current even natural number\n        cube = i ** 3\n        \n        # add the cube of the current even natural number to the cube sum\n        cube_sum += cube\n    \n    # return the cube sum of the first n even natural numbers\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n): \n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function finds the cube sum of first n even natural numbers.\n\n    Args:\n        n: The number of even natural numbers to be used for calculation.\n\n    Returns:\n        A list containing the cube sum of the first n even natural numbers.\n    \"\"\"\n\n    # Initialize a variable to store the cube sum of the first n even natural numbers\n    cube_sum = 0\n\n    # Iterate n times to find the cube sum of the first n even natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of i and add it to the cube sum\n        cube_sum += i**3\n\n    # Return the cube sum as a list\n    return [i**3 for i in range(1, n+1)]"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(n):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize the sum variable\n    cube_sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the current number and add it to the sum variable\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    This function takes a tuple as input and concatenates each element of the tuple\n    by the specified delimiter.\n    '''\n    concatenated_string = \"\"\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i])\n        if i < len(test_tup) - 1:\n            concatenated_string += delimiter\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + \" \"\n    return concatenated_string.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1]  # Remove the last delimiter from the concatenated string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    This function takes in a tuple and a delimiter as input and returns a concatenated string.\n    '''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]  # remove the last delimiter character"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \", \".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    \n    average = cube_sum / (n*n)\n    print(f\"The average of cubes of the first {n} natural numbers is: {average}\")"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    average = sum/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):  \n        sum_of_cubes += i*i*i\n    average_of_cubes = sum_of_cubes/n  \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1, n+1)]\n    total = sum(cubes)\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i*i\n    average = sum/n**3\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n\n    #initialize sum of cubes to zero\n    total_cubes = 0\n\n    #loop through first n natural numbers\n    for i in range(1, n+1):\n\n        #find cube of i and add to total_cubes\n        current_cube = i**3\n        total_cubes += current_cube\n\n    #divide total_cubes by n and return as average\n    return total_cubes / n\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n\n    # loop through the first n numbers\n    for i in range(1, n+1):\n        # calculate the cube of the number\n        cube = i ** 3\n\n        # add the cube to the sum of cubes\n        sum_of_cubes += cube\n\n    # find the average of the cubes\n    average = sum_of_cubes / n\n\n    # return the average\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, element in enumerate(test_tuple):\n        if isinstance(element, str):\n            rear_indices.append(len(element)-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(item[-1] for item in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_list = []\n    for string in test_tuple:\n        if len(string) > 1:\n            extracted_list.append(string[-1])\n    return extracted_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for item in test_tuple:\n        rear_tuple.append(item[-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[::-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [str(elem) for elem in test_tuple[::-1]]"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(lst, elem):\n    '''\n    This function takes a list `lst` and an element `elem` as input and returns the number of sublists \n    in `lst` that contain `elem`.\n    '''\n    count = 0\n    for sublist in lst:\n        if elem in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(lst)): \n        if lst[i] == x: \n            count += 1\n    return count "
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.sub(r'[^\\d]', '', dt)  # remove non-digit characters\n    mm_dd_yyyy = yyyy_mm_dd[6:] + '-' + yyyy_mm_dd[4:6] + '-' + yyyy_mm_dd[0:4]\n    return mm_dd_yyyy"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.sub() function to replace the matched pattern with the desired format\n    new_date = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the date format regex pattern\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # find all the matches of the regex pattern in the given date string\n    matches = re.findall(pattern, dt)\n    # convert all the matches to the desired date format\n    for i in range(len(matches)):\n        matches[i] = matches[i][6:4] + '-' + matches[i][4:2] + '-' + matches[i][:2]\n    # join all the converted matches and return the result\n    return '-'.join(matches)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the date pattern in the input string\n    match = re.match(pattern, dt)\n\n    # Extract the matched date parts and join them in dd-mm-yyyy format\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    formatted_date = day + '-' + month + '-' + year\n\n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search for the pattern in the input date string and extract the date components\n    match = re.search(pattern, dt)\n    year, month, day = match.groups()\n\n    # Reverse the order of the date components\n    day, month, year = year, month, day\n\n    # Format the date components as dd-mm-yyyy\n    formatted_date = f'{day}-{month}-{year}'\n\n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use re.sub() method to replace the date format in the input string with the required format\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use re.match() to match the pattern in the input string\n    match = re.match(pattern, dt)\n\n    # If match is not None, extract the groups and convert the date format\n    if match:\n        yyyy, mm, dd = match.groups()\n        new_dt = f'{dd}-{mm}-{yyyy}'\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_date = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\2-\\1-\\3', dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(regex, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return day + '-' + month + '-' + year\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Define a gap size\n    gap = len(my_list) // 2\n\n    # Iterate through gaps\n    while gap > 0:\n\n        # Iterate through the array\n        for i in range(gap, len(my_list)):\n\n            # Store the current element in a temporary variable\n            temp = my_list[i]\n\n            # Shift elements to the right until the correct position is found\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            # Insert the current element at the correct position\n            my_list[j] = temp\n\n        # Decrease the gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Define the increment factor\n    increment = len(my_list) // 2\n\n    while increment > 0:\n        # Perform insertion sort for each increment\n        for i in range(increment, len(my_list)):\n            current_value = my_list[i]\n            j = i\n            while j >= increment and my_list[j - increment] > current_value:\n                my_list[j] = my_list[j - increment]\n                j -= increment\n            my_list[j] = current_value\n\n        # Decrease the increment factor\n        increment //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # The gap sequence is defined as 10% of the length of the list\n    gap = n // 2\n    while gap > 0:\n        # Traverse through all elements with a gap\n        for i in range(gap, n):\n            # Move the gap-sorted element to its correct position in sorted part\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n            # Move the gap-sorted element to its correct position in the entire list\n            if j!= i:\n                my_list[i], my_list[j] = my_list[j], my_list[i]\n        # Decrease the gap sequence by 10%\n        gap = int(gap * 0.1)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the length of the list\n    n = len(my_list)\n\n    # Initialize gap\n    gap = n // 2\n\n    # While gap is greater than 0\n    while gap > 0:\n\n        # For i = gap to n-1\n        for i in range(gap, n):\n\n            # Insert my_list[i] in its correct position\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n\n        # Reduce the gap by 1\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize variables to hold the result tuples\n    and_result = (0, 0)\n    # iterate through the tuples and perform elementwise and\n    for i in range(len(test_tup1)):\n        and_result = (and_result[0] & test_tup1[i], and_result[1] & test_tup2[i])\n    return and_result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] & test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize a list to store the elementwise and tuples\n    and_tup_list = []\n    # loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # check if both elements are true\n        if test_tup1[i] and test_tup2[i]:\n            # if they are, add the element and a tuple of True to the list\n            and_tup_list.append((test_tup1[i], (True,)))\n    # return the list of elementwise and tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    # Check if each element in the first tuple is a boolean value\n    if not all(isinstance(i, bool) for i in test_tup1):\n        return None\n    # Check if each element in the second tuple is a boolean value\n    if not all(isinstance(i, bool) for i in test_tup2):\n        return None\n    # Create a new tuple with the elementwise and operation\n    and_tup = tuple(test_tup1 & test_tup2)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns a tuple where the elementwise\n    and of the corresponding elements from both input tuples is obtained.\n\n    Parameters:\n    test_tup1 (tuple): The first tuple to be processed.\n    test_tup2 (tuple): The second tuple to be processed.\n\n    Returns:\n    tuple: The elementwise and of the corresponding elements from both input tuples.\n    '''\n    # create an empty list to store the elementwise and of the corresponding elements from both input tuples\n    and_tup = []\n    \n    # loop through each element in the first tuple and the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    \n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the resulting tuples\n    and_result = []\n    # Iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Calculate the elementwise and of the corresponding elements in the two tuples\n        and_element = test_tup1[i] & test_tup2[i]\n        # Add the and_element to the and_result list\n        and_result.append(and_element)\n    # Return the and_result list as a tuple\n    return tuple(and_result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(*[a & b for a, b in zip(test_tup1, test_tup2)]))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes in three values: a, b, and c.\n    a, b, and c are the coefficients of the parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x = (-b + discriminant**0.5)/(2*a)\n        y = (-b - discriminant**0.5)/(2*a)\n        return x, y\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the determinant of the second degree polynomial\n    determinant = b**2 - 4*a*c\n    \n    # Check if the determinant is negative or zero\n    if determinant < 0:\n        print(\"The determinant of the second degree polynomial is negative or zero.\")\n        return None\n    \n    # Calculate the roots of the second degree polynomial\n    root1 = (-b + math.sqrt(determinant)) / (2*a)\n    root2 = (-b - math.sqrt(determinant)) / (2*a)\n    \n    # Check if the roots are real or complex\n    if not (root1.imag == 0 and root2.imag == 0):\n        print(\"The roots are complex.\")\n        return None\n    \n    # Calculate the directrix\n    directrix = root1.real\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is positive\n    if disc > 0:\n        # Calculate the root of the discriminant\n        root = (-b + (disc**(1/2)))/(2*a)\n\n        # Calculate the directrix\n        directrix = root - (a*root)**2\n\n        # Return the directrix\n        return directrix\n    else:\n        # Return an error message if the discriminant is negative\n        return \"The discriminant is negative.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the two roots of the discriminant\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        \n        # Sort the roots in non-decreasing order\n        roots = sorted([root1, root2])\n        \n        # Return the directrix\n        return roots[0]\n    else:\n        # If the discriminant is negative, the directrix is zero\n        return 0"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function calculates the directrix of a parabola given its coefficients a, b, and c.\n    \n    Parameters:\n    a (float): Coefficient of the y-intercept\n    b (float): Coefficient of the first term in the quadratic term (ax^2 + bx + c)\n    c (float): Coefficient of the second term in the quadratic term (ax^2 + bx + c)\n    \n    Returns:\n    float: The value of the directrix of the parabola\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        \n        # Calculate the roots of the discriminant\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        \n        # Sort the roots in ascending order\n        if root1 > root2:\n            root1, root2 = root2, root1\n        \n        return root1, root2\n    \n    # Check if the discriminant is zero\n    elif discriminant == 0:\n        \n        # Calculate the root of the discriminant\n        root = -b / (2*a)\n        \n        return root\n    \n    # If the discriminant is negative, there is no real solution\n    else:\n        \n        return \"There is no real solution for the parabola.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant > 0:\n        directrix = (-b + determinant**0.5)/(2*a)\n        return directrix\n    elif determinant < 0:\n        directrix = (-b - determinant**0.5)/(2*a)\n        return directrix\n    else:\n        return \"The parabola is not a quadratic equation.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function finds the directrix of a parabola given its parameters a, b, and c. \n    The directrix of a parabola is the point where the graph of the parabola intersects the x-axis.\n    \n    The function uses the quadratic formula to find the root of the quadratic equation:\n    (b^2 - 4ac) / 2a\n    \n    If the quadratic equation has two real roots, then the directrix lies in between them.\n    If the quadratic equation has one real root, then the directrix lies on the line passing through the two other points.\n    If the quadratic equation has no real roots, then the directrix does not exist.\n    \n    Note: The quadratic formula is more efficient than the standard formula for finding roots of a quadratic equation.\n    '''\n    \n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return x\n    else:\n        return \"The quadratic equation has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    if a == 0:\n        raise ValueError(\"Invalid coefficients\")\n    \n    directrix = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the equation of the parabola\n    equation = f\"ax^2 + bx + c = 0\"\n\n    # Find the values of x where the equation is true\n    x_values = []\n    if b**2 - 4*a*c > 0:\n        x_values = [(-b + (b**2 - 4*a*c)**0.5)/(2*a), (-b - (b**2 - 4*a*c)**0.5)/(2*a)]\n    elif b**2 - 4*a*c == 0:\n        x_values = [(-b)/(2*a)]\n    else:\n        print(\"The equation does not have real roots\")\n        return\n\n    # Find the directrix of the parabola\n    directrix = (x_values[0] + x_values[1])/(2)\n\n    print(f\"The directrix of the parabola is {directrix}\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc > 0: \n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        print(\"The directrix of the parabola is {:.2f}\".format(x1))\n        print(\"The directrix of the parabola is {:.2f}\".format(x2))\n    else: \n        print(\"The equation of the parabola has no real roots.\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for element in list1:\n        if element in list2 and element not in common:\n            common.append(element)\n    return True if len(common) > 0 else False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # check if both lists have elements\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    # iterate over the smaller list to find the common elements\n    for element in list1:\n        if element in list2:\n            return True\n    # if no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = []\n    for i in list1:\n        if i in list2:\n            common.append(i)\n    if common:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set of elements in list2 and filter out duplicates\n    list2_set = set(list2)\n    # filter out elements in list1 that are not in list2_set\n    common_elements = [elem for elem in list1 if elem in list2_set]\n    # return true if list1 has at least one common element\n    if len(common_elements) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # check if both lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    # loop through the lists and compare each element\n    for element in list1:\n        if element in list2:\n            return True\n    # if no common elements are found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n    # check if there is at least one common element in both lists\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the area of the rectangle that extends from the top of the trapezium to its base\n    rect_area = base1 * height / 2\n\n    # Calculate the area of the rectangle that extends from the bottom of the trapezium to its base\n    rect_area2 = base2 * height / 2\n\n    # Calculate the difference between the two areas\n    diff_area = rect_area - rect_area2\n\n    # Calculate the length of the trapezium's base\n    base = area / (2 * diff_area)\n\n    # Calculate the length of the trapezium's upper half\n    upper_half_length = area / (diff_area + rect_area)\n\n    # Calculate the length of the trapezium's lower half\n    lower_half_length = area / (diff_area + rect_area2)\n\n    # Calculate the median length of the trapezium\n    median = (upper_half_length + lower_half_length) / 2\n\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the area of the base1 half of the trapezium\n    area1 = base1 / 2 * height\n\n    # Calculate the area of the base2 half of the trapezium\n    area2 = base2 / 2 * height\n\n    # Calculate the length of the trapezium side opposite the base1 half\n    base1_side_length = (area1 - area2) / 2\n\n    # Calculate the length of the trapezium side opposite the base2 half\n    base2_side_length = (area2 + area - base1) / 2\n\n    # Calculate the length of the trapezium side adjacent to the base1 half\n    base1_adjacent_length = (area1 + area2) / 2 - base1_side_length\n\n    # Calculate the length of the trapezium side adjacent to the base2 half\n    base2_adjacent_length = (area2 + area - base1 - base1_adjacent_length) / 2\n\n    # Find the median of the trapezium side adjacent to the base1 half\n    median_base1_adjacent = (base1_adjacent_length + base2_adjacent_length) / 2\n\n    # Find the median of the trapezium side adjacent to the base2 half\n    median_base2_adjacent = (base2_adjacent_length + base1_adjacent_length) / 2 - median_base1_adjacent\n\n    # Calculate the area of the trapezium by summing the areas of the two halves and the adjacent sides\n    trapezium_area = area1 + area2 + median_base1_adjacent + median_base2_adjacent\n\n    # Calculate the median length of the trapezium\n    median_trapezium_length = (trapezium_area / (2 * height)) ** 0.5\n\n    return median_trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the length of the trapezium\n    length = (base1+base2)/2\n    # calculate the height of the trapezium\n    area = length * height\n    # calculate the area of the base 1\n    area1 = base1 * height\n    # calculate the area of the base 2\n    area2 = base2 * height\n    # calculate the area of the trapezium\n    total_area = area1 + area2\n    # calculate the median area\n    median_area = total_area / 2\n    # calculate the length of the base 1 and base 2 that will equal the median area\n    base1_length = math.sqrt(2 * median_area / height)\n    base2_length = math.sqrt(2 * median_area / height)\n    # calculate the length of the trapezium that will equal the median area\n    trapezium_length = (base1_length + base2_length) / 2\n    # calculate the median length of the trapezium\n    median_length = trapezium_length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the base of the trapezium\n    base = (base1 + base2) / 2\n\n    # Calculate the area of the base\n    base_area = base * height / 2\n\n    # Calculate the length of the base\n    length_base = base\n\n    # Calculate the length of the trapezium\n    length_trapezium = perimeter - length_base\n\n    # Calculate the height of the trapezium\n    height_trapezium = height\n\n    # Calculate the median of the trapezium\n    median_trapezium = (length_trapezium + height_trapezium) / 2\n\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5*(base1+base2)*(height)\n\n    # Calculate the lengths of the semi-perpendicular sides\n    s1 = 0.5*(base1**2)\n    s2 = 0.5*(base2**2)\n\n    # Calculate the areas of the semi-perpendicular sides\n    area1 = 0.5*base1*height\n    area2 = 0.5*base2*height\n\n    # Calculate the perpendicular distance\n    d = (area1+area2)**0.5\n\n    # Calculate the median length\n    m = area/d\n\n    return m"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # Calculate the base of the trapezium\n    base = 0.5 * (base1 + base2)\n    # Calculate the height of the trapezium\n    height = 0.5 * height\n    # Calculate the length of the trapezium\n    length = 0.5 * area / base\n\n    # Calculate the area of the right half of the trapezium\n    right_area = area - base1 - base2\n    # Calculate the base of the right half of the trapezium\n    right_base = base1 + base2\n    # Calculate the height of the right half of the trapezium\n    right_height = 0.5 * height\n    # Calculate the length of the right half of the trapezium\n    right_length = 0.5 * right_area / right_base\n\n    # Return the median length of the trapezium\n    if right_length > length:\n        return length\n    else:\n        return right_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the trapezium\n    base1_length = base1 * height / 2\n    base2_length = base2 * height / 2\n    # Calculate the total length of the trapezium\n    total_length = base1_length + base2_length\n    # Calculate the median length of the trapezium\n    median_length = total_length / 2\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    if base1 <= 0 or base2 <= 0 or height <= 0:\n        raise ValueError(\"All dimensions must be positive.\")\n\n    # Bases must be equal or greater than the height.\n    if base1 < height:\n        raise ValueError(\"Base1 must be greater than or equal to height.\")\n    if base2 < height:\n        raise ValueError(\"Base2 must be greater than or equal to height.\")\n\n    # Trapezium formula:\n    #   area = 0.5 * base1 * base2\n    #   area = 0.5 * (base1 + base2) * height\n    area = 0.5 * (base1 + base2) * height\n\n    # Diameter formula:\n    #   diameter = 2 * area / height\n    diameter = 2 * area / height\n\n    # Median formula:\n    #   median = area / 2\n    median = area / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the first half of the trapezium\n    half1 = base1 + base2\n\n    # Calculate the length of the second half of the trapezium\n    half2 = height - base1 - base2\n\n    # Calculate the sum of the two halves\n    total = half1 + half2\n\n    # Calculate the median length\n    median = total / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * base1 + 0.5 * base2 + height\n\n    # Calculate the median length\n    median = trapezium_length\n    if base1 > base2:\n        median = base1 + 0.5 * height - base2\n    else:\n        median = base2 + 0.5 * height - base1\n\n    return median\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Check if the number entered is greater than the maximum element in the array\n    if number > max(arr):\n        print(\"The number entered is greater than the maximum element in the array.\")\n    else:\n        # Check if the number entered is greater than the minimum element in the array\n        if number > min(arr):\n            print(\"The number entered is greater than the minimum element in the array.\")\n        else:\n            # If none of the above conditions are met, print that the number is not greater than any element in the array\n            print(\"The number entered is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_zero = False\n    for i in arr:\n        if i > number and i!= 0:\n            greater_than_zero = True\n            break\n    return greater_than_zero"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The entered number is greater than the element at index\", i)\n            return True\n    print(\"The entered number is not greater than any element in the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(f\"{num} is greater than {number}\")\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Check if number is greater than each element in the array\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(arr[i], end=' ')\n    print()"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b)+'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(?=b*b*b*)')\n    result = pattern.search(text)\n    if result:\n        return result.start()\n    else:\n        return -1"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(f\"Found {len(matches)} match(es):\")\n        for match in matches:\n            print(match)\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string contains an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    # define the regular expression pattern to match the a followed by one or more b's\n    pattern = r'a(b)*'\n\n    # use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # if a match is found, return the matched substring\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba{1,}b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a.*b\"\n    return re.search(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a Python function to find the last digit of a given number.\n    \"\"\"\n    # Convert the given number to string\n    str_num = str(n)\n    # Return the last character of the string\n    return str_num[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(n % 10)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a list with the negative numbers.\n    '''\n    # initializing an empty list to store the negative numbers\n    neg_list = []\n    \n    # iterating through the list\n    for num in list1:\n        # checking if the number is negative\n        if num < 0:\n            # appending the negative number to the neg_list\n            neg_list.append(num)\n    \n    # returning the neg_list with the negative numbers\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as an argument and returns a new list with all the negative numbers of the original list.\n    '''\n    new_lst = []\n    for num in lst:\n        if num < 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list with all the negative numbers in the original list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the odd characters\n    odd_str = \"\"\n    \n    # Iterate through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the odd_str\n        if char % 2 == 1:\n            odd_str += char\n            \n    # Return the final string with odd characters removed\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    even_chars = []\n    for char in string:\n        if int(char) % 2 == 0:\n            even_chars.append(char)\n        else:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    str1 = ''.join(filter(str.isalnum, str1))\n    return str1"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalpha() or char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or (char.isalpha() and int(char) % 2 == 0)])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    str2 = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            if char.isupper():\n                new_str += char.upper()\n            elif char.islower():\n                new_str += char.lower()\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = [char for char in str1 if char % 2!= 0]\n    return ''.join(odd_chars)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Initialize a dictionary to store the counts of each tuple in the list\n    counts = {}\n    # Loop through the list and for each tuple, check if it's already in the dictionary\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Check if the tuple is already in the dictionary\n            if (test_list[i], test_list[j]) in counts:\n                # If it is, increment the count\n                counts[(test_list[i], test_list[j])] += 1\n            # If the tuple is not in the dictionary, add it with a count of 1\n            else:\n                counts[(test_list[i], test_list[j])] = 1\n    # Initialize a variable to store the total count of bidirectional pairs\n    total_count = 0\n    # Loop through the dictionary and increment the total count for each tuple pair\n    for key, value in counts.items():\n        total_count += value * (value - 1) // 2\n    # Return the total count of bidirectional pairs\n    return total_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment the count by 1\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Initialize the count of bidirectional pairs\n    bidirectional_count = 0\n\n    # Loop through the dictionary and check if the count of the corresponding key is greater than 1\n    for key, value in count_dict.items():\n        if value > 1:\n            # Check if the key is a tuple with the same elements in reverse order\n            if key == key[::-1]:\n                # Increment the bidirectional count\n                bidirectional_count += 1\n\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_pairs = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] + test_list[j] in test_list[j] + test_list[i]:\n                bidirectional_pairs.add((test_list[i], test_list[j]))\n    return len(bidirectional_pairs)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j] and (test_list[j][0], test_list[i][1]) in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) or (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n\n    Args:\n        test_list (list): a list of tuples\n\n    Returns:\n        int: the number of bidirectional tuple pairs in the list\n\n    '''\n\n    # Create two empty sets to store the pairs of tuples that are in the list\n    pair1 = set()\n    pair2 = set()\n\n    # Loop through the list of tuples\n    for pair in test_list:\n\n        # Add each tuple to the set\n        pair1.add(pair)\n        pair2.add((pair[1], pair[0]))\n\n    # Count the number of bidirectional pairs in the set\n    count = len(pair1)\n\n    # Return the count\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result to an empty list\n    result = []\n    # Loop through each element in the list\n    for element in L:\n        # If the element is a multiple of 3, add 3 to the result list\n        if element % 3 == 0:\n            result.append(3)\n        # If the element is a multiple of 2, add 2 to the result list\n        elif element % 2 == 0:\n            result.append(2)\n        # If the element is not a multiple of 3 or 2, append it to the result list\n        else:\n            result.append(element)\n    # Return the result as a single integer\n    return sum(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for i in L:\n        single_integer += i\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Create a list of all the integers in the list\n    all_ints = [int(x) for x in L]\n    # Find the product of all the integers\n    product = 1\n    for i in all_ints:\n        product *= i\n    # Return the product as a single integer\n    return product"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 1\n    for i in range(len(L)):\n        single_number *= L[i]\n    return single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for x in L:\n        result = result * 10 + x\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return None\n    if len(L) == 1:\n        return L[0]\n    L.sort()\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n\n    Args:\n    text (str): The input sentence.\n\n    Returns:\n    str: The first adverb in the sentence and its position in the sentence.\n    \"\"\"\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = re.compile(r'\\b\\w*ing\\b', re.IGNORECASE)\n\n    # Find all adverbs in the text using the adverb_pattern\n    adverbs = re.findall(adverb_pattern, text)\n\n    # Check if any adverbs were found\n    if not adverbs:\n        return \"No adverbs found.\"\n\n    # Find the first adverb and its position in the sentence\n    first_adverb = adverbs[0]\n    position = text.lower().index(first_adverb)\n\n    # Return the first adverb and its position in the sentence\n    return f\"The first adverb is '{first_adverb}' and it is at position {position}.\""
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(very|really|quite|just|so|well|well-|well-known|well-rounded|really-well|really-good|really-great|amazingly|amazing|amazingly|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly-good|amazingly-great|amazingly-well|amazingly"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:[a-z]|(?:in|on|at|over|under|against|through|onto|with|around|after|before|up|down|over|below|behind|under|through|in|on|at|against|with|around|after|before|up|down|over|below|behind))\\w*\\b'\n\n    # Use the re.findall() method to find all adverbs in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize a dictionary to store the positions of adverbs and their lengths\n    adverb_positions = {}\n\n    # Iterate over the matches and add their positions to the dictionary\n    for i, match in enumerate(matches):\n        # Check if the match is a standard adverb\n        if match in ['in', 'on', 'at', 'over', 'under', 'against', 'through', 'onto', 'with', 'around', 'after', 'before', 'up', 'down', 'over', 'below', 'behind', 'through', 'in', 'on', 'at', 'against', 'with', 'around', 'after', 'before', 'up', 'down', 'over', 'below', 'behind']:\n            # If it is, add its position and its length to the dictionary\n            adverb_positions[match] = len(match)\n\n    # Sort the dictionary by value (i.e., position) in ascending order\n    sorted_positions = sorted(adverb_positions.items(), key=lambda x: x[1])\n\n    # Return the sorted dictionary\n    return sorted_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Create a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(also|also not|also more|also less|also far|also close|also farther|also closer|also further|also farther|also closer|also further|also least|also most|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|also latest|also least|also most|also soonest|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern for adverb\n    pattern = r'\\b([a-z]+)(\\s+[a-z]+)*)\\b'\n\n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize list to store adverbs and their positions\n    adverbs = []\n\n    # Loop through matches and extract adverbs and positions\n    for match in matches:\n        adverb = match[0].lower()\n        position = text.lower().index(match[0])\n        adverbs.append((adverb, position))\n\n    # Sort adverbs by their positions in the sentence\n    adverbs.sort(key=lambda x: x[1])\n\n    # Print the first adverb and its position\n    print('First adverb:', adverbs[0][0])\n    print('Adverb position:', adverbs[0][1])\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will find the first adverb in a given sentence and their positions in the sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b(?:adv|advs)\\b'\n\n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n    \n    # Find the index of the first adverb in the list of matches\n    index = matches.index(matches[0])\n    \n    # Create a list of tuples containing the adverb and its index\n    adverbs = [(match, index) for match in matches]\n    \n    # Return the list of adverbs and their indices\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n    \n    Args:\n    text (str): the sentence to search in\n    \n    Returns:\n    adverbs (list): a list of tuples containing the adverb and its position in the sentence\n    \"\"\"\n    \n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(adverb)\\b'\n    \n    # Use re.findall to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Create a list of tuples containing the adverb and its position in the sentence\n    adverbs = [(match, text.index(match)) for match in matches]\n    \n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expression pattern to match adverbs\n    pattern = re.compile(r\"\\b(rarely|often|frequently|every|sometimes|usually|always|seldom|usually|never)\\b\")\n\n    # Find all non-overlapping matches of the pattern in the given text\n    matches = pattern.finditer(text)\n\n    # Iterate over the matches and extract the adverb and its positions\n    adverbs = []\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs.append((adverb, position))\n\n    # Sort the adverbs by position in ascending order\n    adverbs.sort(key=lambda x: x[1])\n\n    # Return the adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(?:adverb|adv)\\b', re.IGNORECASE)\n    # Find all matches of the pattern in the input text\n    matches = pattern.finditer(text)\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n    # Iterate over all the matches and add their positions to the list\n    for match in matches:\n        # Get the start and end positions of the adverb match in the input text\n        start = match.start()\n        end = match.end()\n        # Add the position to the list\n        adverb_positions.append((start, end))\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b([a-zA-Z]+)\\s+([a-zA-Z]+)\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches\n    else:\n        return None\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n\n    # Calculate the surface area of the cube using Heron's formula\n    s = 6 * l * l\n\n    # Return the surface area of the cube\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the volume of the cube\n    vol = l**3\n    \n    # Calculate the surface area of the cube\n    surface_area = 6 * (l**2) + 12 * l + 8\n    \n    # Return the surface area of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * math.pow(l, 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * math.pi * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_arr = array('i', nums)\n    pos_count = 0\n    for num in num_arr:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(num_arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize an empty array to store positive numbers\n    positive = array('i')\n\n    # loop through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n\n    # calculate the ration of positive numbers\n    pos_count = len(positive)\n    total_count = len(nums)\n    ratio = pos_count / total_count\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of booleans\n    booleans = array('b', nums)\n    \n    # Initialize two counters for positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n    \n    # Iterate through the array and count the number of positive and negative numbers\n    for num in booleans:\n        if num:\n            pos_count += 1\n        else:\n            neg_count += 1\n    \n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / (pos_count + neg_count)\n    \n    # Return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Given a list of integers, returns a ration of positive numbers in the list as a string.\n    \"\"\"\n    pos_arr = array('i')\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n    pos_count = len(pos_arr)\n    if pos_count == 0:\n        return \"No positive numbers found.\"\n    elif pos_count == 1:\n        return f\"{pos_count} positive number found.\"\n    else:\n        return f\"{pos_count} positive numbers found.\""
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the array of integers into an array of booleans\n    bool_array = array('b', [x > 0 for x in nums])\n\n    # Count the number of positive numbers in the array\n    positive_count = sum(bool_array)\n\n    # Find the ration of positive numbers in the array\n    if positive_count == 0:\n        positive_ratio = 0\n    else:\n        positive_ratio = round(positive_count / len(nums), 2)\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Initialize an empty array to store the count of positive numbers\n    counts = array('i')\n    \n    # Iterate over the array of numbers\n    for num in nums:\n        # If the number is positive, add 1 to its count\n        if num > 0:\n            counts.append(1)\n        else:\n            # If the number is negative, add 0 to its count\n            counts.append(0)\n            \n    # Calculate the ratio of positive numbers\n    pos_count = 0\n    for count in counts:\n        pos_count += count\n        \n    ratio = pos_count / len(nums)\n    \n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    return float(positive_count) / (positive_count + negative_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return positive_nums.item(count-1) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i', [num for num in nums if num > 0])\n    neg_nums = array('i', [num for num in nums if num < 0])\n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    return float(pos_count) / (pos_count + neg_count)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number present in the list.\n\n    Args:\n        list1 (list): List of numbers to find the largest negative number.\n\n    Returns:\n        int: The largest negative number present in the list.\n    \"\"\"\n    largest_num = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number from the list.\n    \"\"\"\n    max_neg = float('-inf') #initialize max_neg to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg: #check if current number is negative and greater than max_neg\n            max_neg = num #if it is, update max_neg\n    return max_neg #return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    max_num = lst[0]\n    for num in lst:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function finds the largest negative number from the given list.\n    \"\"\"\n    largest_num = float('-inf') # initialize the largest number to negative infinity\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -1  # initialize largest variable to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num  # update largest if current number is negative and larger than current largest\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    # Initialize a variable to store the largest negative number\n    largest = -float('inf')\n    \n    # Iterate through the list and update the largest variable if a negative number is found\n    for num in list1:\n        if num < 0:\n            largest = max(largest, num)\n    \n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list and trim each tuple by k\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][-K:]\n\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j == K:\n                test_list[i] = test_list[i][:j] + test_list[i][j+1:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tup in enumerate(test_list):\n        if len(tup) > K:\n            test_list[i] = tup[:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tuple(tup[i] for i in range(len(tup)) if i % K!= 0)\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to store trimmed tuples\n    trimmed_list = []\n    \n    # Iterate over the tuples in the list\n    for tuple_item in test_list:\n        # If the length of the tuple is greater than K, trim the tuple and append it to the trimmed list\n        if len(tuple_item) > K:\n            trimmed_tuple = tuple_item[:K]\n            trimmed_list.append(trimmed_tuple)\n        else:\n            # If the length of the tuple is less than or equal to K, append it to the trimmed list as it is\n            trimmed_list.append(tuple_item)\n    \n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # if the element is not equal to K, delete it from the tuple\n            if test_list[i][j]!= K:\n                test_list[i] = test_list[i][:j] + test_list[i][j+1:]\n                break\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # initialize an empty list to store the result\n    result = []\n\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # multiply the current element of the first tuple with the corresponding element of the second tuple\n        result.append(test_tup1[i] * test_tup2[i])\n\n    # return the result list\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function performs index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    # Initialize a list to store the result\n    result_list = []\n\n    # Iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Get the i-th element of the first tuple\n        a = test_tup1[i]\n\n        # Iterate over the elements of the second tuple\n        for j in range(len(test_tup2)):\n            # Get the j-th element of the second tuple\n            b = test_tup2[j]\n\n            # Multiply the two elements and append the result to the result list\n            result_list.append(a*b)\n\n    # Return the result as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupels are not same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length\")\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result_tup)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_result = []\n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        multiplication_result.append(test_tup1[i] * test_tup2[i])\n    # return the multiplication result as a tuple\n    return tuple(multiplication_result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert the list to a set to remove duplicates\n    set_lst = set(lst)\n    # get the count of each element in the tuple\n    count_tup = Counter(tup)\n    # get the intersection of count_tup and set_lst to get the elements that are present in both tuples\n    int_lst = list(count_tup.keys() & set_lst)\n    # count the occurence of each element in int_lst and store in a dictionary\n    count_dict = {}\n    for ele in int_lst:\n        count_dict[ele] = count_tup[ele]\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    count = 0\n    for key in lst:\n        if key in counter:\n            count += counter[key]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst: \n        if i in count: \n            count[i] += 1 \n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # create a dictionary to store the count of each element of the list\n    count_dict = {}\n\n    # iterate through the tuple and count the occurrence of each element in the list\n    for item in tup:\n        if item in lst:\n            count_dict[item] = count_dict.get(item, 0) + 1\n\n    # return the dictionary containing the count of each element of the list\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(lst)\n    count_list = []\n    for i in tup:\n        count_list.append(count_dict[i])\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(lst)\n    return {x: count_dict[x] for x in tup}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict_tup = Counter(tup)\n    for key, value in count_dict_tup.items():\n        if key in count_dict:\n            count_dict[key] += value\n        else:\n            count_dict[key] = value\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and counts the number of occurrences of each element in the list in the tuple.\n    '''\n\n    # Counter object to count the frequency of each element in the list\n    count = Counter(lst)\n\n    # A dictionary to store the counts of each element in the tuple\n    count_dict = {}\n\n    # Iterate over each element of the tuple\n    for i in range(len(tup)):\n\n        # If the element is present in the list, increment its count in the count_dict\n        if tup[i] in count:\n            count_dict[tup[i]] = count[tup[i]]\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of each element in the list in the tuple.\n    '''\n    count_dict = Counter(tup)\n    for key in count_dict:\n        if key in lst:\n            count_dict[key] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) & Counter(tup)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Loop through the list and cube each element\n    for i in range(len(nums)):\n        nums[i] **= 3\n    \n    return nums"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 5, 12, 22, 35, 51, 70, 92, 117, 145, 176, 210, 247, 287, 330, 376, 425, 477, 532, 590, 651, 715, 782, 852, 925, 1001, 1080, 1162, 1247, 1335, 1426, 1520, 1617, 1717, 1820, 1926, 2035, 2147, 2262, 2380, 2501, 2625, 2752, 2882, 3015, 3151, 3290, 3432, 3577, 3725, 3876, 4030, 4187, 4347, 4510, 4676, 4845, 5017, 5192, 5370, 5551, 5735, 5922, 6112, 6305, 6501, 6700, 6902, 7107, 7315, 7526, 7740, 7957, 8177, 8400, 8626, 8855, 9087, 9322, 9560, 9801, 10045, 10292, 10542, 10795, 11051, 11310, 11572, 11837, 12105, 12376, 12650, 12927, 13207, 13490, 13776, 14065, 14357, 14652, 14950, 15251, 15555, 15862, 16172, 16485, 16801, 17120, 17442, 17767, 18095, 18426, 18760, 19097, 19437, 19780, 20126, 20475, 20827, 21182, 21540, 21899, 22262, 22628, 22997, 23369, 23743, 24120, 24499, 24881, 25266, 25653, 26043, 26435, 26830, 27227, 27626, 28028, 28432, 28839, 29248, 29660, 30075, 30492, 30912, 31335, 31760, 32188, 32619, 33052, 33488, 33926, 34367, 34810, 35256, 35704, 36155, "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize a variable to store the sum of perrin numbers\n    sum = 0\n\n    # Loop through the numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is a perrin number\n        if i % 3 == 0 and i % 5 == 0:\n            # Add i to the sum\n            sum += i\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of perrin numbers up to n.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891, 1953, 2016, 2080, 2145, 2211, 2278, 2346, 2415, 2485, 2556, 2628, 2701, 2775, 2850, 2926, 3003, 3081, 3160, 3240, 3321, 3403, 3486, 3570, 3655, 3741, 3828, 3916, 4005, 4095, 4186, 4278, 4371, 4465, 4560, 4656, 4753, 4851, 4950, 5050, 5151, 5253, 5356, 5460, 5565, 5671, 5778, 5886, 5995, 6105, 6216, 6328, 6441, 6555, 6670, 6786, 6903, 7021, 7140, 7260, 7381, 7503, 7626, 7750, 7875, 8001, 8128, 8256, 8385, 8515, 8646, 8778, 8911, 9045, 9180, 9316, 9453, 9591, 9730, 9870, 10011, 10153, 10296, 10440, 10585, 10731, 10878, 11026, 11175, 11325, 11476, 11628, 11781, 11935, 12090, 12246, 12403, 12561, 12720, 12880, 13041, 13203, 13366, 13530, 13695, 13861, 14028, 14196,"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [0, 1, 0, -1, 0, 1, 0, -1]\n    sum = 0\n    for i in range(n):\n        sum += perrin[i]\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 4, 8, 15, 31, 62, 125, 250, 500, 1000]\n    perrin_sum = sum(perrin_numbers[:n])\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i**2\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract the specified size of strings from a given list of string values.\n    \"\"\"\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n    \n    # Loop through the input list of strings\n    for string in str_list:\n        # Check if the length of the current string is greater than or equal to the specified size\n        if len(string) >= size:\n            # Append the current string to the extracted strings list\n            extracted_strings.append(string)\n    \n    # Return the extracted strings list\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), 2):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Loop through the list of strings\n    for i in range(0, len(str_list), l):\n        # Extract the specified size of strings starting from the current index\n        extracted_strings.extend(str_list[i:i+l])\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size of string to extract as input. It returns a new list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l, n):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return extract_string(str, l[n:], n+1)"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and an integer value representing the size of the strings\n    to be extracted. It then extracts the specified number of strings from the list and returns them as a\n    list.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): List of strings to extract strings from.\n        size (int): Size of the strings to extract.\n\n    Returns:\n        list: List of strings of the specified size extracted from the input list.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_strings.append(str_list[i])\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Removing whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Removing whitespaces from the beginning and end of the string\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # Remove all whitespaces using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expression to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regex to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return actual_cost - sale_amount\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount >= 0: \n        return 0\n    else: \n        return abs(actual_cost - sale_amount)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # Calculate the percentage of sale loss\n    loss_percentage = (actual_cost - sale_amount) / sale_amount\n    # Calculate the loss amount\n    loss_amount = sale_amount * loss_percentage\n    # Return the loss amount\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    # Initialize a variable to store the sum of even factors\n    evenSum = 0\n\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # If i is even, add it to the evenSum variable\n        if i % 2 == 0:\n            evenSum += i\n\n    # Return the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function finds the sum of even factors of a number.\n    '''\n\n    # initialize the sum of even factors to zero\n    evenSum = 0\n\n    # loop through all odd factors of n\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        # if the factor is even, add it to the sum\n        if n % i == 0:\n            evenSum += i\n\n    # return the sum of even factors\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i*i) == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n%i == 0 and i%2 == 0 : \n            sum += i \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n % (2*i) == 0:\n                sum += 2*i\n            else:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Find all the even factors of the number \n    evenFactors = []\n    for i in range(2, int(math.sqrt(n))+1): \n        while n % i == 0 and i % 2 == 0: \n            evenFactors.append(i) \n            n //= i\n    \n    # Add the last odd factor to the sum \n    evenFactors.append(n)\n    return sum(evenFactors) "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        while n % i == 0: \n            sum += i \n            n //= i\n    if n > 1: \n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    # initialize sum of even factors to zero\n    s = 0\n    \n    # iterate over all odd factors of n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # if n has no common factors with i\n        if n % i == 0:\n            # divide n by i to eliminate i\n            n = n // i\n            # add i to sum of even factors\n            s += i\n    \n    # return sum of even factors\n    return s"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern for matching 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Use the re.search() function to search for the pattern in the given text\n    result = re.search(pattern, text)\n    \n    # If a match is found, return the matched word\n    if result:\n        return result.group()\n    \n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = re.compile(r'\\b[a-zA-Z]+[zZ]\\b')\n    return wordz.findall(text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*[zZ]\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]*z\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number. Please enter a valid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2]:\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False\n\nprint(check_monthnumb_number(2))  # Output: True\nprint(check_monthnumb_number(1))  # Output: False\nprint(check_monthnumb_number(13))  # Output: False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 % 2 == 0 and monthnum2 % 100!= 0 or monthnum2 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if monthnum == 2:\n                return True\n        else:\n            if monthnum == 2:\n                return False\n    else:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            if monthnum == 2:\n                return True\n        else:\n            if monthnum == 2:\n                return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2:\n            if is_leap_year(year):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = str(monthnum2)\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['04', '06', '09', '11']:\n        if len(monthnum) == 2 and monthnum2 in ['04', '06']:\n            return True\n        elif len(monthnum) == 1 and monthnum2 in ['09', '11']:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days_in_month[1] = 29\n    elif monthnum == 2:\n        days_in_month[1] = 28\n    else:\n        days_in_month[monthnum] = 31\n    return True if days_in_month[monthnum] == 31 else False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                return True\n            else:\n                return False\n        elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number.\")\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] #reverse the string using slicing\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    # Find the minimum length sublist\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize variables\n    min_len = len(lst)\n    min_sublist = lst\n\n    # Loop through the list and find the sublist with minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize a variable to store the minimum length of sublist\n    min_len = len(lst[0])\n    # Initialize a variable to store the index of the sublist with minimum length\n    min_index = 0\n    # Loop through all the sublists in the list\n    for i in range(1, len(lst)):\n        # Calculate the length of the current sublist\n        current_len = len(lst[i])\n        # If the current sublist has a smaller length than the current minimum length, update the minimum length and index\n        if current_len < min_len:\n            min_len = current_len\n            min_index = i\n    # Return the index of the sublist with minimum length\n    return min_index"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    min_len = 100000000\n    min_sublist = []\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # initialize minimum length to the length of the entire list\n    min_length = len(lst)\n\n    # loop through each sublist in the list\n    for i in range(len(lst)):\n        # find the length of the current sublist\n        sublist_length = len(lst[i])\n\n        # if the length of the sublist is less than the current minimum length, update the minimum length\n        if sublist_length < min_length:\n            min_length = sublist_length\n\n    # return the sublist with the minimum length\n    return lst[lst.index(min(lst))]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    sublist = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # initial values of min_len and min_sublist\n    min_len = float('inf')\n    min_sublist = []\n    \n    # loop through the list and update min_len and min_sublist\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = [i]\n        elif len(i) == min_len:\n            min_sublist.append(i)\n    \n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n\n    min_len = float('inf') \n    min_sublist = [] \n\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if len(lst[i:j+1]) < min_len: \n                min_len = len(lst[i:j+1]) \n                min_sublist = lst[i:j+1] \n\n    return min_sublist \n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = None\n    min_sublist = None\n    for sublist in lst:\n        if min_len is None or len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list of sublists as input and returns the sublist with the minimum length.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'([a-z])([A-Z]+)'\n    result = re.sub(pattern, r'\\1\\2', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match uppercase substrings\n    pattern = r'([A-Z]+)'\n    \n    # use the re.sub() method to replace all uppercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expression to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n    \n    # Using re.sub() method to replace uppercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n    \n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()  # convert to lowercase\n    pattern = r'\\b[a-z]*\\b'  # find all substrings starting with lowercase letters\n    return re.sub(pattern, '', str1)  # remove the substrings from the string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert all characters in the string to lowercase\n    string = string.lower()\n\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n\n    # Remove uppercase substrings from the words\n    words = [word for word in words if not any(c.isupper() for c in word)]\n\n    # Join the words into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]\\w+\\b'\n    \n    # Replace all uppercase substrings in the string with an empty string\n    result = re.sub(pattern, '', str1, flags=re.IGNORECASE)\n    \n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # Define regular expression to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # Use search() method to find all matches in the string\n    matches = pattern.findall(string)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            first_element = sublist[0]\n        else:\n            first_element = sublist\n        result.append(first_element)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list that contains the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.append(item[0])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            if len(item) > 0:\n                result.append(item[0])\n            else:\n                result.append(None)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print(i[0])"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                print(list1[i], list1[j])\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            result.append(list1[j-i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    set1 = set(list1)\n    # Create an empty list to store the combinations\n    combinations = []\n    # Loop through the elements of the set and create all possible combinations\n    for i in range(1, len(set1) + 1):\n        for j in range(len(set1) - i + 1):\n            # Concatenate the elements to form a combination and add it to the list of combinations\n            combinations.append(tuple(sorted(set1[j:j+i])))\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            combinations.append(list1[j:j+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create a list of lists to store the combinations\n    combinations = []\n    # create a list to store the remaining elements in the original list\n    remaining = list(list1)\n    # create a helper function to generate all possible combinations of the remaining elements\n    def helper(remaining):\n        # base case: if the remaining list is empty, add the combination to the combinations list and return\n        if not remaining:\n            combinations.append(remaining[:])\n            return\n        # recursive case: generate all possible combinations of the remaining elements\n        for i in range(len(remaining)):\n            # remove the current element from the remaining list\n            element = remaining.pop(i)\n            # generate all possible combinations of the remaining elements after the current element\n            helper(remaining)\n            # restore the current element to the remaining list\n            remaining.insert(i, element)\n    # call the helper function to generate all possible combinations of the remaining elements\n    helper(remaining)\n    # return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            list_combinations.append(list1[i:j])\n    return list_combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # Initialize the maximum product subarray and the current subarray product\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Update the current subarray product\n        current_product *= arr[i]\n        \n        # Update the maximum product subarray if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n        \n        # Update the current subarray product to the previous value\n        current_product //= arr[i]\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    min_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        min_product = min(num, min_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    for num in arr:\n        curr_product *= num\n        max_product = max(max_product, curr_product)\n        if curr_product < 0:\n            curr_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * arr[i] - arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * arr[i] - arr[i])\n        max_ending_here = max(max_ending_here, min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n        arr (list): list of integers representing the array\n\n    Returns:\n        int: the maximum product subarray\n    \"\"\"\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = arr[0] * arr[1]\n    min_ending_here = arr[0] * arr[1]\n    max_ending_so_far = max_ending_here\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here + arr[i], arr[i], max_ending_here - arr[i])\n        min_ending_here = min(min_ending_here + arr[i], arr[i], min_ending_here - arr[i])\n        max_ending_so_far = max(max_ending_so_far, max_ending_here)\n\n    return max_ending_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0], 1\n\n    max_product = arr[0]\n    max_sum = arr[0]\n    min_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            temp_product = max(arr[i], arr[i] * max_product)\n            temp_sum = max(temp_product, temp_product + arr[i])\n            max_product = temp_product\n            max_sum = temp_sum\n        else:\n            temp_product = min(arr[i], arr[i] * min_sum)\n            temp_sum = min(temp_product, temp_product + arr[i])\n            min_sum = temp_product\n            max_sum = temp_sum\n\n    return max_sum, max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_so_far = max_ending_here = arr[0]\n        for i in range(1, len(arr)):\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for num in arr:\n        if num < 0:\n            current_product = num\n        else:\n            current_product *= num\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product\n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if all values in the dictionary are same\n    value = dict.values()[0]\n    for i in dict.values():\n        if i!= value:\n            return False\n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize count variable to 0\n    count = 0\n    # loop through each value in dictionary\n    for value in dict.values():\n        # if count is less than n, increment count\n        if count < n:\n            count += 1\n        # if count is equal to n, return True, as all values are same\n        elif count == n:\n            return True\n    # if all values are not same and count is greater than n, return False, as there are duplicates\n    elif count > n:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Loop through the keys of the dictionary\n    for key in dict:\n        # Check if all the values are same\n        if n == len(set(dict.values())):\n            return True\n    # If no key is found with a value greater than n\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a variable to store the first value in the dictionary\n    first_value = next(iter(dict.values()))\n    # loop through the dictionary and compare each value with the first value\n    for value in dict.values():\n        # if any value is not equal to the first value, return False\n        if value!= first_value:\n            return False\n    # if all values are equal to the first value, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()[0]\n    for i in dict.values():\n        if i!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for key in dict:\n        values.append(dict[key])\n    return all(x == values[0] for x in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # loop through the dictionary\n    for item in dict1:\n        # check if the item is not empty\n        if not dict1[item]:\n            # remove the item from the dictionary\n            del dict1[item]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize variables to keep track of the maximum product and the current subsequence product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the array and update the maximum product and current subsequence product\n    for num in arr:\n        if num > 0:\n            current_product *= num\n            max_product = max(max_product, current_product)\n        else:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    max_product = float('-inf')\n    min_product = float('inf')\n    for i in range(len(arr)):\n        if i == 0:\n            max_product = min_product = arr[0]\n        elif arr[i] > arr[i-1]:\n            max_product = max(max_product, arr[i]*arr[i-1])\n            min_product = min(min_product, arr[i])\n        else:\n            max_product = max(max_product, arr[i]*arr[i-1])\n            min_product = min(min_product, arr[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    \n    max_product_so_far = max_ending_here = arr[0]\n    max_product_ending_here = max(max_ending_here, 0)\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product_ending_here = max(max_product_ending_here, max_ending_here)\n\n    return max_product_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Create a temporary array to store the product of a subsequence ending with each element in the original array\n    product_array = [1] * n\n\n    # Initialize two pointers, one for the left subsequence and one for the right subsequence\n    left = 0\n    right = 0\n\n    # Loop through the array, updating the left and right pointers and updating the product array\n    while right < n:\n        # If the product of the left and right subsequences is greater than the current maximum product, update it\n        if product_array[left] * product_array[right] > product_array[right]:\n            product_array[right] = product_array[left] * product_array[right]\n\n        # Move the left pointer to the right if the product of the left and right subsequences is less than or equal to the current maximum product\n        if product_array[left] * product_array[right] <= product_array[right]:\n            left += 1\n\n        # Move the right pointer to the right if the product of the left and right subsequences is greater than the current maximum product\n        right += 1\n\n    # Return the maximum product formed by multiplying numbers of an increasing subsequence of the array\n    return product_array[n-1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    def increasing_subsequence(arr, start, end):\n        if start == end:\n            return [arr[start]]\n        max_product = float('-inf')\n        max_left = float('-inf')\n        max_right = float('-inf')\n\n        for i in range(start, end):\n            if arr[i] < arr[start]:\n                if arr[i] * (arr[end] - arr[i]) > max_product:\n                    max_product = arr[i] * (arr[end] - arr[i])\n            elif arr[i] > max_left:\n                max_left = arr[i]\n            elif arr[i] < max_right:\n                max_right = arr[i]\n\n        return max(increasing_subsequence(arr, start, i) + [arr[i]] + increasing_subsequence(arr, i + 1, end) for i in range(start, end))\n\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        max_product = max(max_product, max(increasing_subsequence(arr, 0, i) + [arr[i]]))\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Create a list to store the product of each increasing subsequence\n    products = []\n\n    # Initialize the maximum product to be the first number in the array\n    max_product = arr[0]\n\n    # Loop through the array from the second number to the last\n    for i in range(1, len(arr)):\n\n        # Find the index of the smallest number in the array greater than the current number\n        j = bisect.bisect_left(arr[i:], arr[i])\n\n        # If there is no such number, set j to the length of the array\n        if j == len(arr):\n            j = len(arr)\n\n        # Calculate the product of the current number and the smallest number greater than it\n        product = arr[i] * arr[j]\n\n        # Update the maximum product if the current product is greater\n        if product > max_product:\n            max_product = product\n\n        # Add the current product to the list of products\n        products.append(product)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    # Initialize variables\n    dp = [1] * n\n    dp_prev = [1] * n\n\n    # Fill dp and dp_prev array using Kadane's algorithm\n    for i in range(1, n):\n        if arr[i] > 0:\n            dp[i] = max(dp[i-1], arr[i]) * arr[i]\n        else:\n            dp[i] = dp[i-1] * arr[i]\n\n    # Find maximum product\n    max_product = max(dp)\n\n    # Backtrack to find increasing subsequence\n    i = 0\n    while i < n and dp[i] == max_product:\n        i += 1\n    increasing_subsequence = arr[i-1:i+1]\n    increasing_subsequence.reverse()\n\n    # Calculate maximum product of subsequence\n    max_product_subseq = 1\n    for num in increasing_subsequence:\n        max_product_subseq *= num\n\n    # Calculate maximum product of increasing subsequence\n    max_product_incr = 1\n    for num in arr[0:i]:\n        max_product_incr *= num\n\n    return max(max_product_incr, max_product_subseq)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize max_product and max_so_far as 1\n    max_product = arr[0]\n    max_so_far = arr[0]\n    # Initialize max_ending_here as 1 and max_ending_here_neg as -1\n    max_ending_here = 1\n    max_ending_here_neg = -1\n    # Traverse the array from second element to last\n    for i in range(1, n):\n        # If the current element is greater than max_ending_here\n        if arr[i] > max_ending_here:\n            # Update max_ending_here and max_ending_here_neg\n            max_ending_here = arr[i]\n            max_ending_here_neg = max_ending_here_neg * max_ending_here\n        # If the current element is less than or equal to max_ending_here\n        else:\n            # Update max_ending_here_neg as -1\n            max_ending_here_neg = max_ending_here_neg * max_ending_here\n            # Update max_ending_here as max_ending_here_neg + current element\n            max_ending_here = max_ending_here_neg + arr[i]\n        # Update max_product as max(max_product, max_ending_here)\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Create a 2D array to store the maximum subsequence products for each subarray ending at each index\n    max_products = [[0] * n for i in range(n)]\n    \n    # Initialize the maximum subsequence products for the first two elements\n    max_products[0][0] = arr[0] * arr[1]\n    max_products[0][1] = max(arr[0], arr[1])\n    \n    # Initialize the maximum subsequence products for the remaining elements\n    for i in range(2, n):\n        max_products[i][0] = max(max_products[i-1][0] * arr[i], max_products[i-1][1])\n        max_products[i][1] = max(max_products[i-1][1] * arr[i], max_products[i-1][0])\n    \n    # Return the maximum product formed by multiplying the numbers of the increasing subsequence ending at each index\n    return max_products[n-1][0]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    max_product_ending_at_i = float('-inf')\n    max_product_ending_at_j = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product_ending_at_i = max(max_product_ending_at_i, arr[i]*arr[j])\n            max_product_ending_at_j = max(max_product_ending_at_j, arr[j]*arr[i])\n\n    return max(max_product_ending_at_i, max_product_ending_at_j)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    n = len(test_tup)\n    for i in range(n-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[2], test_tup[1] + test_tup[3])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Get the length of the tuple\n    length = len(test_tup)\n\n    # Initialize a variable to store the pairwise addition\n    total = 0\n\n    # Loop through the tuple elements\n    for i in range(length):\n\n        # Check if the current element is the first or last element of the tuple\n        if i == 0 or i == length - 1:\n\n            # If it is the first or last element, add it to the total\n            total += test_tup[i]\n\n        # If the current element is not the first or last element, add the sum of the previous and current elements to the total\n        else:\n            total += test_tup[i] + test_tup[i-1]\n\n    # Return the total sum of the pairwise additions\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"The given tuple should have an even number of elements.\")\n        return\n    \n    pairs = []\n    for i in range(len(test_tup) - 1):\n        pairs.append(test_tup[i] + test_tup[i+1])\n    \n    return pairs"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # First element\n    add_val = test_tup[0]\n    \n    # Loop through the tuple\n    for i in range(1, len(test_tup)-1):\n        # Add the current element and the previous element to get the next element\n        add_val += test_tup[i]\n    \n    # Add the last element to get the total sum\n    add_val += test_tup[-1]\n    \n    return add_val"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    length = len(test_tup)\n    # Initialize a variable to store the sum of pairwise additions\n    pairwise_sum = 0\n    # Loop through the tuple and add the pairwise sum of neighboring elements\n    for i in range(length-1):\n        pairwise_sum += test_tup[i+1] - test_tup[i]\n    # Return the pairwise sum of the neighboring elements\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum to 0\n    pair_sum = 0\n    # iterate through the tuple elements\n    for i in range(len(test_tup)-1):\n        # add the current element with the next element in the tuple\n        pair_sum += test_tup[i] + test_tup[i+1]\n    return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n\n    pairs = []\n    for i in range(len(test_tup) - 1):\n        pairs.append(test_tup[i] + test_tup[i + 1])\n\n    return pairs"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # If the tuple has only one element, return the tuple as it is\n    if len(test_tup) < 2:\n        return test_tup\n    \n    # Initialize a new tuple to store the pairwise additions\n    pairwise_sum = ()\n    \n    # Loop through the tuple elements and add each pair of adjacent elements\n    for i in range(len(test_tup)-1):\n        pairwise_sum += (test_tup[i] + test_tup[i+1],)\n    \n    # Return the final pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Calculate the product of array elements modulo n\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n\n    # Return the product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function finds the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and an integer n and returns the product of the array\n    multiplication modulo n.\n    '''\n    # initialize the product variable to 1\n    product = 1\n    # iterate over each element of the array\n    for element in arr:\n        # multiply the product by the current element modulo n\n        product = (product * element) % n\n    # return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i] % n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array `arr` and a number `n` as input and returns the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the product as 1\n    product = 1\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Multiply the current element with the product\n        product = (product * arr[i]) % n\n\n    # Return the product modulo n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False \n\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False \n\n    return True "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else returns False.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    '''\n\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l) - 1: \n        if l[i] + 1 == l[i + 1]: \n            print(f\"{l[i]} and {l[i+1]} are consecutive numbers\") \n            return True \n        i += 1 \n    print(\"No consecutive numbers found in the list\") \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Check if the list is empty or not\n    if len(l) == 0: \n        return True \n\n    # Initialize two variables to store the first and last number in the list \n    first = l[0]\n    last = l[0]\n\n    # Iterate through the list and check if each number is consecutive or not \n    for i in range(1, len(l)): \n        if l[i] == last + 1: \n            last = l[i] \n        else: \n            return False \n\n    # If the loop completes without returning False, it means all the numbers are consecutive \n    return True "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as an input and returns True if the list contains consecutive numbers,\n    and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] == 1:\n            count += 1\n    if count == len(l)-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return \"The list should have at least 2 elements.\"\n    elif l[0] == l[1]:\n        return \"The list should not have consecutive numbers.\"\n    else:\n        for i in range(1, len(l)):\n            if l[i]!= l[i-1] + 1:\n                return \"The list contains consecutive numbers.\"\n        return \"The list contains consecutive numbers.\""
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty dictionary to store the common elements\n    common_elements = {}\n\n    # loop through the first list and add the elements to the dictionary\n    for item in test_list1:\n        common_elements[item] = True\n\n    # loop through the second list and add the elements to the dictionary\n    for item in test_list2:\n        if item in common_elements:\n            common_elements[item] = True\n\n    # create a new list to store the common elements in the order of the first list\n    new_list = []\n\n    # loop through the dictionary and add the elements to the new list in the order of the first list\n    for item in common_elements:\n        if common_elements[item]:\n            new_list.append(item)\n\n    return new_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of unique tuples from the given lists\n    unique_tuples = set(test_list1 + test_list2)\n    \n    # Create a set of unique tuples from the given lists in sorted order\n    sorted_unique_tuples = set(sorted(test_list1 + test_list2))\n    \n    # Create a set of unique tuples from the intersection of the given lists\n    intersection_set = set(sorted_unique_tuples & unique_tuples)\n    \n    # Convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the unique elements from both lists\n    unique_elements = set()\n    # Loop through the first list and add the unique elements to the set\n    for element in test_list1:\n        unique_elements.add(element)\n    # Loop through the second list and add the unique elements to the set\n    for element in test_list2:\n        unique_elements.add(element)\n    # Convert the set to a list and return it as the tuple intersection\n    return tuple(unique_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the list to a set to remove duplicates and maintain order of elements\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n\n    # find the intersection of the two sets\n    intersection = test_list1.intersection(test_list2)\n\n    # convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort both the lists in ascending order\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Traverse both lists and add the common elements to the set\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            common_elements.add(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # Return the common elements as a tuple\n    return tuple(common_elements)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Set up empty set to store the unique elements of the first list\n    unique_elements_set = set()\n    # Iterate through the first list to find the unique elements\n    for element in test_list1:\n        unique_elements_set.add(element)\n    # Initialize an empty set to store the intersection of unique elements\n    intersection_set = set()\n    # Iterate through the second list and add the common elements to the intersection set\n    for element in test_list2:\n        if element in unique_elements_set:\n            intersection_set.add(element)\n    # Return the intersection set as a tuple\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of unique elements from both lists\n    unique_set1 = set(test_list1)\n    unique_set2 = set(test_list2)\n\n    # Find the intersection of unique sets\n    intersection = unique_set1.intersection(unique_set2)\n\n    # Convert the intersection back to a tuple and return it\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from the first list to remove duplicates\n    set_list1 = set(test_list1)\n    # Create a new list to store the elements in the intersection of the two lists\n    new_list = []\n    # Iterate through the set of the first list\n    for element in set_list1:\n        # Check if the element is present in both lists\n        if element in test_list2:\n            # If it is present, add it to the new list\n            new_list.append(element)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert the list to set for faster lookups\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        test_list1 (list): A list of tuples.\n        test_list2 (list): A list of tuples.\n\n    Returns:\n        set: A set containing the intersection of the given tuples.\n    \"\"\"\n\n    # Use set intersection to get the common elements in both lists.\n    common_elements = set(test_list1) & set(test_list2)\n\n    # Create a new list and add only the common elements.\n    new_list = []\n    for element in test_list1:\n        if element in common_elements:\n            new_list.append(element)\n\n    # Return the new list as a set.\n    return set(new_list)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # create a new string to store the modified string\n    newstr = \"\"\n    \n    # iterate through each character in the string\n    for i in range(len(str1)):\n        # if the current character is the character to be replaced\n        if str1[i] == ch:\n            # add the new character to the new string\n            newstr += newch\n        # otherwise, add the current character to the new string\n        else:\n            newstr += str1[i]\n    \n    # return the modified string\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in two strings and replaces all occurrences of the first character (ch) with the second character (newch).\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): the input string\n    ch (str): the character to be replaced\n    newch (str): the replacement character\n\n    Returns:\n    str: the modified string\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the current character is equal to `ch`, replace it with `newch`\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes in a dictionary and returns a new dictionary with the keys sorted by value in descending order.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary into a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object in descending order\n    sorted_dict = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Convert the sorted Counter object back into a dictionary\n    sorted_dict = dict(sorted_dict)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a new dictionary where the keys are sorted in ascending order.\n    '''\n    # Create a Counter object from the input dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by values in ascending order\n    sorted_counter = counter.most_common()\n\n    # Create a new dictionary with the sorted keys and values\n    sorted_dict = {}\n    for key, value in sorted_counter:\n        sorted_dict[key] = value\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Get the sorted dictionary by value\n    sorted_dict = Counter(dict1).most_common()\n\n    # Sort the dictionary by value in ascending order\n    sorted_dict.sort(key=lambda x: x[1])\n\n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize two variables to keep track of the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    # initialize the variables to store the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) <= 1:\n        return nums[0]\n    \n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n            \n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # find the smallest and largest values in the array\n    smallest = max(nums)\n    largest = min(nums)\n    # add up the smallest and largest values\n    sum_largest_smallest = smallest + largest\n    # return the sum\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        smallest = nums[0]\n        largest = nums[0]\n        for num in nums:\n            if num < smallest:\n                smallest = num\n            if num > largest:\n                largest = num\n        return smallest + largest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        raise ValueError(\"The input array is empty\")\n    else:\n        max_num = min_num = nums[0]\n        for num in nums:\n            if num > max_num:\n                max_num = num\n            elif num < min_num:\n                min_num = num\n        return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether a given string is in lowercase or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'\\b\\w+\\b', re.IGNORECASE)\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Remove all lowercase substrings from the string\n    str1 = re.sub(r'[a-z]+', '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # find all lowercase substrings in the given string\n    substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    \n    # loop through all the substrings and remove them from the string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1, count=1)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]')\n    \n    # Use the pattern to find all matches in the string\n    matches = pattern.findall(str1)\n    \n    # Loop through all matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # define a regular expression to match lowercase substrings\n    lowercase = re.compile('[a-z]+')\n    \n    # find all lowercase substrings in the given string\n    matches = lowercase.findall(str1)\n    \n    # join the lowercase substrings into a single string\n    result = ''.join(matches)\n    \n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    str1 = re.sub(r'[a-z]', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Find all matches of the pattern in the string\n    matches = re.findall(pattern, str1)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # use the re.findall() method to find all the lowercase substrings in the given string\n    lowercase_substrings = re.findall(pattern, str1)\n    # loop through the lowercase substrings and replace them with an empty string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1\n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the integer to a string\n    str_n = str(n)\n    # Return the first character of the string\n    return str_n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # if the number is less than 10, then return the number as it is\n    if n < 10:\n        return n\n    # if the number is greater than or equal to 10, then return the first digit of the number\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n > 0 :  \n        return str(n)[0]  \n    else :  \n        return \"Invalid input\""
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # convert the number to a string\n    num_str = str(n)\n\n    # find the first digit of the number\n    first_digit = num_str[0]\n\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    \n    # find the first character of the string\n    first_char = num_str[0]\n    \n    # convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # remove the leading zeros from the number\n    n = str(n)\n    while n.startswith('0'):\n        n = n[1:]\n    \n    # if the number is empty, return None\n    if not n:\n        return None\n    \n    # return the first digit of the number\n    return int(n[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string and get the first character\n    first_char = str(n)[0]\n    \n    # return the first character as an integer\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Use string slicing to get the first digit of n\n    digit = str(n)[0]\n    return digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n\n    # Loop through each number in the list\n    for num in list:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, add it to the odd_list\n            odd_list.append(num)\n\n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2!=0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    odd_numbers = [num for num in list if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    first_n_cubes = [x**3 for x in range(1, n+1)]\n    first_n = list(range(1, n+1))\n    sum_cubes = sum(first_n_cubes)\n    sum_n = sum(first_n)\n    diff = sum_cubes - sum_n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    def sum_cubes(n):\n        \"\"\"\n        Write a Python function to calculate the sum of cubes of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum\n    \n    def sum_natural(n):\n        \"\"\"\n        Write a Python function to calculate the sum of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    sum_cubes_n = sum_cubes(n)\n    sum_natural_n = sum_natural(n)\n    difference = abs(sum_cubes_n - sum_natural_n)\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_natural_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a Python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # Find the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Return the difference\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculating the sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # calculating the sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # finding the difference between the two sums\n    diff = sum_cubes - sum_natural\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    \n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    # Sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    # Difference between the two sums\n    diff = sum_cubes - sum_natural\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return cubes_sum - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = sum_numbers - sum_cubes\n\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                xor = A[i] ^ A[j]\n                if xor % 2!= 0:\n                    count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    count = 0\n\n    for i in range(N):\n        xor_sum += A[i]\n        for j in range(i + 1, N):\n            xor_sum -= A[j]\n            count += 1\n\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in a list A of size N and returns the number of pairs whose xor value is odd.\n    \"\"\"\n\n    # XOR operation to check if the xor value of a pair is odd\n    def xor_odd(pair):\n        return (pair[0] ^ pair[1]) % 2 == 1\n\n    # Initializing the count variable to zero\n    count = 0\n\n    # Iterating over the list A\n    for i in range(N):\n        for j in range(i+1, N):\n            # XOR operation to get the xor value of the pair\n            xor_value = A[i] ^ A[j]\n\n            # Checking if the xor value of the pair is odd\n            if xor_odd((A[i], A[j])):\n                count += 1\n\n    # Returning the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N): \n    '''\n    This function takes a list of N integers A and returns the number of pairs whose xor value is odd.\n    '''\n    xor = 0 \n    count = 0 \n\n    for i in range(N): \n        xor = xor ^ A[i] \n        count += (xor & 1) \n\n    return count "
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # initialize the count to 0\n    count = 0\n    # loop through the array A\n    for i in range(N):\n        # loop through the remaining part of the array A\n        for j in range(i+2, N):\n            # calculate the xor value of the two elements in the current pair\n            xor = A[i] ^ A[j]\n            # if the xor value is odd, increment the count\n            if xor % 2!= 0:\n                count += 1\n    # return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        if A[i]%2 == 1 and A[i+1]%2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    lowercase_string = string.lower()\n    # Initialize an empty string to store the new string\n    new_string = ''\n    # Loop through each character in the lowercase string\n    for char in lowercase_string:\n        # If the character is uppercase, convert it to lowercase\n        if char.isupper():\n            new_string += char.lower()\n        # If the character is lowercase, convert it to uppercase\n        else:\n            new_string += char.upper()\n    # Return the new string\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char) ^ 32) if char.isalpha() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = abs(n1 - n2)\n    digit_diff = []\n\n    while difference > 0:\n        digit_diff.append(difference % 10)\n        difference //= 10\n\n    return sum(digit_diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through each digit in the two numbers\n    for i in range(10):\n        # Get the difference between the digits and add it to the sum\n        sum += abs(n1 // 10**i - n2 // 10**i)\n        # Add the difference to the next digit in the number\n        n1 %= 10**i\n        n2 %= 10**i\n\n    # Return the sum of the differences\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    # Initialize variables to store the sum of per-digit differences\n    diff_sum = 0\n\n    # Convert the input integers to lists of digits\n    num1_digits = [int(d) for d in str(n1)]\n    num2_digits = [int(d) for d in str(n2)]\n\n    # Calculate the absolute differences between the lists of digits\n    for i in range(len(num1_digits)):\n        diff_sum += abs(num1_digits[i] - num2_digits[i])\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # calculate the sum of the per-digit differences between the two numbers\n    diff = 0\n    for i in range(10):\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = 0\n    for i in range(10):\n        n1_digit = n1 // 10 ** i\n        n2_digit = n2 // 10 ** i\n        difference += abs(n1_digit - n2_digit)\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 ^ n2\n    \n    # convert diff to binary\n    binary = bin(diff)[2:]\n    \n    # calculate the sum of per-digit differences\n    sum_diff = 0\n    for i in range(len(binary)):\n        sum_diff += abs(int(binary[i]) - int(binary[i+1]))\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # get the length of the two numbers\n    num_length = len(str(n1))\n    \n    # create a list to store the differences between the digits\n    digit_diff_list = []\n    \n    # loop through each digit of the first number\n    for i in range(num_length):\n        # get the corresponding digit of the second number\n        digit2 = int(str(n2)[i])\n        \n        # calculate the difference between the digits\n        digit_diff = abs(digit2 - int(str(n1)[i]))\n        \n        # add the difference to the list of differences\n        digit_diff_list.append(digit_diff)\n    \n    # return the sum of the differences\n    return sum(digit_diff_list)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to lists of digits\n    num1_list = [int(d) for d in str(n1)]\n    num2_list = [int(d) for d in str(n2)]\n    \n    # calculate the sum of the per-digit difference\n    diff_sum = sum(abs(num1_list[i]-num2_list[i]) for i in range(len(num1_list)))\n    \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Initialize the sum of the differences\n    diff_sum = 0\n\n    # Loop through each digit of n1 and n2\n    for i in range(10):\n        # Subtract the corresponding digits of n1 and n2\n        digit_diff = abs(n1 // 10 ** i - n2 // 10 ** i)\n\n        # Add the digit difference to the sum of differences\n        diff_sum += digit_diff\n\n    # Return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a variable to store the sum of differences\n    total_diff = 0\n    \n    # Loop through each digit in the two numbers\n    for i in range(len(str(n1))):\n        # Convert the digit to an integer and subtract it from the corresponding digit in the other number\n        diff = int(str(n1)[i]) - int(str(n2)[i])\n        # Add the difference to the total difference\n        total_diff += diff\n        \n    return total_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= len(a) - size:\n            break\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return -1\n\n    max_sum = float('-inf')\n    max_ending_here = 0\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    elif size > 1:\n        max_sum = float('-inf')\n        current_sum = 0\n        for i in range(size):\n            current_sum += a[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n            elif current_sum < 0:\n                current_sum = 0\n        return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i < size - 1:\n            current_sum -= a[i+1]\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # flatten the given tuples\n    flat_tup1 = [x for tup in test_tup1 for x in tup]\n    flat_tup2 = [x for tup in test_tup2 for x in tup]\n\n    # find the intersection of the two sets\n    intersection = set(flat_tup1) & set(flat_tup2)\n\n    # convert the intersection set to a list and sort it\n    sorted_list = sorted(list(intersection))\n\n    # print the sorted union\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Convert the tuples to sets to remove duplicates\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n\n    # Find the union of the two sets\n    union = set_tup1.union(set_tup2)\n\n    # Convert the union set back to a list and sort it\n    union_list = sorted(list(union))\n\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Initialize an empty set to hold the union of the elements\n    union = set()\n    # Loop through each tuple to find the union of the elements\n    for tup in [test_tup1, test_tup2]:\n        for elem in tup:\n            # Add the element to the set if it's not already in there\n            if elem not in union:\n                union.add(elem)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union))\n    # Return the sorted list of union elements\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two tuples\n    combined_tup = tuple(set(test_tup1) | set(test_tup2))\n\n    # Sort the combined tuple\n    combined_tup_sorted = sorted(combined_tup)\n\n    # Print the sorted combined tuple\n    print(combined_tup_sorted)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    \n    # Convert the set back to a list and sort it\n    union_list = sorted(list(unique_set))\n    \n    # Output the union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # find the union of the elements of the two tuples using set operations\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set to store unique elements from both tuples\n    union_set = set(test_tup1 + test_tup2)\n    \n    # convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    \n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set to convert the tuples to sets and then combine them\n    combined_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(combined_set))\n    \n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to lists so that we can use the + operator to concatenate them\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Find the union of the two lists\n    union_list = list1 + list2\n    \n    # Sort the union list in ascending order\n    union_list.sort()\n    \n    # Convert the sorted union list back to a tuple and return it\n    return tuple(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sub_lst = lst[i]\n        sub_length = 0\n        for j in range(i+1, len(lst)):\n            if j == len(lst)-1 or lst[j]!= sub_lst[-1]:\n                sub_length += 1\n        if sub_length > max_length:\n            max_length = sub_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        sub_lst = lst[i:]\n        if max_len < len(sub_lst):\n            max_len = len(sub_lst)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_len = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_len = len(lst[i])\n            continue\n        elif len(lst[i]) > max_len:\n            max_len = len(lst[i])\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sub_list = lst[i:i+max_length+1]\n        if max_length < len(sub_list):\n            max_length = len(sub_list)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize max_length to zero\n    max_length = 0\n\n    # Iterate over each sublist in the list\n    for sublist in lst:\n        # Find the length of the sublist\n        sublist_length = len(sublist)\n\n        # If the length of the sublist is greater than max_length, update max_length\n        if sublist_length > max_length:\n            max_length = sublist_length\n\n    # Return max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    curr_len = 0\n    start = 0\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n                start = i-max_len\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 0\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len, start, start+max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    max_length = 1\n\n    for i in range(1,n):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize maximum length and current length of the sublist\n    max_length = 0\n    length = 0\n    \n    # iterate over each element in the list\n    for i in range(len(lst)):\n        # if the current element is not the same as the previous one, add one to the length\n        if lst[i]!= lst[i-1]:\n            length += 1\n            # if the length of the current sublist is greater than the maximum length, update the maximum length\n            if length > max_length:\n                max_length = length\n        else:\n            # if the current element is the same as the previous one, reset the length to 1\n            length = 1\n    \n    # return the maximum length of the sublists\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        temp = 0\n        for j in range(i, len(lst)):\n            temp += 1\n            if temp > maxLength:\n                maxLength = temp\n    return maxLength"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=[\"\\'])(.*?)(?=[\"\\'])'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<!\\\\)\"(?P<value>.*)\"'\n    matches = re.findall(pattern, text)\n    return [match['value'] for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    # Define a regular expression pattern to match strings in quotes\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Loop over the matches and extract the values between the quotes\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        if match[0] == '\"' and match[-1] == '\"':\n            value = match[1:-1]\n            values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\s|\\A)\"(.*?)\"(?=\\s|\\Z)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")\\w+(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    \n    # Count the number of pairs where both elements are unequal\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += freq[arr[i]] * freq[arr[j]]\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            pairs.add((arr[i], arr[j]))\n    return len(pairs)"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count = 0\n    \n    # Using a set to remove duplicates\n    unique_arr = set(arr)\n    \n    # Using nested loops to iterate over all pairs of unique elements\n    for i in range(n):\n        for j in range(i+1, n):\n            if i!= j:\n                count += 1\n    \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(word)\n\n    # Return the list of characters\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    This function takes in a string `word` as input, and returns a list of characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then iterate over its characters\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # iterate over the digits in the list and add them to the sum\n    for digit in digits:\n        sum_of_digits += digit\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(d) for d in str(n)]\n    # Initialize a variable to store the sum of the digits\n    total = 0\n    # Loop through each digit and add it to the total\n    for digit in digits:\n        total += digit\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert n to a string\n    str_n = str(n)\n    # initialize a variable to store the sum\n    sum_of_digits = 0\n    # loop through each digit in the string\n    for digit in str_n:\n        # convert the digit to an integer\n        int_digit = int(digit)\n        # add the integer to the sum\n        sum_of_digits += int_digit\n    # return the sum\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    \n    # loop through each digit in the integer\n    while n > 0:\n        # add the last digit to the sum\n        sum += n % 10\n        \n        # remove the last digit from the integer\n        n //= 10\n        \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n\n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        # Add it to the sum\n        total += digit\n        # Remove the last digit from the number\n        n = n // 10\n\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    if len(lst) <= 1:\n        return True\n    if lst[0] <= lst[1]:\n        return issort_list(lst[1:])\n    return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns a boolean value indicating whether the list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    # Convert the given lists to sets\n    nums_set = set()\n    for num_list in nums:\n        nums_set |= set(num_list)\n\n    # Convert the set back to list\n    return list(nums_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create an empty list to store the unique numbers\n    unique_nums = []\n    # iterate over each list in the input list\n    for num_list in nums:\n        # iterate over each number in the list and add it to the unique_nums list if it's not already there\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    # return the list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert the lists to sets to remove duplicates\n    unique_nums = set(nums)\n    # convert the set back to a list to return\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_set = set()\n    for num in nums:\n        if num not in num_set:\n            num_set.add(num)\n    return list(num_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # create a set to store the unique numbers\n    unique_nums = set()\n    \n    # loop through the lists and add each unique number to the set\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # create a new list to store the unique numbers\n    unique_nums_list = list(unique_nums)\n    \n    # sort the list in ascending order\n    unique_nums_list.sort()\n    \n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert all lists to sets to remove duplicates\n    nums_set = set(nums)\n    # Convert the set back to a list\n    result = list(nums_set)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n\n    # iterate through each list in the input list\n    for num_list in nums:\n        # iterate through each number in the list\n        for num in num_list:\n            # add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    #create a new list to store unique numbers\n    unique_nums = []\n    \n    #iterate through each number in the given list\n    for num in nums:\n        #if the number is not already in the unique_nums list, add it\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    #return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set(nums)\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique elements in the list\n    unique_set = set(list_data)\n\n    # calculate the product of the unique elements\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))  # convert list to set to get unique numbers\n    return 1 if len(unique_numbers) == 0 else unique_numbers[0] * unique_product(unique_numbers[1:])  # calculate product of unique numbers"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Initialize a set to store unique numbers\n    unique_numbers = set()\n\n    # Loop through each number in the list\n    for number in list_data:\n        # Add the number to the set if it's not already there\n        if number not in unique_numbers:\n            unique_numbers.add(number)\n\n    # Initialize a variable to store the product of unique numbers\n    product = 1\n\n    # Loop through each unique number in the set\n    for unique_number in unique_numbers:\n        # Multiply the product by the unique number\n        product *= unique_number\n\n    # Return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data)) # remove duplicates and convert to list\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    # first, remove duplicates from the list\n    unique_nums = set(list_data)\n    # then, calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_set = set(list_data)\n    unique_list = sorted(list(unique_set))\n    unique_product = 1\n\n    for num in unique_list:\n        unique_product *= num\n\n    return unique_product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder:\n    # surface area = 2 * pi * r * h\n    surface_area = 2 * 3.14159 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r**2 + 2 * 3.14159 * r * h + 3.14159 * r * h**2\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder using the formula\n    # surface area = 2*pi*(r*h)\n    surface_area = 2 * 3.14 * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Calculate the surface area of a cylinder given its radius and height.\n    \"\"\"\n    area = 2*3.14159*(r**2)+(2*3.14159*h)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # calculate the volume of the cylinder\n    V = 3.14159 * r * r * h\n    \n    # calculate the surface area of the cylinder\n    A = 2 * 3.14159 * r * h\n    \n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * (r**2) + 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area using the formula:\n    # A = \u03c0r\u00b2 + 2\u03c0rh\n    # Where A is the surface area of the cylinder and r is the radius of the cylinder.\n    return 2 * 3.14 * r**2 + 2 * 3.14 * r * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if A in B[i:]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists as input and checks whether the first list is \n    a sublist of the second list or not. It returns True if the first list is \n    a sublist of the second list, False otherwise.\n    '''\n    for i in range(len(B)): \n        if A == B[i:]: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # check if both lists have the same length\n    if len(A)!= len(B):\n        return False\n    # loop through each element of A\n    for i in range(len(A)):\n        # check if current element is in B\n        if A[i] in B:\n            # remove current element from B\n            B.remove(A[i])\n    # if B is empty then A is sublist of B else A is not sublist of B\n    return not B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    elif len(A) == 0 and len(B) == 0:\n        return True\n    else:\n        if A[0] == B[0]:\n            return is_Sub_Array(A[1:], B[1:])\n        elif A[0] > B[0]:\n            return is_Sub_Array(A, B[1:])\n        else:\n            return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists as input and returns True if the second list is a sublist of the first list, and False otherwise.\n    \"\"\"\n    # If the length of the first list is greater than the length of the second list, then it cannot be a sublist.\n    if len(A) > len(B):\n        return False\n    \n    # Initialize two pointers, i and j, both pointing to the first index of the first list.\n    i = 0\n    j = 0\n    \n    # Check if the first list contains the second list as a sublist.\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            # If the element at i is not equal to the element at j, then reset i to the previous index of A.\n            i = i - (j - i)\n            j = 0\n    \n    # If the loop completes without finding any mismatch, then the second list is a sublist of the first list.\n    return True if j == len(B) else False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Convert A and B to lists\n    A = list(A)\n    B = list(B)\n    \n    # Sort both lists\n    A.sort()\n    B.sort()\n    \n    # Check if the sub-list B is present in A\n    i = 0\n    for j in range(len(A)):\n        if A[j] == B[0]:\n            if A[j:j+len(B)] == B:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if A == B[:i+1]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A:\n        return True\n    elif A[0] in B:\n        return is_Sub_Array(A[1:], B)\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    # Define a function to find the last digit of a factorial\n    def last_digit_of_factorial(n):\n        return n % 10\n    \n    # Find the factorial of n and the last digit of the factorial\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = last_digit_of_factorial(factorial)\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0: \n        factorial *= n \n        n -= 1\n    last_digit = factorial % 10 \n    return last_digit "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # find the length of the string\n    length = len(num)\n    # find the last digit of the number\n    last_digit = int(num[-1])\n    # find the factorial of the number\n    factorial = 1\n    for i in range(1, length+1):\n        factorial *= i\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # converting the number to a string\n    num_str = str(n)\n    # converting the string to a list of digits\n    digits = [int(digit) for digit in num_str]\n    # finding the last digit in the list\n    last_digit = digits[-1]\n    # finding the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    # returning the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the factorial.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to string and store it in a variable\n    number_str = str(n)\n    \n    # Find the length of the string\n    length = len(number_str)\n    \n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    \n    # Loop through each digit of the factorial number\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the last_digit variable\n        last_digit += int(digit)\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the result variable\n    result = 0\n\n    # Loop through the digits of the number and multiply by the factorial\n    while n > 0:\n        digit = n % 10\n        result += digit * factorial(n // 10)\n        n //= 10\n\n    # Return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 0\n    while n > 0: \n        last_digit = n % 10\n        n = n // 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    \n    # Use a while loop to calculate the factorial of n and store the last digit in the last_digit variable\n    while n > 0:\n        last_digit = n % 10\n        n = n // 10\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variables\n    factorial = 1\n    digit = 0\n    \n    # loop through the factorial and find the last digit\n    for i in range(n, 0, -1):\n        factorial *= i\n        digit = int(factorial/10)\n    \n    # return the last digit\n    return digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # First, flatten the input lists using the * operator\n    flat_lists = list(itertools.chain(*[list1, list2, list3]))\n    # Then, use the zip() function to interleave the flattened lists with the original lists\n    interleaved_lists = list(zip(flat_lists, list1, list2, list3))\n    # Finally, convert the interleaved list back to a single list using the * operator\n    return list(itertools.chain(*interleaved_lists))"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the final interleaved list\n    interleaved_list = []\n    # iterate through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through each list and add the elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # loop through each list in turn and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # loop through each element in the 3 lists\n    for i in range(len(list1)):\n        # add the first element of the 1st list to the interleaved list\n        interleaved_list.append(list1[i])\n        # add the second element of the 2nd list to the interleaved list\n        interleaved_list.append(list2[i])\n        # add the third element of the 3rd list to the interleaved list\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    while index1 < len(list1) and index2 < len(list2) and index3 < len(list3):\n        result.append(list1[index1])\n        result.append(list2[index2])\n        result.append(list3[index3])\n        index1 += 1\n        index2 += 1\n        index3 += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1),len(list2),len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    if len(list1) > len(list2):\n        result.extend(list1[len(list2):])\n    elif len(list2) > len(list3):\n        result.extend(list2[len(list3):])\n    else:\n        result.extend(list3[len(list1):])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_list.append(item)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a set of unique elements in each tuple\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n\n    # Find the elements in only one of the tuples that are not in the other\n    dissimilar_elems = unique_tup1.symmetric_difference(unique_tup2)\n\n    # Return the dissimilar elements as a list\n    return list(dissimilar_elems)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize a set to store the common elements\n    common_set = set()\n\n    # Loop through the two tuples\n    for i in range(len(test_tup1)):\n        # If the current element is in both tuples\n        if test_tup1[i] in test_tup2:\n            # Add it to the common set\n            common_set.add(test_tup1[i])\n\n    # Initialize an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Loop through the second tuple to find dissimilar elements\n    for j in range(len(test_tup2)):\n        # If the current element is not in the common set\n        if test_tup2[j] not in common_set:\n            # Add it to the dissimilar set\n            dissimilar_set.add(test_tup2[j])\n\n    # Return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            common_elements.append(test_tup1[i])\n        else:\n            break\n    return common_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return\n    \n    # Create a new list to store the dissimilar elements\n    dissimilar = []\n    \n    # Iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element in the second tuple is equal to the element in the first tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # If the element in the second tuple is not equal to the element in the first tuple, add it to the dissimilar list\n            dissimilar.append(test_tup1[i])\n    \n    # Print the dissimilar elements\n    print(\"The dissimilar elements in the two tuples are:\", dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Sort the two tuples\n    test_tup1.sort()\n    test_tup2.sort()\n\n    # Find the common elements in the two tuples\n    common_elements = set(test_tup1) & set(test_tup2)\n\n    # Find the dissimilar elements in the two tuples\n    dissimilar_elements = set(test_tup1) - common_elements\n\n    # Convert the set to a list\n    dissimilar_list = list(dissimilar_elements)\n\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(num):\n        if num % 2 == 0:\n            return True\n        else:\n            return False\n\n    def remove_uneven(nested_tuple):\n        return [num for num in nested_tuple if is_even(num)]\n\n    result = [remove_uneven(nested_tuple) for nested_tuple in test_tuple]\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_list = []\n    for i in test_tuple:\n        if even_fnc(i):\n            uneven_list.append(i)\n    return uneven_list\n\ndef is_even(num):\n    '''\n    A helper function to check if a number is even or not.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            new_list.append(even_fnc(item))\n        else:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(even_fnc(i))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create a new tuple with only even elements from the original tuple\n    new_tuple = tuple(even_fnc(x) for x in test_tuple if isinstance(x, (list, tuple)) and not isinstance(x, str))\n    return new_tuple\n\ndef even_list(x):\n    '''\n    Returns True if the element is even and False otherwise.\n    '''\n    return all(x % 2 == 0)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize an empty list to store the even elements\n    even_list = []\n    # Loop through the nested tuple\n    for i in test_tuple:\n        # If the element is even\n        if even_fnc(i):\n            # Add it to the even list\n            even_list.append(i)\n    # Return the even list\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        if isinstance(tup, tuple):\n            new_tuple.append(even_ele(tup, even_fnc))\n        elif isinstance(tup, list):\n            new_tuple.append(even_fnc(tup))\n        else:\n            new_tuple.append(tup)\n    return new_tuple\n\ndef even_fnc(lst):\n    return [x for x in lst if x % 2 == 0]\n\ntest_tuple = (1, (2, (3, (4, 5))), 6, 7, 8, 9, 10)\nprint(even_ele(test_tuple, even_fnc))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n\n    # Loop through each element in the tuple\n    for item in test_tuple:\n        # Check if the element is a tuple\n        if isinstance(item, tuple):\n            # Recursively call the function on the nested tuple\n            even_ele(item, even_fnc)\n        # Check if the element is a list\n        elif isinstance(item, list):\n            # Recursively call the function on the nested list\n            even_ele(item, even_fnc)\n        # Check if the element is an even number\n        elif even_fnc(item):\n            # Remove the even element from the list\n            test_tuple.remove(item)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Function to check if an element is even or not\n    def is_even(x):\n        if type(x) == int:\n            return x % 2 == 0\n        elif type(x) == list or type(x) == tuple:\n            for i in x:\n                if not is_even(i):\n                    return False\n            return True\n        elif type(x) == dict:\n            for i in x.values():\n                if not is_even(i):\n                    return False\n            return True\n        else:\n            return False\n    \n    # Find the even elements in the nested mixed tuple\n    even_list = []\n    for item in test_tuple:\n        if is_even(item) and not isinstance(item, bool):\n            even_list.append(item)\n    \n    # Remove the uneven elements from the original tuple\n    new_tuple = [x for x in test_tuple if not is_even(x)]\n    \n    # Apply the specified even function to the even elements\n    new_tuple = [even_fnc(x) for x in even_list]\n    \n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s + b*s + (2*b*s)**2/3 + (2*b*s)**2/3\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    return 6 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(base, height): \n    # Formula for surface area of a square pyramid:\n    # s = h / 2 * (b + h)\n    # h = b + bh / 2\n    # b = h / 2 * (s - bh / 2)\n    # where s = height of pyramid, b = base of pyramid, and h = height of each pyramid's base\n    base_edge = height / 2 * (height - base / 2)  # finding the base edge of the pyramid\n    surface_area = base_edge * height  # finding the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s + b * s + s * b + s * b + b * s * 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of a regular square pyramid\n    area = (b**2) * 4 * s\n\n    # Return the surface area of the square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area using Heron's formula\n    area = 0.5 * b * s * s\n\n    # Return the surface area\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Using Heron's formula\n    area = b * s * (b + s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = (b**2)*(s**2)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s * s + 0.5 * b * b * s\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(d):\n    return len(d) == 0"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty!\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number using the formula:\n    C(n) = (2n+1)!/(n!(n+1)!)\n    \"\"\"\n    catalan = 0\n    for i in range(1, n+1):\n        catalan += ((2*i) * (2*i-1)) // math.factorial(i)\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Initialize the first two terms of the sequence\n    catalan_sequence = [1, 1]\n    \n    # Calculate the remaining terms\n    for i in range(2, num + 1):\n        catalan_sequence.append(2 * catalan_sequence[i - 1] - catalan_sequence[i - 2])\n        \n    return catalan_sequence[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    This function calculates the nth Catalan number using the formula:\n    \n    C(n) = (n+1)! / (r(n-1)! * r(n-2)!)\n    \n    where r(n) is the binomial coefficient, denoted as r(n, k) for n choose k\n    \n    n: positive integer representing the index of the Catalan number\n    \n    '''\n    \n    # function to calculate the binomial coefficient\n    def binomial_coefficient(n, k):\n        return factorial(n) // factorial(k) // factorial(n-k)\n    \n    # calculate the number of terms in the series\n    n = num\n    \n    # calculate the number of rows in the table\n    num_rows = 2 * n + 1\n    \n    # initialize the matrix with zeros\n    table = [[0 for i in range(num_rows)] for j in range(num_rows)]\n    \n    # populate the matrix with the Catalan numbers\n    for i in range(2, num_rows):\n        table[0][i] = 1\n    \n    for i in range(1, n+1):\n        table[i][0] = 1\n        table[i][i] = 1\n    \n    for i in range(1, n):\n        for j in range(1, n-i):\n            table[i][j] = table[i-1][j] + table[i-1][j+1]\n    \n    # calculate the nth Catalan number\n    result = 0\n    for i in range(2, num_rows):\n        result += table[i-1][i] * binomial_coefficient(2*n, i-1)\n    \n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 4 * (2 ** n - 1) / (2 * (2 * n - 1) * (2 * n - 2))\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # Compute the factorial of n\n        n_fact = 1\n        for i in range(1, n+1):\n            n_fact *= i\n        \n        # Compute the factorial of (n-1)\n        n_1_fact = 1\n        for i in range(1, n-1+1):\n            n_1_fact *= i\n        \n        # Compute the nth Catalan number\n        catalan_n = n_fact // n_1_fact\n        \n        return catalan_n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError(\"Catalan numbers can only be calculated for non-negative integers.\")\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    else:\n        num_powers = [num - i - 1 for i in range(num)]\n        catalan = 1\n        for p in num_powers:\n            catalan *= (4 * p + 1) // (p + 1)\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return (4*num - 2)/(num**2 + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number, which is the number of ways to arrange n things chosen from k different items.\n\n    Args:\n    n (int): number of items\n\n    Returns:\n    int: nth Catalan number\n\n    \"\"\"\n    # Initialize the first two Catalan numbers\n    C1 = 1\n    C2 = 1\n\n    # Calculate the remaining Catalan numbers recursively\n    for i in range(2, n+1):\n        C1 = (C1*i) // (i+1)\n        C2 = (C2*(n-i+1)) // i\n\n    return C1+C2"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Invalid input. The number should be a non-negative integer.\")\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Use the re.finditer() function to iterate over all non-overlapping matches of the pattern\n    matches = re.finditer(pattern, text)\n    \n    # Iterate over all matches and return a list of positions of the first adverb ending with ly\n    adverbs = []\n    for match in matches:\n        adverbs.append(match.start())\n    \n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b\\w*[aeiou]ly\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Create a dictionary to store the positions of the matches and their respective adverbs\n    adverb_positions = {}\n\n    # Iterate over the matches and add their positions and adverbs to the dictionary\n    for match in matches:\n        position = text.find(match)\n        adverb = match.lower()\n        adverb_positions[position] = adverb\n\n    # Sort the dictionary by position and return the positions and adverbs in a list\n    return sorted(adverb_positions.items())"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'(\\b\\w+\\b)?\\s*ly\\b' # match a word followed by 'ly'\n    matches = re.finditer(adverb_pattern, text) # find all matches using regular expression\n    for match in matches:\n        word = match.group(1) # get the word preceding 'ly'\n        if word:\n            print(f\"The word '{word}' is followed by 'ly' at index {match.start():3}.\")\n        else:\n            print(\"No word is found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    adverbs = []\n    pattern = r'(?<=[a-z])ly$'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end]\n        adverbs.append((start, end, adverb))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b\\w+(ly)$\\b'\n\n    # Use the re.search() function to search for matches in the text\n    matches = re.search(pattern, text)\n\n    # If a match is found, return the adverb and its position in the text\n    if matches:\n        return matches.group(), matches.start()\n\n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r\"\\b([aeiou]y)\\b\"\n\n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n\n    # Print the adverbs found\n    print(\"Adverbs ending with 'ly':\")\n    for i, adverb in enumerate(adverbs, start=1):\n        print(f\"{i}. {adverb}\")\n\n    # Return the list of adverbs found\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+(ly)\\b'\n\n    # Use re.finditer() to find all the occurrences of the pattern in the given text\n    matches = re.finditer(pattern, text)\n\n    # Create an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Iterate over the matches and add their positions to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regex pattern to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n\n    # Find all non-overlapping matches of the pattern in the given text\n    matches = re.finditer(pattern, text)\n\n    # Initialize a list to store the adverb ending and its positions\n    adverbs = []\n\n    # Iterate over all matches and store their positions in the adverbs list\n    for match in matches:\n        adverbs.append((match.start(), match.end()))\n\n    # Return the list of adverb endings and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b\\w*ly\\b'\n\n    # Find all non-overlapping occurrences of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Return a list of tuples containing the position of each adverb and its value\n    return [(match.start(), match) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'(\\w+ly)'\n    matches = re.findall(adverb_pattern, text)\n    return matches\n"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and the number of items to be returned as input.\n    It returns a sorted list of the n most expensive items in the dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    # Iterate over the items list\n    for item in items:\n        # If the heap is empty or if the current item is cheaper than the smallest item in the heap,\n        # add it to the heap. If the heap is full and the current item is cheaper than the smallest\n        # item in the heap, pop the smallest item from the heap and add the current item to the heap.\n        if len(heap) < n or item < heap[0]:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the sorted list of n most expensive items\n    return sorted(heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    # Sort the dataset in descending order of price\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    # Add the n most expensive items to the heap\n    for i in range(n):\n        heapq.heappush(heap, items[i][0])\n\n    # Remove the items from the heap as they are added to the result list\n    for i in range(n, len(items)):\n        heapq.heappop(heap)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function finds the n most expensive items in a given dataset.\n    \n    Args:\n        items (list): A list of items with their respective prices.\n        n (int): The number of most expensive items to be returned.\n        \n    Returns:\n        list: A list of the n most expensive items in the dataset.\n    \"\"\"\n    \n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    \n    # Iterate through the items in the dataset\n    for item, price in items:\n        \n        # If the heap is not full, add the item and its price to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, (-price, item))\n            \n        # If the heap is full, remove the smallest item and add the current item and its price to the heap\n        else:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-price, item))\n            \n    # Return the n most expensive items in the dataset\n    return [price for _, price in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a dataset of items with prices, find the n most expensive items.\n    \"\"\"\n    # create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # iterate through the dataset\n    for item, price in items:\n        # if the heap is full and the price of the current item is higher than the smallest item in the heap\n        if len(min_heap) == n and price > heapq.heappop(min_heap)[1]:\n            # add the new item to the heap\n            heapq.heappush(min_heap, (price, item))\n        # if the heap is not full or the price of the current item is lower than or equal to the smallest item in the heap\n        elif len(min_heap) < n or price <= heapq.heappop(min_heap)[1]:\n            # add the new item to the heap\n            heapq.heappush(min_heap, (price, item))\n\n    # return the n most expensive items in the dataset\n    return [item for price, item in sorted(min_heap, key=lambda x: x[0])]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n to store the n most expensive items\n    max_heap = []\n    # Iterate through the items and add each one to the max heap\n    for item in items:\n        heapq.heappush(max_heap, item)\n        # If the size of the max heap exceeds n, remove the smallest item from it\n        while len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Return the n most expensive items in the dataset\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items based on their prices\n    sorted_items = sorted(items, key=lambda x: x[1])\n    # Create a min heap of size n\n    min_heap = [sorted_items[0]]\n    # Iterate over the sorted items\n    for i in range(1, len(sorted_items)):\n        # If the current item's price is less than the price of the smallest item in the heap,\n        # replace the smallest item in the heap with the current item\n        if sorted_items[i][1] < min_heap[0][1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, sorted_items[i])\n        # If the size of the heap is greater than n, remove the largest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items from the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of n items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items.pop())\n\n    # Add the remaining items to the min heap in descending order of price\n    for item in items:\n        if item[1] > min_heap[0][1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): A list of items with their corresponding prices.\n\n    Returns:\n    list: A list of the n most expensive items.\n\n    '''\n    # Create a min-heap of size n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Extract the n most expensive items from the min-heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a dataset of items and the number of items to be returned.\n    It finds the n most expensive items and returns the item IDs.\n    '''\n    heap = []\n    for i, item in enumerate(items):\n        heapq.heappush(heap, (-item[1], item[0])) # Push the (-price, id) tuple to the heap\n        if len(heap) > n: # If the heap has more than n items, pop the smallest item\n            heapq.heappop(heap)\n\n    result = []\n    for price, id in heap:\n        result.append(id)\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Calculate the length of the list\n    len_l = len(l)\n    # Split the list at the nth element\n    if n < len_l:\n        first_part = l[:n]\n        second_part = l[n:]\n    else:\n        first_part = l\n        second_part = []\n    # Add the first part to the end of the second part\n    second_part = second_part + first_part\n    # Return the final list\n    return second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.insert(n, l.pop(0))\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid input\"\n    else:\n        first_part = l[:n]\n        last_part = l[n:]\n        return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        return None\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # Split the list into two parts\n    part1 = l[:n]\n    part2 = l[n:]\n\n    # Add the first part to the end of the second part\n    result = part2 + part1\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Use list slicing to split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n\n    # Add the first part to the end of the second part and return the final list\n    return part2 + part1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l[0:1] + l[1:]\n    else:\n        return l[n-1] + [x for x in split_Arr(l, n-1) if x is not None]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # calculate the difference between the two values\n    diff = max_val - min_val\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest values.\n    '''\n    # find the maximum value in the list\n    max_val = max(nums)\n    # find the minimum value in the list\n    min_val = min(nums)\n    # calculate the difference between the two values\n    diff = max_val - min_val\n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Find the maximum and minimum value in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # Calculate the difference between the two values\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Find the maximum and minimum values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Calculate the difference between max and min values\n    diff = max_num - min_num\n\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a variable to store the result\n    result = []\n    \n    # Iterate through the numbers between a and b\n    for num in range(a, b + 1):\n        # Check if the number is a perfect square\n        root = num ** 0.5\n        if int(root) ** 2 == num:\n            # If it is, add it to the result list\n            result.append(num)\n            \n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i**2\n        if square == int(square):\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Find the perfect squares between a and b.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        if i*i == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if i ** 2 + j ** 2 == j ** 2:\n                print(i ** 2 + j ** 2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two integers as input and returns a list of all perfect squares between the two numbers.\n    \"\"\"\n    if a < b:\n        a, b = b, a  # swapping a and b if a is smaller than b\n    perfect_squares_list = []\n    for i in range(a, b + 1):\n        square = i * i\n        if square == i:  # checking if the square is equal to its integer part\n            perfect_squares_list.append(square)\n        elif square > i:  # checking if the square is greater than its integer part\n            perfect_squares_list.append(square)\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(int(a), int(b) + 1):\n        if i * i == i:\n            perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n\n    # initialize a list to store perfect squares\n    squares = []\n\n    # loop through all numbers between a and b\n    for i in range(a, b+1):\n\n        # check if i is a perfect square\n        if i == int(i**0.5)**2:\n\n            # add i to the list of perfect squares\n            squares.append(i)\n\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a**0.5), int(b**0.5) + 1):\n        square = i**2\n        if square > b:\n            break\n        squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize an empty list to store perfect squares\n    perfect_squares_list = []\n    # Loop through the numbers from a to b and check if each is a perfect square\n    for num in range(a, b + 1):\n        # Check if the current number is a perfect square\n        is_perfect_square = True\n        # Loop through the square root of the current number and check if any of the numbers in the range are also perfect squares\n        sqrt = int(num ** 0.5)\n        for i in range(1, sqrt + 1):\n            if num % i!= 0:\n                is_perfect_square = False\n                break\n        # If the current number is a perfect square, append it to the list of perfect squares\n        if is_perfect_square:\n            perfect_squares_list.append(num)\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r, theta = cmath.polar(complex(x, y))\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Calculate the absolute value of x and y\n    mag = cmath.sqrt(x**2 + y**2)\n\n    # Calculate the angle of the point in radians\n    angle = cmath.phase(x + y*1j)\n\n    # Convert angle to degrees\n    angle = angle * 180 / cmath.pi\n\n    # Calculate the x and y components of the rectangular coordinate\n    x_rect = mag * cmath.cos(angle)\n    y_rect = mag * cmath.sin(angle)\n\n    # Return the result as a tuple\n    return (x_rect.real, y_rect.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    :param x: input value of radius\n    :type x: float or int\n\n    :param y: input value of angle in radians\n    :type y: float or int\n\n    :return: tuple of x and y coordinates of the rectangular point\n    :rtype: tuple(float, float)\n    \"\"\"\n    x_rect = x * cmath.cos(y)\n    y_rect = x * cmath.sin(y)\n    return (x_rect.real, x_rect.imag)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle from the origin\n    theta (float): The angle from the origin in radians\n\n    Returns:\n    tuple: (x, y): The rectangular coordinates of the point\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): radius\n    theta (float): angle in radians\n\n    Returns:\n    x (float): x coordinate\n    y (float): y coordinate\n    '''\n    # Convert angle to degrees\n    theta_deg = theta*180.0/cmath.pi\n    \n    # Calculate x and y coordinates\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return r * cmath.cos(theta), r * cmath.sin(theta)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Checking if the list has at least two elements\n    if len(newList) >= 2:\n        # Swapping the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List should have at least two elements.\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2: \n        first = newList[0] \n        last = newList[-1] \n        newList[0] = last \n        newList[-1] = first \n        return newList \n    else: \n        print(\"The list should have at least two elements.\") "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is of length 0 or less\n    if len(newList) <= 1:\n        return newList\n    \n    # Swap the first and last elements\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # initialize the sum\n    sum_prod = 0\n    # initialize the count variable\n    count = 0\n    # loop through all possible k values\n    for i in range(n+1):\n        # check if the current k value is greater than the given n\n        if i > k:\n            break\n        # if the current k value is less than or equal to the given n, increment the count and compute the binomial coefficient\n        else:\n            count += 1\n            bin_coeff = (n+1)/(2*i+1)\n            # multiply the count and binomial coefficient and add it to the sum\n            sum_prod += count * bin_coeff\n    # return the sum of the product of consecutive binomial co-efficients\n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    numerator = 1\n    denominator = 1\n\n    for i in range(1, k+1):\n        numerator *= (n-i+1)\n        denominator *= i\n\n    return numerator // denominator"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        print(\"The value of k cannot be greater than n.\")\n        return None\n    else:\n        sum = 0\n        for i in range(k,n+1):\n            sum += binomial_Coeff(n-1,i-1) * binomial_Coeff(i,1)\n        return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 0\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            prod = i*j\n            sum += prod\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 1\n    for i in range(1, k+1):\n        total *= (n-i+1) // i\n    return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1, n+1): \n        for j in range(1, i+1): \n            sum += (i-j+1) * (j * binomial_Coeff(n-1, k-1)) \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two integer arguments n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0 or k > n:\n        return None\n    \n    if k == 0 or k == n:\n        return 1\n    \n    a = n\n    b = k\n    c = 1\n    \n    while b <= a:\n        c = a * c + b * c\n        a -= 1\n        b += 1\n    \n    return c"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): the number of elements in the sequence.\n    k (int): the number of terms to be considered in the sum.\n\n    Returns:\n    float: the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum of the product of consecutive binomial co-efficients\n    sum_product = 0\n\n    # Calculate the binomial coefficient for n and k\n    binomial_coeff = math.factorial(n) // math.factorial(k) // math.factorial(n-k)\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(k,n+1):\n        binomial_coeff *= i\n        binomial_coeff //= (i-k)\n        sum_product += binomial_coeff\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize variables\n    binomial_sum = 0\n    factorial_n = 1\n    factorial_k = 1\n\n    # calculate factorial of n and k\n    for i in range(1, n+1):\n        factorial_n *= i\n\n    for j in range(1, k+1):\n        factorial_k *= j\n\n    # calculate binomial coefficient\n    binomial_coeff = factorial_n // (factorial_k * factorial_n // factorial_k)\n\n    # calculate sum of product of consecutive binomial coefficients\n    for i in range(k+1, n+1):\n        binomial_sum += binomial_coeff * factorial_n // (factorial_i * factorial_n // factorial_i)\n\n    return binomial_sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        coeff = 1\n        for i in range(k):\n            coeff *= (n - i) // i\n        return coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # check if the input is a valid ip address\n    pattern = r\"^(\\d{1,3}\\.){3}\\d{1,3}$\"\n    if not re.match(pattern, ip):\n        return \"Invalid IP address\"\n    \n    # remove leading zeroes from each octet\n    octets = ip.split('.')\n    new_octets = []\n    for octet in octets:\n        new_octet = re.sub(r'^\\s+|(\\s+)$', '', octet)\n        new_octets.append(new_octet)\n    \n    # join the new octets back into an ip address string\n    new_ip = '.'.join(new_octets)\n    \n    # return the new ip address string\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression pattern for matching ip address\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n\n    # Check if the input string matches the pattern\n    if not re.match(pattern, ip):\n        raise ValueError('Invalid IP address format')\n\n    # Split the input string into four parts\n    ip_parts = ip.split('.')\n\n    # Remove leading zeroes from each part\n    for i in range(len(ip_parts)):\n        if ip_parts[i] == '0' and len(ip_parts[i]) == 1:\n            continue\n        else:\n            ip_parts[i] = ip_parts[i][1:]\n\n    # Join the parts back into a string\n    return '.'.join(ip_parts)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0+(?=\\d\\.))', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from IP address using regular expressions\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    ip = re.sub(pattern, lambda match: match.group().lstrip('0'), ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$'\n    if re.match(pattern, ip):\n        return re.sub(r'^(0){1,3}', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n    \"\"\"\n    ip = re.sub(r'^\\s*(0\\.0\\.0\\.0|0\\.0\\.0\\.)|(\\.0\\.0\\.0|\\.0\\.0\\.)|(\\.0$)', '', ip)\n    ip = re.sub(r'^\\s*(0\\.0\\.0\\.0|0\\.0\\.0\\.)|(\\.0\\.0\\.0|\\.0\\.0\\.)|(\\.0$)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define regular expression pattern for ip address\n    pattern = r'\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b'\n    \n    # match pattern in ip address and replace leading zeroes with empty string\n    return re.sub(pattern, '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = lst[0]\n    odd = lst[1]\n    \n    if even % 2 == 0 and odd % 2 == 0:\n        diff = even - odd\n    elif even % 2!= 0 and odd % 2!= 0:\n        diff = odd - even\n    else:\n        diff = 0\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n\n    if first_even is not None and first_odd is not None:\n        diff = first_even - first_odd\n        return diff\n    else:\n        return \"There is no even and odd number in the list.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0:\n        even = 0\n    else:\n        even = 1\n    if odd % 2 == 0:\n        odd = 0\n    else:\n        odd = 1\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n    for j in range(len(even_odd)):\n        if j == 0:\n            even_odd_diff = even_odd[1] - even_odd[0]\n        else:\n            even_odd_diff = even_odd[j] - even_odd[j-1]\n        return even_odd_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize the first even and first odd numbers to None\n    even = None\n    odd = None\n\n    # Iterate over the list to find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 == 1 and odd is None:\n            odd = num\n\n    # Calculate the difference of the even and odd numbers\n    if even is not None and odd is not None:\n        return abs(even - odd)\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a list.\n    \"\"\"\n    even_found = False\n    odd_found = False\n    result = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            if not even_found:\n                even_found = True\n                odd_found = False\n            elif even_found:\n                result = num - result\n    \n    if even_found:\n        result = num - result\n    \n    return result"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0:\n        even_diff = even_num - odd_num\n    else:\n        even_diff = odd_num - even_num\n    \n    return even_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if the input list is empty\n    if len(list1) == 0:\n        return 'Input list is empty'\n\n    # iterate over the list to find the first even and first odd number\n    first_even = None\n    first_odd = None\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if first_even is None:\n                first_even = i\n            elif first_odd is None:\n                first_odd = i\n                break\n\n    # if both the even and odd numbers are not found, return an error message\n    if first_even is None and first_odd is None:\n        return 'Input list does not contain any even or odd number'\n\n    # calculate the difference of the first even and first odd number\n    diff = abs(first_even - first_odd)\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    elif len(list1) == 2:\n        if list1[0] % 2 == 0:\n            return list1[1] - list1[0]\n        else:\n            return list1[0] - list1[1]\n    else:\n        for i in range(1, len(list1), 2):\n            if list1[i] % 2 == 0:\n                first_even = list1[i]\n            else:\n                first_odd = list1[i]\n        return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the difference of the first even and first odd number of the list.\n    '''\n    even = None\n    odd = None\n    \n    for num in lst:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2!= 0 and odd is None:\n            odd = num\n            \n    if even is None or odd is None:\n        return 'List does not contain at least two even or odd numbers.'\n    \n    return even - odd"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \n    Args:\n    str1 (str): Binary string to be converted\n    str2 (str): Binary string to be converted\n    \n    Returns:\n    int: Minimum number of swaps required to convert one binary number to another\n    \n    \"\"\"\n    # Converting the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Flipping the bits of the binary strings\n    temp1 = bin(num1)[2:]\n    temp2 = bin(num2)[2:]\n\n    # Finding the length of the binary strings\n    n1 = len(temp1)\n    n2 = len(temp2)\n\n    # Initializing the variables for swaps\n    swaps = 0\n    temp1_len = len(temp1)\n\n    # Transposing the binary strings\n    while temp1_len > 0:\n        if temp1[temp1_len - 1] == '1':\n            temp1 = temp1[:temp1_len - 1] + temp1[temp1_len] + temp1[temp1_len - 1]\n            temp1_len += 1\n            swaps += 1\n        else:\n            temp1 = temp1[:temp1_len - 1] + temp1[temp1_len]\n            temp1_len -= 1\n\n    # Transposing the binary strings again\n    temp1_len = len(temp1)\n    while temp1_len > 0:\n        if temp1[temp1_len - 1] == '1':\n            temp1 = temp1[:temp1_len - 1] + temp1[temp1_len] + temp1[temp1_len - 1]\n            temp1_len += 1\n            swaps += 1\n        else:\n            temp1 = temp1[:temp1_len - 1] + temp1[temp1_len]\n            temp1_len -= 1\n\n    # Finding the length of the transposed binary strings\n    n1_tr = len(temp1)\n\n    # Transposing the binary strings again\n    temp2_len = len(temp2)\n    while temp2_len > 0:\n        if temp2[temp2_len - 1] == '1':\n            temp2 = temp2[:temp2_len - 1] + temp2[temp2_len] + temp2[temp2_len - 1]\n            temp2_len += 1\n            swaps += 1\n        else:\n            temp2 = temp2[:temp2_len - 1] + temp2[temp2_len]\n            temp2_len -= 1\n\n    # Transposing the binary strings again\n    temp2_len = len(temp2)\n    while temp2_len > 0:\n        if temp2[temp2_len - 1] == '1':\n            temp2 = temp2[:temp2_len - 1] + temp2[temp2_len] + temp2[temp2_len - 1]\n            temp2_len += 1\n            swaps += 1\n        else:\n            temp2 = temp2[:temp2_len - 1] + temp2[temp2_len]\n            temp2_len -= 1\n\n    # Finding the length of the transposed binary strings\n    n2_tr = len(temp2)\n\n    # Checking if the transposed binary strings are equal\n    if n1_tr == n2_tr:\n        return swaps\n\n    # Checking if one of the binary strings is equal to its transposed form\n    if (n1_tr == n1 and n2_tr == n2) or (n1_tr == n2 and n2_tr == n1):\n        return swaps\n\n    # Transposing the binary strings\n    while n1_tr < n2_tr:\n        temp1, temp2 = temp2, temp1\n        n1_tr, n2_tr = n2_tr, n1_tr\n\n    # Checking if the transposed binary strings are equal\n    if n1_tr == n2_tr:\n        return swaps\n\n    # Transposing the binary strings\n    temp1, temp2 = temp2, temp1\n    n1_tr, n2_tr = n2_tr, n1_tr\n\n    # Checking if one of the binary strings is equal to its transposed form\n    if (n1_tr == n1 and n2_tr == n2) or (n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize the minimum number of swaps\n    swaps = 0\n    \n    # Iterate over the digits of the binary numbers\n    while num1!= num2:\n        # If the least significant bit of num1 is 1 and the least significant bit of num2 is 0, swap the bits\n        if num1 & 1 and not num2 & 1:\n            num1 = num1 ^ 1\n            num2 = num2 ^ 1\n            swaps += 1\n        # If the least significant bit of num1 is 0 and the least significant bit of num2 is 1, swap the bits\n        elif not num1 & 1 and num2 & 1:\n            num1 = num1 ^ 1\n            num2 = num2 ^ 1\n            swaps += 1\n        # If the least significant bit of both numbers is 0, nothing to swap\n        else:\n            break\n            \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    max_len = max(n, m)\n    dp = [[0] * (max_len + 1) for _ in range(max_len + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j])\n\n    return dp[n][m]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the given binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to keep track of the swaps required\n    swaps = 0\n    temp = num1\n\n    # Perform bitwise XOR operation on the two numbers and find the least significant set bit\n    while temp!= num2:\n        if (temp & 1)!= (num2 & 1):\n            swaps += 1\n        temp >>= 1\n        num2 >>= 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return len(str1) + len(str2)\n    else:\n        i = j = 0\n        while i < len(str1) and j < len(str2):\n            if str1[i]!= str2[j]:\n                if str1[i] == '0':\n                    str1 = str1[:i] + '1' + str1[i+1:]\n                else:\n                    str1 = str1[:i] + '0' + str1[i+1:]\n                if str2[j] == '0':\n                    str2 = str2[:j] + '1' + str2[j+1:]\n                else:\n                    str2 = str2[:j] + '0' + str2[j+1:]\n                i = 0\n                j = 0\n                while i < len(str1) and j < len(str2):\n                    if str1[i]!= str2[j]:\n                        if str1[i] == '0':\n                            str1 = str1[:i] + '1' + str1[i+1:]\n                        else:\n                            str1 = str1[:i] + '0' + str1[i+1:]\n                        if str2[j] == '0':\n                            str2 = str2[:j] + '1' + str2[j+1:]\n                        else:\n                            str2 = str2[:j] + '0' + str2[j+1:]\n                        i = 0\n                        j = 0\n                    i += 1\n                    j += 1\n            else:\n                i += 1\n                j += 1\n        return len(str1) + len(str2)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i] == str2[i]:\n            continue\n        elif str1[i] == \"0\" and str2[i] == \"1\":\n            str1 = str1[:i] + \"1\" + str1[i+1:]\n            str2 = str2[:i] + \"0\" + str2[i+1:]\n            count += 1\n        elif str1[i] == \"1\" and str2[i] == \"0\":\n            str1 = str1[:i] + \"0\" + str1[i+1:]\n            str2 = str2[:i] + \"1\" + str2[i+1:]\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the given strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Find the common set of bits\n    common_bits = 0\n    for i in range(32):\n        if int1 & (1 << i) and int2 & (1 << i):\n            common_bits |= 1 << i\n\n    # Find the minimum number of swaps required to convert the numbers\n    min_swaps = 0\n    for i in range(32):\n        if not (common_bits & (1 << i)):\n            min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Create two arrays to store the binary digits\n    arr1 = [0] * (num1 + 1)\n    arr2 = [0] * (num2 + 1)\n\n    # Convert the integers to binary strings and store in the arrays\n    for i in range(num1 + 1):\n        arr1[i] = bin(i)[2:]\n    for i in range(num2 + 1):\n        arr2[i] = bin(i)[2:]\n\n    # Initialize variables to store the minimum swaps required\n    min_swaps = float('inf')\n    swap_count = 0\n\n    # Traverse the arrays\n    for i in range(num1 + 1):\n        for j in range(num2 + 1):\n            # Compare the binary strings\n            if arr1[i] == arr2[j]:\n                continue\n            elif arr1[i] < arr2[j]:\n                # Swap the digits in the array\n                arr1[i], arr1[j] = arr1[j], arr1[i]\n                arr2[i], arr2[j] = arr2[j], arr2[i]\n                swap_count += 1\n            else:\n                # Check if the swap is required\n                if min_swaps > swap_count:\n                    min_swaps = swap_count\n                    swap_count = 0\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # convert binary strings to binary lists\n    bin1 = [int(i) for i in bin(int(str1, 2))[2:]]\n    bin2 = [int(i) for i in bin(int(str2, 2))[2:]]\n    \n    # find length of shortest binary string\n    len1 = len(bin1)\n    len2 = len(bin2)\n    if len1 < len2:\n        bin1 = bin1 + [0] * (len2 - len1)\n    elif len2 < len1:\n        bin2 = bin2 + [0] * (len1 - len2)\n    \n    # initialize variables for swaps and index of last non-zero digit\n    swaps = 0\n    last_non_zero = -1\n    \n    # iterate through both lists simultaneously\n    for i in range(len(bin1)):\n        if bin1[i]!= bin2[i]:\n            # increment swaps if digits are different\n            swaps += 1\n        else:\n            # update last non-zero index if current digit is non-zero\n            if bin1[i]!= 0:\n                last_non_zero = i\n    \n    # return the minimum number of swaps required\n    return swaps + len(bin2) - last_non_zero - len(bin1)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for track number of swaps\n    count = 0\n    i = 0\n\n    # Iterate through the digits of both binary strings\n    while i < len(str1) or i < len(str2):\n        # Compare the current digits\n        if str1[i]!= str2[i]:\n            # If they are not equal, swap the digits\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            count += 1\n        i += 1\n\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list) == 0:\n        return 0\n    else:\n        element = tuple_list[0]\n        element_size = sys.getsizeof(element)\n        return element_size + tuple_size(tuple_list[1:])"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the variable to store the size in bytes\n    size = 0\n\n    # Loop through each tuple in the list\n    for t in tuple_list:\n        # Get the size of the tuple in bytes\n        size += sys.getsizeof(t)\n\n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert the list to tuple to iterate over the elements\n    tuple_list = tuple(tuple_list)\n\n    # calculate the total size of the tuple\n    total_size = sys.getsizeof(tuple_list)\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # calculate the size of the tuple in bytes\n    size_in_bytes = sys.getsizeof(tuple_list)\n    return size_in_bytes"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if k == 0:\n            return arr1[i-1]\n        k -= 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < k or len(arr2) < k:\n        return None\n    elif k == 1:\n        return min(arr1[0], arr2[0])\n    else:\n        # recursively find the kth element in arr1\n        kth_arr1 = find_kth(arr1[:len(arr1)//2], arr2, k//2)\n\n        # recursively find the kth element in arr2\n        if kth_arr1 is None:\n            kth_arr2 = find_kth(arr1, arr2[:len(arr2)//2], (k//2)+1)\n        else:\n            kth_arr2 = find_kth(arr1[(len(arr1)//2)+1:], arr2, k//2)\n\n        # return the kth element from both arrays\n        return min(kth_arr1, kth_arr2)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # check if k is greater than the total number of elements in the arrays\n    if k > len(arr1) + len(arr2):\n        return None\n    # initialize index of first array and length of second array\n    i = 0\n    j = 0\n    # initialize sum of elements in first array\n    first_sum = 0\n    # initialize sum of elements in second array\n    second_sum = 0\n    # initialize kth element as None\n    kth_elem = None\n    # loop through first array\n    while i < len(arr1):\n        # add current element to sum of elements in first array\n        first_sum += arr1[i]\n        # check if kth element is already found\n        if first_sum >= k:\n            # calculate the kth element using binary search\n            while first_sum - k > second_sum:\n                # calculate the middle index of the first array\n                mid = (i + j) // 2\n                # check if kth element is in the left or right half of the array\n                if arr1[mid] < arr1[i]:\n                    # set first index to middle index + 1\n                    i = mid + 1\n                else:\n                    # set first index to middle index\n                    i = mid\n            # return the kth element\n            kth_elem = arr1[i - 1]\n            break\n        # check if sum of elements in first array exceeds k\n        elif first_sum > k:\n            # set second index to i\n            j = i\n            # calculate sum of elements in second array\n            second_sum += arr1[i]\n        # increment first index\n        i += 1\n    # return the kth element\n    return kth_elem"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    i, j = 0, 0\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            elif k < 0:\n                j += 1\n            else:\n                i += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the maximum length of the array\n    max_length = max(n1, n2)\n\n    # Initialize two pointers to the first element of each array\n    i = 0\n    j = 0\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the array and compare the elements at the pointers\n    while count < k:\n        # If the element at i is smaller, increment the count and move the pointer to the next element\n        if i < n1 and (j >= n2 or arr1[i] < arr2[j]):\n            count += 1\n            i += 1\n        # If the element at j is smaller, move the pointer to the next element\n        else:\n            j += 1\n\n    # If the count is equal to k, return the element at i\n    if count == k:\n        return arr1[i - 1]\n\n    # If the count is less than k, return the element at j\n    else:\n        return arr2[j - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes in two sorted arrays and an integer k\n    and returns the kth element of the merged array.\n    '''\n    i, j = 0, 0\n    merged = []\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    merged += arr1[i:]\n    merged += arr2[j:]\n\n    if k <= len(merged):\n        return merged[k-1]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n                j += 1\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n        if i == k - 1:\n            return arr1[i]\n        elif j == k - 1:\n            return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    while i < len(arr1):\n        if k == 1:\n            return arr1[i]\n        else:\n            k -= 1\n            i += 1\n\n    while j < len(arr2):\n        if k == 1:\n            return arr2[j]\n        else:\n            k -= 1\n            j += 1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments:\n    - arr1: A sorted array\n    - arr2: A sorted array\n    - k: An integer representing the element's position to be found in the sorted array\n\n    This function returns the kth element from the two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number == 0 or number == 1:\n        return True\n\n    num_str = str(number)\n    total = 0\n    power = len(num_str)\n\n    for i in num_str:\n        total += int(i)**power\n\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(number):\n    '''\n    Check whether a given number is an Armstrong number or not.\n    '''\n    # Convert the given number to a string\n    number_str = str(number)\n    # Convert the string to a list of digits\n    digits = list(map(int, number_str))\n    # Calculate the sum of the digits raised to the power of the number of digits\n    total = sum(map(lambda x: x**len(digits), digits))\n    # Compare the original number with the sum\n    return number == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    sum_of_digits = 0\n    num_str = str(number)\n    length = len(num_str)\n    \n    for i in range(length):\n        digit = num_str[i]\n        power = length - i - 1\n        sum_of_digits += int(digit) ** power\n    \n    return number == sum_of_digits"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number)) == 1:\n        return True\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** len(str(number))\n            temp //= 10\n        return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    \"\"\"\n    # Calculate the length of the number\n    length = len(str(number))\n    \n    # Iterate over the digits of the number\n    total = 0\n    for digit in str(number):\n        # Convert the digit to an integer and add it to the total\n        total += int(digit) ** length\n        \n    # Compare the total with the original number\n    if total == number:\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number else False.\n    \"\"\"\n    # Convert the number to a string\n    num = str(n)\n\n    # Calculate the sum of the squares of each digit\n    square_sum = sum([int(digit) ** len(num) for digit in num])\n\n    # Compare the sum with the original number\n    return square_sum == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a string\n    number_string = str(number)\n    # calculate the sum of the power of each digit in the number\n    sum = 0\n    for digit in number_string:\n        digit = int(digit)\n        sum += digit ** len(number_string)\n    # compare the sum with the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check if a given number is Armstrong or not.\n    \"\"\"\n    total = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    if n == total:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Function to check whether the given number is armstrong or not.\n    \"\"\"\n    s = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        s += digit ** 3\n        temp //= 10\n    return n == s"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Helper function to check if a number is armstrong or not\n    \"\"\"\n    num_str = str(num)\n    num_digits = len(num_str)\n    num_sum = 0\n    num_temp = num\n\n    while num_temp > 0:\n        digit = num_temp % 10\n        num_sum += digit ** num_digits\n        num_temp //= 10\n\n    if num == num_sum:\n        return True\n    else:\n        return False\n\ndef armstrong_number(number):\n    \"\"\"\n    Check whether the given number is armstrong or not\n    \"\"\"\n    if number < 10:\n        return False\n\n    num_str = str(number)\n    num_digits = len(num_str)\n    num_sum = 0\n    num_temp = number\n\n    while num_temp > 0:\n        digit = num_temp % 10\n        num_sum += digit ** num_digits\n        num_temp //= 10\n\n    if num_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    total = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n\n    average = total / count\n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i + 1\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # initialize variables to keep track of sum and sum of squares\n    sum_total = 0\n    sum_squares_total = 0\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add each number to the sum and sum of squares\n        sum_total += i\n        sum_squares_total += i**2\n    # calculate the average\n    average = sum_total / n\n    # calculate the sum of squares of the first n natural numbers\n    sum_squares_of_first_n = sum_squares_total / n\n    # return the sum and average as a tuple\n    return (sum_total, average, sum_squares_of_first_n)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n\nprint(sum_average(5)) # Output: (15, 3.0)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # iterate through first n natural numbers\n    for i in range(1, n+1):\n        # add each number to the sum and increment count\n        sum += i\n        count += 1\n    \n    # calculate and print the sum and average\n    average = sum / count\n    print(\"The sum of the first\", n, \"natural numbers is:\", sum)\n    print(\"The average of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_n = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_n += i\n        count += 1\n    average = sum_n / count\n    return sum_n, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n) : \n\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0 : \n        print(n, \"is even\") \n    else : \n        print(n, \"is odd\") \n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2) == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return \"The number is Even\"\n    else:\n        return \"The number is Odd\""
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if it is even, False otherwise.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize the dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterate through the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # initialize the repeated character variable\n    repeated_char = None\n\n    # iterate through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            repeated_char = char\n            break\n\n    # return the repeated character\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character with a count greater than 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no character has a count greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create an empty dictionary to store the count of characters in the string\n    char_count = {}\n    \n    # Iterate through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character in the string\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # iterate through each character in the string again\n    for char in str1:\n        # if the character is in the dictionary and its count is greater than 1, return the character\n        if char in char_count and char_count[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through the string and update the count for each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # find the first repeated character by looping through the dictionary\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # find the first repeated character in the dictionary\n    for char, count in freq_dict.items():\n        if count == 2:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [1]\n    for i in range(2, n):\n        ludic_numbers.append(ludic_numbers[-1] * 3 + 1)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n    # Iterate from 0 to n\n    for i in range(n+1):\n        # Check if the current number is a lucid number\n        if i**2 <= n:\n            # Add the lucid number to the list\n            lucid_numbers.append(i**2)\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid_numbers.append(i)\n    return lucid_numbers\n\nprint(get_ludic(10))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list to store the lucid numbers\n    lucids = []\n    # Loop through all numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a lucid number\n        is_lucid = True\n        # Loop through all factors of the number\n        for factor in range(2, num):\n            # If the factor divides the number, then the number is not a lucid number\n            if num % factor == 0:\n                is_lucid = False\n                break\n        # If the number is a lucid number, add it to the list\n        if is_lucid:\n            lucids.append(num)\n    # Return the list of lucid numbers\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 0\n    while True:\n        if i * i <= n:\n            lucid_numbers.append(i * i)\n            i += 1\n        else:\n            break\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucids = []\n    i = 1\n    while i <= n:\n        lucid = i\n        while lucid % 2 == 0:\n            lucid //= 2\n        if lucid == 1:\n            break\n        lucids.append(lucid)\n        i += 1\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            ludic_numbers.append(i**2)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = [2]\n    while True:\n        lucid_numbers.append(lucid_numbers[-1] + lucid_numbers[-2])\n        if lucid_numbers[-1] > n:\n            break\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    ludics = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)):\n        word = words[i][::-1]\n        reversed_words.append(word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # Split the string into words\n    reversed_words = words[::-1]  # Reverse the order of words\n    reversed_string =''.join(reversed_words)  # Join the reversed words back into a string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back together\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n        \n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)//2):\n        words[i], words[-1-i] = words[-1-i], words[i]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into words\n    reversed_words = words[::-1]  # reverse the order of the words\n    return''.join(reversed_words)  # join the reversed words back into a string with spaces between\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back into a string with spaces in between\n    result =''.join(words)\n    return result"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number,\n    else it returns False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number,\n    else it returns False.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number, otherwise returns False.\n    \"\"\"\n\n    # check if num is less than 2\n    if num < 2:\n        return False\n    \n    # check if num is divisible by 2 or 3\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    # loop through odd numbers from 5 to num/2\n    for i in range(5, int(num**0.5)+1, 2):\n        # check if num is divisible by i\n        if num % i == 0:\n            return False\n    \n    # if none of the above conditions were true, then num is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    else:\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is equal to 2\n    elif num == 2:\n        return True\n    # check if the number is divisible by any number less than 2\n    elif num % 2 == 0:\n        return False\n    # check if the number is odd\n    else:\n        # loop through all numbers from 3 to the square root of the number\n        for i in range(3, int(num**0.5)+1, 2):\n            # check if the number is divisible by the current number\n            if num % i == 0:\n                return False\n        # if the loop completes without finding a divisor, the number is prime\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches for a regex pattern in a given text and returns the matching substring and its start and end indices.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append(match.group())\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[0].end()\n        literal = matches[0]\n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Compile the regex pattern\n    pattern_obj = re.compile(pattern)\n\n    # Find all matches in the string\n    matches = pattern_obj.finditer(text)\n\n    # Initialize an empty list to store the matches\n    found_matches = []\n\n    # Iterate over all matches and add them to the list\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        found_matches.append((match.group(), start_index, end_index))\n\n    return found_matches"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.findall(pattern, text)\n\n    if not matches:\n        return None\n\n    # Get the first match and its start and end indices\n    match = matches[0]\n    start_index = text.index(match)\n    end_index = start_index + len(match)\n\n    # Return the match, start index, and end index\n    return match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match_num, match in enumerate(matches, start=1):\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Match {match_num}: Literal: {literal}, Start Index: {start_index}, End Index: {end_index}\")\n    return literal, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        literal = text[start:end]\n        print(f\"Found literal: {literal}\")\n        return literal, start, end"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * bell_Number(n - 1) + bell_Number(n - 2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 1\n    else:\n        return (2 ** n) * (n * (n + 1)) // 2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    This function will find nth bell number using the formula:\n    1/2 * sqrt(5) * (sin(n*pi/2) + sin((n+1)*pi/2)) \n    '''\n\n    import math\n\n    # Function to calculate sin(n*pi/2)\n    def sin_n_pi_2(n):\n        return math.sin(n*math.pi/2)\n\n    # Function to calculate sin((n+1)*pi/2)\n    def sin_n_pi_2_plus_one(n):\n        return math.sin((n+1)*math.pi/2)\n\n    # Function to calculate sqrt(5)\n    def sqrt_5():\n        return math.sqrt(5)\n\n    # Function to calculate 1/2 * sqrt(5) * (sin(n*pi/2) + sin((n+1)*pi/2))\n    def bell_number(n):\n        return (1/2 * sqrt_5()) * (sin_n_pi_2(n) + sin_n_pi_2_plus_one(n))\n\n    # Calculate the nth bell number\n    result = bell_number(n)\n\n    return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0: \n        return \"Invalid input\" \n    elif n == 0: \n        return 0 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2) + 2*bell_Number(n-3)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    This function will find the nth Bell number using the formula:\n\n    Bell Number = (n * (2n + 1)) / 2^n\n\n    For example:\n\n    Bell Number of 1 = (1 * (2*1 + 1)) / 2^1 = 2\n\n    Bell Number of 2 = (2 * (2*2 + 1)) / 2^2 = 10\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        bell_num = (n * (2 * n + 1)) / 2 ** n\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function calculates the nth Bell number using the formula:\n\n    B(n) = phi^n / (sqrt(5) * psi^n)\n\n    where phi = (1 + sqrt(5)) / 2, psi = (1 - sqrt(5)) / 2.\n\n    Args:\n        n (int): the value of n for which to find the Bell number.\n\n    Returns:\n        float: the nth Bell number.\n    \"\"\"\n    phi = (1 + 5**(0.5)) / 2\n    psi = (1 - 5**(0.5)) / 2\n    return round(phi ** n / (5**(0.5) * psi ** n), 6)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L >= len(list1):\n        return []\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i == k:\n            list1.pop(i)\n        else:\n            k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and the position of the element to be removed as input and returns a new list with the removed element.\n    '''\n    return [x for i, x in enumerate(list1) if i!= L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove the k'th element from the list\n    list1.pop(L-1)\n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) <= L:\n        return list1\n    else:\n        return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[:-1]\n    else:\n        L_minus_1 = L - 1\n        kth_element = list1[L_minus_1]\n        return [x for x in list1 if x!= kth_element]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    count = 0\n    for i in list1:\n        if count == k-1:\n            list1.remove(i)\n        else:\n            count += 1\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Check if the length of the list is less than or equal to L\n    if len(list1) <= L:\n        return list1\n    # Initialize the kth index and the length of the list\n    kth_index = len(list1) - L\n    length = len(list1)\n    # Create a new list to store the modified list\n    new_list = []\n    # Loop through the original list and append the elements to the new list, except for the kth element\n    for i in range(length):\n        if i!= kth_index:\n            new_list.append(list1[i])\n    # Return the new list\n    return new_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max to the first element in the column\n    max_element = test_list[0][N-1]\n    # iterate over the remaining elements in the column\n    for i in range(1, len(test_list)):\n        # compare the current element to the max element\n        if test_list[i][N-1] > max_element:\n            # update the max element\n            max_element = test_list[i][N-1]\n    # return the max element\n    return max_element"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize an empty list to hold the max values\n    max_vals = []\n    \n    # Loop through each row of the matrix\n    for row in test_list:\n        # Append the nth column's value to the max_vals list\n        max_vals.append(row[N-1])\n    \n    # Return the maximum value from the max_vals list\n    return max(max_vals)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = []\n    for row in test_list:\n        max_col.append(max(row[N-1:]))\n    return max(max_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the length of the matrix\n    m = len(test_list)\n    \n    # Check if then'th column exists in the matrix\n    if N > m:\n        print(\"Error: n is greater than the number of columns in the matrix\")\n        return None\n    \n    # Initialize the max value to be negative infinity\n    max_val = float('-inf')\n    \n    # Loop through each row in the matrix\n    for i in range(m):\n        \n        # Get the value of then'th column in the i-th row\n        val = test_list[i][N-1]\n        \n        # Check if the value is greater than the current max value\n        if val > max_val:\n            max_val = val\n            \n    # Return the max value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col = [row[N-1] for row in test_list]\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # create a list of tuples to store the indices of the Nth column\n    nth_col_indices = [(row_index, N) for row_index in range(len(test_list)) for col_index in range(len(test_list[row_index])) if col_index == N-1]\n    \n    # find the maximum value of the Nth column and return it\n    return max([test_list[row_index][col_index] for row_index, col_index in nth_col_indices])"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # transpose the matrix\n    transposed_matrix = [[row[N-1] for row in test_list] for i in range(len(test_list[0]))]\n    \n    # get the maximum value in each column\n    max_values = [max(column) for column in transposed_matrix]\n    \n    # find the index of the maximum value in each column\n    max_values_indices = [test_list[i].index(max_values[i]) for i in range(len(max_values))]\n    \n    # return the index of the maximum value in each column\n    return max_values_indices"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    # Get the number of columns in the matrix\n    num_cols = len(test_list[0])\n\n    # Loop through the matrix and find the max of then'th column\n    max_value = None\n    for row in test_list:\n        if N >= len(row):\n            # If the Nth column is out of range, skip it\n            continue\n        if max_value is None or row[N] > max_value:\n            max_value = row[N]\n\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(0, len(lst), 2):\n        result.append([lst[i][0], lst[i+1][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(0, len(lst), 2):\n        sub_lst = [lst[i][0], lst[i+1][1]]\n        merged_lst.append(sub_lst)\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in lst:\n        merged_lst.append([i[0], i[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n    \n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # If the tuple is empty, skip it\n        if tup == ():\n            continue\n        \n        # Initialize the sum to 0\n        sum = 0\n        \n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the sum\n            sum += val\n            \n        # Add the sum to the cumulative sum list\n        cum_sum.append(sum)\n    \n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            cum_sum += test_list[j][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n        test_list[i] = (test_list[i][0], total)\n    return test_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the sum variable to zero\n    cum_sum = 0\n    # iterate over the list of tuples\n    for item in test_list:\n        # get the value of the current item\n        value = item[1]\n        # add the value to the cumulative sum\n        cum_sum += value\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for i in num:\n            total += i\n        result.append(total/len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for n in num:\n            sum += n\n        result.append(sum / len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        average = total/count\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        sum_ = 0\n        for j in range(len(nums[i])):\n            sum_ += nums[i][j]\n        result.append(sum_ / len(nums[i]))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        total = sum(i)\n        average = total / len(i)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for tup in nums:\n        total += sum(tup)\n        count += 1\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        avg_list.append(sum(i)/len(i))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        if isinstance(num, tuple):\n            temp = []\n            for sub_num in num:\n                temp.append(sub_num)\n            result.append(sum(temp) / len(temp))\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length to perform modulo operation.\")\n        return\n    \n    mod_tup = ()\n    for i in range(len(test_tup1)):\n        mod_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return mod_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    modulo_tup = []\n    for i in range(len(test_tup1)):\n        modulo_tup.append(test_tup1[i] % test_tup2[i])\n    \n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should be of the same length\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be the same.\")\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of same length.\")\n        return None\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] % test_tup2[i])\n        return tuple(result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    i = 0\n    j = 0\n    current_pos = 0\n    \n    while i < steps:\n        if current_pos == 0:\n            count += 1\n            current_pos += d\n        else:\n            if j > 0:\n                j -= 1\n            else:\n                count += 1\n                current_pos += d\n                i += 1\n        \n        if current_pos == 0:\n            count += 1\n            current_pos += d\n        \n        i += 1\n        j += 1\n        \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize a variable to store the number of jumps required\n    jumps = 0\n    # iterate through all possible starting positions and check if each one can be reached with a single jump\n    for i in range(d, -1, -1):\n        # check if the starting position can be reached with a single jump\n        if i <= steps:\n            # increment the number of jumps required\n            jumps += 1\n            # check if the starting position can be reached with a double jump\n            if i <= (steps - d):\n                # increment the number of jumps required\n                jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "The time complexity of this approach is O(n*m) where n and m are the dimensions of the 2D plane. The space complexity of this approach is also O(n*m) as we are storing the minimum number of jumps required for all (x, y) values of x and y."
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current = 0\n    height = 0\n    step = 0\n    while current < steps:\n        height += 1\n        if current > 0 and height >= d:\n            jumps += 1\n            height -= 1\n        current += step\n        step += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    # Initializing the variables\n    jumps = 0\n    i = 0\n    j = 0\n    # Calculating the number of jumps\n    while i < steps and j < steps:\n        if j == steps - 1:\n            jumps += 1\n            j += 1\n        elif abs(d) <= i:\n            j += 1\n        else:\n            i += 1\n    # Returning the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    i = 0\n    x = 0\n    y = 0\n    \n    # Calculate the number of jumps required for each step\n    while i < steps:\n        count += 1\n        # Move to the next point\n        x += 1\n        y += d\n        # Check if we have reached the destination\n        if y == 0:\n            return count\n        # Move to the next step\n        i += 1\n    \n    # If we reach this point, then we have not reached the destination\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    # Iterate through each step and check if we reach (d, 0)\n    for i in range(1, steps + 1):\n        # If we reach (d, 0), add 1 to the jump count\n        if i * d == 0:\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_pos = (0, 0)\n    remaining_steps = steps\n    while remaining_steps > 0:\n        steps_taken = min(remaining_steps, abs(d))\n        remaining_steps -= steps_taken\n        current_pos = (current_pos[0] + d, current_pos[1])\n        if current_pos[0] == 0 and current_pos[1] == 0:\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # create a 2d list with steps[i][j] as the cost of going from (i, j) to (d, 0)\n    cost = [[0 for j in range(d+1)] for i in range(steps+1)]\n\n    # initialize the first row and column with values\n    cost[0][0] = 0\n    cost[0][1] = steps\n\n    # loop through the remaining rows\n    for i in range(1, steps+1):\n\n        # loop through the remaining columns\n        for j in range(1, d+1):\n            # calculate the minimum cost to reach (d, 0) from (i, j)\n            min_cost = float('inf')\n            if j-1 >= 0:\n                min_cost = min(min_cost, cost[i-1][j-1])\n            if j+1 <= d:\n                min_cost = min(min_cost, cost[i-1][j+1])\n            # add the cost of going from (i, j) to (d, 0) to the minimum cost\n            min_cost += steps\n            # update the cost of going from (i, j) to (d, 0)\n            cost[i][j] = min_cost\n\n    # return the minimum number of jumps required to reach (d, 0) from origin\n    return cost[-1][-1]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(num1/num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input, nums1 and nums2, and divides each corresponding element of each list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The lists have different lengths.\")\n        return\n    \n    # divide each element of the lists element wise\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"The second list cannot contain zero.\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(f\"Error: Cannot divide {nums1[i]} by {nums2[i]}\")\n            return\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store the numbers\n    num_str = \"\"\n    # Initialize a flag to keep track of the position of the last digit\n    is_last_digit = False\n    # Loop through each character in the input string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it's a digit, append it to the num_str string and set the is_last_digit flag to True\n            num_str += char\n            is_last_digit = True\n        # If the character is not a digit, check if the is_last_digit flag is True\n        elif is_last_digit:\n            # If it's True, append it to the beginning of the num_str string and set the is_last_digit flag to False\n            num_str = char + num_str\n            is_last_digit = False\n        # If the character is neither a digit nor the is_last_digit flag is False, append it to the num_str string\n        else:\n            num_str += char\n    # Return the modified string with all the numbers moved to the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list of digits and spaces\n    digit_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    space_list = [' ','']\n    # create an empty list to store the digits and spaces\n    move_list = []\n    # iterate through each character in the string\n    for char in test_str:\n        # check if the character is a digit or space\n        if char in digit_list:\n            # add the digit or space to the move list\n            move_list.append(char)\n        elif char in space_list:\n            # if the character is a space, append it to the move list\n            move_list.append(char)\n        else:\n            # if the character is not a digit or space, skip it\n            pass\n    # reverse the move list so that the digits are moved to the end of the string\n    move_list.reverse()\n    # join the move list back into a string and return it\n    return ''.join(move_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [char for char in test_str if char.isdigit()]\n    new_str = ''.join([char for char in test_str if not char.isdigit()])\n    new_str += ''.join(nums)\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize two pointers, one for the beginning of the string and another for the end of the string\n    start = 0\n    end = len(test_str) - 1\n    \n    # Move all the numbers to the end of the string\n    while start < end:\n        if test_str[start].isdigit():\n            # If the current character is a number, move it to the end of the string\n            test_str = test_str[:start] + test_str[start:end+1] + test_str[end+1:]\n            # Move the pointers\n            start += 1\n            end -= 1\n        else:\n            # If the current character is not a number, move it to the next character\n            start += 1\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to a list of characters\n    test_list = list(test_str)\n    # Initialize a variable to keep track of the number of numbers\n    count = 0\n    # Loop through each character in the list\n    for i in range(len(test_list)):\n        # If the current character is a number, move it to the end of the list\n        if test_list[i].isdigit():\n            test_list.append(test_list.pop(i))\n            count += 1\n    # If no numbers were found, return the original string\n    if count == 0:\n        return test_str\n    # Otherwise, join the list of characters and return the result\n    else:\n        return ''.join(test_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize two pointers, one to the left and the other to the right\n    left = 0\n    right = len(test_str) - 1\n\n    # while left pointer is less than right pointer\n    while left < right:\n        # if the character at the left pointer is a number\n        if test_str[left].isdigit():\n            # move the number to the right pointer\n            while right >= left and test_str[right].isdigit():\n                right -= 1\n\n            # move the number to the left pointer\n            while test_str[left].isdigit():\n                test_str = test_str[:left] + test_str[right+1:]\n                left += 1\n\n            # move the number to the right pointer\n            while right >= left and test_str[right].isdigit():\n                right -= 1\n\n        # move the character to the left pointer\n        left += 1\n\n    # return the modified string\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    for num in nums:\n        test_str = test_str.replace(num, '', 1)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize variables\n    num_found = False\n    num_str = ''\n    move_str = ''\n\n    # iterate through the string\n    for char in test_str:\n        # if a number is found, add it to the number string\n        if char.isdigit():\n            num_str += char\n            num_found = True\n        # if a non-number character is found, add it to the move string\n        else:\n            move_str += char\n\n    # if a number was found, move it to the end of the string\n    if num_found:\n        num_str = int(num_str)\n        move_str = num_str + move_str\n        move_str = str(move_str)\n\n    # return the final string\n    return move_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store numbers\n    num_str = \"\"\n    # iterate over each character in the input string\n    for char in test_str:\n        # if the character is a number, add it to the num_str\n        if char.isdigit():\n            num_str += char\n        # otherwise, add the character to the output string\n        else:\n            # check if num_str is not empty, if so, add the number to the output string\n            if num_str!= \"\":\n                test_str = test_str[:test_str.index(num_str)] + num_str + test_str[test_str.index(num_str):]\n                num_str = \"\"\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize variables for tracking number and letter positions\n    number_pos = 0\n    letter_pos = 0\n\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If we encounter a number, move it to the end of the string and increment the number position\n        if test_str[i].isdigit():\n            test_str = test_str[:number_pos] + test_str[i] + test_str[number_pos+1:]\n            number_pos += 1\n        # If we encounter a letter, move it to the end of the string and increment the letter position\n        elif test_str[i].isalpha():\n            test_str = test_str[:letter_pos] + test_str[i] + test_str[letter_pos+1:]\n            letter_pos += 1\n\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    # Initialize variables\n    max_size = 1\n    current_size = 1\n    subset = [a[0]]\n\n    # Loop through each element of the list\n    for i in range(1, len(a)):\n        # If the current element is divisible by the next element in the subset,\n        # add the current element to the subset and update the size of the subset.\n        if a[i] % subset[-1] == 0:\n            subset.append(a[i])\n            current_size += 1\n        # Otherwise, if the subset is larger than the current size, update the maximum size and subset.\n        elif current_size > max_size:\n            max_size = current_size\n            subset = [a[i]]\n            current_size = 1\n        # Otherwise, if the subset is the same size as the current size, add the current element to the subset.\n        else:\n            subset.append(a[i])\n            current_size += 1\n\n    # Return the maximum size of the largest subset.\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers\n    a.sort()\n    # Initialize variables\n    max_length = 1\n    current_length = 1\n    # Iterate over the list and add 1 to current_length for each even number and 0 for odd numbers\n    for num in a:\n        if num % 2 == 0:\n            current_length += 1\n        else:\n            current_length = 1\n        # Update the maximum length if the current length is greater than the maximum length\n        if current_length > max_length:\n            max_length = current_length\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    if n < 2:\n        return 0\n    res = 1\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[i] % a[j]!= 0:\n            j += 1\n        res = max(res, j - i)\n        i = j\n    return res"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n    n = len(a)\n    dp = [0] * n  # Initialize a list of size n to store the size of the largest subset for each index in the list\n    \n    # Initialize the largest subset size to 0\n    max_size = 0\n    \n    # Traverse through the list and calculate the size of the largest subset that is divisible by every other element\n    for i in range(n):\n        # Check if the current element is divisible by every other element\n        if a[i] % 2 == 0:\n            # Find the smallest element that is evenly divisible by the current element\n            j = i\n            while j < n and a[j] % 2 == 0:\n                j += 1\n            # Calculate the size of the largest subset that is divisible by every other element\n            dp[i] = j - i\n            # Update the largest subset size if necessary\n            max_size = max(max_size, dp[i])\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    largest_subset = []\n    current_subset = []\n    \n    for num in a:\n        if not current_subset or current_subset[-1] % num == 0:\n            current_subset.append(num)\n        else:\n            largest_subset.append(len(current_subset))\n            current_subset = [num]\n    \n    if current_subset:\n        largest_subset.append(len(current_subset))\n    \n    return max(largest_subset)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the given list in ascending order\n    a.sort()\n    # Initialize the maximum size of the subset and the current size of the subset\n    max_size = 1\n    current_size = 1\n    # Iterate through the list\n    for i in range(1, len(a)):\n        # If the next number in the list is not divisible by the previous number, add 1 to the current size of the subset\n        if a[i] % a[i-1]!= 0:\n            current_size += 1\n        # If the current size of the subset becomes greater than the maximum size, update the maximum size\n        elif current_size > max_size:\n            max_size = current_size\n        # If the current size of the subset is equal to the maximum size, increase the maximum size\n        elif current_size == max_size:\n            max_size += 1\n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Calculate the set of numbers that can be divided by every number in a\n    divisors = {x for x in range(1, max(a) + 1) if all(a[i] % x == 0 for i in range(len(a)))}\n\n    # Initialize the maximum subset size and the set of numbers in the subset\n    max_size = 0\n    subset = set()\n\n    # Iterate over all pairs of numbers in a\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            # Calculate the number of common divisors between the pair and the divisors set\n            common_divisors = len([x for x in divisors if x in set(str(a[i]) + str(a[j]))])\n\n            # Update the maximum subset size if the current pair can be added to the subset\n            if common_divisors > max_size:\n                max_size = common_divisors\n                subset = {a[i], a[j]}\n\n    # Return the maximum subset size and the set of numbers in the subset\n    return max_size, subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    # Helper function to check if a list is divisible by another list\n    def is_divisible(subset, divisor):\n        for i in range(len(subset)):\n            if subset[i] % divisor!= 0:\n                return False\n        return True\n\n    # Initialize variables for the largest subset and the length of the subset\n    largest_subset = [1, 2]\n    length = 2\n\n    # Loop through the list of numbers and check if each pair is divisible\n    for num in a:\n        for subset in largest_subset:\n            if subset == num % 2:\n                if is_divisible(subset, num):\n                    if len(subset) + 1 > length:\n                        largest_subset = [num]\n                        length = len(subset) + 1\n                else:\n                    break\n\n    return length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in descending order\n    a.sort(reverse=True)\n    \n    # Initialize variables\n    max_subset = 0\n    prev_subset = []\n    \n    # Iterate through the list\n    for num in a:\n        # Check if the current number is divisible by the previous subset\n        if num % prev_subset[-1] == 0:\n            # If yes, add the number to the current subset and update max_subset\n            max_subset += 1\n            prev_subset.append(num)\n        else:\n            # If no, start a new subset with the current number\n            max_subset = 1\n            prev_subset = [num]\n    \n    return max_subset"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n\n    # Calculate the median\n    mid = len(merged_arr) // 2\n    if len(merged_arr) % 2 == 0:\n        median = (merged_arr[mid - 1] + merged_arr[mid]) / 2\n    else:\n        median = merged_arr[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays into one sorted array\n    merged = arr1 + arr2\n\n    # Sort the merged array\n    merged.sort()\n\n    # Find the middle element\n    mid = n // 2\n\n    # If n is even, find the median as (m+1)/2\n    if n % 2 == 0:\n        return (merged[mid-1] + merged[mid]) / 2\n\n    # If n is odd, find the median as m\n    else:\n        return merged[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Concatenate the two arrays and sort it\n    arr = arr1 + arr2\n    arr.sort()\n    \n    # If the length of the array is odd, the median is the middle element\n    if len(arr) % 2 == 1:\n        return arr[len(arr)//2]\n    \n    # If the length of the array is even, the median is the average of the two middle elements\n    else:\n        return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one sorted list\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Find the median index\n    if n % 2 == 0:\n        mid = n // 2\n        print(\"The median is: \", arr[mid - 1], \" and \", arr[mid])\n    else:\n        mid = n // 2\n        print(\"The median is: \", arr[mid])\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists and their lengths as parameters\n    and returns the median of the two lists.\n    '''\n    if n % 2 == 1:\n        # Calculate the median of odd-length lists\n        mid1 = n // 2\n        mid2 = n // 2\n        if arr1[mid1] <= arr2[mid2]:\n            return arr1[mid1]\n        else:\n            return arr2[mid2]\n    else:\n        # Calculate the median of even-length lists\n        mid1 = n // 2\n        mid2 = mid1 - 1\n        if arr1[mid1] <= arr2[mid2]:\n            return (arr1[mid1] + arr2[mid2]) / 2\n        else:\n            return (arr2[mid2] + arr1[mid1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Find the two middle elements of the two lists\n    mid1 = n // 2\n    mid2 = mid1 + 1\n\n    # Sort the two lists\n    sorted1 = sorted(arr1)\n    sorted2 = sorted(arr2)\n\n    # Find the median\n    if len(sorted1) == len(sorted2):\n        if (mid1 % 2 == 0) and (mid2 % 2 == 0):\n            return (sorted1[mid1-1] + sorted1[mid1]) / 2\n        elif (mid1 % 2 == 0):\n            return sorted1[mid1-1]\n        elif (mid2 % 2 == 0):\n            return sorted2[mid2-1]\n        else:\n            return (sorted1[mid1-1] + sorted1[mid1] + sorted2[mid2-1] + sorted2[mid2]) / 4\n    else:\n        if mid1 < mid2:\n            return get_median(sorted1[mid1:], sorted2, n)\n        elif mid1 > mid2:\n            return get_median(sorted1, sorted2[mid2:], n)\n        else:\n            return sorted1[mid1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two arrays\n    merged_array = arr1 + arr2\n    # Sort the merged array in ascending order\n    sorted_array = sorted(merged_array)\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sorted_array[n//2 - 1] + sorted_array[n//2]) / 2\n    else:\n        median = sorted_array[n//2]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n\n    arr.sort()\n\n    if n % 2 == 0:\n        median = (arr[n // 2 - 1] + arr[n // 2]) / 2\n    else:\n        median = arr[n // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two lists into one\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Find the median\n    if n % 2 == 0:\n        median = (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both lists must have same size\")\n\n    median_index = n // 2\n\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n\n    if n % 2 == 1:\n        # median is the middle element of the sorted list\n        median = sorted_arr1[median_index]\n    else:\n        # median is the average of the two middle elements of the sorted list\n        median = (sorted_arr1[median_index] + sorted_arr2[median_index - 1]) / 2\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the nth power of each number in a list.\n\n    Args:\n        nums (list): a list of numbers\n        n (int): the power to raise each number to\n\n    Returns:\n        list: the list of numbers raised to the nth power\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    result = []\n    for num in nums:\n        result.append(num ** power)\n        power += 1\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_list = []\n    for num in nums:\n        power = 1\n        for _ in range(n-1):\n            power *= num\n        power_list.append(power)\n    return power_list"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    string = string.upper()\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns a string with all the characters in uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    # check if the input is a list\n    if type(newList)!= list:\n        print(\"Input must be a list\")\n        return\n    \n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"Input list must have at least two elements\")\n        return\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # print the new list\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # check if list is empty\n    if not newList:\n        return \"The list is empty\"\n    \n    # check if list has only one element\n    if len(newList) == 1:\n        return \"The list has only one element\"\n    \n    # interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(\"New List:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    length = len(newList)\n    if length < 2:\n        print(\"List must have at least two elements\")\n        return\n    \n    # Find the first and last elements of the list\n    first_element = newList[0]\n    last_element = newList[length-1]\n    \n    # Interchange the first and last elements\n    newList[0] = last_element\n    newList[length-1] = first_element\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    # checking if the length of the list is greater than 1\n    if len(newList) > 1:\n        # swapping the first and last element of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"The given list should have more than one element.\")\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the semi-perimeter of the semicircle\n    semi_perimeter = 2*math.pi*r\n    \n    # Find the area of the semi-circle\n    area_circle = math.pi*(r**2)\n    \n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area_triangle = (math.sqrt(3)*r*math.sqrt(semi_perimeter)) / (3*math.sqrt(3))\n    \n    # Find the largest triangle that can be inscribed in the semicircle\n    triangle = math.sqrt(3)*area_circle / math.sqrt(semi_perimeter)\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate the area of a triangle with sides of length r\n    area = (3 * r**2) / 4\n    \n    # calculate the area of the smallest triangle that can be inscribed in a semicircle\n    area_smallest = (3 * r**2) / 4\n    \n    # calculate the area of the largest triangle that can be inscribed in a semicircle\n    area_largest = (5 * r**2) / 4\n    \n    # find the area of the largest triangle that can be inscribed in a semicircle\n    if area_largest > area_smallest:\n        area_largest = area_largest\n    \n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula for the area of a triangle with sides of length a and b\n    # and height h\n    #\n    # a = 2r (cos^2(angle) + sin^2(angle))\n    #\n    # For a semicircle, we can use the formula:\n    #\n    # r^2 = x^2 + y^2\n    # x^2 + y^2 = r^2\n    # x^2 = r^2 - y^2\n    # y^2 = r^2 - x^2\n    #\n    # Using the quadratic formula, we get:\n    #\n    # y^2 - 2r^2 + x^2 = 0\n    # y^2 = 4r^2 - x^2\n    #\n    # Substituting r^2 = a^2 and x^2 = y^2 - 2r^2, we get:\n    #\n    # y^2 - y^2 - 2a^2 = 0\n    # y^2 = 2r^2\n    #\n    # Substituting y = r, we get:\n    #\n    # a^2 - 2r^2 = 0\n    # a^2 - 4r^2 = 0\n    #\n    # Simplifying, we get:\n    #\n    # a^2 - 8r^2 = 0\n    #\n    # Solving for a, we get:\n    #\n    # a = sqrt(8r^2)\n    #\n    # Now, let's find the maximum possible area of a triangle:\n    #\n    # Let's say the largest possible height h is sqrt(3)/2.\n    # Since we're dealing with a semicircle, let's assume that\n    # the radius r is half the distance from the center to the\n    # center of the circle.\n    #\n    # Now, let's find the distance from the center of the circle to\n    # the perpendicular of the triangle with sides of length a and b.\n    # We can use the Pythagorean theorem:\n    #\n    # a^2 + b^2 = r^2\n    #\n    # Since the angle between the perpendicular and the x-axis is pi/4,\n    # we have:\n    #\n    # a^2 + b^2 = r^2\n    # b^2 = r^2 - a^2\n    #\n    # Now, we can find the length of the hypotenuse:\n    #\n    # c = sqrt(b^2 - r^2)\n    #\n    # Since the triangle is a right triangle, we know that the\n    # length of the hypotenuse is equal to the length of the\n    # semi-perpendicular:\n    #\n    # c = sqrt(b^2 - r^2) = sqrt(b^2 - a^2)\n    #\n    # Now, let's calculate the area of the triangle:\n    #\n    # a^2 = b^2\n    #\n    # Now, let's find the area of the triangle that can be inscribed in\n    # the semicircle:\n    #\n    # a^2 - 8r^2 = 0\n    # a^2 = 8r^2 - 8r^2\n    # a^2 = 16r^2\n    # a = sqrt(16r^2)\n    #\n    # Since we're dealing with a semicircle, we have:\n    #\n    # a^2 = r^2\n    #\n    # Now, we can calculate the area of the largest possible triangle\n    # that can be inscribed in a semicircle with radius r:\n    #\n    # a^2 = r^2\n    # b^2 = r^2 - a^2\n    # c^2 = r^2 - b^2 - a^2\n    #\n    # Since we're dealing with a semicircle, we have:\n    #\n    # c^2 = r^2 - a^2 - b^2\n    # c^2 = r^2 - r^2 + a^2 + b^2\n    # c^2 = 2r^2 - 2r^2 + a^2 + b^2\n    # c^2 = r^2 - 2r^2 + 2a^2\n    # c^2 = r^2 - 2r^2 + 2a^2 - a^2\n    # c^2 = r^2 - 2r^2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula to find the area of a triangle with sides a, b and c\n    def triangle_area_formula(a, b, c):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return area\n\n    # Find the perimeter of the largest triangle that can be inscribed in the semicircle\n    max_perimeter = 2 * r\n\n    # Find the area of each possible triangle with the given radius\n    triangle_areas = []\n    for i in range(3):\n        triangle_areas.append(triangle_area_formula(max_perimeter / 2, max_perimeter / 2, max_perimeter / 2))\n\n    # Find the area of the largest triangle\n    largest_area = max(triangle_areas)\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Area of a triangle with sides of length 1\n    area_triangle = 0.5*r**2\n\n    # Area of a triangle with sides of length 2\n    area_square = 4*r\n\n    # Find the length of the largest side of a triangle\n    max_side = max(r, area_triangle/2)\n\n    # Area of the largest triangle\n    area_largest = max_side**2\n\n    # Return the area of the largest triangle\n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    :param r: The radius of the semicircle.\n    :return: The area of the largest triangle inscribed in the semicircle.\n    '''\n    # calculate the area of a semicircle\n    area = 2 * math.pi * r**2\n\n    # find the length of the largest triangle that can be inscribed in the semicircle\n    side = 2 * r\n\n    # calculate the area of the largest triangle\n    area_triangle = (1/2) * side * side\n\n    # return the area of the largest triangle\n    return area_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 3.141592653589793\n    area = 0\n    \n    # Check for positive radius\n    if r <= 0:\n        return \"Error: Radius should be positive\"\n    \n    # Check for zero area\n    if r == 0:\n        return 0\n    \n    # Calculate area of largest triangle\n    a = (s**2 - r**2)**0.5\n    \n    # Calculate area of smallest triangle\n    area += a\n    \n    # Calculate area of smallest right triangle\n    area += s\n    \n    # Calculate area of smallest left triangle\n    area += a\n    \n    # Calculate area of largest triangle\n    area *= 2\n    \n    # Return area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    def is_point_in_circle(x, y, center_x, center_y, radius):\n        return (x-center_x)**2 + (y-center_y)**2 <= radius**2\n\n    def is_point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n        return is_point_in_circle(x, y, (x1+x2+x3)/3, (y1+y2+y3)/3, math.sqrt((x2-x1)**2 + (y2-y1)**2))\n\n    # calculate the circumference of the semicircle\n    circumference = 2*math.pi*r\n\n    # find the point on the semicircle that is closest to the center\n    x_center = 0\n    y_center = 0\n    closest_point = (x_center, y_center)\n\n    for i in range(1000):\n        x = random.uniform(-circumference, circumference)\n        y = random.uniform(-circumference, circumference)\n        if is_point_in_circle(x, y, x_center, y_center, r):\n            closest_point = (x, y)\n            break\n\n    # find the three points of the largest possible triangle inscribed in the semicircle\n    p1 = closest_point\n    p2 = (0, r)\n    p3 = (circumference, r)\n\n    # find the area of the largest possible triangle inscribed in the semicircle\n    area = math.sqrt(0.5)*(closest_point[0]**2 + closest_point[1]**2)\n\n    # check if the three points are within the triangle\n    if is_point_in_triangle(closest_point[0], closest_point[1], p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]):\n        area = max(area, 0.5*(closest_point[0]**2 + closest_point[1]**2))\n\n    if is_point_in_triangle(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1], p1[0], p1[1]):\n        area = max(area, 0.5*(p1[0]**2 + p1[1]**2))\n\n    if is_point_in_triangle(p2[0], p2[1], p3[0], p3[1], p1[0], p1[1], p2[0], p2[1]):\n        area = max(area, 0.5*(p2[0]**2 + p2[1]**2))\n\n    if is_point_in_triangle(p3[0], p3[1], p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]):\n        area = max(area, 0.5*(p3[0]**2 + p3[1]**2))\n\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # Calculate the semi-perimeter of the semicircle\n    s = 2*r\n\n    # Calculate the semi-area of a triangle with sides of length 1\n    a = s / 3\n\n    # Calculate the semi-area of a triangle with sides of length sqrt(3)\n    b = math.sqrt(3) * s / 15\n\n    # Calculate the semi-area of the largest triangle\n    c = (3*s**2 - 12*r**2 + 9*r**3) / 36\n\n    # Determine which semi-area is larger and use it to calculate the area of the largest triangle\n    if c > a:\n        area = math.sqrt(c) * math.sqrt(b)\n    else:\n        area = math.sqrt(a) * math.sqrt(c)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # using Heron's formula to find the semi-perimeter\n    perimeter = 2 * r\n    # using the Pythagorean theorem to find the semi-side\n    semi_side = (perimeter ** 0.5)\n    # calculating the area of the triangle using Heron's formula\n    area = (semi_side * (semi_side - r) * (semi_side - r)) ** 0.5\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i] == i:\n            continue\n        else:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number in the list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # Check if the input array is sorted\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        raise ValueError(\"start cannot be greater than end\")\n\n    # Initialize variables\n    missing = start\n\n    # Iterate through the array\n    for num in array:\n        if num < missing:\n            missing = num\n        elif num > missing:\n            return missing\n        else:\n            missing += 1\n\n    # If no missing number is found, return the largest number in the array plus one\n    return missing + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n            \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if not array:\n        return 1\n    if start < 0 or start >= len(array):\n        return 1\n    if start == len(array) and array[start] == array[-1]:\n        return start + 1\n    if array[start]!= array[-1]:\n        return start + 1\n    return 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Args:\n        array (list): A list of natural numbers.\n        start (int, optional): The starting index of the array (default: 0).\n        end (int, optional): The ending index of the array (default: None).\n\n    Returns:\n        int: The smallest missing number from the sorted list.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return len(array) + start"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a new list containing only even numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    if len(ele) == 2:\n        sub.append(ele)\n    elif len(ele) == 4:\n        sub.append(ele[:2])\n        sub.append((ele[2], ele[3]))\n        sub.append((ele[0], ele[1]))\n    elif len(ele) == 6:\n        sub.append(ele[:2])\n        sub.append((ele[2], ele[4]))\n        sub.append((ele[0], ele[1]))\n        sub.append((ele[2], ele[5]))\n        sub.append((ele[3], ele[4]))\n        sub.append((ele[0], ele[1]))\n    else:\n        raise ValueError('Invalid coordinate tuple')\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Get the coordinates of the given element\n    x, y = ele\n\n    # Create a set to store the adjacent coordinates\n    adj = set()\n\n    # Iterate over all the neighboring elements\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # Ignore self and diagonal neighbors\n            if i == 0 and j == 0:\n                continue\n\n            # Add the adjacent coordinates to the set\n            adj.add((x+i, y+j))\n\n    # Return the set of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x!= 0:\n        adj.append((x - 1, y))\n    if y!= 0:\n        adj.append((x, y - 1))\n    if x!= len(grid) - 1:\n        adj.append((x + 1, y))\n    if y!= len(grid[0]) - 1:\n        adj.append((x, y + 1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    # Get the row and column of the current element\n    row, col = ele\n    \n    # Define a list of adjacent elements\n    adj = []\n    \n    # Get all the neighboring cells\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # Skip the current element\n            if i == 0 and j == 0:\n                continue\n            \n            # Check if the neighbor is within the boundaries of the grid\n            if 0 <= row + i < len(grid) and 0 <= col + j < len(grid[0]):\n                # Add the neighbor to the list of adjacent elements\n                adj.append((row + i, col + j))\n    \n    # Return the list of adjacent elements\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n\n    # add adjacent coordinates to the list\n    adj.append((x-1, y))\n    adj.append((x+1, y))\n    adj.append((x, y-1))\n    adj.append((x, y+1))\n\n    # return the list of adjacent coordinates\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        nx, ny = x+dx, y+dy\n        if nx >= 0 and ny >= 0 and nx < 10 and ny < 10 and (nx, ny)!= ele:\n            adj.append((nx, ny))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a coordinate tuple as an argument and returns a list of all its adjacent coordinates.\n    \"\"\"\n    x, y = ele\n    adj_list = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if dx!= 0 or dy!= 0]\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adjacent = []\n    # check all adjacent coordinates\n    for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n        nx, ny = x + dx, y + dy\n        if (0 <= nx < 10) and (0 <= ny < 10):\n            adjacent.append((nx, ny))\n    sub.append(adjacent)\n    # recursively call the function for all adjacent coordinates\n    for adj in adjacent:\n        adjac(adj, sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+i, y+j) for i in [-1, 0, 1] for j in [-1, 0, 1] if (x+i, y+j)!= ele]"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(text)\n    \n    # Loop through the characters of the list\n    for i in range(len(chars)):\n        # Check if the current character is a space\n        if chars[i] =='':\n            # Replace the space with an underscore\n            chars[i] = '_'\n        # Check if the current character is an underscore\n        elif chars[i] == '_':\n            # Replace the underscore with a space\n            chars[i] =''\n    \n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Define a list of all possible characters to be replaced\n    replacement_list = [' ', '_']\n\n    # Loop through each character in the text and replace spaces with underscores and vice versa\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initializing an empty list to store non-zero numbers\n    non_zero_list = []\n    # Looping through the given list\n    for num in num_list:\n        # Checking if the current number is zero\n        if num!= 0:\n            # If the number is not zero, adding it to the non-zero list\n            non_zero_list.append(num)\n    # Adding all the zeroes to the end of the non-zero list\n    non_zero_list.extend([0] * num_list.count(0))\n    # Returning the final non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Create a new list to store non-zero elements\n    non_zero_list = []\n    \n    # Loop through the list and append non-zero elements to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # Append all zeroes to the end of the non-zero list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n    \n    # Return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for index, value in enumerate(num_list):\n        if value == 0:\n            zero_index.append(index)\n    for index in zero_index[::-1]:\n        num_list.pop(index)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    \n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            zero_index = index\n    \n    if zero_index!= -1:\n        num_list[len(num_list)-1], num_list[zero_index] = num_list[zero_index], num_list[len(num_list)-1]\n        move_zero(num_list[1:len(num_list)-1])"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        for j in range(len(num_list) - 1, zero_index, -1):\n            num_list[j], num_list[j - 1] = num_list[j - 1], num_list[j]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create a new list to store non-zero numbers\n    non_zero_list = []\n    \n    # loop through the given list\n    for num in num_list:\n        # check if the number is not zero\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # loop through the new list and move all zeroes to the end of the list\n    for num in non_zero_list:\n        if num == 0:\n            non_zero_list.remove(0)\n            non_zero_list.append(0)\n    \n    # combine the two lists into one and return the result\n    result = num_list + non_zero_list\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            i -= 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers - one for the current index and one for the previous index\n    i = 0\n    j = 0\n    # Traverse the list\n    while j < len(num_list):\n        # If the current element is not zero, move to the next index\n        if num_list[j]!= 0:\n            i += 1\n            # Move the element from its current index to its new index\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n        j += 1\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index is not None:\n        num_list[zero_index], num_list[-1] = num_list[-1], num_list[zero_index]\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers arr and its length n as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n <= 0:\n        return 0\n\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[(i + 1) % n]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # Initialize a variable to store the xor of all pairs \n    xor_sum = 0\n    \n    # Loop through the list and add the xor of the current pair \n    for i in range(n): \n        for j in range(i+1,n): \n            xor_sum += arr[i] ^ arr[j]\n            \n    return xor_sum "
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list 'arr' and its size 'n' as inputs.\n    It calculates the sum of xor of all pairs of numbers in the list.\n    '''\n    # calculate xor of each pair of numbers\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\n    Args:\n    arr (list): A list of integers.\n    n (int): The size of the list.\n\n    Returns:\n    int: The sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        xor = arr[0] ^ pair_xor_Sum(arr[1:], n-1)\n        return xor + pair_xor_Sum(arr[1:], n)"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = 0\n            for k in range(n):\n                if k == i or k == j:\n                    xor_sum = xor_sum ^ arr[k]\n            sum = sum ^ xor_sum\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of integers and the length of the list n,\n    and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes in a list of numbers, n, and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the input list to a heap\n    heap = hq.heapify(iterable)\n    # Initialize the sorted list\n    sorted_list = []\n    # Build the sorted list from the heap\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the Heap Sort algorithm.\n\n    Args:\n        iterable (list): The list to be sorted.\n\n    Returns:\n        list: The sorted list.\n    '''\n    # Create a max heap from the list\n    heap = [None] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n        hq.heapify(heap, i)\n\n    # Extract elements from the heap in sorted order\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using a heap sort algorithm.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = iterable\n    for i in range(len(heap) // 2 - 1, -1, -1):\n        hq.heapify(heap, i, len(heap))\n    for i in range(len(heap) - 1, 0, -1):\n        hq.heapreplace(heap, heap[0])\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    \n    # Build a max heap from the list\n    for i in range(len(lst)//2, -1, -1):\n        hq.heapify(lst, i, len(lst)-1)\n    \n    # Sort the heap\n    for i in range(len(lst)-1, 0, -1):\n        lst[0], lst[i] = lst[i], lst[0]\n        hq.heapify(lst, 0, i-1)\n    \n    # Convert the sorted list back to an iterable\n    return iterable(lst)\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    n = len(iterable)\n    h = [None] * n\n    # build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heappushpop(h, iterable[i])\n    # sort list using heap\n    for i in range(n - 1, 0, -1):\n        hq.heappushpop(h, iterable[i])\n    # extract elements from heap and append to list in sorted order\n    for i in range(n - 1, -1, -1):\n        iterable[i] = hq.heappop(h)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input iterable to a list\n    lst = list(iterable)\n    \n    # Build a min-heap from the list\n    hq.heapify(lst)\n    \n    # Sort the list by extracting the smallest element and adding it to the end\n    # of the list until the entire list is sorted\n    while len(lst) > 1:\n        hq.heappop(lst)\n        hq.heappush(lst, hq.heappop(lst))\n    \n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Build max heap\n    for i in range(n//2 - 1, -1, -1):\n        hq.heappushpop(iterable, iterable[i])\n    # Sort the remaining n-1 elements\n    for i in range(n-2, 0, -1):\n        hq.heappushpop(iterable, iterable[i])\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heapq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)  # create a max heap\n    sorted_list = []\n    while iterable:\n        max_item = iterable[0]\n        sorted_list.append(max_item)\n        hq.heappop(iterable)\n    return sorted_list\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes the actual cost and sale amount as input and returns True if\n    the sale amount has no profit and no loss, False otherwise.\n\n    Parameters:\n    actual_cost (float): actual cost of the sale\n    sale_amount (float): amount that was sold\n\n    Returns:\n    bool: True if no profit and no loss, False otherwise\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return False\n    if sale_amount <= actual_cost * 0.5:\n        return False\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit_loss = sale_amount - actual_cost\n\n    # Check if profit is positive and loss is negative\n    if profit_loss > 0 and profit_loss < actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # calculate profit and loss \n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # check if profit and loss are zero \n    if profit == 0 and loss == 0: \n        print(\"No profit and no loss!\") \n    else: \n        print(\"Profit: \", profit) \n        print(\"Loss: \", loss) "
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n    \n    profit = sale_amount - actual_cost\n    \n    if profit == 0:\n        return True\n    \n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit and loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit == 0 and loss == 0:\n        return \"The given amount has no profit and no loss\"\n    elif profit > 0 and loss == 0:\n        return \"The given amount has only positive profit\"\n    elif profit == 0 and loss > 0:\n        return \"The given amount has only negative loss\"\n    else:\n        return \"The given amount has positive and negative profits\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit > 0:\n        print(\"The amount has no profit and no loss\")\n    elif loss > 0:\n        print(\"The amount has no loss but has a profit\")\n    else:\n        print(\"The amount has no profit and no loss\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return math.ceil(13.12 + (0.6215*t)-(11.37*math.exp(-0.16*t)) + 0.3965*v)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    celsius_to_kelvin = 273.15\n    kelvin_to_rankine = 1.8\n    rankine_to_fahrenheit = 1.8\n    fahrenheit_to_celsius = 1.8\n    rankine = v * kelvin_to_rankine\n    fahrenheit = (rankine - celsius_to_kelvin) * fahrenheit_to_celsius\n    wind_chill = math.ceil(fahrenheit - 459.67)\n    return wind_chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 3.6 # convert km/h to m/s\n    c = 1 # convert celsius to kelvin\n    temp = (c + 273.15) # convert to kelvin\n    temp -= 273.15 # convert to celsius\n    chill_temp = 35.74 + 0.6215*temp + 17.62*math.log10(temp) + 0.00686*temp*temp - 13.12*math.log10(temp) - 0.3965*temp*temp*temp\n    wind_speed = v*w # convert km/h to m/s\n    chill_speed = chill_temp*w\n    # calculate the wind chill index\n    wind_chill_index = int(math.ceil(chill_speed/wind_speed))\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # calculate the heat index\n    hi = 0.5 * (t_f + 68.0) + 32.0 * math.exp((17.625 * (t_f - 68.0)) / (t_f + 243.0))\n    \n    # calculate the wind chill index\n    wc = 35.74 + 0.6215 * v + 35.75 * math.exp((13.127 * (t_f - 68.0)) / (t_f + 243.0)) - 0.1461 * math.exp((13.077 * (t_f - 68.0)) / (t_f + 243.0))\n    \n    # convert the wind chill index to an integer\n    wc_int = math.ceil(wc)\n    \n    # return the wind chill index\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert the temperature from celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # Calculate the wind chill index\n    wind_chill_index = round(35.74 + (0.6215 * v) - (35.75 * t_f) + (0.4275 * v * t_f))\n\n    # Return the wind chill index\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 10:\n        return 0\n    elif 10 < v <= 15:\n        return 1\n    elif 15 < v <= 20:\n        return 2\n    elif 20 < v <= 25:\n        return 3\n    elif 25 < v <= 30:\n        return 4\n    elif 30 < v <= 35:\n        return 5\n    elif 35 < v <= 40:\n        return 6\n    elif 40 < v <= 45:\n        return 7\n    elif 45 < v <= 50:\n        return 8\n    elif 50 < v <= 55:\n        return 9\n    elif 55 < v <= 60:\n        return 10\n    elif 60 < v <= 65:\n        return 11\n    elif 65 < v <= 70:\n        return 12\n    elif 70 < v <= 75:\n        return 13\n    elif 75 < v <= 80:\n        return 14\n    elif 80 < v <= 85:\n        return 15\n    elif 85 < v <= 90:\n        return 16\n    elif 90 < v <= 95:\n        return 17\n    elif 95 < v <= 100:\n        return 18\n    elif 100 < v <= 105:\n        return 19\n    elif 105 < v <= 110:\n        return 20\n    elif 110 < v <= 115:\n        return 21\n    elif 115 < v <= 120:\n        return 22\n    elif 120 < v <= 125:\n        return 23\n    elif 125 < v <= 130:\n        return 24\n    elif 130 < v <= 135:\n        return 25\n    elif 135 < v <= 140:\n        return 26\n    elif 140 < v <= 145:\n        return 27\n    elif 145 < v <= 150:\n        return 28\n    elif 150 < v <= 155:\n        return 29\n    elif 155 < v <= 160:\n        return 30\n    elif 160 < v <= 165:\n        return 31\n    elif 165 < v <= 170:\n        return 32\n    elif 170 < v <= 175:\n        return 33\n    elif 175 < v <= 180:\n        return 34\n    elif 180 < v <= 185:\n        return 35\n    elif 185 < v <= 190:\n        return 36\n    elif 190 < v <= 195:\n        return 37\n    elif 195 < v <= 200:\n        return 38\n    elif 200 < v <= 205:\n        return 39\n    elif 205 < v <= 210:\n        return 40\n    elif 210 < v <= 215:\n        return 41\n    elif 215 < v <= 220:\n        return 42\n    elif 220 < v <= 225:\n        return 43\n    elif 225 < v <= 230:\n        return 44\n    elif 230 < v <= 235:\n        return 45\n    elif 235 < v <= 240:\n        return 46\n    elif 240 < v <= 245:\n        return 47\n    elif 245 < v <= 250:\n        return 48\n    elif 250 < v <= 255:\n        return 49\n    elif 255 < v <= 260:\n        return 50\n    elif 260 < v <= 265:\n        return 51\n    elif 265 < v <= 270:\n        return 5"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n\n    Args:\n        v (float): Wind velocity in km/h.\n        t (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n    \"\"\"\n    fahrenheit = math.degrees(t) * 1.8 + 32\n    wci = int(math.floor((24/3) * math.pow(fahrenheit, 2/7))) + 32\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind velocity from km/h to m/s\n    v = v * 1.60934\n    \n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * t - 35.75 * math.exp(t/10) + 0.4275 * v**0.16\n    \n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n    \n    return wc\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind velocity and temperature from knots to km/h and Celsius\n    wind_speed = v*1.852\n    temp = t-273.15\n    \n    # Calculate wind chill index using formula\n    wc = 35.74 + 0.6215*wind_speed + 17.624*temp - 0.7851*wind_speed*temp\n    \n    # Round wind chill index to the nearest integer\n    wc_rounded = round(wc)\n    \n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    c = 13.12 # Celsius to Kelvin\n    k = 0.0621 # Boltzmann's constant\n    R = 8.314 # ideal gas constant\n    T = c + 273.15 # Convert Celsius to Kelvin\n\n    # Calculate specific heat capacity at constant pressure\n    cp = 1005 * math.exp((17.625 * T) / (T + 243.5))\n\n    # Calculate specific enthalpy at constant pressure\n    h = 337.5 * math.exp((17.625 * T) / (T + 243.5))\n\n    # Calculate dew point\n    dp = h / cp\n\n    # Calculate dew point temperature\n    Tdp = dp + 273.15\n\n    # Calculate virtual temperature\n    vt = Tdp - 0.0065 * (Tdp - T)\n\n    # Calculate the dew point depression\n    dpdT = (0.0018 * vt * vt) / (math.log(vt / 298.15) + 0.0075)\n\n    # Calculate the dew point pressure\n    pdp = 1013.25 * math.exp(dpdT / (k * Tdp))\n\n    # Calculate the virtual temperature at dew point pressure\n    vt_pdp = vt / (vt + pdp / R)\n\n    # Calculate the critical temperature\n    tc = vt_pdp - 0.0042 * (vt_pdp - T)\n\n    # Calculate the humidity ratio\n    h_ratio = h / cp / R\n\n    # Calculate the wind chill index\n    wci = 0.5 * (Tdp - tc)\n\n    # Round the wind chill index to the nearest integer\n    wci_int = math.ceil(wci)\n\n    return wci_int"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            filtered_names.append(name)\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if not name[0].islower())"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_sum = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            length_sum += len(name)\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items) # remove all parenthesis and what is inbetween them\n    items = re.sub(r'\\s+','', items).strip() # remove all spaces and strip leading/trailing spaces\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'(\\([^()]*?\\))')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    # Define the pattern to match the parenthesis\n    pattern = re.compile(r'\\(.*?\\)')\n\n    # Iterate over each item in the list\n    for item in items:\n        # Remove the parenthesis from the item using the pattern\n        item = pattern.sub('', item)\n        # Append the item to a new list without the parenthesis\n        new_list = [elem.strip() for elem in item.split() if elem!= '']\n        # Replace the old item with the new list without the parenthesis\n        items[items.index(item)] =''.join(new_list)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis and what is inbetween them\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Using regular expression to match the pattern of parenthesis and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n    # Using findall() function to find all occurrences of the pattern in the string\n    result = re.findall(pattern, items)\n    # Iterating over the list of matches to remove the parenthesis and what is inbetween them\n    for item in result:\n        items = items.replace(item, '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*?)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    count = 0\n\n    while count < n:\n        if count % 2 == 0:\n            b += 2\n            a += 2\n        else:\n            a += 2\n            b += 2\n        count += 1\n\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n\nprint(is_nonagonal(5)) # Output: 70\nprint(is_nonagonal(10)) # Output: 220\nprint(is_nonagonal(15)) # Output: 330"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 4 * is_nonagonal(n-1) - (is_nonagonal(n-2) - is_nonagonal(n-3))\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The {}th nonagonal number is {}\".format(n, is_nonagonal(n)))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def count_triangles(n):\n        '''\n        Write a helper function to count the number of triangles in an n-sided pyramid.\n        '''\n        return n*(n+1)*(2*n-1)\n    \n    def triangular_numbers(n):\n        '''\n        Write a helper function to generate the first n triangular numbers.\n        '''\n        return [i for i in range(1,n+1)]\n    \n    def is_nonagonal_number(nonagonal_num):\n        '''\n        Write a helper function to check if a given nonagonal number is valid or not.\n        '''\n        if nonagonal_num % 2 == 0:\n            return False\n        \n        triangle_num = triangular_numbers(nonagonal_num)[0]\n        return nonagonal_num == triangle_num\n    \n    def is_pyramid(n):\n        '''\n        Write a helper function to check if a given number is a valid pyramid height.\n        '''\n        return is_nonagonal_number(count_triangles(n))\n    \n    # find the nonagonal number that is a pyramid height\n    for i in range(1,n+1):\n        if is_pyramid(i):\n            return i"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"n must be a positive integer\"\n    \n    # Calculate the nonagonal number\n    nonagonal = (n * (n + 1)) // 2\n    \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_sum = 0\n    for i in range(1, n+1):\n        nonagonal_sum += i*(i+1)\n    return nonagonal_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            if i**2 == n:\n                return i**2\n        return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Define a function to calculate the factorial of a number\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Calculate the nonagonal number\n    nonagonal = (factorial(n - 1) // (factorial(n - 2) // 2))\n    \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return (n * (n - 1)) // 2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Convert the text to lowercase and split it into words\n    words = text.lower().split()\n    \n    # Iterate over the words and check if 'z' is not at the start or end of the word\n    for i in range(len(words)):\n        if i == 0 or i == len(words)-1:\n            if words[i]!= 'z':\n                return True\n        elif words[i] == 'z':\n            return True\n    \n    # If no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]\\w*z[a-zA-Z]\\w*\\b', re.IGNORECASE)\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Replace non-word characters with spaces\n    text = re.sub(r'[^\\w\\s]','', text)\n    # Split the string into words\n    words = text.split()\n    # Iterate over the words and check if there are any 'z' except at the start and end\n    for i in range(len(words)):\n        if i == 0 or i == len(words) - 1:\n            if words[i][-1] == 'z':\n                return False\n        elif words[i][-1] == 'z':\n            return False\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'(?<=\\w)z(?=\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    word_pattern = r'\\b[a-zA-Z]+\\b'  # match word boundary\n    word_match = re.findall(word_pattern, text)  # find all words in the text\n\n    for word in word_match:\n        if word[0] == 'z':\n            if word[-1] == 'z':\n                return True\n        else:\n            if word[0] == 'z' and word[-1] == 'z':\n                return True\n\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern to match 'z' only at the middle of words\n    pattern = r'\\b[zZ]\\b'\n\n    # Use the re.search() function to search for the pattern in the input string\n    result = re.search(pattern, text)\n\n    # If the pattern is found, return True\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*\\b\\1\\b)z\\w+\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)-1): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize two variables: start and end\n    start = 0\n    end = k-1\n    \n    # Iterate through the array from start to end\n    while start < end:\n        # Swap the elements at start and end\n        input[start], input[end] = input[end], input[start]\n        \n        # Increment start and decrement end\n        start += 1\n        end -= 1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k, n):\n        input[i], input[k] = input[k], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a given position k as input and reverses the array up to k.\n    \"\"\"\n    n = len(input)\n    if n < k or k < 1:\n        return \"Invalid Input\"\n\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        temp = input[i]\n        input[i] = input[n-i-1]\n        input[n-i-1] = temp\n\n    # reverse the array from k to n-1\n    for i in range(k, n):\n        temp = input[i]\n        input[i] = input[n-i-1]\n        input[n-i-1] = temp\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input\n    else:\n        reverse_Array_Upto_K(input, k+1)\n        input[k], input[len(input)-1] = input[len(input)-1], input[k]\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a copy of the input array\n    input_copy = input.copy()\n    # Reverse the elements from 0 to k-1\n    for i in range(k):\n        input_copy[i], input_copy[len(input)-k+i] = input_copy[len(input)-k+i], input_copy[i]\n    # Return the reversed array\n    return input_copy"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Take the length of the input array\n    n = len(input)\n    \n    # If k is greater than or equal to the length of the array, reverse the entire array\n    if k >= n:\n        return input[::-1]\n    \n    # Reverse the array from position 0 to k-1\n    reverse(input, 0, k-1)\n    \n    # Reverse the array from position k to n-1\n    reverse(input, k, n-1)\n    \n    # Reverse the array from position 0 to n-1\n    reverse(input, 0, n-1)\n    \n    # Return the reversed array\n    return input\n\n\ndef reverse(input, start, end):\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from the beginning to k-1\n    reverse_from = 0\n    reverse_to = k-1\n    while reverse_from < reverse_to:\n        input[reverse_from], input[reverse_to] = input[reverse_to], input[reverse_from]\n        reverse_from += 1\n        reverse_to -= 1\n\n    # Reverse the array from k to the end\n    reverse_from = k\n    reverse_to = len(input)-1\n    while reverse_from < reverse_to:\n        input[reverse_from], input[reverse_to] = input[reverse_to], input[reverse_from]\n        reverse_from += 1\n        reverse_to -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    input = input[::-1][:k]\n    # reverse the array from k to n-1\n    input = input[::-1][k:]\n    # reverse the entire array\n    input = input[::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # take input array\n    arr = input\n\n    # initialize variables\n    start = 0\n    end = k - 1\n    temp = 0\n\n    # loop for reversing array\n    while start < end:\n\n        # swap elements\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n\n        # increment start and decrement end\n        start += 1\n        end -= 1\n\n    # print the reversed array\n    print(\"Reversed array:\", arr)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Initialize a new dictionary\n    new_dict = {}\n    # Iterate over the keys of the dictionary and add them to the new dictionary\n    for key in test_dict:\n        new_dict[key] = test_dict[key]\n    # Return a new tuple with the original tuple and the new dictionary\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tuple = new_tuple + (value,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # add the dictionary to the tuple using the update() method\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict.update(test_tup)\n    return tuple(test_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    # initialize the variables to store the maximum average and the current average\n    max_avg = float('-inf')\n    cur_avg = 0\n    \n    # create a helper function to calculate the average of a sub-matrix\n    def calculate_avg(matrix, i, j, k, l):\n        total_cost = 0\n        total_cells = 0\n        for m in range(i, j+1):\n            for n in range(k, l+1):\n                total_cost += matrix[m][n]\n                total_cells += 1\n        return total_cost / total_cells\n    \n    # iterate through all possible paths (starting from top-left and moving only right or down)\n    for i in range(n):\n        for j in range(n-1, i, -1):\n            for k in range(j+1, n):\n                for l in range(k, n-1, -1):\n                    # calculate the average of the sub-matrix\n                    avg = calculate_avg(cost, i, j, k, l)\n                    # update the current average and the maximum average if necessary\n                    cur_avg += avg\n                    max_avg = max(max_avg, cur_avg)\n                    # reset the current average\n                    cur_avg = 0\n                    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            if i == n-1 and j == n-1:\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                max_avg = max(max_avg, dp[i][j])/(i+j+1)\n                \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [False] * N\n    total_cost = 0\n    max_avg = float('-inf')\n    current_path = []\n    path_len = 0\n\n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N and not visited[x + N * y]\n\n    def update_visited(x, y):\n        visited[x + N * y] = True\n\n    def extend_path(x, y):\n        update_visited(x, y)\n        current_path.append((x, y))\n        if x == N - 1 and y == N - 1:\n            nonlocal path_len\n            path_len = len(current_path)\n        elif is_valid(x + 1, y):\n            extend_path(x + 1, y)\n        elif is_valid(x, y + 1):\n            extend_path(x, y + 1)\n        current_path.pop()\n        update_visited(x, y)\n\n    extend_path(0, 0)\n    for i in range(1, path_len):\n        x, y = current_path[i]\n        x2, y2 = current_path[i - 1]\n        cost_diff = cost[x2][y2] - cost[x][y]\n        total_cost += cost_diff\n        max_avg = max(max_avg, total_cost / (i + 1))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize the result\n    max_avg = 0\n    visited = set()\n\n    # Get the dimensions of the matrix\n    N = len(cost)\n\n    # Check all possible paths starting from the top-left cell\n    for i in range(N):\n        for j in range(N):\n            # Skip visited cells\n            if (i, j) in visited:\n                continue\n\n            # Calculate the total cost and number of visited cells for this path\n            curr_cost = sum(cost[i][j:j+N])\n            curr_visited = 1\n\n            # Check all possible paths from this cell\n            for x in range(i+1, N):\n                for y in range(j, min(N, j+N)):\n                    # Check if this cell is already visited\n                    if (x, y) in visited:\n                        continue\n\n                    # Check if this is a valid path\n                    if (x == N-1 and y == N-1) or (x < N and y < N and abs(x-y) == 1):\n                        # Update the total cost and number of visited cells for this path\n                        curr_cost += cost[x][y]\n                        curr_visited += 1\n\n            # Update the result if this path has a higher average\n            if curr_cost / curr_visited > max_avg:\n                max_avg = curr_cost / curr_visited\n\n            # Mark this cell as visited\n            visited.add((i, j))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    # Initialize the top and left cell of the matrix\n    dp[0][0] = cost[0][0]\n    dp[0][1] = cost[0][1]\n    dp[1][0] = cost[1][0]\n    dp[1][1] = cost[1][1]\n\n    # Fill the rest of the matrix using dynamic programming\n    for i in range(2, N):\n        for j in range(2, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\n    # Find the maximum average path\n    max_average = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                continue\n            path_average = (dp[i][j] - dp[i - 1][j] - dp[i][j - 1] + dp[i - 1][j - 1]) / 4\n            max_average = max(max_average, path_average)\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Create a dictionary to store the average of each path\n    path_avg = {}\n    \n    # Initialize the average of the first path as 0\n    path_avg[0] = 0\n    \n    # Loop through all possible paths\n    for i in range(n):\n        for j in range(n):\n            # Calculate the cost of visiting this cell\n            cost_cell = cost[i][j]\n            \n            # Check if there is a path that starts from this cell and ends on the bottom right cell\n            if i == n-1 and j == n-1:\n                # If there is, add the cost to the average of the path\n                path_avg[i*n+j] = cost_cell\n            else:\n                # Otherwise, calculate the average of the paths that start from this cell and go down and to the right\n                up_avg = path_avg.get((i-1)*n+j, 0)\n                right_avg = path_avg.get(i*n+j-1, 0)\n                \n                # Add the cost of visiting this cell to the average of the paths that start from this cell and go down and to the right\n                new_avg = (cost_cell + up_avg + right_avg) / 3\n                \n                # Add the new average to the dictionary of path averages\n                path_avg[(i,j)] = new_avg\n    \n    # Find the maximum average of any path\n    max_avg = max(path_avg.values())\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                max_avg = max(max_avg, dp[i][j] - dp[i][j-1])\n            elif j == 0:\n                max_avg = max(max_avg, dp[i][j] - dp[i-1][j])\n            else:\n                max_avg = max(max_avg, dp[i][j] - dp[i-1][j] + dp[i][j-1])\n                \n    return max_avg/max(N, N-1)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # initialize variables\n    n = len(cost)\n    max_avg = 0\n    max_path = []\n    curr_avg = 0\n    path = []\n\n    # iterate over each cell in the matrix\n    for i in range(n):\n        for j in range(n):\n            # if we are already at the bottom right cell, update the path and calculate the average\n            if i == n-1 and j == n-1:\n                curr_avg += cost[i][j]\n                path.append((i,j))\n                avg = curr_avg / len(path)\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = path.copy()\n                curr_avg -= cost[i-1][j]\n\n            # if we can move right\n            elif j < n-1:\n                curr_avg += cost[i][j]\n                path.append((i,j))\n                max_path.append((i,j))\n\n            # if we can move down\n            elif i < n-1:\n                curr_avg += cost[i][j]\n                path.append((i,j))\n                max_path.append((i,j))\n\n            # if we are already at the top left cell, update the path and calculate the average\n            elif i == 0 and j == 0:\n                curr_avg += cost[i][j]\n                path.append((i,j))\n                avg = curr_avg / len(path)\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = path.copy()\n                curr_avg -= cost[i+1][j]\n\n    # return the maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    visited = [[False for j in range(N)] for i in range(N)]\n    total_cost = 0\n    max_average = 0\n\n    def dfs(i, j, path_cost, path_visited):\n        if i == N-1 and j == N-1:\n            global max_average\n            max_average = max(max_average, path_cost / sum(1 for x in path_visited if x))\n            return\n\n        if not (0 <= i < N and 0 <= j < N and not visited[i][j]):\n            return\n\n        if not path_visited[i][j]:\n            visited[i][j] = True\n            total_cost += path_cost\n            dfs(i+1, j, path_cost + cost[i][j], path_visited)\n            dfs(i, j+1, path_cost + cost[i][j], path_visited)\n            visited[i][j] = False\n\n    for i in range(N):\n        for j in range(N):\n            if not visited[i][j]:\n                dfs(i, j, cost[i][j], visited[i][j])\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    total_cost = 0\n    visited = [0] * n\n    \n    # Find maximum path with maximum average\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            # Check if cell is visited\n            if visited[i] == 0 and visited[j] == 0:\n                visited[i] = 1\n                visited[j] = 1\n                # Compute path average\n                path_cost = sum([cost[i][k] * visited[k] for k in range(n)])\n                path_cost += sum([cost[k][j] * visited[k] for k in range(n)])\n                # Update maximum average and total cost\n                if path_cost > max_avg:\n                    max_avg = path_cost\n                    total_cost = path_cost\n                # Reset visited flags\n                visited[i] = 0\n                visited[j] = 0\n    \n    return total_cost / (n * n)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, details in students.items():\n        if details[0] > h and details[1] > w:\n            result[name] = details\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter students based on height and weight\n    filtered_students = {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    # Loop through each student and check if their height and weight are greater than or equal to the given minimum\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students.append(name)\n    # Return the filtered students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    # Create a dictionary to store the frequency of each value in each list\n    freq1 = {}\n    freq2 = {}\n    for num in nums1:\n        freq1[num] = freq1.get(num, 0) + 1\n    for num in nums2:\n        freq2[num] = freq2.get(num, 0) + 1\n\n    # Count the number of indices where the lists have the same values\n    count = 0\n    for num in nums1:\n        if freq1[num] == freq2[num]:\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # create a dictionary to store the counts of each number in both lists\n    counts = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in counts:\n            counts[nums1[i]] = 0\n        counts[nums1[i]] += 1\n        if nums2[i] not in counts:\n            counts[nums2[i]] = 0\n        counts[nums2[i]] += 1\n\n    # find indices where the values are equal in both lists\n    result = []\n    for i in range(len(nums1)):\n        if counts[nums1[i]] == 1 and counts[nums2[i]] == 1:\n            result.append(i)\n\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Initialize a dictionary to store the indices where the lists have the same values\n    same_pair_indices = {}\n\n    # Loop through the lists and compare their values\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            # If the values are the same, add the index to the dictionary\n            same_pair_indices[i] = True\n\n    # Count the number of same pairs in the dictionary\n    count = len(same_pair_indices)\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # loop through each digit of the base\n    for digit in str(base):\n        # convert digit to integer\n        digit = int(digit)\n        # calculate the sum of the current digit and the sum of all digits up to the power\n        sum += digit * (base ** (power - 1))\n    # return the final sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    num = base\n    while num > 0:\n        digit = num % 10\n        sum_digits += digit ** power\n        num //= 10\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum_digits = 0\n    current_base = base\n    while current_base > 0:\n        digit = current_base % 10\n        sum_digits += digit ** power\n        current_base //= 10\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit\n        power -= 1\n        base //= 10\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum variable\n    sum = 0\n    # Convert base to string and split into list of digits\n    digits = [int(digit) for digit in str(base)]\n    # Iterate through digits\n    for digit in digits:\n        # Add the digit raised to the power of the power to the sum\n        sum += digit ** power\n    # Return the sum of digits raised to the power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    num = base\n    while power > 0:\n        digit = num % 10\n        total += digit\n        power -= 1\n        num //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    temp_base = base\n\n    while power > 0:\n        digit = temp_base % 10\n        sum_of_digits += digit\n        temp_base //= 10\n        power -= 1\n\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        sum_digits += base % 10\n        base = base // 10\n        power -= 1\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum to 0\n    total_sum = 0\n    # Iterate over the digits of the base from right to left\n    for digit in str(base)[::-1]:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of digits raised to the power of the power\n        total_sum += digit_int ** power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # convert the base to a string and remove any non-digit characters\n    base_str = ''.join(filter(str.isdigit, str(base)))\n\n    # convert the power to an integer\n    power = int(power)\n\n    # calculate the sum of all digits of the base raised to the power\n    result = 0\n    for digit in base_str:\n        result += int(digit) ** power\n\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # regular expression pattern to match values between quotes\n    matches = re.findall(pattern, text1)  # finds all the values between quotes using the regular expression pattern\n    return matches  # returns the list of extracted values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"((?!\\1).)*(?<!\\\\)\"')\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regex to find all the occurrences of double-quotes (\") in the string\n    pattern = r'(\".*?\")'\n    matches = re.findall(pattern, text1)\n    \n    # creating a new list to store the extracted values\n    extracted_values = []\n    \n    # iterating over the matches and appending the extracted values to the new list\n    for match in matches:\n        extracted_values.append(match)\n    \n    # returning the new list of extracted values\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\\\")(.*?)(?=\\\")'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(0)\n    else:\n        return \"No quotation marks found in the string\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        result.append(match.replace('\\\\\"', '\"'))\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple must contain at least two elements\")\n    N = len(test_tup) - 1\n    multiplied_tup = []\n    for i in range(N):\n        multiplied_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(multiplied_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    N = len(test_tup) - 1 # Number of elements in the tuple\n    \n    # Initialize a tuple of length N with the same value as the first element of the tuple\n    new_tup = (test_tup[0] * test_tup[1],) * N\n    \n    # Append the remaining elements of the tuple to the new tuple\n    for i in range(2, len(test_tup)):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    \n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[0] * test_tup[4])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1 # find the length of the tuple minus one\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(N)) # multiply each element of the tuple with the element after it\n    return result_tup # return the tuple of multiplied elements"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    multiplied_elements = tuple(test_tup[i] * test_tup[i+1] for i in range(N))\n    return multiplied_elements"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_len = len(test_tup)\n    result_tup = []\n    for i in range(t_len-1):\n        result_tup.append(test_tup[i]*test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(N-1))\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists [a_1,...,a_n] and [b_1,...,b_n] as input and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the sum of the two input lists\n    lst_sum = []\n    # Iterate over each element of the two input lists\n    for i in range(len(lst1)):\n        # Append the sum of the current element of the two input lists to the list\n        lst_sum.append(lst1[i] + lst2[i])\n    # Return the list of sum of the two input lists\n    return lst_sum"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a generator that iterates through the list and groups consecutive elements\n    groups = groupby(nums)\n    # Create a new list to store the non-consecutive elements\n    result = []\n    # Iterate through the generator and append the non-consecutive elements to the result list\n    for key, group in groups:\n        if key:\n            result.append(key)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # create a dictionary with the keys being the numbers in nums and the values being a list of consecutive duplicates\n    groups = dict(groupby(nums))\n    # iterate over the groups dictionary and remove any consecutive duplicates\n    for num, group in groups.items():\n        if len(list(group)) > 1:\n            nums.remove(num)\n    # return the modified nums list\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    prev_num = None\n    for num in nums:\n        if num == prev_num:\n            continue\n        else:\n            result.append(num)\n            prev_num = num\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n\n    Args:\n    nums (list): a list of integers\n\n    Returns:\n    list: a new list with consecutive duplicates removed\n    '''\n\n    # Use groupby() to group the list by consecutive duplicates\n    groups = groupby(sorted(set(nums)))\n\n    # Filter out the groups that contain only one element\n    unique_groups = [group for group in groups if len(list(group)) > 1]\n\n    # Convert the filtered groups to a list of lists\n    unique_consecutive_duplicates = [list(group) for group in unique_groups]\n\n    # Flatten the list of lists to a single list\n    unique_consecutive_duplicates = [num for sublist in unique_consecutive_duplicates for num in sublist]\n\n    return unique_consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    result = []\n    for key, group in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1):\n        result.extend(map(lambda x: x[0], group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for group in groupby(sorted(nums)):\n        if group[0] == group[-1]:\n            continue\n        result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), lambda x: x[1] == x[0]-1))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for group in groupby(sorted(nums)):\n        if len(list(group)) > 1:\n            continue\n        result.append(list(group)[0])\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi/4)*(r**2)\n    L = (2*h)*r\n    return (s+L)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone.\n\n    Args:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r**2 * h\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area\n    LSA = 1/2 * math.pi * r**2 * h\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # convert the height to meters\n    h_meters = h\n    \n    # calculate the lateral surface area using the formula:\n    # lateral surface area = 1/2 * r * h * sin(pi/2 - theta)\n    # where theta is the angle between the cone base and the x-axis,\n    # and pi/2 is the constant pi divided by 2\n    \n    # calculate the angle between the cone base and the x-axis\n    theta = math.asin(r/h)\n    \n    # calculate the lateral surface area using the formula\n    lateral_surface_area = 0.5 * r * h_meters * math.sin(math.pi/2 - theta)\n    \n    # return the lateral surface area as a float\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r * r * (h/3)  # calculate the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Using the formula for lateral surface area of a cone: lateral surface area = pi * (r^2 + h^2)\n    return math.pi * (r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (2*math.pi*r*h)/(3)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_specialchar(text):\n    return re.sub(r\"[^\\w\\s]\", \"\", text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|[.,]','',text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'\\s+|,+|\\.+|:+|\\t+|\\n+','', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+|[^A-Za-z0-9]+', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any character that is not a letter or digit\n    pattern = r'[^a-zA-Z0-9]'\n    # Replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s|,|\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any of the characters listed above\n    pattern = r'[ ]|[,|.]'\n    # Use the re.sub() method to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern\n    pattern = re.compile(r'[^a-zA-Z0-9]+')\n\n    # Replace all occurrences of pattern with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_specialchar(text):\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = re.compile(r'[\\s,\\.]')\n    \n    # Replace all occurrences of the pattern with a colon\n    text = pattern.sub(':', text)\n    \n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = '.,;:'\n    text = re.sub(r'[^\\w\\s]', '', text)  # Remove all special characters\n    text = re.sub(r'[\\s]+', ':', text)  # Replace multiple spaces with a single colon\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # The number is not present in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted array.\n        x (int): The number to search for.\n\n    Returns:\n        int: The index of the first occurrence of x in A. If x is not found in A, returns -1.\n    \"\"\"\n\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if not A or len(A) == 0:\n        return -1\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first element in A greater than or equal to x\n    i = bisect_left(A, x)\n\n    # If x is not present in A, i will be equal to len(A)\n    if i < len(A) and A[i] == x:\n        return i\n\n    # Otherwise, we need to search for x in the rest of the array\n    for j in range(i, len(A)):\n        if A[j] == x:\n            return j\n\n    # If we reach this point, x was not found in A\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the first index where A[i] is equal to x\n    first_index = -1\n    for i in range(len(A)):\n        if A[i] == x:\n            first_index = i\n            break\n    \n    # If x is not found in A, return -1\n    if first_index == -1:\n        return -1\n    \n    # Find the index of the first occurrence of x\n    first_occurrence_index = first_index\n    while first_occurrence_index < len(A) - 1 and A[first_occurrence_index] == x:\n        first_occurrence_index += 1\n    \n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function finds the index of the first occurrence of a given number x in a sorted array A.\n    Returns -1 if x is not found in A.\n    \"\"\"\n    low, high = 0, len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    if A[low] == x:\n        return low\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Returns the index of the first occurrence of x in the sorted array A.\n    If x is not found in A, returns -1.\n    \"\"\"\n\n    # Find the leftmost index of x\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x was not found in A, return -1\n    if left == len(A) or A[left]!= x:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * n\n    for i in range(n):\n        prefix_sum[i] = prefix_sum[i] + arr[i]\n\n    prefix_product = 1\n    for i in range(n):\n        prefix_product *= prefix_sum[i]\n\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            subarray_product = prefix_product\n            for k in range(i, j):\n                subarray_product *= prefix_sum[k]\n            result.append(subarray_product)\n\n    return sum(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    \n    # Initialize a list to store sum of products of all possible sublists\n    subarray_product = [0] * n\n    \n    # Initialize two pointers, one for the left end and the other for the right end\n    left = 0\n    right = 0\n    \n    # Calculate the product of the subarray from the left end to the right end\n    while right < n:\n        prod *= arr[right]\n        subarray_product[right] += prod\n        right += 1\n        \n    # Calculate the sum of products of all possible sublists\n    subarray_sum = sum(subarray_product)\n    \n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    subarray_product = [1] * n\n    prefix_product = [1] * n\n    for i in range(1, n):\n        prefix_product[i] = prefix_product[i - 1] * arr[i - 1]\n    for i in range(n - 2, -1, -1):\n        subarray_product[i] = subarray_product[i + 1] * arr[i + 1]\n    ans = 0\n    for i in range(n):\n        ans += subarray_product[i] * prefix_product[i]\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = [1] * n\n    # calculate product of all elements\n    for i in range(n):\n        prod[i] = arr[i] * prod[i]\n\n    # calculate sum of products of subarrays\n    subsum = [0] * (n+1)\n    subsum[0] = 0\n    for i in range(1, n+1):\n        subsum[i] = subsum[i-1] + prod[i-1]\n\n    # initialize result\n    result = 0\n\n    # calculate sum of products of subarrays\n    for i in range(n):\n        result += subsum[i+1] * arr[i]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # create an empty list to store products of sublists\n    sublist_products = []\n    # initialize variables\n    current_prod = 1\n    # loop through the list\n    for i in range(n):\n        # if the current element is the first element of a sublist, add 1 to the product\n        if i == 0:\n            current_prod = 1\n        # if the current element is part of a sublist, multiply the current product by the previous element\n        else:\n            current_prod *= arr[i-1]\n        # append the current product to the sublist_products list\n        sublist_products.append(current_prod)\n    # initialize variables\n    current_sum = 0\n    # loop through the sublist_products list\n    for i in range(len(sublist_products)):\n        # if the i-th element is the first element of a sublist, add its product to the current sum\n        if i == 0:\n            current_sum += sublist_products[i]\n        # if the i-th element is part of a sublist, add the product of the previous sublist to the current sum\n        else:\n            current_sum += sublist_products[i] * sublist_products[i-1]\n    return current_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    dp = [[1] * n for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            dp[i][j] = dp[i - 1][j] * arr[i]\n            dp[i][j] += dp[i - 1][j + 1] * arr[i]\n    total_sum = 0\n    for i in range(n):\n        total_sum += dp[n - 1][i] * dp[n - 1][i]\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def get_subarray_products(arr, start, end):\n        \"\"\"\n        Helper function to find products of subarrays of arr[start:end+1]\n        \"\"\"\n        result = 1\n        for i in range(start, end):\n            result *= arr[i]\n        return result\n\n    # find length of the array\n    n = len(arr)\n\n    # calculate products of all subarrays\n    subarray_products = []\n    for i in range(n):\n        subarray_products.append(get_subarray_products(arr, 0, i))\n\n    # calculate sum of products of all subarrays\n    sum_subarray_products = 0\n    for i in range(n):\n        sum_subarray_products += subarray_products[i]\n\n    return sum_subarray_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod_arr = [1] * n\n\n    for i in range(1, n):\n        prod_arr[i] = prod_arr[i - 1] * arr[i - 1]\n\n    subarray_sum = sum(arr)\n    total_sum = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            subarray_prod = prod_arr[j] - prod_arr[i - 1]\n            if subarray_prod <= subarray_sum:\n                total_sum += subarray_prod\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a list to store the products of subarrays\n    subarray_prod = [0] * (n + 1)\n    # Initialize the first element of the subarray_prod list\n    subarray_prod[0] = 1\n    for i in range(1, n + 1):\n        # Update the product of the current subarray\n        subarray_prod[i] = arr[i - 1] * subarray_prod[i - 1]\n        # Update the product of all possible subarrays till i-1\n        for j in range(i):\n            subarray_prod[j] *= arr[i - 1]\n    # Initialize the sum of products of all subarrays to 0\n    subarray_sum = 0\n    # Calculate the sum of products of all subarrays\n    for i in range(n + 1):\n        subarray_sum += subarray_prod[i]\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    # Initialize variables to store the sum of products and current product\n    s = 0\n    curr_prod = 1\n    \n    # Loop through all possible sublists of the given list\n    for i in range(n):\n        # Update the current product\n        curr_prod *= arr[i]\n        # Update the sum of products\n        s += curr_prod\n    \n    return s"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the index of the first and last bits\n    first_bit_index = bin(n).rfind('1')\n    last_bit_index = bin(n).rfind('0')\n    # Toggle the middle bits\n    middle_bits = n ^ (1 << first_bit_index) ^ (1 << last_bit_index)\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # initialize variables\n    i = 0\n    middle_bits = 0\n    bit = 1\n\n    # loop through bits of the number\n    while i < 32:\n        # if the current bit is not the first and the last bit, toggle it\n        if i!= 0 and i!= 31:\n            if n & bit:\n                n ^= bit\n            else:\n                n |= bit\n        # update variables\n        i += 1\n        bit <<= 1\n        middle_bits <<= 1\n\n    # return the middle bits of the number\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the index of the first and last bits\n    index = 0\n    while (n & 1) == 0:\n        n >>= 1\n        index += 1\n    first_bit = index\n    \n    index = 0\n    while (n & 1) == 1:\n        n >>= 1\n        index += 1\n    last_bit = index\n    \n    # Toggle the bits except the first and last bit\n    n = n ^ ((1 << (last_bit + 1)) - 1)\n    n = n ^ ((1 << (first_bit + 1)) - 1)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    n = bin(n)[2:]  # Convert number to binary string\n    n_len = len(n)  # Get the length of binary string\n    toggle_bit = n[n_len - 1]  # Get the last bit of the binary string\n\n    if toggle_bit == '0':\n        toggled_binary = '1' + n[:-1]  # Toggle the last bit\n    else:\n        toggled_binary = '0' + n[:-1]  # Toggle the last bit\n\n    return int(toggled_binary, 2)  # Convert the binary string back to integer"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # Find the position of the middle bit\n    mid = int(n.bit_length() / 2)\n\n    # Flip the first and last bits of the middle bit\n    f_bit = (n >> mid) & 1\n    l_bit = (n << 1) & 2\n    n = (n ^ f_bit ^ l_bit) << 1\n\n    # Flip the middle bit\n    n ^= (1 << mid)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # Extract the first and last bits from the number\n    first_bit = (n >> 63) & 1\n    last_bit = (n >> 0) & 1\n    \n    # Toggle the middle bits\n    toggled_middle_bits = (n ^ ((1 << 63) + (1 << 0)))\n    \n    # Set the middle bits to the toggled value\n    n = toggled_middle_bits\n    \n    # Set the first and last bits to their original values\n    n = (n << 63) | (first_bit << 62)\n    n = (n << 63) | (n << 0)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the first and last bit as the same as the input number\n    first_bit = (n & 1) ^ 1\n    last_bit = (n & (1 << 31)) ^ ((1 << 31) & 1)\n    # toggle the middle bits\n    middle_bits = n ^ (first_bit ^ last_bit)\n    # concatenate the first and the last bit with the middle bits to get the final result\n    return (first_bit << 31) | middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # Find the index of the first and last set bits\n    first_bit = n & -n\n    last_bit = n & -(n-1)\n    # Toggle the middle bits\n    middle_bit = (n ^ first_bit ^ last_bit) & ~(first_bit | last_bit)\n    # Set the middle bits to 1\n    n = n | middle_bit\n    # Set the first and last bits to 0\n    n = n & ~(first_bit | last_bit)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # We will use bitwise operators to toggle the middle bits\n    # We start by setting the first and last bit\n    n |= (1 << 31) # Set the last bit\n    n |= (1 << 0)  # Set the first bit\n    # Now we will use the bitwise AND operator to toggle the middle bits\n    n &= ~(1 << 1)   # Toggle the middle bit\n    # We will then use the bitwise NOT operator to toggle the first and last bit\n    n ^= ~(1 << 31)  # Toggle the last bit\n    n ^= ~(1 << 0)   # Toggle the first bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Create an array of 0s and 1s to represent the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # Toggle the first and last bits of the number\n    n = n ^ (first_bit | last_bit)\n    \n    # Set the middle bits to 1\n    for i in range(first_bit, last_bit):\n        n = n ^ (1 << i)\n    \n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the bisect function from the bisect module to find the insertion point\n    # of the specified value x in the sorted list a.\n    i = bisect.bisect_left(a, x)\n    \n    # Return the index i if the specified value x is already present in the list.\n    if i!= len(a) and a[i] == x:\n        return i\n    \n    # If the specified value x is less than all the elements in the list, then\n    # insert it at the beginning of the list.\n    elif i == 0:\n        return 0\n    \n    # If the specified value x is greater than all the elements in the list, then\n    # insert it at the end of the list.\n    elif i == len(a):\n        return len(a)\n    \n    # If the specified value x is in between the elements in the list, then\n    # find the leftmost element that is greater than or equal to x.\n    else:\n        j = i - 1\n        while a[j] == x:\n            j -= 1\n        return j + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    # find the leftmost index at which to insert x\n    i = bisect.bisect_left(a, x)\n    # if x already exists, return i\n    if i < len(a) and a[i] == x:\n        return i\n    # if x is greater than all elements to the left, return len(a)\n    elif i == 0:\n        return i\n    # if x is less than all elements to the left, return i - 1\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index > 0 and a[index - 1] == x:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        else:\n            return left_insertion(a[:index], x)\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_left(a, x, i, True)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif index > 0 and a[index-1]!= x:\n        return index-1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        print(\"The string is starting with a vowel.\")\n    else:\n        print(\"The string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.search(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    if re.match(regex, string): \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / (1 - 1 / (1 - 1 / (1 - 1 /... / 1 / (n-1))))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 1\n    else:\n        # recursive case\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (1 / n) * (geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Helper function to check if the given number is a triangular number\n    def is_triangular(num):\n        return num == int(str(num)[::-1])\n\n    # Helper function to find the next triangular number greater than the given number\n    def next_triangular(num):\n        triangular_numbers = []\n        for i in range(num+1, int(math.pow(10, n))+1):\n            triangular_numbers.append(i)\n        return max(triangular_numbers)\n\n    # Find the index of the smallest triangular number with n digits\n    index = 0\n    while index == 0 or not is_triangular(index):\n        index = next_triangular(index)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Calculate the number of digits in the smallest triangular number with n digits \n    num_digits = math.log10(n) + 1\n\n    # Calculate the largest power of 10 that is smaller than n \n    power_of_10 = int(math.log10(n))\n\n    # Initialize the smallest triangular number with n digits to the smallest triangular number with 10^n digits \n    smallest_triangular_number = 10**(power_of_10)\n\n    # Loop through the number of digits \n    for i in range(num_digits): \n        # Calculate the next smallest triangular number \n        next_smallest_triangular_number = smallest_triangular_number + 1\n\n        # Update the smallest triangular number \n        smallest_triangular_number = next_smallest_triangular_number\n\n        # Check if the smallest triangular number with n digits is greater than or equal to n \n        if smallest_triangular_number >= n: \n            break\n\n    # Return the index of the smallest triangular number with n digits \n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    def count_digit_occurence(n):\n        count = 0\n        for i in range(1, int(math.log10(n))+1):\n            count += n // (10 ** (i-1)) % 10\n        return count\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_triangular_number(n):\n        triangular_num = 0\n        while count_digit_occurence(triangular_num) < n:\n            triangular_num += 1\n        return triangular_num\n\n    def get_index(n):\n        while not is_prime(n):\n            n += 1\n        triangular_num = generate_triangular_number(n)\n        return count_digit_occurence(triangular_num)\n\n    return get_index(10)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # Calculate the number of digits in the input number\n    num_digits = len(str(n))\n\n    # Calculate the minimum number of digits required for the triangular number\n    min_digits = int(math.log10(n * (n + 1)) + 1)\n\n    # Check if the minimum number of digits required for the triangular number is less than n\n    if min_digits < n:\n        min_digits = n\n\n    # Initialize the index of the smallest triangular number with n digits to 1\n    min_index = 1\n\n    # Loop through all possible triangular numbers with n digits\n    for i in range(min_index, min_digits + 1):\n        triangular_num = i * (i + 1) // 2\n        triangular_num_digits = len(str(triangular_num))\n\n        # Check if the triangular number has n digits\n        if triangular_num_digits == n:\n            # Check if the triangular number is the smallest triangular number with n digits so far\n            if triangular_num < min_triangular:\n                min_index = i\n                min_triangular = triangular_num\n\n    # Return the index of the smallest triangular number with n digits\n    return min_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize variable for smallest triangular number with n digits\n    minTriangular = 0\n\n    # Initialize variable for smallest triangular number with n digits - 1\n    minTriangularMinusOne = 0\n\n    # Initialize variable for power of 10\n    power = 1\n\n    # Loop to find index of smallest triangular number with n digits\n    for i in range(n): \n\n        # Add power of 10 to minTriangular and minTriangularMinusOne\n        minTriangular += power * 10\n        minTriangularMinusOne += power * 9\n\n        # Add one to power\n        power *= 10\n\n        # If the difference between minTriangular and minTriangularMinusOne is less than n, the index is n - i\n        if abs(minTriangular - minTriangularMinusOne) < n:\n            return n - i\n\n    return -1 # If the loop is not completed, index is not found"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    # find the sum of the first n natural numbers\n    sum_n = sum([i for i in range(1, n+1)])\n    \n    # find the square root of the sum_n\n    sqrt_sum_n = math.sqrt(sum_n)\n    \n    # convert the square root to an integer\n    sqrt_sum_n_int = int(sqrt_sum_n)\n    \n    # find the number of digits in the square root\n    n_digits = len(str(sqrt_sum_n_int))\n    \n    # find the index of the smallest triangular number with n digits\n    index = (sqrt_sum_n_int ** 2 - (sum_n - sqrt_sum_n_int * sqrt_sum_n_int)) / (2 * sqrt_sum_n_int)\n    \n    # return the index\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Find the number of digits in the input number \n    num_digits = len(str(n)) \n    # Check if the number of digits is odd or even \n    if num_digits % 2 == 1: \n        # If the number of digits is odd, calculate the index as n - 1 \n        return n - 1 \n    else: \n        # If the number of digits is even, calculate the index as n/2 \n        return n // 2"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = []\n    triangular_numbers.append(1)\n    for i in range(1, n):\n        triangular_numbers.append(math.ceil(triangular_numbers[i-1]**(1/n)))\n    return triangular_numbers[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The index of the smallest triangular number with n digits is:\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Initialize a list to store the triangular numbers\n    triangular_numbers = []\n\n    # Calculate the first triangular number\n    triangular_numbers.append(1)\n\n    # Calculate the next n-1 triangular numbers\n    for i in range(2, n):\n        triangular_numbers.append(triangular_numbers[i-1] + triangular_numbers[i-2])\n\n    # Calculate the index of the smallest triangular number with n digits\n    smallest_triangular_number = triangular_numbers[-1]\n    index = triangular_numbers.index(smallest_triangular_number)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find smallest triangular number with n digits using the formula:\n    # T(n) = n(n+1)/2\n    triangular = int(math.sqrt(24 * n))\n    # Find the index of the smallest triangular number with n digits\n    index = 1\n    while triangular ** index < n:\n        index += 1\n    # Return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    for i in range(0, len(test_tup)-1, 2):\n        dict_[test_tup[i]] = test_tup[i+1]\n    return dict_\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(*test_tup))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n    # Iterate over the given tuple\n    for i in range(len(test_tup)):\n        # Check if the index is even or odd\n        if i % 2 == 0:\n            # Add the key to the dictionary\n            result_dict[i//2] = test_tup[i]\n        else:\n            # Add the value to the dictionary\n            result_dict[i//2 + 1] = test_tup[i]\n    # Return the resulting dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    d = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Convert the tuple to a dictionary using adjacent elements\n    dictionary = {}\n    i = 0\n    while i < len(test_tup):\n        dictionary[test_tup[i]] = test_tup[i+1]\n        i += 2\n\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 0:\n        result = {}\n        for i in range(0, len(test_tup), 2):\n            result[test_tup[i]] = test_tup[i+1]\n        return result\n    else:\n        print(\"Invalid tuple\")"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # find the first character of the string\n    first_char = s[0]\n    # loop through the string\n    for char in s:\n        # if the current character is different from the first character, then return False\n        if char!= first_char:\n            return False\n    # if no character is found that is different from the first character, then return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in range(1, len(s)):\n        if char!= s[i]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # taking the first character of the string\n    first_char = s[0]\n    # looping through the string\n    for i in range(1, len(s)):\n        # checking if the current character is same as the first character\n        if s[i]!= first_char:\n            # returning False if the character is not same\n            return False\n    # returning True if all characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the length of the string is equal to 1\n    if len(s) == 1:\n        return True\n    # Convert the string to a list\n    s_list = list(s)\n    # Check if all the characters in the list are the same\n    if s_list[0] == s_list[-1]:\n        return all_Characters_Same(s_list[1:-1])\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # creating a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterating through the string and counting the number of occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # checking if all the characters have the same count\n    if len(char_count) == 1 or len(set(char_count.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # check if the length of the string is zero or one\n    if len(s) == 0 or len(s) == 1:\n        return True\n    # check if all the characters in the string are same\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Check whether all the characters in a string are the same or not.\n    \"\"\"\n    if len(s) <= 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[2:])\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    area = 1/6 * (side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side ** 2 * math.sqrt(3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for area of tetrahedron\n    area = 1/6 * side ** 2 * (1 + math.cos(math.pi/3))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = side / 3\n\n    # Calculate the area of the tetrahedron\n    area = math.sqrt(3) * semi_perimeter ** 2\n\n    # Return the calculated area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side**2 / 4"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = 1/3 * side ** 3\n    return math.sqrt(s) * 4"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for calculating the area of a tetrahedron\n    area = (1/3) * side**2 * math.sin(math.pi/3)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    sp = (side ** 2) / 6\n    \n    # Calculate the area of the tetrahedron\n    area = (1 / 6) * sp * side\n    \n    # Return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (side + side + side + side) / 2\n    # calculate the area of a triangle\n    area_triangle = math.sqrt(semi_perimeter ** 2 - side ** 2)\n    # calculate the area of the tetrahedron\n    area_tetrahedron = (semi_perimeter * (semi_perimeter - side) * (semi_perimeter - side - side) / 6)\n    return area_tetrahedron"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.reverse()\n    list[n - m:] = list[:n - m]\n    list[:n - m] = []\n    list.reverse()"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n items\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Reverse the list\n    list = list[::-1]\n    # Get the length of the list\n    n = len(list)\n    # Rotate the list to the right by m items\n    list = list[m:] + list[:m]\n    # Reverse the rotated list again\n    list = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m == 0 or m >= n:\n        return list\n    # find the last element of the list and swap it with the first element\n    last = list[n - 1]\n    list[n - 1] = list[0]\n    # shift all elements from index 1 to n-1 one position to the right\n    for i in range(1, n - 1):\n        list[i] = list[i + 1]\n    list[0] = last\n    # return the rotated list\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a list by m items to the right.\n\n    Args:\n    lst (list): The list to rotate.\n    m (int): The number of items to rotate.\n\n    Returns:\n    A new list with the rotated elements.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    # Reverse the first m elements of the list\n    lst[:m] = lst[:m][::-1]\n    # Reverse the remaining elements of the list\n    lst[m:] = lst[m:][::-1]\n    # Reverse the entire list\n    lst = lst[::-1]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, n):\n    '''\n    This function takes a list and a number n as input. It rotates the list by n items to the right.\n    If n is greater than the length of the list, the function will rotate the entire list to the right.\n    '''\n    if n > len(lst):\n        n = n % len(lst)\n    lst.extend(lst[:n])\n    lst = lst[n:]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    for i in range(n-m, n):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum\n    where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: len(str(x)) == len(set(str(x))), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_list = []\n    for num in range(startnum, endnum+1):\n        # split the number into digits\n        digits = [int(digit) for digit in str(num)]\n        # check if every digit in the list is divisible by the number itself\n        if all(digit % num == 0 for digit in digits):\n            divisible_list.append(num)\n    return divisible_list"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digit_count = lambda x: len(set(str(x))) # lambda function to count the number of unique digits in a number\n    count = lambda x, y: x // y # lambda function to count the number of times a digit appears in a number\n\n    def is_divisible(num):\n        return all(digit_count(num) % count(num, i) == 0 for i in range(10)) # lambda function to check if a number is divisible by every digit in the range 0 to 9\n\n    return [num for num in range(startnum, endnum+1) if is_divisible(num)] # list comprehension to filter out all numbers not divisible by every digit in the range\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n\n    digits = set(str(num))\n\n    def is_divisible(num):\n        \"\"\"\n        Check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits_list = list(str(num))\n        for digit in digits_list:\n            if int(digit) not in digits:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum+1):\n        if is_divisible(num):\n            result.append(num)\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_every_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        return all(d in digits for d in digits)\n    \n    result = [num for num in range(startnum, endnum+1) if is_divisible_by_every_digit(num)]\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(n):\n        digits = [int(d) for d in str(n)]\n        return all(d in digits for d in digits)\n\n    return [n for n in range(startnum, endnum + 1) if is_divisible_by_digits(n)]\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(d) % int(str(x)[i]) == 0 for i, d in enumerate(str(x))), range(startnum, endnum+1))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = str(num)\n        for digit in digits:\n            if int(digit) % len(digits)!= 0:\n                return False\n        return True\n\n    def digits_from_num(num):\n        \"\"\"\n        Return a list of digits from a number.\n        \"\"\"\n        return [int(d) for d in str(num)]\n\n    numbers = [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n\n    for num in unique_numbers:\n        digits = digits_from_num(num)\n        print(num, end=\" \")\n        for digit in digits:\n            print(digit, end=\"\")\n        print()"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    digits = lambda x: [int(digit) for digit in str(x)]\n    is_divisible_by_digits = lambda x: all(digit in digits(x) for digit in str(x))\n    divisible_numbers = list(filter(is_divisible_by_digits, range(startnum, endnum+1)))\n    return divisible_numbers\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r**2) * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        theta = math.radians(a)\n        area = r * (math.sin(theta))**2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle cannot be larger than 360 degrees\")\n        return None\n    \n    area = math.pi * r ** 2 * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Error: Angle is larger than 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r*r*math.pi*a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    #Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    #Calculate area of sector using formula A = r * (pi * r^2) * sin(angle/180*pi)\n    area = r * math.pi * r**2 * math.sin(a/180*math.pi)\n    \n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Step 1: Compute the lengths of three strings using dynamic programming\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Initialize the 3x3 table to store lengths of subsequences\n    table = [[0 for j in range(o+1)] for i in range(m+1)]\n    \n    # Fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j] = table[i-1][j-1] + 1\n                else:\n                    table[i][j] = max(table[i-1][j], table[i][j-1], table[i-1][j-1])\n    \n    # Step 2: Construct the longest common subsequence using the 3x3 table\n    i = m\n    j = n\n    k = o\n    \n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n\n    # Step 1: Initialize 2D table to store length of LCS for all prefixes of X, Y and Z \n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n\n    # Create a 3D table to store length of LCS for all prefixes of X, Y and Z \n    lcs = [[[0 for j in range(p+1)] for i in range(n+1)] for k in range(m+1)] \n\n    # Step 2: Fill in the 2D table with length of LCS for all prefixes of X, Y and Z \n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            for k in range(1, p+1): \n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    lcs[i][j][k] = lcs[i-1][j][k] + 1\n                elif X[i-1] == Y[j-1]: \n                    lcs[i][j][k] = lcs[i-1][j][k]\n                elif Y[j-1] == Z[k-1]: \n                    lcs[i][j][k] = lcs[i][j-1][k]\n                else: \n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i-1][j-1][k])\n\n    # Step 3: Backtrack to find the actual LCS \n    i = n \n    j = m \n    k = p \n    lcs_result = \"\" \n\n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n            lcs_result = X[i-1] + lcs_result \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif X[i-1] == Y[j-1]: \n            i -= 1 \n        elif Y[j-1] == Z[k-1]: \n            j -= 1 \n        else: \n            k -= 1 \n\n    return lcs_result[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize the table to store the length of the longest common subsequence\n    table = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n    # Fill the table row by row\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Backtrack from the table to find the actual LCS\n    i = len(X)\n    j = len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store the length of LCS\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # fill in the table L[i][j] using dynamic programming\n    for i in range(m + 1):\n        for j in range(p + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # find the lcs\n    lcs = []\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reverse the lcs and return it\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        o = len(Z)\n        dp = [[[0 for j in range(o + 1)] for i in range(m + 1)] for k in range(n + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                for k in range(1, o + 1):\n                    if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                    elif X[i - 1] == Y[j - 1]:\n                        dp[i][j][k] = dp[i - 1][j][k]\n                    elif X[i - 1] == Z[k - 1]:\n                        dp[i][j][k] = dp[i][j - 1][k - 1]\n                    else:\n                        dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i - 1][j - 1][k - 1])\n        return dp[m][n][o]\n\n    if lcs(X, Y, Z) == 0:\n        return \"No common subsequence exists\"\n    else:\n        X = [X[i] for i in range(len(X)) if i <= lcs(X, Y, Z)]\n        Y = [Y[i] for i in range(len(Y)) if i <= lcs(X, Y, Z)]\n        Z = [Z[i] for i in range(len(Z)) if i <= lcs(X, Y, Z)]\n        lcs_list = []\n        while X and Y and Z:\n            if X[0] == Y[0] and Z[0] == X[0]:\n                lcs_list.append(X[0])\n                X = X[1:]\n                Y = Y[1:]\n                Z = Z[1:]\n            elif X[0] == Y[0]:\n                X = X[1:]\n                Y = Y[1:]\n            elif X[0] == Z[0]:\n                X = X[1:]\n                Z = Z[1:]\n            else:\n                X = X[1:]\n                Y = Y[1:]\n        return ''.join(lcs_list[::-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Create a 2D table to store lengths of LCS for subproblems\n    L = [[0] * (len(Y) + 1) for i in range(len(X) + 1)]\n\n    # Fill the table in bottom-up fashion\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Find the LCS using the table\n    i, j = len(X), len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS and return it\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize three lists to store the lengths of the longest common subsequences \n    # for all three sequences. \n    LCS1 = [[0]*(len(Y)+1) for i in range(len(X)+1)] \n    LCS2 = [[0]*(len(Z)+1) for i in range(len(X)+1)] \n    LCS3 = [[0]*(len(Y)+1) for i in range(len(X)+1)] \n\n    # Fill the LCS matrices using dynamic programming. \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                LCS1[i][j] = LCS1[i-1][j-1] + 1\n            else: \n                LCS1[i][j] = max(LCS1[i-1][j], LCS1[i][j-1]) \n\n    for i in range(1, len(X)+1): \n        for j in range(1, len(Z)+1): \n            if X[i-1] == Z[j-1]: \n                LCS2[i][j] = LCS2[i-1][j-1] + 1\n            else: \n                LCS2[i][j] = max(LCS2[i-1][j], LCS2[i][j-1]) \n\n    for i in range(1, len(Y)+1): \n        for j in range(1, len(Z)+1): \n            if Y[i-1] == Z[j-1]: \n                LCS3[i][j] = LCS2[i-1][j-1] + 1\n            else: \n                LCS3[i][j] = max(LCS2[i-1][j], LCS2[i][j-1]) \n\n    # Find the length of the longest common subsequence. \n    len_lcs = LCS3[len(Y)][len(Z)] \n\n    # Find the index of the last character of the longest common subsequence. \n    i, j = len(X), len(Y) \n\n    while LCS3[i][j]!= len_lcs: \n        if X[i-1] == Y[j-1]: \n            i -= 1\n        else: \n            j -= 1\n\n    # Extract the longest common subsequence from the input sequences. \n    lcs = [] \n    while i >= 0 and j >= 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1\n            j -= 1\n        elif LCS1[i-1][j] > LCS1[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n\n    return lcs[::-1] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function finds the longest common subsequence (LCS) for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    # create a table to store lengths of LCS of substrings \n    L = [[0] * (p+1) for i in range(m+1)] \n    # fill the table in bottom up manner \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, p+1): \n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif L[i-1][j][k] > L[i][j-1][k]: \n                    L[i][j][k] = L[i-1][j][k] \n                elif L[i][j-1][k] > L[i][j][k-1]: \n                    L[i][j][k] = L[i][j-1][k] \n    # print the length of LCS for each substring \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    print(0, end=' ') \n                elif X[i-1] == Y[j-1] and Z[k-1] == X[i-1]: \n                    print(L[i][j][k], end=' ') \n                else: \n                    print(max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]), end=' ') \n    # find the length of LCS of the three strings \n    lcs_len = L[m][n][p] \n    return lcs_len"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Find lengths of three strings\n    n, m, l = len(X), len(Y), len(Z)\n    # Initialize LCS matrix\n    L = [[0] * (l+1) for i in range(n+1)]\n    # Fill the LCS matrix in bottom-up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(l+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n    # Return the length of the LCS\n    return L[n][m][l]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'(?<!\\w)([A-Z][a-z]+|[A-Z]+(?=[A-Z][a-z])|[a-z]+(?=[A-Z])|[A-Z][a-z])(?!\\w)'\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern for capturing capital words\n    pattern = r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\b[A-Z](?=[a-z]|[A-Z]\\.)(?!\\w)'\n\n    # Replace the pattern with spaces between the words\n    result = re.sub(pattern, r' \\1', str1)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # Find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, str1)\n    \n    # Iterate over the matches and replace the capital letters with spaces\n    for i, match in enumerate(matches):\n        if i == 0 or matches[i-1]!= match:\n            str1 = str1[:matches.index(match)] +'' + str1[matches.index(match):]\n    \n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    str2 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    # Split the string into words\n    words = str2.split()\n    # Capitalize the first letter of each word and join the words with spaces\n    new_words = [word.capitalize() for word in words]\n    result =''.join(new_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # replace all non-alphanumeric characters with spaces\n    string = re.sub('[^a-zA-Z0-9]+','', string)\n    # split the string into words\n    words = string.split()\n    # capitalize the first letter of each word and join them with spaces\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Iterate over the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n\n    # Join the words with spaces between them\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all the non-alphanumeric characters from the string\n    str1 = re.sub('[^a-zA-Z0-9]+','', str1)\n    # Split the string into words using spaces as the delimiter\n    words = str1.split()\n    # Capitalize the first letter of each word and join the words with spaces\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(s):\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    words = re.findall(pattern, s)\n    new_words = []\n    for word in words:\n        new_word = word.strip()\n        if new_word:\n            new_words.append(new_word +'')\n    return ''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove any special characters from the string\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n\n    # Split the string into words\n    words = str1.split()\n\n    # Capitalize the first letter of each word and join the words with spaces\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to find all capital words\n    regex = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(regex, str1)\n\n    # Iterate over all words and replace first character with space and insert a space between them\n    for i in range(len(words)):\n        words[i] ='' + words[i][0].lower() + words[i][1:]\n\n    # Join the words with spaces and return\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    # Splitting the strings to numbers\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    # Sorting the numbers\n    nums.sort()\n    # Converting the sorted numbers back to strings\n    nums_str = [str(num) for num in nums]\n    # Returning the sorted strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # convert the list of strings to list of integers\n    nums_int = list(map(int, nums_str))\n    # sort the list of integers using the built-in sort() function\n    nums_int.sort()\n    # convert the sorted list of integers back to list of strings\n    nums_str = list(map(str, nums_int))\n    # return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n\n    :param nums_str: list of strings of numbers\n    :return: sorted list of strings of numbers\n    \"\"\"\n    # convert all strings to float and sort them numerically\n    nums = [float(num) for num in nums_str]\n    nums.sort()\n    # convert sorted list back to strings and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to float\n    nums_float = [float(num_str) for num_str in nums_str]\n    # Sort the list of floats\n    nums_float.sort()\n    # Convert all floats back to strings and return the sorted list\n    return [str(num) for num in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings in the list to float values\n    nums_float = [float(num_str) for num_str in nums_str]\n    # Sort the list numerically\n    nums_float.sort()\n    # Convert the sorted list back to strings\n    nums_str = [str(num_float) for num_float in nums_float]\n    # Return the sorted list of strings of numbers\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings to float values\n    nums = [float(num) for num in nums_str]\n    # sort the float values using the built-in sort() function\n    nums.sort()\n    # convert back to strings and return the sorted list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function sorts a given list of strings of numbers numerically.\n    '''\n    # Splitting the strings into a list of numbers\n    nums = [float(num_str) for num_str in nums_str]\n    # Sorting the list numerically\n    nums.sort()\n    # Converting the sorted list back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float and remove any non-numeric characters\n    nums = [float(''.join(filter(str.isdigit, s))) for s in nums_str]\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Convert the sorted list back to strings and return it\n    return [''.join(map(str, num)) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list of strings to a list of numbers\n    nums = [int(num) for num in nums_str]\n\n    # Use the built-in sorted() function to sort the list\n    nums.sort()\n\n    # Convert the sorted list back to a list of strings\n    nums_str = [str(num) for num in nums]\n\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i]) + tuple(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n\n    # Add the tuple to the list\n    test_list.extend(test_tup)\n\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n\n    if arr[parent] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    # If left child of root is smaller than root\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    # If right child of root is smaller than smallest so far\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    # If root is not the smallest element, swap the root with the smallest element\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i == len(arr) - 1:\n        return True\n    elif arr[i] >= arr[i//2] and arr[i] >= arr[2*i+1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n    if i == 0:\n        if arr[0] < arr[1]:\n            return False\n        return check_min_heap_helper(arr, i-1)\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    if len(arr) % 2 == 1:\n        return False\n    return check_min_heap_helper(arr, len(arr)-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # If the root is not the last element in the array, then it cannot be a min heap\n    if i < len(arr) - 1:\n        # Check if the left child is smaller than the root\n        if arr[i] > arr[2 * i]:\n            return False\n        # Check if the right child is smaller than the root\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        # If both the children are smaller than the root, then it cannot be a min heap\n        return check_min_heap_helper(arr, 2 * i + 1)\n    # If the root is the last element in the array, then it is a min heap\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    # Check if the array has a single element\n    if len(arr) == 1:\n        return True\n    # Check if the array has a minimum number of elements\n    if len(arr) < 2:\n        return False\n    # Check if the root is smaller than the first element\n    if arr[0] > arr[1]:\n        return False\n    # Check the helper function recursively for each element in the array\n    return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    n = len(arr)\n\n    # Build heap (rearrange array)\n    for i in range(n//2-1, -1, -1):\n        heapq.heapify(arr, i, n)\n\n    # Check if array is min heap or not\n    for i in range(n-1, 0, -1):\n        if arr[0] > arr[i]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    # check if the element at index i is less than the parent element\n    if i > 0 and arr[i] < arr[int(i/2)]:\n        return False\n    # check if the left and right children of the element at index i are also min heaps\n    if 2*i+1 < len(arr) and not check_min_heap_helper(arr, 2*i+1):\n        return False\n    if 2*i+2 < len(arr) and not check_min_heap_helper(arr, 2*i+2):\n        return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents min heap or not.\n    A binary heap is a binary tree data structure in which the value of each parent node is less than or equal to the values of its children.\n    \n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    '''\n    if i == 0:\n        return True\n    if arr[i] <= arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap(arr):\n    n = len(arr)\n\n    # loop through the array and check if the parent node is smaller than its child nodes\n    for i in range(n//2-1, -1, -1):\n        if arr[i] > arr[2*i+1] or (arr[i] == arr[2*i+1] and i > 0 and arr[i] > arr[2*i]):\n            return False\n\n    # check if the last node is larger than its children\n    if n % 2!= 0 and arr[n//2] > arr[n//2-1]:\n        return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap(arr):\n    n = len(arr)\n\n    for i in range(n//2 - 1, -1, -1):\n        if arr[i] > arr[i+1]:\n            return False\n\n    for i in range(n//2, n):\n        if arr[i] < arr[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two numbers in the sequence\n    a = 1\n    b = 1\n\n    # Initialize a variable to keep track of the current number being calculated\n    current_num = a\n\n    # Loop through the sequence until we have found the nth number\n    for i in range(n): \n        # Calculate the next number in the sequence\n        current_num = a + b\n\n        # Print the current number in the sequence\n        print(current_num, end=' ')\n\n        # Update the values of a and b for the next iteration\n        a = b\n        b = current_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    jacob = 0\n    jacob_prev = 1\n    jacob_curr = 1\n\n    # Loop through the nth number of iterations\n    for i in range(n):\n        # Calculate the next number\n        jacob_next = (jacob_prev * jacob_prev) % 1000000007\n        jacob = jacob_curr + jacob_next\n        \n        # Update the values for the next iteration\n        jacob_prev = jacob_curr\n        jacob_curr = jacob_next\n\n    # Return the nth number\n    return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num = 0\n    jacobsthal_lucas_num = 1\n    while jacobsthal_num < n:\n        if jacobsthal_num == 0:\n            jacobsthal_num = 1\n        else:\n            jacobsthal_num = jacobsthal_lucas_num + jacobsthal_num\n        jacobsthal_lucas_num += 2\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ \n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The {}th Jacobsthal number is: {}\".format(n, jacobsthal_num(n)))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the jacobsthal number\n    j = 1\n\n    # Calculate the first n jacobsthal numbers\n    for i in range(2, n+1):\n        # Calculate the jacobsthal number\n        j += i\n\n        # Print the jacobsthal number\n        if i % 10 == 0:\n            print(j)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob = [0, 1]\n    for i in range(2, n):\n        jacob.append(jacob[i-1] + jacob[i-2])\n    return jacob[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the variables\n    a = 1\n    b = 1\n\n    # Loop through the range of n and calculate the jacobsthal number\n    for i in range(1, n+1):\n        # Calculate the next jacobsthal number\n        c = a + b\n\n        # Update the values of a and b\n        a = b\n        b = c\n\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        j = 1\n        for i in range(1, n+1): \n            j = (j * i) % 21 \n\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob = n - 1\n        lucas = 1\n        while jacob >= 1:\n            jacob_temp = (jacob * jacob) // 2\n            lucas = lucas + jacob_temp\n            jacob = jacob_temp\n        return lucas"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \"\"\"\n    test_list.sort(key=lambda x: x[1])\n    count = 0\n    min_key = None\n    min_val = None\n    for i in range(len(test_list)):\n        if count == K:\n            break\n        if test_list[i][0] == min_key:\n            count += 1\n        elif count < K:\n            if min_key is None or test_list[i][1] < min_val:\n                min_key = test_list[i][0]\n                min_val = test_list[i][1]\n                count += 1\n            elif test_list[i][1] == min_val:\n                count += 1\n    return min_key"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_records = []\n    for i in range(len(test_list)):\n        min_records.append(test_list[i][0])\n    min_records.sort()\n    min_record = min_records[K-1]\n    return min_record"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Initialize min_value to infinity\n    min_value = float('inf')\n    # Initialize count to 0\n    count = 0\n    # Iterate over the list\n    for tup in test_list:\n        # If the tuple is not empty and the sum of the tuple is less than min_value, update min_value and count\n        if tup!= () and sum(tup) < min_value:\n            min_value = sum(tup)\n            count = 1\n        # If the tuple is not empty and the sum of the tuple is equal to min_value, increment count\n        elif tup!= () and sum(tup) == min_value:\n            count += 1\n    # Return the minimum k records\n    return test_list[:count]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and a number K as input, and returns a list of tuples that are the K minimum records in the list.\n    '''\n    # sort the list based on the second element of each tuple (i.e., the second element)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # initialize an empty list to hold the K minimum records\n    k_min_records = []\n\n    # loop through the sorted list and add the K minimum records to the k_min_records list\n    for i in range(K):\n        k_min_records.append(sorted_list[i])\n\n    # return the k_min_records list\n    return k_min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    freq_dict = {}\n    for element in test_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    min_set = set()\n    for element, freq in freq_dict.items():\n        if len(min_set) < K:\n            min_set.add(element)\n        else:\n            if freq < min(min_set, key=freq_dict.get):\n                min_set.discard(min(min_set))\n                min_set.add(element)\n    \n    return min_set"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1]) # sort the list by the second element of each tuple\n    min_set = set() # set to store the minimum K records\n\n    for i in range(len(test_list)):\n        min_set.add(test_list[i]) # add the minimum K records to the set\n\n        if len(min_set) == K:\n            break\n\n    return sorted(min_set) # sort the set and return it"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    result = []\n    for i in range(len(test_list)-K+1):\n        result.append(test_list[i])\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples, and finds the minimum K records from the list.\n\n    Args:\n    test_list (list): A list of tuples containing data.\n    K (int): The number of records to find.\n\n    Returns:\n    list: A list of tuples containing the minimum K records from the input list.\n    \"\"\"\n\n    # Sort the list based on the first element of the tuples (sorted by ascending order)\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize a list to store the minimum K records\n    min_records = []\n\n    # Iterate through the sorted list and add the first K records to the min_records list\n    for i in range(K):\n        min_records.append(sorted_list[i])\n\n    # Return the min_records list\n    return min_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n    test_list (list): a list of tuples, where each tuple contains two integers (a, b)\n    K (int): the number of records to find the minimum of\n\n    Returns:\n    list: a list of tuples containing the minimum k records from the input list\n\n    \"\"\"\n    # create a dictionary to store the frequency of each number in the test_list\n    num_freq = {}\n    for tup in test_list:\n        num = tup[0]\n        if num in num_freq:\n            num_freq[num] += 1\n        else:\n            num_freq[num] = 1\n    \n    # find the minimum k numbers from the dictionary\n    min_nums = []\n    for num, freq in num_freq.items():\n        if freq == min(num_freq.values()):\n            min_nums.append(num)\n            if len(min_nums) == K:\n                break\n    \n    # return the minimum k numbers as a list of tuples\n    return [tuple(sorted([num, num_freq[num]])) for num in min_nums]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Input:\n    test_list: list of tuples of the form (key, value)\n    K: integer, the minimum number of records to be returned\n    \n    Output:\n    A tuple containing the minimum k records from the test_list\n    \n    Time Complexity: O(nlogn)\n    '''\n\n    # Sort the list based on the key in ascending order\n    test_list.sort()\n\n    # Initialize variables for minimum and maximum keys\n    min_key = test_list[0][0]\n    max_key = test_list[0][0]\n    min_value = test_list[0][1]\n    max_value = test_list[0][1]\n\n    # Loop through the sorted list\n    for i in range(1, len(test_list)):\n        # If the current key is greater than the maximum key\n        if test_list[i][0] > max_key:\n            # Update the maximum key and maximum value\n            max_key = test_list[i][0]\n            max_value = test_list[i][1]\n\n        # If the current key is equal to the maximum key and value\n        elif test_list[i][0] == max_key and test_list[i][1] > max_value:\n            # Update the maximum value\n            max_value = test_list[i][1]\n\n        # If the current key is less than the minimum key\n        elif test_list[i][0] < min_key:\n            # Update the minimum key and minimum value\n            min_key = test_list[i][0]\n            min_value = test_list[i][1]\n\n        # If the current key is equal to the minimum key and value\n        elif test_list[i][0] == min_key and test_list[i][1] < min_value:\n            # Update the minimum value\n            min_value = test_list[i][1]\n\n    # Initialize variables for the minimum and maximum values\n    min_k_value = max_value\n    max_k_value = min_value\n\n    # Loop through the sorted list again to find the minimum k values\n    for i in range(len(test_list) - 1, -1, -1):\n        # If the minimum value is greater than the current key and value\n        if min_k_value < test_list[i][1] and min_k_value < max_k_value:\n            # Update the minimum k value\n            min_k_value = test_list[i][1]\n\n        # If the maximum value is less than the current key and value\n        elif max_k_value > test_list[i][1] and max_k_value > min_k_value:\n            # Update the maximum k value\n            max_k_value = test_list[i][1]\n\n        # If the minimum k value is greater than or equal to the maximum k value\n        if min_k_value >= max_k_value:\n            break\n\n    # Return the minimum k value\n    return (min_key, min_k_value)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # initialize an empty set to store common elements\n    common_set = set()\n    \n    # iterate over all elements of list l1 and list l2\n    for i in range(len(l1)):\n        # check if the element at index i is present in list l2 and list l3\n        if l1[i] in l2 and l1[i] in l3:\n            # add the element to the common set\n            common_set.add(l1[i])\n    \n    # return the list of common elements\n    return list(common_set)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Create an empty list to store common elements\n    common = []\n\n    # Loop through all elements in the first list\n    for i in range(len(l1)):\n        # If the element is in the second list, check if it is in the third list\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, append it to the common list\n            common.append(l1[i])\n\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_elements = []\n    \n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest and numbers[i]!= smallest:\n                second_smallest = numbers[i]\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = None\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest or second_smallest is None:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the second smallest number.\n    If there are less than two numbers in the list, it will return None.\n    \"\"\"\n\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for num in numbers[2:]:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b.*')\n    matches = pattern.findall(text)\n    if matches:\n        print(\"Matches found:\")\n        for match in matches:\n            print(match)\n    else:\n        print(\"No matches found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = r'ab*'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?<=a)(b|){1,}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)?'\n    result = re.search(pattern, text)\n    \n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b)*')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    # Create a set to store the unique characters of the given string list\n    unique_chars = set()\n\n    # Iterate over the string list\n    for string in test_list:\n        # Convert the string to a list of characters\n        chars = list(string)\n\n        # Reverse the characters of the string\n        reversed_chars = chars[::-1]\n\n        # Add the reversed characters to the unique characters set\n        unique_chars.update(reversed_chars)\n\n    # Initialize the count of reverse pairs\n    count = 0\n\n    # Iterate over the unique characters of the string list\n    for char in unique_chars:\n        # Count the number of pairs of reverse characters in the string list\n        count += (test_list.count(char) * (test_list.count(char) - 1)) // 2\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # Define a helper function to check if a substring is a reverse of another substring\n    def is_reverse(s1, s2):\n        return s1 == s2[::-1]\n\n    # Initialize a dictionary to store the frequency of reverse pairs\n    reverse_count = {}\n\n    # Iterate over the strings in the list and count the reverse pairs\n    for s1 in test_list:\n        for s2 in test_list:\n            # Skip identical strings\n            if s1 == s2:\n                continue\n\n            # Check if s1 and s2 are reversed\n            if is_reverse(s1, s2):\n                # Increment the count of the reversed pair\n                if s1 in reverse_count:\n                    reverse_count[s1] += 1\n                else:\n                    reverse_count[s1] = 1\n\n    # Return the count of reverse pairs\n    return sum(reverse_count.values())"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    reverse_dict = {}\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                if test_list[j] not in reverse_dict:\n                    reverse_dict[test_list[j]] = 1\n                else:\n                    count += reverse_dict[test_list[j]]\n                if test_list[i] not in reverse_dict:\n                    reverse_dict[test_list[i]] = 1\n                else:\n                    count += reverse_dict[test_list[i]]\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Use a set to remove duplicates and store unique strings in it\n    unique_strings = set(test_list)\n\n    # Initialize a dictionary to store the frequency of each string in the set\n    freq = {}\n\n    # Iterate through each string in the set\n    for string in unique_strings:\n        # Reverse the string and check if it is already in the dictionary\n        reverse_string = string[::-1]\n        if reverse_string in freq:\n            # Increment the count of the string in the dictionary\n            freq[reverse_string] += 1\n        else:\n            # If not, add the string to the dictionary with a count of 1\n            freq[reverse_string] = 1\n\n    # Initialize a counter for the number of pairs of reverse strings\n    count = 0\n\n    # Iterate through each string in the set again\n    for string in unique_strings:\n        # Check if the string has a count of 2 in the dictionary\n        if freq[string] == 2:\n            # Calculate the number of pairs of reverse strings\n            count += freq[string] - 1\n\n    # Return the number of pairs of reverse strings\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Create an empty dictionary to store the counts of reverse pairs\n    count_dict = {}\n\n    # Loop through the list of strings\n    for string in test_list:\n        # Reverse the string and check if it exists in the dictionary\n        if string[::-1] in count_dict:\n            # Increment the count for the given pair in the dictionary\n            count_dict[string[::-1]] += 1\n        else:\n            # Add the string to the dictionary with a count of 1\n            count_dict[string[::-1]] = 1\n\n    # Return the count of reverse pairs\n    return sum(count_dict.values())"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n\n    for string1 in test_list:\n        for string2 in test_list:\n            if string1!= string2 and string1[::-1] == string2:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] or test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates and then back to a list to get the unique sublists\n    unique_sublists = list(set([tuple(sorted(sublist)) for sublist in list1]))\n    # Initialize the dictionary to store the counts of unique sublists\n    sublist_counts = {}\n    # Loop through the unique sublists and count their occurrences\n    for sublist in unique_sublists:\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        else:\n            sublist_counts[sublist] = 1\n    # Return the dictionary of unique sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    count = {}\n    for i in range(len(lst)):\n        sublist = tuple(lst[i:i+2])\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the counts of unique sublists\n    counts = {}\n    \n    # Loop through each element in the list\n    for i in list1:\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if tuple(i) in counts:\n            # If it is, increment the count\n            counts[tuple(i)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[tuple(i)] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each sublist\n    count_dict = {}\n    # iterate over the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sorted(sublist)) in count_dict:\n            # increment the count of the sublist in the dictionary\n            count_dict[tuple(sorted(sublist))]+=1\n        else:\n            # add the sublist to the dictionary with a count of 1\n            count_dict[tuple(sorted(sublist))] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each tuple\n    count_dict = {}\n    # iterate through each element in the list\n    for element in list1:\n        # convert the element to a tuple and check if it's already in the dictionary\n        if tuple(element) in count_dict:\n            # increment the count for the tuple\n            count_dict[tuple(element)] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tuple(element)] = 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for lst in list1:\n        sublist_tuple = tuple(lst)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the results\n    result = {}\n\n    # loop through the list1\n    for item in list1:\n        # convert the item to a tuple and add it to the result dictionary\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n\n    # return the result dictionary\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in count_dict:\n            count_dict[item_tuple] += 1\n        else:\n            count_dict[item_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the unique sublists and their counts\n    sublists = {}\n    for i in range(len(list1)):\n        # Convert the list to tuple and check if it is in the dictionary\n        if tuple(list1[i]) not in sublists:\n            sublists[tuple(list1[i])] = 1\n        else:\n            sublists[tuple(list1[i])] += 1\n    return sublists"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    # Check if the given number is a float\n    if isinstance(num, float):\n        # Check if the number is a decimal number with a precision of 2\n        if num.is_integer() and abs(num - int(num)) < 0.01:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer() and abs(float_num - int(float_num)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = float(num)\n    if num.is_integer() and num.as_integer_ratio()[1] == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    # Convert the string to a float with 2 decimal places\n    num = float(num)\n    # Check if the float has a precision of 2\n    if abs(num - int(num)) > 0.01:\n        return False\n    # If the input is a decimal number with precision of 2, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    int_part = parts[0]\n    dec_part = parts[1]\n    if not int_part.isdigit():\n        return False\n    for digit in dec_part:\n        if digit not in '0123456789':\n            return False\n    if len(dec_part) > 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    if '.' not in num and len(num) > 2:\n        return False\n    else:\n        for i in num:\n            if not i.isdigit():\n                return False\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n\n    num_split = num.split('.')\n    int_part = num_split[0]\n    dec_part = num_split[1]\n\n    if len(int_part) > 10 or len(dec_part) > 2:\n        return False\n\n    for digit in int_part:\n        if not digit.isdigit():\n            return False\n\n    if len(dec_part) == 2:\n        for digit in dec_part:\n            if not digit.isdigit():\n                return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the string contains only digits\n    if not num.isdigit():\n        return False\n    \n    # Convert the string to float and check if it is a decimal number with a precision of 2\n    try:\n        float_num = float(num)\n        if str(float_num).split('.')[-1] == '00':\n            return True\n    except ValueError:\n        return False\n    \n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the string contains only digits and decimal point\n    if not num.replace('.', '', 1).isdigit():\n        return False\n\n    # Split the string into integer and decimal parts\n    integer_part = num.replace('.', '', 1)\n    decimal_part = num.replace('.', '', 1).split('.')[1]\n\n    # Check if the decimal part has a precision of 2\n    if len(decimal_part) > 2:\n        return False\n\n    # Check if the integer part is within the range of 2^31 to 2^32-1\n    if int(integer_part) < -(1 << 31) or int(integer_part) > (1 << 31) - 1:\n        return False\n\n    # Check if the integer and decimal parts are valid integers\n    if not all(int(digit) == digit for digit in integer_part):\n        return False\n    if not all(int(digit) == digit for digit in decimal_part):\n        return False\n\n    # Convert the integer part and decimal part to integers and float\n    integer_part = int(integer_part)\n    decimal_part = float(decimal_part)\n\n    # Multiply the integer part and decimal part and check if the result is within the range of 2^31 to 2^32-1\n    result = integer_part * decimal_part\n    if result < -(1 << 31) or result > (1 << 31) - 1:\n        return False\n\n    # Return True if all checks pass\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, \n    otherwise it returns False.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i])!= 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element.\n    \"\"\"\n    unique_elements = list(set(arr))\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list does not contain only one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct = False\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            distinct = True\n            break\n    if distinct:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_flag = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique_flag = False\n                break\n    return unique_flag"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n            return False\n        else:\n            print(\"Invalid input\")\n    else:\n        print(\"Invalid input\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return True\n    elif monthnum3 in [2]:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1,13):\n        if monthnum3 == 2:\n            if 28 in [int(year) % 4 for year in str(2020)]:\n                return months[monthnum3-1] +'has 29 days'\n            else:\n                return months[monthnum3-1] +'has 28 days'\n        else:\n            return months[monthnum3-1] +'has 30 days'\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month has 30 days or False otherwise.\n    Month numbers are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)): # checking for February in a leap year\n        return True\n    elif monthnum3 in [4, 6, 9, 11]: # checking for months that have 30 days\n        return True\n    else: # otherwise, the month has 31 days\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number. Month number should be from 1 to 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"The given month number contains 30 days.\")\n    else:\n        print(\"The given month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print(monthnum3, \"contains 30 days\")\n    else:\n        print(monthnum3, \"does not contain 30 days\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        if monthnum3 % 10 == 0:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return \"Array must have at least 2 elements\"\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize variables to keep track of the minimum and maximum differences seen so far\n    min_diff = float('inf')\n    max_diff = float('-inf')\n    \n    # Iterate through the array and calculate the minimum and maximum differences\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i] - arr[i+1])\n        max_diff = max(max_diff, arr[i+1] - arr[i])\n    \n    # Return the minimum difference between any two elements in the array\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the given array in ascending order\n    arr.sort()\n\n    # Initialize variables to store minimum and maximum values\n    min_diff = float('inf')\n    min_val = float('inf')\n    max_val = float('inf')\n\n    # Loop through the array\n    for i in range(n):\n        # Update minimum and maximum values\n        min_val = min(min_val, arr[i])\n        max_val = max(max_val, arr[i])\n\n        # Calculate the minimum difference\n        diff = max_val - min_val\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables for the minimum difference\n    min_diff = arr[1] - arr[0]\n    min_index = 0\n\n    # Iterate through the array\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i-1]\n\n        # If the difference is smaller than the minimum difference found so far, update the minimum difference and its index\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    # Return the minimum difference and its index\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    min_elements = []\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_elements = [arr[i], arr[j]]\n\n    return min_diff, min_elements"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sorting the array\n    arr.sort()\n\n    # Initializing minimum difference variable\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Looping through the array to find minimum difference between any two elements\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input, and returns the minimum difference between any two elements in the array.\n    '''\n\n    # Initialize the minimum difference to the maximum value\n    min_diff = float('inf')\n\n    # Traverse through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n\n            # Find the difference between the two elements and update the minimum difference\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n\n    # initialize min_diff with the difference of first and last element\n    min_diff = arr[-1] - arr[0]\n\n    # loop through the array and compare each element with the previous element\n    for i in range(1, n - 1):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n\n    # return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    count = 0\n\n    for char in str:\n        if char.isdigit():\n            count += 1\n\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. \n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return math.floor((1/2 + 1/2**n + 1/4**n + 1/8**n +... + 1/(2**n - 1))/(2**n - 1))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def nth_polite_number(a, b, n):\n        \"\"\"\n        Returns the nth polite number of the given numbers.\n        \"\"\"\n        # Initialize a and b with the first two polite numbers\n        a = max(a, b)\n        b = min(a, b)\n\n        # Calculate the difference between a and b\n        diff = b - a\n\n        # If the difference is odd, take the smallest positive integer greater than n\n        if diff % 2 == 1:\n            return max(a + math.ceil(diff/2), 2)\n\n        # If the difference is even, take the smallest positive integer greater than n/2\n        else:\n            return max(a + math.ceil(diff/2), 2)\n\n    # Initialize a and b with the first two polite numbers\n    a = 1\n    b = 1\n\n    # Find the nth polite number\n    nth_polite = nth_polite_number(a, b, n)\n\n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return \"Input should be greater than 0\"\n    elif n == 1:\n        return 1\n    else:\n        # Finding the nth polite number using binary search\n        low = 1\n        high = 2147483647  # 2^31 - 1\n        count = 0\n        while low <= high:\n            mid = (low + high) // 2\n            if count == n-1:\n                return mid\n            elif count > n-1:\n                high = mid - 1\n            else:\n                low = mid + 1\n            count += 1\n            \n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Check if the number is greater than 0\n    if n <= 0:\n        return False\n\n    # Initialize the list of polite numbers\n    polite_numbers = []\n\n    # Loop through the numbers 1 to n\n    for i in range(1, n+1):\n        # If the number is a polite number, append it to the list\n        if i % math.sqrt(i) == 1:\n            polite_numbers.append(i)\n\n    # Return the nth polite number\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = math.ceil(math.log10(n)) # find the number of digits in n \n    b = math.ceil(math.log10(2*n-1)) # find the number of digits in (2n-1)\n    max_dig = max(a,b) # find the maximum number of digits in the range of n \n    polite_num = n+1 # initialize the nth polite number to n+1\n    \n    while True:\n        # check if the polite number is divisible by 10^max_dig\n        if polite_num % (10**max_dig) == 0:\n            break\n        # check if the polite number is divisible by 2^(2max_dig)\n        if polite_num % (2**(2*max_dig)) == 0:\n            break\n        # check if the polite number is divisible by (2*n-1)\n        if polite_num % (2*n-1) == 0:\n            break\n        # increment the polite number by 1\n        polite_num += 1\n    \n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    for i in range(1, n+1):\n        next_num = i + 1\n        if is_prime(next_num):\n            return next_num\n    return None\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number by iterating through all the prime numbers up to the square root of the given number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n\n    if n == 1:\n        return 1\n\n    primes = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return \"Invalid input\"\n\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i):\n            primes.append(i)\n            count += 1\n        i += 1\n\n    return primes[-1]\n\n\ndef is_prime(num):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    if n == 0:\n        return 0\n    \n    polite_num = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            polite_num += (i+n//i)\n            if n//i!= i:\n                polite_num += (n//i+1)\n\n    if polite_num == 0:\n        polite_num = 1\n        while polite_num <= n:\n            polite_num += 1\n\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_young(num):\n        return num % 2 == 0\n\n    def is_mature(num):\n        return num % 2 == 1\n\n    def next_polite_number(n):\n        \"\"\"\n        Helper function to find the nth polite number.\n        \"\"\"\n        num = 1\n        while True:\n            if is_prime(num) and is_palindrome(num) and is_young(num) and is_mature(num):\n                num += 1\n            if num == n:\n                break\n            num += 1\n        return num\n\n    return next_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function returns the nth polite number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (3 * n + 1) // 2) + is_polite(n - 1) + is_polite(n - 2)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:j] for i in range(len(l1)) for j in range(i+1, len(l1)+1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l):\n    \"\"\"\n    Given a list `l`, return a list of all pairs of consecutive items in `l`.\n\n    >>> pair_wise([1, 2, 3, 4, 5])\n    [(1, 2), (2, 3), (3, 4), (4, 5)]\n    \"\"\"\n    return [(l[i], l[i+1]) for i in range(len(l)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs in the list that add up to the given sum.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes two parameters - a list of numbers (arr) and the sum (sum) for which we want to count the number of pairs.\n    The function returns the count of pairs whose sum is equal to the input sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input, li1 and li2, and returns a new list containing the elements that are present in li1 but not in li2.\n    \"\"\"\n    # Create an empty list to store the elements that are present in li1 but not in li2\n    diff_list = []\n    # Iterate through each element of li1\n    for i in li1:\n        # Check if the element exists in li2\n        if i not in li2:\n            # If the element is not in li2, append it to the diff_list\n            diff_list.append(i)\n    # Return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list which contains all the elements of li1 which are not present in li2.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference of the two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    # initialize an empty list to store the differences\n    diff_list = []\n\n    # loop through each element in the first list\n    for i in li1:\n        # check if the element is in the second list\n        if i in li2:\n            # if it is, skip it\n            pass\n        else:\n            # if it's not, add it to the diff_list\n            diff_list.append(i)\n\n    # return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_pow = 0\n    for i in range(n):\n        sum_of_pow += i*i*i*i\n    return sum_of_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    \n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_powers += i ** 4\n    \n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    This function calculates the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        fourth_power = i*i*i*i\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum\n\nprint(odd_num_sum(10)) # Output: 44"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if not stack:\n                return False\n            if exp[i] == ')' and stack[-1] == '(':\n                stack.pop()\n            elif exp[i] == ']' and stack[-1] == '[':\n                stack.pop()\n            elif exp[i] == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            if exp[j+1:i]!= '()':\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balanced = True\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                balanced = False\n                break\n            else:\n                stack.pop()\n\n    if not stack:\n        return balanced\n    else:\n        balanced = False\n        return balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n        elif char == '[' or char == '{' or char == '[':\n            stack.append(char)\n            if char == '[':\n                stack.append('[')\n            elif char == '{':\n                stack.append('{')\n            elif char == '(':\n                stack.append('(')\n    if len(stack) > 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Remove all the spaces and convert the expression to lower case\n    exp = exp.replace(\" \", \"\").lower()\n\n    # Create a deque to store the opening parentheses\n    open_parentheses = deque()\n\n    # Loop through each character in the expression\n    for char in exp:\n        # If the character is an opening parentheses, add it to the deque\n        if char in \"([{\":\n            open_parentheses.append(char)\n        # If the character is a closing parentheses, pop the last opening parentheses from the deque and continue to the next character\n        elif char in \")]}\":\n            if not open_parentheses:\n                return False\n            last_open = open_parentheses.pop()\n            if char == \"}\" and last_open == \"{\":\n                continue\n            elif char == \")\" and last_open == \"(\":\n                continue\n            else:\n                return False\n    # If all the opening parentheses have been popped, the expression is balanced\n    return not open_parentheses"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            left = stack.pop()\n            if left == -1:\n                stack.append(i)\n            else:\n                if exp[left+1:i]!= '(':\n                    return False\n\n    if len(stack)!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with length greater than K\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # Append the word to the result list\n            result.append(word)\n    # Join the result list into a string and return it\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes a string and an integer K as input and returns a new string with all the words with length K removed.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create an empty list to store the words that are not of length K\n    result = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If it's not, add it to the result list\n            result.append(word)\n            \n    # Join the words in the result list into a single string and return it\n    return''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # Split the string into words\n    result = [] # Initialize an empty list to store the words without length K\n    for word in words:\n        if len(word)!= K: # Check if the length of the word is not equal to K\n            result.append(word) # Add the word to the result list if it is not\n    return''.join(result) # Join the result list into a string and return it"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with k length\n    result = []\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Check if the length of the word is equal to K\n        if len(word) == K:\n            # Append the word to the result list\n            result.append(word)\n    \n    # Join the words in the result list back into a string\n    result_str =''.join(result)\n    \n    # Return the resulting string\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    \n    # initialize an empty list to store the filtered words\n    filtered_words = []\n    \n    # iterate over each word in the list\n    for word in words:\n        # if the length of the word is not equal to K, append it to the filtered list\n        if len(word)!= K:\n            filtered_words.append(word)\n    \n    # join the filtered words back into a string and return it\n    return \" \".join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return f'Occurance: {match.group(0)} at position {match.start()} in the string'\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(\"Substring found at position\", matches.index(match) + 1)\n            print(\"Substring:\", match)\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Compile the regular expression pattern\n    regex = re.compile(pattern)\n\n    # Find all occurrences of the pattern in the text\n    matches = regex.findall(text)\n\n    if not matches:\n        return None\n\n    # Iterate through all matches and return the first match with the highest occurrence count\n    max_occurrence = max(matches, key=lambda x: x[0])\n\n    return max_occurrence"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            # Print the match number and the substring\n            print(f\"Match {matchNum}: {match.group()}\")\n            # Find the position of the substring in the original text\n            substring_pos = text.find(match.group())\n            # Print the position of the substring in the original text\n            print(f\"Position of substring in original text: {substring_pos}\")\n    else:\n        print(\"No matches found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function takes two parameters: the text to search in and the pattern to search for.\n    It returns a tuple containing the number of occurrences and the position of the first occurrence of the pattern in the text.\n    If there is no match, it returns None.\n    \"\"\"\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any matches\n    if len(matches) == 0:\n        return None\n    \n    # Return the number of occurrences and the position of the first match\n    return (len(matches), matches[0].start())"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n\ntext = \"This is a test string. It contains multiple occurrences of the substring 'test' within it.\"\npattern = r\"test\"\nresult = occurance_substring(text, pattern)\nif result:\n    print(f\"The substring '{result[0]}' occurs at position {result[1]} and has length {result[2]}.\")\nelse:\n    print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    else:\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Match {matchNum}: {match.start()} - {match.end()} - {match.group()}\")\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            count += 1\n    if count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            if nums[i] % 2 == 1:\n                return False\n            else:\n                continue\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 1:\n            odd_count += 1\n    if odd_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 0:\n            print(f\"The {i}th index contains odd numbers.\")\n        else:\n            print(f\"The {i}th index does not contain odd numbers.\")\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    # loop through the list and check if the odd indices contain odd numbers\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            odd_count += 1\n            if odd_count > 2:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0: # Check whether the index is odd\n            if len(set(nums[i:])) % 2!= 0: # Check whether the odd numbers of the index are odd\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n    return odd_count == 0"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([num for num in nums[i::2] if num % 2 == 1])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    \n    # iterate over the list and increment the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # sum up all the elements with a frequency of 1 in the dictionary\n    non_repeated_sum = sum([num for num in freq if freq[num] == 1])\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set of non-repeated elements\n    unique_elems = set(arr)\n    # Initialize the sum to 0\n    sum_unique = 0\n    # Iterate over the unique elements and add their value to the sum\n    for elem in unique_elems:\n        sum_unique += elem\n    # Return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of non-repeated elements.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    # Loop through the unique elements and add them to the sum\n    for element in unique_elements:\n        non_repeated_sum += element\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements\n    unique_elements = set(arr)\n    # calculate the sum of unique elements\n    total_sum = sum(unique_elements)\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    # create a dictionary to store the elements and their counts\n    freq = {}\n\n    # iterate through the list and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # calculate the sum of the non-repeated elements\n    sum_non_repeated = 0\n    for num in arr:\n        if freq[num] == 1:\n            sum_non_repeated += num\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store the unique elements of the list\n    unique_elements = set(arr)\n\n    # initialize the sum variable to 0\n    sum_of_unique_elements = 0\n\n    # iterate over the unique elements of the list and add their values to the sum variable\n    for element in unique_elements:\n        sum_of_unique_elements += element\n\n    # return the sum of unique elements\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a set of non-repeated elements\n    non_repeated = set(arr)\n\n    # Calculate the sum of non-repeated elements\n    sum_of_non_repeated = sum(non_repeated)\n\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store the unique elements of the list\n    unique_elements = set(arr)\n\n    # convert the set to a list and sum it\n    sum_of_unique = sum(unique_elements)\n\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the counts of elements in the list\n    count_dict = {}\n\n    # Iterate over the elements of the list\n    for num in arr:\n        # If the element is not in the dictionary, add it with a count of 1\n        if num not in count_dict:\n            count_dict[num] = 1\n        # If the element is already in the dictionary, increment its count by 1\n        else:\n            count_dict[num] += 1\n\n    # Iterate over the elements of the dictionary to find the sum of non-repeated elements\n    total_sum = 0\n    for num in count_dict:\n        if count_dict[num] == 1:\n            total_sum += num\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # loop through the list and update the frequency dictionary\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n\n    # loop through the dictionary and calculate the sum of non-repeated elements\n    total = 0\n    for elem in freq:\n        if freq[elem] == 1:\n            total += elem\n\n    return total"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(sorted(list1))]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(lst):\n        if key:\n            result.append(list(group))\n        else:\n            for item in group:\n                result.append(item)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Split the list into groups of consecutive duplicates\n    groups = groupby(list1)\n\n    # Pack the consecutive duplicates into sublists\n    packed_groups = [(k, [v]) for k, v in groups]\n\n    return packed_groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst: list of elements\n\n    Returns:\n        A list of sublists, where each sublist contains consecutive duplicates of the original list elements.\n\n    \"\"\"\n\n    # Group the list elements by their corresponding index\n    grouped_list = groupby(enumerate(lst), lambda x: x[0] == x[1])\n\n    # Initialize a list to store sublists\n    sublists = []\n\n    # Iterate over the grouped list and add consecutive duplicates to sublists\n    for key, group in grouped_list:\n        if key:\n            sublists.append(list(group))\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_lst = groupby(lst)\n    sublists = []\n    for key, group in grouped_lst:\n        if len(list(group)) > 1:\n            sublists.append(list(group))\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list and packs consecutive duplicates of its elements into sublists.\n\n    Args:\n    lst (list): The list to be processed.\n\n    Returns:\n    list: A list containing the packed sublists.\n    '''\n\n    # Group the list based on consecutive duplicates\n    grouped = groupby(lst, lambda x: x)\n\n    # Create a list to store the packed sublists\n    packed = []\n\n    # Iterate over the grouped list\n    for item, group in grouped:\n        # Get the consecutive duplicates\n        consecutive_duplicates = list(group)\n\n        # If there are no consecutive duplicates, skip this group\n        if len(consecutive_duplicates) == 1:\n            continue\n\n        # Create a new sublist and add the consecutive duplicates to it\n        sublist = []\n        for dup in consecutive_duplicates:\n            sublist.extend(dup)\n        packed.append(sublist)\n\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list, return a list where adjacent duplicates are combined into sublists.\n\n    Example:\n    pack_consecutive_duplicates([1, 2, 2, 3, 3, 4])\n    # Output: [[1], [2, 2], [3, 3], [4]]\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Parameters:\n    lst (list): A list of elements.\n\n    Returns:\n    list: A list of sublists, where each sublist contains consecutive duplicates of the original list.\n    \"\"\"\n    # Group the list elements by their value\n    grouped_lst = groupby(lst)\n    # Use a list comprehension to pack consecutive duplicates into sublists\n    packed_lst = [list(g) for k, g in grouped_lst if len(list(g)) > 1]\n    return packed_lst"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for group in groupby(list1):\n        if not group[0]:\n            continue\n        if not any(group[0] == i for i in group[1]):\n            new_list.append(group[1])\n        elif any(group[0] == i for i in group[1]):\n            new_list.append(list(group))\n    return new_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    current_group = []\n    for item in list1:\n        if item in current_group:\n            current_group.append(item)\n        else:\n            if current_group:\n                result.append(list(current_group))\n            current_group = [item]\n    if current_group:\n        result.append(list(current_group))\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist_count[tuple(list1[i:j])] = sublist_count.get(tuple(list1[i:j]), 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    for sublist in list1:\n        if sublist not in unique_list:\n            unique_list[sublist] = 1\n        else:\n            unique_list[sublist] += 1\n    return unique_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the sublist counts\n    sublist_counts = {}\n    \n    # Iterate over each element of the list\n    for elem in list1:\n        # Convert the element to a tuple and check if it already exists in the dictionary\n        if tuple(elem) in sublist_counts:\n            # If it does, increment its count by 1\n            sublist_counts[tuple(elem)] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            sublist_counts[tuple(elem)] = 1\n    \n    # Return the dictionary with the sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    count_dict = {}\n    # iterate through the list\n    for i in list1:\n        # if the current element is a list, turn it into a tuple and add it to the dictionary\n        if type(i) == list:\n            # check if the tuple is already in the dictionary\n            if (tuple(i),) in count_dict:\n                # if the tuple is already in the dictionary, increment its count\n                count_dict[(tuple(i),)] += 1\n            else:\n                # if the tuple is not in the dictionary, add it and set its count to 1\n                count_dict[(tuple(i),)] = 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lst_dict = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in lst_dict:\n            lst_dict[sublist_tuple] += 1\n        else:\n            lst_dict[sublist_tuple] = 1\n    return lst_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    set1 = set(list1)\n    # Create a dictionary to store the count of each sublist\n    count_dict = {}\n    # Loop through the set to count the number of occurrences of each sublist\n    for sublist in set1:\n        # Check if the sublist is already in the dictionary\n        if sublist in count_dict:\n            # Increment the count of the sublist\n            count_dict[sublist] += 1\n        else:\n            # Add the sublist to the dictionary with a count of 1\n            count_dict[sublist] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def helper(combination, current_sum, test_list):\n        if current_sum == 0 and len(combination) == len(test_list):\n            print(combination)\n            return\n        for i in range(len(test_list)):\n            if i > 0 and test_list[i][0] == test_list[i-1][0]:\n                continue\n            if current_sum + test_list[i][1] <= 100:\n                helper(combination + [(test_list[i][0], test_list[i][1])], current_sum + test_list[i][1], test_list[:i] + test_list[i+1:])\n\n    helper([], 0, test_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def combination_sum(candidates, target):\n        \"\"\"\n        Return all combinations of candidates that add up to target.\n        \"\"\"\n        result = []\n        for combination in combinations(candidates, len(candidates)):\n            if sum(combination) == target:\n                result.append(combination)\n        return result\n    \n    def find_combinations_with_tuples(test_list):\n        \"\"\"\n        Find combinations of sums with tuples in the given tuple list.\n        \"\"\"\n        for tuple_list in test_list:\n            candidates = sorted(tuple_list)\n            for target in range(sum(candidates), target_sum-1, -1):\n                for combination in combination_sum(candidates, target):\n                    if combination in result_set:\n                        continue\n                    result_set.add(tuple(combination))\n        return result_set\n    \n    target_sum = sum(test_list)\n    result_set = set()\n    find_combinations_with_tuples(test_list)\n    return result_set"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Taking input from the user\n    n = int(input(\"Enter the length of the tuple list: \"))\n    sum_target = int(input(\"Enter the sum of combinations you want to find: \"))\n    \n    # creating a list of tuples to test\n    test_list = [tuple(map(int, input(\"Enter the tuple elements separated by space: \").split())) for i in range(n)]\n    \n    # finding all combinations of tuples with the given sum_target\n    combinations_with_sum = set(combinations(test_list, r) for r in range(1, len(test_list)+1) if sum(combination) == sum_target)\n    print(\"Combinations of tuples with the given sum_target:\")\n    for combination in combinations_with_sum:\n        print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n\n    # Sort the tuple list in ascending order\n    test_list.sort()\n\n    # Function to find the sum of a tuple\n    def tuple_sum(t):\n        return sum(t)\n\n    # Find the unique combinations of tuples with the given sum\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the two tuples\n            sum_t = tuple_sum(test_list[i]) + tuple_sum(test_list[j])\n\n            # If the sum is equal to the target sum, print the two tuples\n            if sum_t == target_sum:\n                print(test_list[i], test_list[j])\n\n    # If the target sum is not found, return an empty list\n    return []"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum(test_list)\n    result = []\n    for i in range(1, total_sum + 1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == total_sum:\n                result.append(tuple(combo))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    sum_tuples = set() # create an empty set to store the sum tuples\n    for tup in test_list: # iterate over the given tuple list\n        if sum(tup) in sum_tuples: # check if the sum of the tuple is already present in the set\n            sum_tuples.remove(sum(tup)) # remove the existing tuple from the set\n        else:\n            sum_tuples.add(tup) # add the tuple to the set\n    \n    for tup in sum_tuples: # iterate over the set of sum tuples\n        for comb in combinations(tup, len(tup)): # generate all possible combinations of length len(tup)\n            if sum(comb) == sum(tup): # check if the sum of the combination is equal to the sum of the tuple\n                print(comb) # print the combination if it is the only combination with the same sum as the tuple"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    def find_combinations_helper(lst, target, current_sum, current_combination):\n        \"\"\"\n        Helper function to find the combinations of sums with tuples in the given tuple list.\n        \"\"\"\n        if target == 0:\n            result.append(current_combination)\n            return\n        if current_sum > target:\n            return\n        for i in range(len(lst)):\n            current_combination.append(lst[i])\n            find_combinations_helper(lst[i+1:], target - lst[i], current_sum + lst[i], current_combination)\n            current_combination.pop()\n\n    result = []\n    for i in range(1, len(test_list)):\n        for j in combinations(test_list, i):\n            find_combinations_helper(j, target=sum(j), current_sum=0, current_combination=[])\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            yield tuple(sorted([test_list[i][0]+test_list[j][0], test_list[i][1]+test_list[j][1]]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def tuple_sum(t):\n        return sum(t)\n\n    def is_subset(a, b):\n        return all(x in b for x in a)\n\n    def find_combinations_helper(tuples, target, comb, index):\n        if index == len(tuples):\n            return comb\n        for i in range(index, len(tuples)):\n            if is_subset(tuples[i], target):\n                comb.append(tuples[i])\n                find_combinations_helper(tuples, target, comb, i+1)\n                comb.pop()\n\n    def find_combinations_helper_helper(tuples, target, comb, index, temp_sum):\n        if index == len(tuples):\n            if temp_sum == target:\n                comb.append(temp_sum)\n            return comb\n        for i in range(index, len(tuples)):\n            if is_subset(tuples[i], target):\n                temp_sum += tuples[i]\n                comb = find_combinations_helper_helper(tuples, target, comb, i+1, temp_sum)\n                temp_sum -= tuples[i]\n        return comb\n\n    tuples = test_list\n    target = tuple_sum(tuples[0])\n    comb = []\n    find_combinations_helper_helper(tuples, target, comb, 0, 0)\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Create a list of tuples with the sums of each tuple in the test_list\n    combined_tuples = [(tuple(combination), tuple(set(combination) - set(test_list))) for combination in combinations(test_list, len(test_list))]\n\n    # Filter out the combinations with duplicate sums\n    unique_tuples = [tup for tup in combined_tuples if tup not in combined_tuples[:i]]\n\n    # Return the unique combinations\n    return unique_tuples"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        count = 1\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                count += 1\n                if n // i!= i:\n                    count += 1\n        return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Checks whether the count of divisors is even or odd.\n    \"\"\"\n    divisors = [i for i in range(2, int(math.sqrt(n))+1) if n % i == 0]\n    even_divisors = [d for d in divisors if d % 2 == 0]\n    odd_divisors = [d for d in divisors if d % 2!= 0]\n    count = len(even_divisors)\n    if count % 2 == 0:\n        return \"The count of even divisors is even.\"\n    else:\n        return \"The count of odd divisors is even.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns a boolean value indicating whether the count of divisors is even or odd.\n    If the count of divisors is even, it returns True. Otherwise, it returns False.\n    '''\n\n    # check if the number is even\n    if n % 2 == 0:\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n        return count % 2 == 0\n\n    # number is odd, check if the count of divisors is even\n    else:\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n        return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number n. \n    The function returns True if the count of divisors is even and False otherwise.\n    '''\n    \n    def sieve(limit):\n        primes = [True] * (limit + 1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(limit**0.5) + 1):\n            if primes[i]:\n                for j in range(i*i, limit + 1, i):\n                    primes[j] = False\n        return primes\n    \n    def count_primes(n):\n        primes = sieve(int(math.sqrt(n)))\n        count = 0\n        for i in range(2, n+1):\n            if primes[i]:\n                count += 1\n                if count > n // 2:\n                    break\n        return count\n    \n    def even_divisors_count(n):\n        divisors = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                if i == n // i:\n                    divisors.append(i)\n                else:\n                    divisors.append(i)\n                    divisors.append(n // i)\n        return sum(divisors)\n    \n    def is_even(n):\n        return count_divisors(n) % 2 == 0\n    \n    if is_even(n):\n        return True\n    else:\n        divisors = even_divisors_count(n)\n        if divisors % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the sum of the divisors of n\n    sum_of_divisors = sum([i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0])\n    # Calculate the count of divisors\n    count_of_divisors = sum_of_divisors + 1\n    # Check whether the count of divisors is even or not\n    if count_of_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    count = 0\n\n    # Loop through the numbers from 1 to n-1 and check if each number is a divisor of n\n    for i in range(1, n+1): \n        if n % i == 0: \n            count += 1\n\n    # Check if the count of divisors is even or odd\n    if count % 2 == 0: \n        print(\"The count of divisors of\", n, \"is even.\")\n    else: \n        print(\"The count of divisors of\", n, \"is odd.\")\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        if n % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n/i:\n                divisors.append(n/i)\n    if len(divisors) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def get_divisors(n):\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    divisors = get_divisors(n)\n    count = len(divisors)\n    even = True\n    \n    for divisor in divisors:\n        if n % divisor!= 0:\n            even = False\n    \n    if count % 2 == 0 and even:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i!= n//i:\n                divisors.append(i)\n                divisors.append(n//i)\n    if len(divisors) == 0:\n        divisors.append(n)\n    return len(divisors) % 2 == 0\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    # Initialize sum and length of subarray\n    sum = 0\n    length = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current length is odd\n        if length % 2 == 1:\n            # If the length is odd, add the current element to the sum\n            sum += arr[i]\n\n        # Move the length pointer ahead\n        length += 1\n\n    # Return the sum of all odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (j-i) % 2 == 1: # check if odd length subarray\n                sub_arr = arr[i:j+1] # extract subarray\n                total_sum += sum(sub_arr) # calculate sum of subarray\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 % 2 == 1:\n                sum += sum_subarray(arr, i, j)\n    return sum\n\ndef sum_subarray(arr, start, end):\n    return sum(arr[start:end+1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2!= 0:\n                temp_sum = sum(arr[i:j+1])\n                total_sum += temp_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            total_sum += arr[j-1] - arr[i] + arr[j-2] + arr[i-1] - arr[j-2]\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            if sum(sub_arr) % 2 == 1:\n                sum_odd_length += sum(sub_arr)\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Initialize the count of subarrays to zero\n    count = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current index is odd and the count is even, then add the current element to the sum\n        if i % 2 == 1 and count % 2 == 0:\n            sum += arr[i]\n        # If the current index is odd and the count is odd, then increment the count\n        elif i % 2 == 1 and count % 2 == 1:\n            count += 1\n        # If the current index is even and the count is odd, then decrement the count\n        elif i % 2 == 0 and count % 2 == 1:\n            count -= 1\n    # Return the sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n\n    # Loop through each element of the array\n    for i in range(n):\n        # Check if the element is odd\n        if i % 2!= 0:\n            # Initialize a variable to store the sum of the current odd subarray\n            current_sum = 0\n            # Loop through each element of the odd subarray\n            for j in range(i, n):\n                current_sum += arr[j]\n                # Add the current odd subarray sum to the total sum\n                total_sum += current_sum\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_subarrays = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if len(arr[i:j]) % 2 == 1:\n                sum_odd_subarrays += sum(arr[i:j])\n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = 0\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    result = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if j - i + 1 % 2!= 0:\n                result += prefix_sum[j] - prefix_sum[i - 1]\n    return result"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert R, G and B to fractions of 1\n    r_frac = r / 255.0\n    g_frac = g / 255.0\n    b_frac = b / 255.0\n    \n    # Calculate the min and max values of each color channel\n    min_val = min(r_frac, g_frac, b_frac)\n    max_val = max(r_frac, g_frac, b_frac)\n    \n    # Calculate the difference between the max and min values\n    delta = max_val - min_val\n    \n    # Calculate the hue\n    if max_val == r_frac:\n        hue = (g_frac - b_frac) / delta\n    elif max_val == g_frac:\n        hue = 2.0 + (b_frac - r_frac) / delta\n    else:\n        hue = 4.0 + (r_frac - g_frac) / delta\n    \n    hue = hue / 6.0\n    \n    # Calculate the saturation\n    if delta == 0.0:\n        saturation = 0.0\n    else:\n        saturation = delta / max_val\n    \n    # Calculate the value\n    value = max_val\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color.\n    '''\n\n    r, g, b = r / 255, g / 255, b / 255 # Convert 0-255 to 0-1\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if cmax == cmin:\n        h = 0\n    elif delta == 0:\n        h = 0\n    else:\n        if r == cmax:\n            h = 60 * ((g - b) / delta)\n        elif g == cmax:\n            h = 60 * (2 + (b - r) / delta)\n        else:\n            h = 60 * (4 + (r - g) / delta)\n\n        if h < 0:\n            h += 360\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / cmax\n\n    v = cmax\n\n    return round(h * 360), round(s * 100), round(v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0.0\n    s = 0.0\n    v = cmax\n    if delta > 0.0:\n        s = delta / (1.0 - abs(2.0*cmax - 1.0))\n    if delta > 0.0:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2.0 + (b - r) / delta\n        else:\n            h = 4.0 + (r - g) / delta\n        h = h / 6.0\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color\n\n    Parameters:\n    -----------\n    r (int): Red value of the color\n    g (int): Green value of the color\n    b (int): Blue value of the color\n\n    Returns:\n    --------\n    h (float): Hue value of the color\n    s (float): Saturation value of the color\n    v (float): Value of the color\n\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0.0\n        s = 0.0\n    else:\n        s = delta / cmax\n        if cmax == r:\n            h = 60.0 * (((g - b) / delta) % 6)\n        elif cmax == g:\n            h = 60.0 * (((b - r) / delta) + 2)\n        else:\n            h = 60.0 * (((r - g) / delta) + 4)\n        if h < 0.0:\n            h += 360.0\n    if cmax == 0:\n        v = 0.0\n    else:\n        v = cmax\n    h = round(h, 2)\n    s = round(s, 2)\n    v = round(v, 2)\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == 0:\n        h = 0\n        s = 0\n    elif max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h / 6\n\n    if max_value == min_value:\n        s = 0\n    else:\n        s = delta / max_value\n\n    return h, s, max_value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / delta)\n    elif max_value == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n\n    if h < 0:\n        h += 360\n\n    v = max_value\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    return int(h), int(s * 100), int(v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    r = r/255\n    g = g/255\n    b = b/255\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n\n    if h < 0:\n        h += 360\n\n    v = cmax\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    h = 0\n    s = 0\n    v = 0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if cmax == cmin:\n        h = 0\n    else:\n        if r == cmax:\n            h = (g - b) / delta\n        elif g == cmax:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        h = h / 6\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n\n    v = cmax\n\n    return (int(h * 255), int(s * 255), int(v * 255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts an RGB color value to HSV color value. \n    Hue is the angle of the color circle from red to the color represented by the Hue value.\n    Saturation and Value are the proportions of color in the Hue circle.\n    '''\n\n    # Get the minimum and maximum RGB values\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the hue value\n    if delta == 0:\n        hue = 0\n    else:\n        if r == max_value:\n            hue = (g - b) / delta\n        elif g == max_value:\n            hue = 2 + (b - r) / delta\n        else:\n            hue = 4 + (r - g) / delta\n\n        hue = hue / 6\n\n    # Calculate the saturation value\n    if delta == 0:\n        saturation = 0\n    else:\n        if max_value == 0:\n            saturation = 0\n        else:\n            saturation = delta / max_value\n\n    # Calculate the value value\n    value = max_value\n\n    # Return the HSV values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \n    This function takes in three parameters r, g, and b, which represent the red, green, and blue values of an RGB color respectively.\n    It returns a tuple containing the hue, saturation, and value of the converted color.\n    \n    '''\n\n    # Convert the RGB color to the HSV color model\n    h = None\n    s = None\n    v = None\n    if r == g == b:\n        h = 0\n        s = 0\n        v = r\n    else:\n        min_val = min(r, g, b)\n        max_val = max(r, g, b)\n        delta = max_val - min_val\n        s = delta / max_val\n\n        if max_val == r:\n            h = 60 * (((g - b) / delta) % 6)\n        elif max_val == g:\n            h = 60 * ((b - r) / delta + 2)\n        else:\n            h = 60 * ((r - g) / delta + 4)\n\n        h = h if 0 <= h < 360 else h % 360\n\n        v = max_val\n\n    # Return the HSV color\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n        if even_count > 0 and odd_count > 0:\n            return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n            \n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_sum = odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= (even_count + odd_count)\n        \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count!= 0 and odd_count!= 0:\n            product *= num\n            break\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    product = even_num * odd_num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= list1[0]\n\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of tuples\n    tuples = list(map(tuple, test_str.split(',')))\n    # convert each tuple to an integer and return the result\n    return tuple(int(x) for x in tuples)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Parameters:\n    test_str (str): Tuple string in the format 'a,b,c'.\n\n    Returns:\n    int_tuple (tuple): Integer tuple from the tuple string.\n    \"\"\"\n    # Split the string by comma and use list comprehension to convert each element to integer\n    int_tuple = tuple([int(i) for i in test_str.split(\",\")])\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by whitespace and convert each element to integer\n    test_int_tuple = tuple(int(x) for x in test_str.split())\n    return test_int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = tuple()\n    str_list = test_str.split()\n    for item in str_list:\n        if item.isdigit():\n            new_tuple += (int(item),)\n        else:\n            new_tuple += (item,)\n    return new_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of strings\n    list_str = test_str.split(',')\n\n    # convert each string in the list to an integer\n    list_int = []\n    for string in list_str:\n        try:\n            list_int.append(int(string))\n        except ValueError:\n            list_int.append(None)\n\n    # create the integer tuple from the list of integers\n    return tuple(list_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings using a comma as the delimiter\n    list_str = test_str.split(',')\n    # Convert each string to an integer using the int() function\n    list_int = [int(x) for x in list_str]\n    # Convert the list of integers into a tuple using the tuple() function\n    result_tuple = tuple(list_int)\n    return result_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize a list to store the integers\n    int_list = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is an integer\n        try:\n            int_list.append(int(char))\n        except ValueError:\n            pass\n\n    # return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        new_tuple = tuple(int(i) for i in test_str)\n        return new_tuple\n    except ValueError:\n        return \"Invalid input\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Split the string by comma and space\n    string_list = test_str.split(\", \")\n\n    # Create an empty integer list\n    int_list = []\n\n    # Loop through the string list\n    for item in string_list:\n\n        # If the item is an integer, add it to the integer list\n        if item.isdigit():\n            int_list.append(int(item))\n\n    # Convert the integer list to a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas to get the tuple elements\n    tuple_elements = test_str.split(',')\n    \n    # Convert each element to an integer and add it to a new tuple\n    int_tuple = tuple(int(x) for x in tuple_elements)\n    \n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the index of the element to be inserted\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        # if the element is already in the sorted list, return the index\n        return index\n    if a[index] == x:\n        # if the element is already in the correct position, return the index\n        return index\n    # if the element is not in the correct position, return the index immediately after it\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the index of the first element greater than or equal to x\n    i = bisect.bisect_right(a, x)\n    \n    # if the value x is already present in the list, return the index of the first occurrence\n    if a[i-1] == x:\n        return i-1\n    \n    # if the value x is not present in the list, return the index of the insertion point\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_right(a, x-1)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect to find the insertion point for x in a\n    pos = bisect.bisect_right(a, x)\n    # If x is already in a, return its index\n    if pos < len(a) and a[pos] == x:\n        return pos\n    # Otherwise, return the insertion point\n    return pos"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    return idx if idx < len(a) and a[idx] == x else idx - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Using the bisect module to find the insertion point\n    idx = bisect.bisect_right(a, x)\n    # Return the insertion point if x is present in the list, else return the index of x in the list\n    if idx == len(a) or a[idx]!= x:\n        return idx\n    else:\n        return idx + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index if index < len(a) and a[index] == x else -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\s*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    result = pattern.search(text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=b{3})b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    return pattern.search(text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    \n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.+b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the string to a list\n    test_list_str = list(test_str)\n    # loop through the list and append each character to the tuple\n    new_tuple = tuple()\n    for char in test_list_str:\n        new_tuple += (char,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the given string to a list of characters\n    char_list = list(test_str)\n    \n    # Reverse the list\n    reversed_list = char_list[::-1]\n    \n    # Convert the reversed list to a tuple\n    new_tuple = tuple(reversed_list)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split()) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # join the given list and string into a single string\n    combined_str = test_list[0] + test_str + test_list[1]\n    \n    # convert the combined string into a list of characters\n    char_list = list(combined_str)\n    \n    # convert the list of characters into a tuple\n    new_tuple = tuple(char_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists and string using the + operator\n    combined = test_list + test_str\n    # Convert the combined string to a tuple using the tuple() function\n    new_tuple = tuple(combined)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tup = (test_str, *test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(str(i) for i in test_list + [test_str])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): The list to be converted to a tuple.\n        test_str (str): The string to be concatenated with the list elements.\n\n    Returns:\n        A new tuple containing the elements of the input list and string.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple += (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list\n    test_list = list(test_str)\n    # Combine the two lists and convert it back to a tuple\n    new_tuple = tuple(test_list + test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for j in range(i, len(nums)):\n            if nums[j] % 2 == 0:\n                even_count += 1\n        if even_count!= 0 and even_count!= i:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    \n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            \n    if even_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize a boolean variable to True\n    is_even = True\n\n    # Loop through the list and check if every even index contains even numbers\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            # If the number at the even index is odd, set the boolean variable to False and break the loop\n            is_even = False\n            break\n\n    # Return the boolean value\n    return is_even"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        else:\n            even_count = 0\n        if even_count == 2:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(x for x in nums[i:]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            result.append(elem)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if type(test_tup) == tuple:\n        return remove_nested(tuple(elem for elem in test_tup if type(elem)!= tuple))\n    elif type(test_tup) == list:\n        return [elem for elem in test_tup if type(elem)!= list]\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for tup in test_tup for item in tup if isinstance(item, (int, float, str))))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem) == tuple:\n            new_tup.extend(remove_nested(elem))\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_list.extend(item)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for subitem in item:\n                new_list.append(subitem)\n        else:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) == tuple:\n            result += remove_nested(i)\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    This function takes a list as input and counts the number of lists present in the list.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # binary search to find last position of x in arr\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[0] == x:\n        return 0\n    elif arr[len(arr)-1] == x:\n        return len(arr) - 1\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] < x <= arr[i+1]:\n                return i+1\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments: the sorted array and the element to be searched for.\n    It then loops through the array and returns the last index of the element it finds.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and a target element x and returns the last index of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            # If the mid element is equal to x, then we can move the right pointer to the left of mid and check if x is present in the left subarray\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not found in the array, we return -1\n    return -1 if left > right else left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): a sorted array of integers\n    x (int): the element to find the last position of\n\n    Returns:\n    int: the last position of x in arr\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if arr[left] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    This function takes in an array and an element x and returns the last index of the element in the array.\n    '''\n    # Initialize the last index to -1\n    last_index = -1\n\n    # Loop through the array to find the last element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n\n    # Return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments, an array and an element x, and returns the index of the last occurrence of x in the array.\n    If x is not present in the array, it returns -1.\n    \"\"\"\n    # Initialize the last index to -1\n    last_index = -1\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the element is equal to x, update the last index\n        if arr[i] == x:\n            last_index = i\n    # Return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr)-1\n    while left<=right:\n        mid = left+(right-left)//2\n        if arr[mid]==x:\n            left=mid\n        elif arr[mid]<x:\n            left=mid+1\n        else:\n            right=mid-1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)(.*?)(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    return pattern.search(text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a[^b]+b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_value = 0\n    for value in dict.values():\n        sum_value += value\n    return sum_value"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_odd = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    \n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(2, n+1, 2):\n        s += i\n    return s\n\nn = int(input(\"Enter the value of n: \"))\nl = int(input(\"Enter the lower limit: \"))\nr = int(input(\"Enter the upper limit: \"))\nresult = sum_odd(r) - sum_odd(l-1)\nprint(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is\", result)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_of_odds = 0\n\n    while l <= r:\n        if l % 2!= 0:\n            sum_of_odds += l\n        l += 1\n\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if l % 2 == 0:\n        raise ValueError(\"l must be an odd number\")\n    if r % 2 == 0:\n        raise ValueError(\"r must be an odd number\")\n    if l > r:\n        raise ValueError(\"l must be less than or equal to r\")\n\n    return sum([i for i in range(l, r+1) if i % 2 == 1])"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(1, n+1, 2): \n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through the range of odd natural numbers\n    for i in range(l, r+1, 2):\n        # add each odd number to the sum\n        sum += i\n\n    # return the sum of odd natural numbers within the given range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize a variable to store the sum\n    total = 0\n    # loop through the range of natural numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the number to the total\n            total += i\n    # return the total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initializing sum variable to 0\n    sum = 0\n\n    # Iterating over each element of the array\n    for num in arr:\n        # Adding the current element to the sum\n        sum += num\n\n    # Returning the final sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    if not arr:\n        return 0  # empty array\n    \n    # recursive implementation\n    return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    This function takes in an array of numbers as input and returns the sum of all the numbers in the array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    n = (n << d) & mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary\n    binary_num = format(n, '032b')\n    # Convert the dth bit to a 1 and 0\n    dth_bit = binary_num[d]\n    # Convert the remaining bits to 0\n    remaining_bits = binary_num[:d]\n    # Convert the remaining bits to a number\n    remaining_num = int(remaining_bits, 2)\n    # Rotate the remaining bits by d bits and add the dth bit to the end\n    rotated_num = (remaining_num << d) | (n & ((1 << d) - 1))\n    # Convert the rotated number to binary and convert it to an integer\n    rotated_binary = format(rotated_num, '032b')\n    # Convert the rotated binary number to an integer\n    rotated_num = int(rotated_binary, 2)\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Split the 32-bit number into 2 halves\n    a = n & 0xFFFFFFFF  # Extract the most significant 32 bits\n    b = n >> 32          # Extract the least significant 32 bits\n\n    # Rotate the least significant 32 bits to the left by d bits\n    b = (b << d) | (a >> (32 - d))\n\n    # Rotate the most significant 32 bits to the right by d bits\n    a = (a << d) | (b >> (32 - d))\n\n    # Combine the rotated halves to form the result\n    return (a << 32) | b"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to a binary string\n    n_binary = bin(n)[2:]\n    # Append zeros to make the binary string of d length\n    d_binary = \"0\" * d\n    # Convert the d binary string to an integer\n    d_int = int(d_binary, 2)\n    # Initialize the result\n    result = 0\n    # Loop through the bits of n and append them to the result in the right order\n    for i in range(d):\n        result = result << 1\n        if n_binary[i] == \"1\":\n            result = result | 1\n    # Return the result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert d to binary string\n    d_binary = bin(d)[2:]\n    # pad with leading zeros if necessary\n    if len(d_binary) < 8:\n        d_binary = '0'*(8-len(d_binary)) + d_binary\n    # calculate the mask to apply to the number\n    mask = (1<<32) - 1\n    # apply the mask to the number\n    n_rotated = (n & mask) << int(d_binary)\n    # return the rotated number\n    return n_rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert d to binary\n    binary_d = bin(d)[2:].zfill(32)\n    # calculate number of bits to rotate\n    num_bits_to_rotate = len(binary_d)\n    # perform left rotate\n    rotated_n = (n << num_bits_to_rotate) | (n >> (32 - num_bits_to_rotate))\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Pad the binary string with zeros if needed to make the length d\n    if len(binary_str) < d:\n        binary_str = '0'*(d-len(binary_str)) + binary_str\n        \n    # Calculate the rotation amount\n    rotation_amount = d\n    \n    # Reverse the first rotation_amount bits\n    reversed_binary_str = binary_str[-rotation_amount:] + binary_str[:-rotation_amount]\n    \n    # Convert the reversed binary string back to decimal\n    rotated_number = int(reversed_binary_str, 2)\n    \n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    else:\n        d = d % 32\n        mask = ((1 << d) - 1) << (32 - d)\n        return (n & mask) | (n >> d)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to be rotated\n    bit_rotations = d % 32\n    \n    # If the number of bits to be rotated is 0, return the original number\n    if bit_rotations == 0:\n        return n\n    \n    # Calculate the number of bits to shift the bits to the right\n    shift_bits = 32 - bit_rotations\n    \n    # Calculate the mask to apply to the bits to rotate them\n    mask = ((1 << bit_rotations) - 1) << shift_bits\n    \n    # Extract the rotated bits from the original number\n    rotated_bits = (n & mask) >> shift_bits\n    \n    # Insert the rotated bits back into the original number\n    result = (n & ~(mask)) | rotated_bits\n    \n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Shift the bits to the right by d positions\n    n = n >> d\n    # Shift the bits to the left by 32 - d positions\n    n = n << (32 - d)\n    # Return the rotated number\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove all whitespaces using string slicing\n    text = ''.join(text.split())\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespace characters from the string\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # Use regular expressions to remove all spaces\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    # Create a dictionary to store the frequency of numbers\n    freq = {}\n    \n    # Loop through each number and increment its frequency in the dictionary\n    for num in [x, y, z]:\n        freq[num] = freq.get(num, 0) + 1\n        \n    # Count the number of equal numbers\n    count = sum([1 for num in freq.values() if num == 1])\n    \n    # Return the count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    if y == z and z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(min(x, y), max(x, y)+1):\n        for j in range(min(x, z), max(x, z)+1):\n            for k in range(min(y, z), max(y, z)+1):\n                if i == x and j == y and k == z:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal_count = 0\n    if x == y and y == z:\n        equal_count += 1\n    if x == y and y == z:\n        equal_count += 1\n    if x == y and y == z:\n        equal_count += 1\n    return equal_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the unsorted part of the array\n    arr.sort()\n    # Initialize two arrays\n    sorted_arr = [0] * n\n    unsorted_arr = [0] * n\n    # Copy the sorted part of the array to the sorted_arr array\n    for i in range(n):\n        sorted_arr[i] = arr[i]\n    # Copy the unsorted part of the array to the unsorted_arr array\n    for i in range(n):\n        unsorted_arr[i] = arr[i]\n    # Initialize the count variable\n    count = 0\n    # Iterate over the sorted part of the array\n    for i in range(n):\n        # Find the first element that is greater than the current element\n        j = i + 1\n        while j < n and sorted_arr[j] <= sorted_arr[i]:\n            j += 1\n        # If the first element that is greater than the current element is at the beginning of the unsorted part of the array, then there is no rotation required.\n        if j < n and unsorted_arr[j] == unsorted_arr[i]:\n            continue\n        # Count the number of rotations required to generate a sorted array\n        k = j - 1\n        while k >= 0 and unsorted_arr[k] <= unsorted_arr[j]:\n            k -= 1\n        count += j - k\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sort(arr, start):\n    # Base case: array with only one element\n    if len(arr) <= 1:\n        return 0\n    \n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left_arr = arr[start:start+mid]\n    right_arr = arr[start+mid:]\n    \n    # Count the number of rotations required for each half\n    left_rotations = merge_sort(left_arr, start)\n    right_rotations = merge_sort(right_arr, start+mid)\n    \n    # Merge the sorted halves and count the number of rotations required for the entire array\n    i = 0\n    j = 0\n    k = start\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] < right_arr[j]:\n            arr[k] = left_arr[i]\n            i += 1\n        else:\n            arr[k] = right_arr[j]\n            j += 1\n        k += 1\n    while i < len(left_arr):\n        arr[k] = left_arr[i]\n        i += 1\n        k += 1\n    while j < len(right_arr):\n        arr[k] = right_arr[j]\n        j += 1\n        k += 1\n    \n    return max(left_rotations, right_rotations) + 1\n\ndef count_rotation(arr):\n    # Sort the array in ascending order\n    merge_sort(arr, 0)\n    \n    # Initialize the count of rotations\n    rotations = 0\n    \n    # Find the starting point of the sorted array\n    for i in range(len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            break\n    else:\n        # The array is already sorted\n        return 0\n    \n    # Find the starting index of the sorted subarray\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i]!= arr[i-1]:\n            break\n    else:\n        # The array is already sorted\n        return 0\n    \n    # Count the number of rotations required to generate the sorted subarray\n    for i in range(start, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            rotations += 1\n    \n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    left = 0\n    right = n - 1\n\n    while left < right:\n        pivot = (left + right) // 2\n        if arr[left] > arr[pivot]:\n            right = pivot\n        else:\n            left = pivot + 1\n\n    return left"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    if sorted(arr) == arr:\n        return 0\n\n    arr = sorted(arr)\n    i = 0\n    while i < len(arr) - 1 and arr[i] == arr[i+1]:\n        i += 1\n    if i == len(arr) - 1:\n        return 0\n\n    j = 0\n    while j < len(arr) - 1 and arr[j] == arr[j+1]:\n        j += 1\n    if j == len(arr) - 1:\n        return 0\n\n    count = 0\n    while i < len(arr) and j < len(arr):\n        if arr[i]!= arr[j]:\n            count += 1\n        i += 1\n        j += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Create a new array that contains the elements of arr in reverse order.\n    rev_arr = arr[::-1]\n    # Initialize two variables to keep track of the start and end indices of the\n    # sorted array.\n    start = 0\n    end = n-1\n    # Initialize a variable to store the count of rotations required.\n    count = 0\n    # Loop through the array of size n-1 to find the number of rotations required.\n    for i in range(n-1):\n        # If the element at the current index is smaller than the element at\n        # the end index, increment the count of rotations and shift the start\n        # and end indices of the sorted array to the right.\n        if arr[i] < rev_arr[end]:\n            count += 1\n            start = i+1\n            end = n-1\n    # Return the count of rotations required.\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Traverse the array twice, checking for a decreasing subsequence\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i+1\n    # If the array is already sorted, return 0\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Find the maximum and minimum values in the array\n    max_val = arr[0]\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n    # Calculate the number of rotations required\n    rotations = 0\n    while max_val > min_val:\n        rotations += 1\n        max_val = max_val - min_val\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left, right = 0, n-1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[left] < arr[mid]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the given array\n    arr.sort()\n    # count the number of rotations required to generate a sorted array\n    count = 0\n    # Traverse through the array and find the number of inversions\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += n - i - 1\n        # If the number of inversions is greater than 1, then the array is not sorted and hence we need to sort it\n        elif arr[i] < arr[i + 1]:\n            return -1\n    # If the number of inversions is less than or equal to 1, then the array is already sorted\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # Find the maximum element in the array\n    max_val = max(arr)\n\n    # Initialize the count variable\n    count = 0\n\n    # Traverse the array from left to right\n    for i in range(len(arr)):\n\n        # If the element at the current index is greater than the maximum element, then the array is already sorted\n        if arr[i] > max_val:\n            return count\n\n        # Find the index of the maximum element in the remaining part of the array\n        j = i\n        while j < len(arr) and arr[j] <= max_val:\n            j += 1\n\n        # If the element at the current index is not greater than the maximum element and the index of the maximum element is greater than i, then the array needs to be rotated\n        if j > i:\n            count += j - i - 1\n            arr[i:j] = arr[j:i] + arr[i:j]\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1:\n        return True\n    i = 2\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Find the square root of n using the math module\n    sqrt_n = math.sqrt(n)\n    # Check if the square root is an integer\n    if sqrt_n % 1 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    # base case\n    if n < 0:\n        return False\n\n    # check if the number is a square root of 4\n    if n == int(4 ** 0.5):\n        return True\n\n    # check if the number is a square root of 6\n    elif n == int(6 ** 0.5):\n        return True\n\n    # check if the number is a square root of 8\n    elif n == int(8 ** 0.5):\n        return True\n\n    # if the number is not a square root of 4, 6, or 8, it must be a perfect square\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n\n    # Check if the number is a perfect square\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Find the square root of n\n    sqrt_n = int(n**0.5)\n    # Check if sqrt_n^2 is equal to n\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the number is less than 0\n    if n < 0:\n        return False\n    # Check if the number is already a square\n    if n == int(n**0.5)**2:\n        return True\n    # Check if the number is less than a perfect square\n    i = 1\n    while i <= int(n**0.5) + 1:\n        if i*i == n:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    root = n ** 0.5\n    return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    # check if n is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # check if n is a perfect square\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the given number is less than 2\n    if n < 2:\n        return False\n    \n    # check if the given number is a perfect square by iterating from 2 to n/2\n    for i in range(2, int(n/2)+1):\n        # calculate the square of i\n        square = i*i\n        # if the square is equal to the given number, return True\n        if square == n:\n            return True\n    \n    # if the given number is not a perfect square, return False\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Check if the list is empty\n    if not arr: \n        return True\n    \n    # Initialize variables to keep track of the product and its sign\n    product = 1\n    even_product = 1\n    \n    # Iterate through the list and multiply each element by the product\n    for num in arr:\n        product *= num\n        \n        # If the sign of the product is negative, the product is odd and the function returns False\n        if product < 0:\n            return False\n        \n        # If the product is even, update the even_product variable\n        if product % 2 == 0:\n            even_product *= product\n    \n    # If the even_product is positive, the product of the even numbers in the list is even, otherwise it's odd\n    return even_product > 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        product = arr[0]\n        for i in range(1, len(arr)):\n            product = product * arr[i]\n            if product % 2!= 0:\n                return False\n        return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    product = 1\n    \n    # iterate through the list of numbers\n    for num in arr:\n        product *= num\n    \n    # check whether the product is even or not\n    if product % 2 == 0:\n        print(\"Product is even.\")\n    else:\n        print(\"Product is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # If the list is empty or has only one number, return True\n    if len(arr) <= 1:\n        return True\n    # If the list has multiple numbers, calculate the product\n    product = 1\n    for num in arr:\n        product *= num\n    # Check if the product is even\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            curr_sum = sum(lists[i]) + sum(lists[j])\n            \n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                max_list = [lists[i], lists[j]]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_lists = []\n    for sublist in lists:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n            max_lists = [sublist]\n        elif sum_sublist == max_sum:\n            max_lists.append(sublist)\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            elif lists[i][j] == max_sum:\n                max_list.append(lists[i][j])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = None\n    for l in lists:\n        current_sum = sum(l)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = l\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the variables to store the maximum sum and the list with the maximum sum\n    max_sum = float('-inf')\n    max_list = []\n\n    # Loop through each list in the input list\n    for lst in lists:\n        # Initialize a variable to store the sum of the elements in the list\n        sum_lst = 0\n\n        # Loop through each element in the list and add it to the sum_lst\n        for num in lst:\n            sum_lst += num\n\n        # Check if the sum_lst is greater than the current maximum sum\n        if sum_lst > max_sum:\n            # Update the maximum sum and the list with the maximum sum\n            max_sum = sum_lst\n            max_list = lst\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                current_sum = lists[i][j][k]\n                for l in range(i, len(lists)):\n                    if current_sum + lists[l][j][k] > current_sum:\n                        current_sum += lists[l][j][k]\n                for m in range(j, len(lists[i])):\n                    if current_sum + lists[i][m][k] > current_sum:\n                        current_sum += lists[i][m][k]\n                for n in range(k, len(lists[i][j])):\n                    if current_sum + lists[i][j][n] > current_sum:\n                        current_sum += lists[i][j][n]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_list = [[lists[i][j][k]]]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables for current run length and start index of the run\n    current_run = 0\n    start_index = 0\n    \n    # Loop through the string and update the current run length and start index if an uppercase letter is found\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > start_index:\n                start_index = current_run\n        else:\n            current_run = 0\n    \n    # Return the maximum run length found\n    return max(current_run, start_index)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start_index = 0\n    current_run = 0\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        if current_run > max_run:\n            max_run = current_run\n            start_index = i - max_run + 1\n    return test_str[start_index:start_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of run of uppercase characters and the current run\n    current_run = 0\n    max_run = 0\n    \n    # Iterate through the string and count the run of uppercase characters\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            # If the current run is greater than the maximum run, update max_run\n            if current_run > max_run:\n                max_run = current_run\n            # Reset current run to 0\n            current_run = 0\n    \n    # If the current run is greater than the maximum run, update max_run\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == start:\n                start += 1\n            else:\n                max_run = max(max_run, i-start+1)\n                start = i+1\n    if start < len(test_str):\n        max_run = max(max_run, len(test_str)-start+1)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    upper = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            upper += 1\n        else:\n            count += 1\n            if upper > count:\n                count = upper\n                upper = 1\n    return count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables to keep track of the start and end of the maximum run\n    max_start = 0\n    max_end = 0\n    \n    # Iterate through the string and count the number of uppercase characters in each run\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str)-1:\n                # Last character in the run, update the maximum run if necessary\n                if i > max_end:\n                    max_start = i\n                    max_end = i\n            else:\n                # Not the last character in the run, check if the next character is uppercase\n                if test_str[i+1].isupper():\n                    # Next character is uppercase, increase the run length and move to the next index\n                    max_end = i\n                else:\n                    # Next character is not uppercase, increase the start index and reset the run length\n                    max_start = i\n                    max_end = i\n                    \n    # Return the maximum run of uppercase characters\n    return test_str[max_start:max_end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize max_run and start_index\n    max_run = 1\n    start_index = 0\n    \n    # Loop through the string and check if the character is uppercase\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            # If the character is uppercase, check if it's part of a longer run\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                max_run += 1\n                if max_run > max_run:\n                    start_index = i\n                    \n    # Return the maximum run and its start index\n    return max_run, start_index"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_run = 0\n    max_run_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_run:\n                max_run = count\n                max_run_start = start\n            if i == len(test_str) - 1:\n                if count > max_run:\n                    max_run = count\n                    max_run_start = start\n        else:\n            count = 0\n            start = i + 1\n    return test_str[max_run_start:max_run_start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    prev_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if prev_char and not prev_char.isupper():\n                max_run = max(max_run, current_run)\n                current_run = 1\n        else:\n            current_run = 0\n        \n        prev_char = char\n        \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    prev_char = None\n    for char in test_str:\n        if char.isupper():\n            if prev_char is None or prev_char.islower():\n                current_run += 1\n            else:\n                max_run = max(max_run, current_run)\n                current_run = 1\n        else:\n            current_run = 0\n        prev_char = char\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # loop through the list of numbers\n    for num in nums:\n        # check if the number is odd\n        if num % 2!= 0:\n            # return the first odd number found\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a list of numbers.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Check if the given tuples contain the k or not.\n    \n    Parameters:\n    - test_tup: a tuple of integers\n    - K: an integer\n    \n    Returns:\n    - True if the given tuple contains the k, False otherwise.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Loop through the tuple and check if it contains the K value\n    for tup in test_tup:\n        if K in tup:\n            return True\n    \n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if K == test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_found = False\n    for num in test_tup:\n        if num == K:\n            k_found = True\n            break\n    return k_found"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element at position {} in the first tuple is greater than the element at position {} in the second tuple.\".format(i, i))\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through each element in the second tuple\n    for i in range(len(test_tup2)):\n        # If the element in the second tuple is greater than the corresponding element in the first tuple, return False\n        if test_tup2[i] > test_tup1[i]:\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same number of elements')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"False\")\n            return\n        elif test_tup1[i] < test_tup2[i]:\n            print(\"True\")\n            return\n    print(\"True\")\n    return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # loop through the second tuple\n    for i in range(len(test_tup2)):\n        # if the element in the second tuple is not smaller than the corresponding element in the first tuple, return False\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        else:\n            return True"
    }
]